
UserCode.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000000  08000000  08000000  00020000  2**0
                  CONTENTS
  1 .flashtext    00000000  08000000  08000000  00020000  2**0
                  CONTENTS
  2 .text         00000648  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .data         00000000  20000000  08000648  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  4 .bss          00000008  20000000  08000648  00020000  2**0
                  ALLOC
  5 ._usrstack    00001000  20000008  08000650  00020000  2**0
                  ALLOC
  6 .debug_info   000016f4  00000000  00000000  00020000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  7 .debug_abbrev 00000435  00000000  00000000  000216f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  8 .debug_loc    0000007c  00000000  00000000  00021b29  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
  9 .debug_aranges 00000040  00000000  00000000  00021ba5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 10 .debug_line   0000046d  00000000  00000000  00021be5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 11 .debug_str    000005f9  00000000  00000000  00022052  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 12 .comment      0000004c  00000000  00000000  0002264b  2**0
                  CONTENTS, READONLY
 13 .ARM.attributes 00000034  00000000  00000000  00022697  2**0
                  CONTENTS, READONLY
 14 .debug_frame  00000060  00000000  00000000  000226cc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000000 <main>:

#include "projectdefs.h"


int main (void)
{
 8000000:	b480      	push	{r7}
 8000002:	af00      	add	r7, sp, #0
  while (1)
  {
    //--- Waste a little time so this does not run too fast
    SET_PB01;
 8000004:	4b6e      	ldr	r3, [pc, #440]	; (80001c0 <main+0x1c0>)
 8000006:	2202      	movs	r2, #2
 8000008:	601a      	str	r2, [r3, #0]
    SET_PA01;
 800000a:	4b6e      	ldr	r3, [pc, #440]	; (80001c4 <main+0x1c4>)
 800000c:	2202      	movs	r2, #2
 800000e:	601a      	str	r2, [r3, #0]
    nop48;
 8000010:	bf00      	nop
 8000012:	bf00      	nop
 8000014:	bf00      	nop
 8000016:	bf00      	nop
 8000018:	bf00      	nop
 800001a:	bf00      	nop
 800001c:	bf00      	nop
 800001e:	bf00      	nop
 8000020:	bf00      	nop
 8000022:	bf00      	nop
 8000024:	bf00      	nop
 8000026:	bf00      	nop
 8000028:	bf00      	nop
 800002a:	bf00      	nop
 800002c:	bf00      	nop
 800002e:	bf00      	nop
 8000030:	bf00      	nop
 8000032:	bf00      	nop
 8000034:	bf00      	nop
 8000036:	bf00      	nop
 8000038:	bf00      	nop
 800003a:	bf00      	nop
 800003c:	bf00      	nop
 800003e:	bf00      	nop
 8000040:	bf00      	nop
 8000042:	bf00      	nop
 8000044:	bf00      	nop
 8000046:	bf00      	nop
 8000048:	bf00      	nop
 800004a:	bf00      	nop
 800004c:	bf00      	nop
 800004e:	bf00      	nop
 8000050:	bf00      	nop
 8000052:	bf00      	nop
 8000054:	bf00      	nop
 8000056:	bf00      	nop
 8000058:	bf00      	nop
 800005a:	bf00      	nop
 800005c:	bf00      	nop
 800005e:	bf00      	nop
 8000060:	bf00      	nop
 8000062:	bf00      	nop
 8000064:	bf00      	nop
 8000066:	bf00      	nop
 8000068:	bf00      	nop
 800006a:	bf00      	nop
 800006c:	bf00      	nop
 800006e:	bf00      	nop
    nop48;
 8000070:	bf00      	nop
 8000072:	bf00      	nop
 8000074:	bf00      	nop
 8000076:	bf00      	nop
 8000078:	bf00      	nop
 800007a:	bf00      	nop
 800007c:	bf00      	nop
 800007e:	bf00      	nop
 8000080:	bf00      	nop
 8000082:	bf00      	nop
 8000084:	bf00      	nop
 8000086:	bf00      	nop
 8000088:	bf00      	nop
 800008a:	bf00      	nop
 800008c:	bf00      	nop
 800008e:	bf00      	nop
 8000090:	bf00      	nop
 8000092:	bf00      	nop
 8000094:	bf00      	nop
 8000096:	bf00      	nop
 8000098:	bf00      	nop
 800009a:	bf00      	nop
 800009c:	bf00      	nop
 800009e:	bf00      	nop
 80000a0:	bf00      	nop
 80000a2:	bf00      	nop
 80000a4:	bf00      	nop
 80000a6:	bf00      	nop
 80000a8:	bf00      	nop
 80000aa:	bf00      	nop
 80000ac:	bf00      	nop
 80000ae:	bf00      	nop
 80000b0:	bf00      	nop
 80000b2:	bf00      	nop
 80000b4:	bf00      	nop
 80000b6:	bf00      	nop
 80000b8:	bf00      	nop
 80000ba:	bf00      	nop
 80000bc:	bf00      	nop
 80000be:	bf00      	nop
 80000c0:	bf00      	nop
 80000c2:	bf00      	nop
 80000c4:	bf00      	nop
 80000c6:	bf00      	nop
 80000c8:	bf00      	nop
 80000ca:	bf00      	nop
 80000cc:	bf00      	nop
 80000ce:	bf00      	nop

    //--- If (GPIOA_00 < 1) then turn on the LED
    //    GPIOA_00 Grounded = Turn On LED
    if ((GPIOA_IDR & 0x1000) > 0)
 80000d0:	4b3d      	ldr	r3, [pc, #244]	; (80001c8 <main+0x1c8>)
 80000d2:	681b      	ldr	r3, [r3, #0]
 80000d4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80000d8:	2b00      	cmp	r3, #0
 80000da:	d004      	beq.n	80000e6 <main+0xe6>
    {
      //--- Turn LED On! by Bringing GPIOB_00 to ground
      CLR_PB00;
 80000dc:	4b38      	ldr	r3, [pc, #224]	; (80001c0 <main+0x1c0>)
 80000de:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80000e2:	601a      	str	r2, [r3, #0]
 80000e4:	e002      	b.n	80000ec <main+0xec>
    }
    else
    {
      //--- Turn LED Off! by Bringing GPIOB_00 to a Hi
      SET_PB00;
 80000e6:	4b36      	ldr	r3, [pc, #216]	; (80001c0 <main+0x1c0>)
 80000e8:	2201      	movs	r2, #1
 80000ea:	601a      	str	r2, [r3, #0]
    }

    CLR_PA01;
 80000ec:	4b35      	ldr	r3, [pc, #212]	; (80001c4 <main+0x1c4>)
 80000ee:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80000f2:	601a      	str	r2, [r3, #0]
    CLR_PB01;
 80000f4:	4b32      	ldr	r3, [pc, #200]	; (80001c0 <main+0x1c0>)
 80000f6:	f44f 3200 	mov.w	r2, #131072	; 0x20000
 80000fa:	601a      	str	r2, [r3, #0]
    //--- Waste a little time so this does not run too fast
    nop48;
 80000fc:	bf00      	nop
 80000fe:	bf00      	nop
 8000100:	bf00      	nop
 8000102:	bf00      	nop
 8000104:	bf00      	nop
 8000106:	bf00      	nop
 8000108:	bf00      	nop
 800010a:	bf00      	nop
 800010c:	bf00      	nop
 800010e:	bf00      	nop
 8000110:	bf00      	nop
 8000112:	bf00      	nop
 8000114:	bf00      	nop
 8000116:	bf00      	nop
 8000118:	bf00      	nop
 800011a:	bf00      	nop
 800011c:	bf00      	nop
 800011e:	bf00      	nop
 8000120:	bf00      	nop
 8000122:	bf00      	nop
 8000124:	bf00      	nop
 8000126:	bf00      	nop
 8000128:	bf00      	nop
 800012a:	bf00      	nop
 800012c:	bf00      	nop
 800012e:	bf00      	nop
 8000130:	bf00      	nop
 8000132:	bf00      	nop
 8000134:	bf00      	nop
 8000136:	bf00      	nop
 8000138:	bf00      	nop
 800013a:	bf00      	nop
 800013c:	bf00      	nop
 800013e:	bf00      	nop
 8000140:	bf00      	nop
 8000142:	bf00      	nop
 8000144:	bf00      	nop
 8000146:	bf00      	nop
 8000148:	bf00      	nop
 800014a:	bf00      	nop
 800014c:	bf00      	nop
 800014e:	bf00      	nop
 8000150:	bf00      	nop
 8000152:	bf00      	nop
 8000154:	bf00      	nop
 8000156:	bf00      	nop
 8000158:	bf00      	nop
 800015a:	bf00      	nop
    nop48;
 800015c:	bf00      	nop
 800015e:	bf00      	nop
 8000160:	bf00      	nop
 8000162:	bf00      	nop
 8000164:	bf00      	nop
 8000166:	bf00      	nop
 8000168:	bf00      	nop
 800016a:	bf00      	nop
 800016c:	bf00      	nop
 800016e:	bf00      	nop
 8000170:	bf00      	nop
 8000172:	bf00      	nop
 8000174:	bf00      	nop
 8000176:	bf00      	nop
 8000178:	bf00      	nop
 800017a:	bf00      	nop
 800017c:	bf00      	nop
 800017e:	bf00      	nop
 8000180:	bf00      	nop
 8000182:	bf00      	nop
 8000184:	bf00      	nop
 8000186:	bf00      	nop
 8000188:	bf00      	nop
 800018a:	bf00      	nop
 800018c:	bf00      	nop
 800018e:	bf00      	nop
 8000190:	bf00      	nop
 8000192:	bf00      	nop
 8000194:	bf00      	nop
 8000196:	bf00      	nop
 8000198:	bf00      	nop
 800019a:	bf00      	nop
 800019c:	bf00      	nop
 800019e:	bf00      	nop
 80001a0:	bf00      	nop
 80001a2:	bf00      	nop
 80001a4:	bf00      	nop
 80001a6:	bf00      	nop
 80001a8:	bf00      	nop
 80001aa:	bf00      	nop
 80001ac:	bf00      	nop
 80001ae:	bf00      	nop
 80001b0:	bf00      	nop
 80001b2:	bf00      	nop
 80001b4:	bf00      	nop
 80001b6:	bf00      	nop
 80001b8:	bf00      	nop
 80001ba:	bf00      	nop
    SET_PB01;
 80001bc:	e722      	b.n	8000004 <main+0x4>
 80001be:	bf00      	nop
 80001c0:	48000418 	.word	0x48000418
 80001c4:	48000018 	.word	0x48000018
 80001c8:	48000010 	.word	0x48000010

080001cc <fnReset_IRQ>:

//---------------------------------------------------------------------------------------------
//      This is the Reset Code Entry Point from the RESET Pin
//---------------------------------------------------------------------------------------------


void  fnReset_IRQ (void)                          //--- Reset Handler               0x00000004
{
 80001cc:	b580      	push	{r7, lr}
 80001ce:	b084      	sub	sp, #16
 80001d0:	af00      	add	r7, sp, #0
  u32 *pulSrc;                                    //--- Src & Dst Pointers
  u32 *pulDest;
  u16 uwT = 0;
 80001d2:	2300      	movs	r3, #0
 80001d4:	80fb      	strh	r3, [r7, #6]

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  //--- Zero fill the .bss segment
  for(pulDest = &_sbss; pulDest < &_ebss; )
 80001d6:	4b7e      	ldr	r3, [pc, #504]	; (80003d0 <fnReset_IRQ+0x204>)
 80001d8:	60bb      	str	r3, [r7, #8]
 80001da:	e004      	b.n	80001e6 <fnReset_IRQ+0x1a>
  {
    *(pulDest++) = 0x00000000;
 80001dc:	68bb      	ldr	r3, [r7, #8]
 80001de:	1d1a      	adds	r2, r3, #4
 80001e0:	60ba      	str	r2, [r7, #8]
 80001e2:	2200      	movs	r2, #0
 80001e4:	601a      	str	r2, [r3, #0]
  for(pulDest = &_sbss; pulDest < &_ebss; )
 80001e6:	68bb      	ldr	r3, [r7, #8]
 80001e8:	4a7a      	ldr	r2, [pc, #488]	; (80003d4 <fnReset_IRQ+0x208>)
 80001ea:	4293      	cmp	r3, r2
 80001ec:	d3f6      	bcc.n	80001dc <fnReset_IRQ+0x10>
  }

  //--- Copy the data segment initializers from flash to SRAM
  pulSrc = &_sidata;
 80001ee:	4b7a      	ldr	r3, [pc, #488]	; (80003d8 <fnReset_IRQ+0x20c>)
 80001f0:	60fb      	str	r3, [r7, #12]

  for(pulDest = &_sdata; pulDest < &_edata; )
 80001f2:	4b7a      	ldr	r3, [pc, #488]	; (80003dc <fnReset_IRQ+0x210>)
 80001f4:	60bb      	str	r3, [r7, #8]
 80001f6:	e007      	b.n	8000208 <fnReset_IRQ+0x3c>
  {
    *(pulDest++) = *(pulSrc++);
 80001f8:	68fa      	ldr	r2, [r7, #12]
 80001fa:	1d13      	adds	r3, r2, #4
 80001fc:	60fb      	str	r3, [r7, #12]
 80001fe:	68bb      	ldr	r3, [r7, #8]
 8000200:	1d19      	adds	r1, r3, #4
 8000202:	60b9      	str	r1, [r7, #8]
 8000204:	6812      	ldr	r2, [r2, #0]
 8000206:	601a      	str	r2, [r3, #0]
  for(pulDest = &_sdata; pulDest < &_edata; )
 8000208:	68bb      	ldr	r3, [r7, #8]
 800020a:	4a75      	ldr	r2, [pc, #468]	; (80003e0 <fnReset_IRQ+0x214>)
 800020c:	4293      	cmp	r3, r2
 800020e:	d3f3      	bcc.n	80001f8 <fnReset_IRQ+0x2c>

  //-------------------------------------------------------------------------------------------
  //    Configure Clocks & RCC Registers
  //-------------------------------------------------------------------------------------------
  //--- No Clock Interrupts for now
  RCC_CIER = 0x00000000;                          //--- No Clock Interrupts
 8000210:	4b74      	ldr	r3, [pc, #464]	; (80003e4 <fnReset_IRQ+0x218>)
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
  RCC_CICR = 0x0000077F;                          //--- Clear Clock Interrupts
 8000216:	4b74      	ldr	r3, [pc, #464]	; (80003e8 <fnReset_IRQ+0x21c>)
 8000218:	f240 727f 	movw	r2, #1919	; 0x77f
 800021c:	601a      	str	r2, [r3, #0]

  //--- AP & AH Peripherial Resets
  RCC_APB1RSTR1 = 0xFFFFFFFF;                     //--- Reset All Peripherials
 800021e:	4b73      	ldr	r3, [pc, #460]	; (80003ec <fnReset_IRQ+0x220>)
 8000220:	f04f 32ff 	mov.w	r2, #4294967295
 8000224:	601a      	str	r2, [r3, #0]
  RCC_APB1RSTR1 = 0x00000000;                     //--- Clear All Peripherial Resets
 8000226:	4b71      	ldr	r3, [pc, #452]	; (80003ec <fnReset_IRQ+0x220>)
 8000228:	2200      	movs	r2, #0
 800022a:	601a      	str	r2, [r3, #0]

  RCC_APB1RSTR2 = 0xFFFFFFFF;                     //--- Reset All Peripherials
 800022c:	4b70      	ldr	r3, [pc, #448]	; (80003f0 <fnReset_IRQ+0x224>)
 800022e:	f04f 32ff 	mov.w	r2, #4294967295
 8000232:	601a      	str	r2, [r3, #0]
  RCC_APB1RSTR2 = 0x00000000;                     //--- Clear All Peripherial Resets
 8000234:	4b6e      	ldr	r3, [pc, #440]	; (80003f0 <fnReset_IRQ+0x224>)
 8000236:	2200      	movs	r2, #0
 8000238:	601a      	str	r2, [r3, #0]

  RCC_APB2RSTR = 0xFFFFFFFF;                      //--- Reset All Peripherials
 800023a:	4b6e      	ldr	r3, [pc, #440]	; (80003f4 <fnReset_IRQ+0x228>)
 800023c:	f04f 32ff 	mov.w	r2, #4294967295
 8000240:	601a      	str	r2, [r3, #0]
  RCC_APB2RSTR = 0x00000000;                      //--- Clear All Peripherial Resets
 8000242:	4b6c      	ldr	r3, [pc, #432]	; (80003f4 <fnReset_IRQ+0x228>)
 8000244:	2200      	movs	r2, #0
 8000246:	601a      	str	r2, [r3, #0]

  RCC_AHB1RSTR = 0xFFFFFFFF;                      //--- Reset All Peripherials
 8000248:	4b6b      	ldr	r3, [pc, #428]	; (80003f8 <fnReset_IRQ+0x22c>)
 800024a:	f04f 32ff 	mov.w	r2, #4294967295
 800024e:	601a      	str	r2, [r3, #0]
  RCC_AHB1RSTR = 0x00000000;                      //--- Clear All Peripherial Resets
 8000250:	4b69      	ldr	r3, [pc, #420]	; (80003f8 <fnReset_IRQ+0x22c>)
 8000252:	2200      	movs	r2, #0
 8000254:	601a      	str	r2, [r3, #0]

  RCC_AHB2RSTR = 0xFFFFFFFF;                      //--- Reset All Peripherials
 8000256:	4b69      	ldr	r3, [pc, #420]	; (80003fc <fnReset_IRQ+0x230>)
 8000258:	f04f 32ff 	mov.w	r2, #4294967295
 800025c:	601a      	str	r2, [r3, #0]
  RCC_AHB2RSTR = 0x00000000;                      //--- Clear All Peripherial Resets
 800025e:	4b67      	ldr	r3, [pc, #412]	; (80003fc <fnReset_IRQ+0x230>)
 8000260:	2200      	movs	r2, #0
 8000262:	601a      	str	r2, [r3, #0]

  RCC_AHB3RSTR = 0xFFFFFFFF;                      //--- Reset All Peripherials
 8000264:	4b66      	ldr	r3, [pc, #408]	; (8000400 <fnReset_IRQ+0x234>)
 8000266:	f04f 32ff 	mov.w	r2, #4294967295
 800026a:	601a      	str	r2, [r3, #0]
  RCC_AHB3RSTR = 0x00000000;                      //--- Clear All Peripherial Resets
 800026c:	4b64      	ldr	r3, [pc, #400]	; (8000400 <fnReset_IRQ+0x234>)
 800026e:	2200      	movs	r2, #0
 8000270:	601a      	str	r2, [r3, #0]

  nop48;                                          //--- Waste a little time
 8000272:	bf00      	nop
 8000274:	bf00      	nop
 8000276:	bf00      	nop
 8000278:	bf00      	nop
 800027a:	bf00      	nop
 800027c:	bf00      	nop
 800027e:	bf00      	nop
 8000280:	bf00      	nop
 8000282:	bf00      	nop
 8000284:	bf00      	nop
 8000286:	bf00      	nop
 8000288:	bf00      	nop
 800028a:	bf00      	nop
 800028c:	bf00      	nop
 800028e:	bf00      	nop
 8000290:	bf00      	nop
 8000292:	bf00      	nop
 8000294:	bf00      	nop
 8000296:	bf00      	nop
 8000298:	bf00      	nop
 800029a:	bf00      	nop
 800029c:	bf00      	nop
 800029e:	bf00      	nop
 80002a0:	bf00      	nop
 80002a2:	bf00      	nop
 80002a4:	bf00      	nop
 80002a6:	bf00      	nop
 80002a8:	bf00      	nop
 80002aa:	bf00      	nop
 80002ac:	bf00      	nop
 80002ae:	bf00      	nop
 80002b0:	bf00      	nop
 80002b2:	bf00      	nop
 80002b4:	bf00      	nop
 80002b6:	bf00      	nop
 80002b8:	bf00      	nop
 80002ba:	bf00      	nop
 80002bc:	bf00      	nop
 80002be:	bf00      	nop
 80002c0:	bf00      	nop
 80002c2:	bf00      	nop
 80002c4:	bf00      	nop
 80002c6:	bf00      	nop
 80002c8:	bf00      	nop
 80002ca:	bf00      	nop
 80002cc:	bf00      	nop
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0001 0000 0000
  //      FLASH MEMORY ON
  RCC_AHB1ENR = 0x00000100;
 80002d2:	4b4c      	ldr	r3, [pc, #304]	; (8000404 <fnReset_IRQ+0x238>)
 80002d4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80002d8:	601a      	str	r2, [r3, #0]
  RCC_AHB1SMENR = 0x00000300;
 80002da:	4b4b      	ldr	r3, [pc, #300]	; (8000408 <fnReset_IRQ+0x23c>)
 80002dc:	f44f 7240 	mov.w	r2, #768	; 0x300
 80002e0:	601a      	str	r2, [r3, #0]
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0101 0010 0000 0000 0111
  //      AESEN Accelerator ON
  //      GPIO A,B,C Ports On
  RCC_AHB2ENR = 0x00000007;
 80002e2:	4b4a      	ldr	r3, [pc, #296]	; (800040c <fnReset_IRQ+0x240>)
 80002e4:	2207      	movs	r2, #7
 80002e6:	601a      	str	r2, [r3, #0]
  RCC_AHB2SMENR = 0x00000207;
 80002e8:	4b49      	ldr	r3, [pc, #292]	; (8000410 <fnReset_IRQ+0x244>)
 80002ea:	f240 2207 	movw	r2, #519	; 0x207
 80002ee:	601a      	str	r2, [r3, #0]
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  //
  RCC_AHB3ENR = 0x00000000;
 80002f0:	4b48      	ldr	r3, [pc, #288]	; (8000414 <fnReset_IRQ+0x248>)
 80002f2:	2200      	movs	r2, #0
 80002f4:	601a      	str	r2, [r3, #0]
  RCC_AHB3SMENR = 0x00000000;
 80002f6:	4b48      	ldr	r3, [pc, #288]	; (8000418 <fnReset_IRQ+0x24c>)
 80002f8:	2200      	movs	r2, #0
 80002fa:	601a      	str	r2, [r3, #0]
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  //
  RCC_APB1ENR1 = 0x00000000;
 80002fc:	4b47      	ldr	r3, [pc, #284]	; (800041c <fnReset_IRQ+0x250>)
 80002fe:	2200      	movs	r2, #0
 8000300:	601a      	str	r2, [r3, #0]
  RCC_APB1SMENR1 = 0x00000000;
 8000302:	4b47      	ldr	r3, [pc, #284]	; (8000420 <fnReset_IRQ+0x254>)
 8000304:	2200      	movs	r2, #0
 8000306:	601a      	str	r2, [r3, #0]
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  //
  RCC_APB1ENR2 = 0x00000000;
 8000308:	4b46      	ldr	r3, [pc, #280]	; (8000424 <fnReset_IRQ+0x258>)
 800030a:	2200      	movs	r2, #0
 800030c:	601a      	str	r2, [r3, #0]
  RCC_APB1SMENR2 = 0x00000000;
 800030e:	4b46      	ldr	r3, [pc, #280]	; (8000428 <fnReset_IRQ+0x25c>)
 8000310:	2200      	movs	r2, #0
 8000312:	601a      	str	r2, [r3, #0]
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  //
  RCC_APB2ENR = 0x00000001;
 8000314:	4b45      	ldr	r3, [pc, #276]	; (800042c <fnReset_IRQ+0x260>)
 8000316:	2201      	movs	r2, #1
 8000318:	601a      	str	r2, [r3, #0]
  RCC_APB2SMENR = 0x00000001;
 800031a:	4b45      	ldr	r3, [pc, #276]	; (8000430 <fnReset_IRQ+0x264>)
 800031c:	2201      	movs	r2, #1
 800031e:	601a      	str	r2, [r3, #0]
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  //
  RCC_CCIPR = 0x00000000;
 8000320:	4b44      	ldr	r3, [pc, #272]	; (8000434 <fnReset_IRQ+0x268>)
 8000322:	2200      	movs	r2, #0
 8000324:	601a      	str	r2, [r3, #0]
  //      GPIO AFRH
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0110 0000 0000
  FLASH_ACR = 0x00000604;                         //--- 4 Wait States for Flash (Clk @ 80Mhz)
 8000326:	4b44      	ldr	r3, [pc, #272]	; (8000438 <fnReset_IRQ+0x26c>)
 8000328:	f240 6204 	movw	r2, #1540	; 0x604
 800032c:	601a      	str	r2, [r3, #0]
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  //
  RCC_CSR = 0x0C000600;
 800032e:	4b43      	ldr	r3, [pc, #268]	; (800043c <fnReset_IRQ+0x270>)
 8000330:	4a43      	ldr	r2, [pc, #268]	; (8000440 <fnReset_IRQ+0x274>)
 8000332:	601a      	str	r2, [r3, #0]
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 1011 0110 1001
  //
  RCC_CR = 0x00000B69;                            //--- Enable MSI & HSI Oscillators
 8000334:	4b43      	ldr	r3, [pc, #268]	; (8000444 <fnReset_IRQ+0x278>)
 8000336:	f640 3269 	movw	r2, #2921	; 0xb69
 800033a:	601a      	str	r2, [r3, #0]

  //--- Delay a little time for HSI16 to get settled 16000 counts
  uwT = 0x4000;
 800033c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000340:	80fb      	strh	r3, [r7, #6]

  while (!(RCC_CR & 0x00000400) && uwT)           //--- Wait for HSI16 ready
 8000342:	e002      	b.n	800034a <fnReset_IRQ+0x17e>
  {
    uwT--;
 8000344:	88fb      	ldrh	r3, [r7, #6]
 8000346:	3b01      	subs	r3, #1
 8000348:	80fb      	strh	r3, [r7, #6]
  while (!(RCC_CR & 0x00000400) && uwT)           //--- Wait for HSI16 ready
 800034a:	4b3e      	ldr	r3, [pc, #248]	; (8000444 <fnReset_IRQ+0x278>)
 800034c:	681b      	ldr	r3, [r3, #0]
 800034e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000352:	2b00      	cmp	r3, #0
 8000354:	d102      	bne.n	800035c <fnReset_IRQ+0x190>
 8000356:	88fb      	ldrh	r3, [r7, #6]
 8000358:	2b00      	cmp	r3, #0
 800035a:	d1f3      	bne.n	8000344 <fnReset_IRQ+0x178>
  //                        Bit 15 = 0
  //      PLLN  = /40       Bit 08-14 = 0101000
  //      PLLM  = /4        Bit 04-07 = 0011
  //                        Bit 02-03 = 00
  //      PLLSRC = HSI16    Bit 00-01 = 10
  RCC_PLLCFGR = 0x01002832;                       //--- Set Bits
 800035c:	4b3a      	ldr	r3, [pc, #232]	; (8000448 <fnReset_IRQ+0x27c>)
 800035e:	4a3b      	ldr	r2, [pc, #236]	; (800044c <fnReset_IRQ+0x280>)
 8000360:	601a      	str	r2, [r3, #0]
  nop48;                                          //--- Waste a little time
 8000362:	bf00      	nop
 8000364:	bf00      	nop
 8000366:	bf00      	nop
 8000368:	bf00      	nop
 800036a:	bf00      	nop
 800036c:	bf00      	nop
 800036e:	bf00      	nop
 8000370:	bf00      	nop
 8000372:	bf00      	nop
 8000374:	bf00      	nop
 8000376:	bf00      	nop
 8000378:	bf00      	nop
 800037a:	bf00      	nop
 800037c:	bf00      	nop
 800037e:	bf00      	nop
 8000380:	bf00      	nop
 8000382:	bf00      	nop
 8000384:	bf00      	nop
 8000386:	bf00      	nop
 8000388:	bf00      	nop
 800038a:	bf00      	nop
 800038c:	bf00      	nop
 800038e:	bf00      	nop
 8000390:	bf00      	nop
 8000392:	bf00      	nop
 8000394:	bf00      	nop
 8000396:	bf00      	nop
 8000398:	bf00      	nop
 800039a:	bf00      	nop
 800039c:	bf00      	nop
 800039e:	bf00      	nop
 80003a0:	bf00      	nop
 80003a2:	bf00      	nop
 80003a4:	bf00      	nop
 80003a6:	bf00      	nop
 80003a8:	bf00      	nop
 80003aa:	bf00      	nop
 80003ac:	bf00      	nop
 80003ae:	bf00      	nop
 80003b0:	bf00      	nop
 80003b2:	bf00      	nop
 80003b4:	bf00      	nop
 80003b6:	bf00      	nop
 80003b8:	bf00      	nop
 80003ba:	bf00      	nop
 80003bc:	bf00      	nop
 80003be:	bf00      	nop
 80003c0:	bf00      	nop
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0001 0000 0000 0000 0001 0110 1001
  //
  //      PLLON, HSI16 ON, MSION, MSI 4MHz,
  RCC_CR = 0x01000B69;
 80003c2:	4b20      	ldr	r3, [pc, #128]	; (8000444 <fnReset_IRQ+0x278>)
 80003c4:	4a22      	ldr	r2, [pc, #136]	; (8000450 <fnReset_IRQ+0x284>)
 80003c6:	601a      	str	r2, [r3, #0]

  //--- Delay a little time for everything to get settled and the PLL to come alive
  uwT = 0x4000;
 80003c8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80003cc:	80fb      	strh	r3, [r7, #6]
  while (((RCC_CR & 0x02000000) != 0x02000000) && (uwT > 0))  //--- Wait for PLL Ready or timeout
 80003ce:	e074      	b.n	80004ba <fnReset_IRQ+0x2ee>
 80003d0:	20000000 	.word	0x20000000
 80003d4:	20000008 	.word	0x20000008
 80003d8:	08000648 	.word	0x08000648
 80003dc:	20000000 	.word	0x20000000
 80003e0:	20000000 	.word	0x20000000
 80003e4:	40021018 	.word	0x40021018
 80003e8:	40021020 	.word	0x40021020
 80003ec:	40021038 	.word	0x40021038
 80003f0:	4002103c 	.word	0x4002103c
 80003f4:	40021040 	.word	0x40021040
 80003f8:	40021028 	.word	0x40021028
 80003fc:	4002102c 	.word	0x4002102c
 8000400:	40021030 	.word	0x40021030
 8000404:	40021048 	.word	0x40021048
 8000408:	40021068 	.word	0x40021068
 800040c:	4002104c 	.word	0x4002104c
 8000410:	4002106c 	.word	0x4002106c
 8000414:	40021050 	.word	0x40021050
 8000418:	40021070 	.word	0x40021070
 800041c:	40021058 	.word	0x40021058
 8000420:	40021078 	.word	0x40021078
 8000424:	4002105c 	.word	0x4002105c
 8000428:	4002107c 	.word	0x4002107c
 800042c:	40021060 	.word	0x40021060
 8000430:	40021080 	.word	0x40021080
 8000434:	40021088 	.word	0x40021088
 8000438:	40022000 	.word	0x40022000
 800043c:	40021094 	.word	0x40021094
 8000440:	0c000600 	.word	0x0c000600
 8000444:	40021000 	.word	0x40021000
 8000448:	4002100c 	.word	0x4002100c
 800044c:	01002832 	.word	0x01002832
 8000450:	01000b69 	.word	0x01000b69
  {
    uwT--;
 8000454:	88fb      	ldrh	r3, [r7, #6]
 8000456:	3b01      	subs	r3, #1
 8000458:	80fb      	strh	r3, [r7, #6]
    nop48;
 800045a:	bf00      	nop
 800045c:	bf00      	nop
 800045e:	bf00      	nop
 8000460:	bf00      	nop
 8000462:	bf00      	nop
 8000464:	bf00      	nop
 8000466:	bf00      	nop
 8000468:	bf00      	nop
 800046a:	bf00      	nop
 800046c:	bf00      	nop
 800046e:	bf00      	nop
 8000470:	bf00      	nop
 8000472:	bf00      	nop
 8000474:	bf00      	nop
 8000476:	bf00      	nop
 8000478:	bf00      	nop
 800047a:	bf00      	nop
 800047c:	bf00      	nop
 800047e:	bf00      	nop
 8000480:	bf00      	nop
 8000482:	bf00      	nop
 8000484:	bf00      	nop
 8000486:	bf00      	nop
 8000488:	bf00      	nop
 800048a:	bf00      	nop
 800048c:	bf00      	nop
 800048e:	bf00      	nop
 8000490:	bf00      	nop
 8000492:	bf00      	nop
 8000494:	bf00      	nop
 8000496:	bf00      	nop
 8000498:	bf00      	nop
 800049a:	bf00      	nop
 800049c:	bf00      	nop
 800049e:	bf00      	nop
 80004a0:	bf00      	nop
 80004a2:	bf00      	nop
 80004a4:	bf00      	nop
 80004a6:	bf00      	nop
 80004a8:	bf00      	nop
 80004aa:	bf00      	nop
 80004ac:	bf00      	nop
 80004ae:	bf00      	nop
 80004b0:	bf00      	nop
 80004b2:	bf00      	nop
 80004b4:	bf00      	nop
 80004b6:	bf00      	nop
 80004b8:	bf00      	nop
  while (((RCC_CR & 0x02000000) != 0x02000000) && (uwT > 0))  //--- Wait for PLL Ready or timeout
 80004ba:	4b4c      	ldr	r3, [pc, #304]	; (80005ec <fnReset_IRQ+0x420>)
 80004bc:	681b      	ldr	r3, [r3, #0]
 80004be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80004c2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 80004c6:	d002      	beq.n	80004ce <fnReset_IRQ+0x302>
 80004c8:	88fb      	ldrh	r3, [r7, #6]
 80004ca:	2b00      	cmp	r3, #0
 80004cc:	d1c2      	bne.n	8000454 <fnReset_IRQ+0x288>
  //                                              Bits 9,8 = 00
  //      AHB Prescaler = SysClock/1 (180 MHz)    Bits 7-4 = 0000
  //                                              Bits 3,2 = 00
  //      Set PLL as System Clock                 Bits 1,0 = 11
  //      Select
  RCC_CFGR = 0x00008003;                          //--- Now running on PLL @ 80 MHz
 80004ce:	4b48      	ldr	r3, [pc, #288]	; (80005f0 <fnReset_IRQ+0x424>)
 80004d0:	f248 0203 	movw	r2, #32771	; 0x8003
 80004d4:	601a      	str	r2, [r3, #0]
                                                  //    Using HSI16 as PLL Clock
  RCC_BDCR = 0x00000000;
 80004d6:	4b47      	ldr	r3, [pc, #284]	; (80005f4 <fnReset_IRQ+0x428>)
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
  //      33 22 22 22 22 22 11 11 11 11 11 00 00 00 00 00
  //      10 98 76 54 32 10 98 76 54 32 10 98 76 54 32 10
  //---   .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
  //      00 00.00 00.00 00.00 00.01 01.01 01.01 01.01 01
  //      IN IN IN IN IN IN IN IN OT OT OT OT OT OT OT OT
  GPIOA_MODER = 0x00005555;                       //--- Set Port Pin I/O Type
 80004dc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80004e0:	f245 5255 	movw	r2, #21845	; 0x5555
 80004e4:	601a      	str	r2, [r3, #0]
  //      GPIO OTYPE
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOA_OTYPER = 0x00000000;                      //--- All Outputs are Push/Pull
 80004e6:	4b44      	ldr	r3, [pc, #272]	; (80005f8 <fnReset_IRQ+0x42c>)
 80004e8:	2200      	movs	r2, #0
 80004ea:	601a      	str	r2, [r3, #0]
  //      33 22 22 22 22 22 11 11 11 11 11 00 00 00 00 00
  //      10 98 76 54 32 10 98 76 54 32 10 98 76 54 32 10
  //---   .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
  //      11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11
  //      FS FS FS FS FS FS FS FS FS FS FS FS FS FS FS FS
  GPIOA_OSPEEDR = 0xFFFFFFFF;                     //--- Every One is High Speed
 80004ec:	4b43      	ldr	r3, [pc, #268]	; (80005fc <fnReset_IRQ+0x430>)
 80004ee:	f04f 32ff 	mov.w	r2, #4294967295
 80004f2:	601a      	str	r2, [r3, #0]
  //      33 22 22 22 22 22 11 11 11 11 11 00 00 00 00 00
  //      10 98 76 54 32 10 98 76 54 32 10 98 76 54 32 10
  //---   .. ..|.. ..|.. ..|.. ..|.. ..|.. ..|.. ..|.. ..
  //      01 01 01 00 00 01 00 01 00 00 00 00 00 00 00 00
  //      PU PU PU NP NP PU NP PU NP NP NP NP NP NP NP NP
  GPIOA_PUPDR = 0x54110000;                       //--- Set 01 As Pull Ups
 80004f4:	4b42      	ldr	r3, [pc, #264]	; (8000600 <fnReset_IRQ+0x434>)
 80004f6:	4a43      	ldr	r2, [pc, #268]	; (8000604 <fnReset_IRQ+0x438>)
 80004f8:	601a      	str	r2, [r3, #0]
  //      GPIO ODR
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOA_ODR = 0x00000000;                         //--- Start with all 0's out
 80004fa:	4b43      	ldr	r3, [pc, #268]	; (8000608 <fnReset_IRQ+0x43c>)
 80004fc:	2200      	movs	r2, #0
 80004fe:	601a      	str	r2, [r3, #0]
  //      GPIOBSRR
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOA_BSRR = 0x00000000;                        //--- Nothing to BSRR
 8000500:	4b42      	ldr	r3, [pc, #264]	; (800060c <fnReset_IRQ+0x440>)
 8000502:	2200      	movs	r2, #0
 8000504:	601a      	str	r2, [r3, #0]
  //      GPIO LCKR
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOA_LCKR = 0x00000000;                        //--- All Ports are unlocked
 8000506:	4b42      	ldr	r3, [pc, #264]	; (8000610 <fnReset_IRQ+0x444>)
 8000508:	2200      	movs	r2, #0
 800050a:	601a      	str	r2, [r3, #0]
  //      GPIO AFRL
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOA_AFRL = 0x00000000;                        //--- Set AFRL to 0
 800050c:	4b41      	ldr	r3, [pc, #260]	; (8000614 <fnReset_IRQ+0x448>)
 800050e:	2200      	movs	r2, #0
 8000510:	601a      	str	r2, [r3, #0]
  //      GPIO AFRH
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOA_AFRH = 0x00000000;                        //--- Set AFRH to 0
 8000512:	4b41      	ldr	r3, [pc, #260]	; (8000618 <fnReset_IRQ+0x44c>)
 8000514:	2200      	movs	r2, #0
 8000516:	601a      	str	r2, [r3, #0]

  //--- Set Port A Finished
  SET_PA07;
 8000518:	4b3c      	ldr	r3, [pc, #240]	; (800060c <fnReset_IRQ+0x440>)
 800051a:	2280      	movs	r2, #128	; 0x80
 800051c:	601a      	str	r2, [r3, #0]
  //      33 22 22 22 22 22 11 11 11 11 11 00 00 00 00 00
  //      10 98 76 54 32 10 98 76 54 32 10 98 76 54 32 10
  //---   .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
  //      00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
  //      IN IN.IN IN.IN IN.IN IN.IN IN.IN IN.IN IN.OT OT
  GPIOB_MODER = 0x00000005;
 800051e:	4b3f      	ldr	r3, [pc, #252]	; (800061c <fnReset_IRQ+0x450>)
 8000520:	2205      	movs	r2, #5
 8000522:	601a      	str	r2, [r3, #0]
  //      GPIO OTYPE
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOB_OTYPER = 0x00000000;
 8000524:	4b3e      	ldr	r3, [pc, #248]	; (8000620 <fnReset_IRQ+0x454>)
 8000526:	2200      	movs	r2, #0
 8000528:	601a      	str	r2, [r3, #0]
  //      33 22 22 22 22 22 11 11 11 11 11 00 00 00 00 00
  //      10 98 76 54 32 10 98 76 54 32 10 98 76 54 32 10
  //---   .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
  //      11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11
  //      FS FS FS FS FS FS FS FS FS FS FS FS FS FS FS FS
  GPIOB_OSPEEDR = 0xFFFFFFFF;
 800052a:	4b3e      	ldr	r3, [pc, #248]	; (8000624 <fnReset_IRQ+0x458>)
 800052c:	f04f 32ff 	mov.w	r2, #4294967295
 8000530:	601a      	str	r2, [r3, #0]
  //      15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
  //      33 22 22 22 22 22 11 11 11 11 11 00 00 00 00 00
  //      10 98 76 54 32 10 98 76 54 32 10 98 76 54 32 10
  //---   .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
  //      00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  GPIOB_PUPDR = 0x00000000;
 8000532:	4b3d      	ldr	r3, [pc, #244]	; (8000628 <fnReset_IRQ+0x45c>)
 8000534:	2200      	movs	r2, #0
 8000536:	601a      	str	r2, [r3, #0]
  //      GPIO ODR
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOB_ODR = 0x00000000;
 8000538:	4b3c      	ldr	r3, [pc, #240]	; (800062c <fnReset_IRQ+0x460>)
 800053a:	2200      	movs	r2, #0
 800053c:	601a      	str	r2, [r3, #0]
  //      GPIOBSRR
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOB_BSRR = 0x00000000;
 800053e:	4b3c      	ldr	r3, [pc, #240]	; (8000630 <fnReset_IRQ+0x464>)
 8000540:	2200      	movs	r2, #0
 8000542:	601a      	str	r2, [r3, #0]
  //      GPIO LCKR
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOB_LCKR = 0x00000000;
 8000544:	4b3b      	ldr	r3, [pc, #236]	; (8000634 <fnReset_IRQ+0x468>)
 8000546:	2200      	movs	r2, #0
 8000548:	601a      	str	r2, [r3, #0]
  //      GPIO AFRL
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0100 0100 0000 0000 0000 0000 0000 0000
  GPIOB_AFRL = 0x00000000;
 800054a:	4b3b      	ldr	r3, [pc, #236]	; (8000638 <fnReset_IRQ+0x46c>)
 800054c:	2200      	movs	r2, #0
 800054e:	601a      	str	r2, [r3, #0]
  //      GPIO AFRH
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //---   .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOB_AFRH = 0x00000000;
 8000550:	4b3a      	ldr	r3, [pc, #232]	; (800063c <fnReset_IRQ+0x470>)
 8000552:	2200      	movs	r2, #0
 8000554:	601a      	str	r2, [r3, #0]

  //--- Set Port B Finished
  SET_PA06;
 8000556:	4b2d      	ldr	r3, [pc, #180]	; (800060c <fnReset_IRQ+0x440>)
 8000558:	2240      	movs	r2, #64	; 0x40
 800055a:	601a      	str	r2, [r3, #0]

//-------------------------------------------------------------------------------------------
  //    Set privelaged Mode and Enable Floating Point Unit Access
  //-------------------------------------------------------------------------------------------
  ubSVCn = 0x05;
 800055c:	4b38      	ldr	r3, [pc, #224]	; (8000640 <fnReset_IRQ+0x474>)
 800055e:	2205      	movs	r2, #5
 8000560:	701a      	strb	r2, [r3, #0]
  SVC_CALL;
 8000562:	df00      	svc	0
  FPU_ENA;  //--- Enable the FPU Hardware
 8000564:	f8df 00dc 	ldr.w	r0, [pc, #220]	; 8000644 <fnReset_IRQ+0x478>
 8000568:	6801      	ldr	r1, [r0, #0]
 800056a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800056e:	6001      	str	r1, [r0, #0]
 8000570:	f3bf 8f4f 	dsb	sy
 8000574:	f3bf 8f6f 	isb	sy

  //--- Waste a little Time for things to settle down
  nop48;
 8000578:	bf00      	nop
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	bf00      	nop
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	bf00      	nop
 8000586:	bf00      	nop
 8000588:	bf00      	nop
 800058a:	bf00      	nop
 800058c:	bf00      	nop
 800058e:	bf00      	nop
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	bf00      	nop
 80005be:	bf00      	nop
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
 80005d6:	bf00      	nop

  //--- Raise PA00 Hi
  SET_PA05;
 80005d8:	4b0c      	ldr	r3, [pc, #48]	; (800060c <fnReset_IRQ+0x440>)
 80005da:	2220      	movs	r2, #32
 80005dc:	601a      	str	r2, [r3, #0]

  //--- Call the Main Function after basic boot complete
  main();
 80005de:	f7ff fd0f 	bl	8000000 <main>
}
 80005e2:	bf00      	nop
 80005e4:	3710      	adds	r7, #16
 80005e6:	46bd      	mov	sp, r7
 80005e8:	bd80      	pop	{r7, pc}
 80005ea:	bf00      	nop
 80005ec:	40021000 	.word	0x40021000
 80005f0:	40021008 	.word	0x40021008
 80005f4:	40021090 	.word	0x40021090
 80005f8:	48000004 	.word	0x48000004
 80005fc:	48000008 	.word	0x48000008
 8000600:	4800000c 	.word	0x4800000c
 8000604:	54110000 	.word	0x54110000
 8000608:	48000014 	.word	0x48000014
 800060c:	48000018 	.word	0x48000018
 8000610:	4800001c 	.word	0x4800001c
 8000614:	48000020 	.word	0x48000020
 8000618:	48000024 	.word	0x48000024
 800061c:	48000400 	.word	0x48000400
 8000620:	48000404 	.word	0x48000404
 8000624:	48000408 	.word	0x48000408
 8000628:	4800040c 	.word	0x4800040c
 800062c:	48000414 	.word	0x48000414
 8000630:	48000418 	.word	0x48000418
 8000634:	4800041c 	.word	0x4800041c
 8000638:	48000420 	.word	0x48000420
 800063c:	48000424 	.word	0x48000424
 8000640:	20000000 	.word	0x20000000
 8000644:	e000ed88 	.word	0xe000ed88
