
main.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001b0  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .rodata.log10.str1.4 00000001  080001b0  080001b0  000101b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata.__ieee754_pow.str1.4 00000001  080001b4  080001b4  000101b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata.__ieee754_powf.str1.4 00000001  080001b8  080001b8  000101b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rodata.TWO52 00000010  080001c0  080001c0  000101c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .rodata.TWO23 00000008  080001d0  080001d0  000101d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .rodata._global_impure_ptr 00000004  080001d8  080001d8  000101d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .text         00006594  08000200  08000200  00010200  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  8 .data         00000000  20000000  08006794  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  9 .data.__fdlib_version 00000001  20000000  08006794  00020000  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data._impure_ptr 00000004  20000004  08006798  00020004  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data.impure_data 00000428  20000008  080067a0  00020008  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 12 .bss          00004510  20000430  08006bc8  00020430  2**3
                  ALLOC
 13 .debug_info   0000b0db  00000000  00000000  00020430  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001619  00000000  00000000  0002b50b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_loc    00002a40  00000000  00000000  0002cb24  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 00000100  00000000  00000000  0002f564  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00002101  00000000  00000000  0002f664  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00001385  00000000  00000000  00031765  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      0000004c  00000000  00000000  00032aea  2**0
                  CONTENTS, READONLY
 20 .ARM.attributes 00000032  00000000  00000000  00032b36  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00001b84  00000000  00000000  00032b68  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000200 <fnReset_IRQ>:

//---------------------------------------------------------------------------------------------
//      This is the Reset Code Entry Point from the RESET Pin
//---------------------------------------------------------------------------------------------
void  fnReset_IRQ (void)                          //--- Reset Handler                0x00000004
{
 8000200:	b580      	push	{r7, lr}
 8000202:	b082      	sub	sp, #8
 8000204:	af00      	add	r7, sp, #0
  u32 *pulDest;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  //--- Zero fill the bss segment
  //    This flushes all junk from RAM
  for(pulDest = &_sbss; pulDest < &_ebss; )
 8000206:	4b78      	ldr	r3, [pc, #480]	; (80003e8 <fnReset_IRQ+0x1e8>)
 8000208:	603b      	str	r3, [r7, #0]
 800020a:	e004      	b.n	8000216 <fnReset_IRQ+0x16>
  {
    *(pulDest++) = 0x00000000;
 800020c:	683b      	ldr	r3, [r7, #0]
 800020e:	1d1a      	adds	r2, r3, #4
 8000210:	603a      	str	r2, [r7, #0]
 8000212:	2200      	movs	r2, #0
 8000214:	601a      	str	r2, [r3, #0]
  for(pulDest = &_sbss; pulDest < &_ebss; )
 8000216:	683b      	ldr	r3, [r7, #0]
 8000218:	4a74      	ldr	r2, [pc, #464]	; (80003ec <fnReset_IRQ+0x1ec>)
 800021a:	4293      	cmp	r3, r2
 800021c:	d3f6      	bcc.n	800020c <fnReset_IRQ+0xc>
  }

  //--- Copy the data segment initializers from flash to SRAM
  pulSrc = &_sidata;
 800021e:	4b74      	ldr	r3, [pc, #464]	; (80003f0 <fnReset_IRQ+0x1f0>)
 8000220:	607b      	str	r3, [r7, #4]

  for(pulDest = &_sdata; pulDest < &_edata; )
 8000222:	4b74      	ldr	r3, [pc, #464]	; (80003f4 <fnReset_IRQ+0x1f4>)
 8000224:	603b      	str	r3, [r7, #0]
 8000226:	e007      	b.n	8000238 <fnReset_IRQ+0x38>
  {
    *(pulDest++) = *(pulSrc++);
 8000228:	687a      	ldr	r2, [r7, #4]
 800022a:	1d13      	adds	r3, r2, #4
 800022c:	607b      	str	r3, [r7, #4]
 800022e:	683b      	ldr	r3, [r7, #0]
 8000230:	1d19      	adds	r1, r3, #4
 8000232:	6039      	str	r1, [r7, #0]
 8000234:	6812      	ldr	r2, [r2, #0]
 8000236:	601a      	str	r2, [r3, #0]
  for(pulDest = &_sdata; pulDest < &_edata; )
 8000238:	683b      	ldr	r3, [r7, #0]
 800023a:	4a6f      	ldr	r2, [pc, #444]	; (80003f8 <fnReset_IRQ+0x1f8>)
 800023c:	4293      	cmp	r3, r2
 800023e:	d3f3      	bcc.n	8000228 <fnReset_IRQ+0x28>
  }

  //--- Set Priviledged Mode to Enable
  ubSVCn = 0x05;                                  //--- Set the SVC Number
 8000240:	4b6e      	ldr	r3, [pc, #440]	; (80003fc <fnReset_IRQ+0x1fc>)
 8000242:	2205      	movs	r2, #5
 8000244:	701a      	strb	r2, [r3, #0]
  SVC_CALL;                                       //--- Call Software Service Interrupt
 8000246:	df00      	svc	0
  //      0000 0000 0000 0000 0000 0111 0000 0100
  //    FLASH = 4 Wait States
  //    Instruction Cache Enabled
  //    Prefetch Enabled
  //    4 Wait States for Flash to run @ 72Mhz Clock
  FLASH_ACR = 0x00000704;
 8000248:	4b6d      	ldr	r3, [pc, #436]	; (8000400 <fnReset_IRQ+0x200>)
 800024a:	f240 7204 	movw	r2, #1796	; 0x704
 800024e:	601a      	str	r2, [r3, #0]
  nop12;
 8000250:	bf00      	nop
 8000252:	bf00      	nop
 8000254:	bf00      	nop
 8000256:	bf00      	nop
 8000258:	bf00      	nop
 800025a:	bf00      	nop
 800025c:	bf00      	nop
 800025e:	bf00      	nop
 8000260:	bf00      	nop
 8000262:	bf00      	nop
 8000264:	bf00      	nop
 8000266:	bf00      	nop

  //-------------------------------------------------------------------------------------------
  //    Clear Clocks & RCC Registers
  //-------------------------------------------------------------------------------------------
  //--- No Clock Interrupts for now
  RCC_CIER = 0x00000000;                          //--- No Clock Interrupts Allowed
 8000268:	4b66      	ldr	r3, [pc, #408]	; (8000404 <fnReset_IRQ+0x204>)
 800026a:	2200      	movs	r2, #0
 800026c:	601a      	str	r2, [r3, #0]
  RCC_CICR = 0x0000077F;                          //--- Clear Clock Interrupts
 800026e:	4b66      	ldr	r3, [pc, #408]	; (8000408 <fnReset_IRQ+0x208>)
 8000270:	f240 727f 	movw	r2, #1919	; 0x77f
 8000274:	601a      	str	r2, [r3, #0]

  //--- AP & AH Peripherial Resets
  RCC_APB1RSTR1 = 0xFFFFFFFF;                     //--- Reset All Peripherials
 8000276:	4b65      	ldr	r3, [pc, #404]	; (800040c <fnReset_IRQ+0x20c>)
 8000278:	f04f 32ff 	mov.w	r2, #4294967295
 800027c:	601a      	str	r2, [r3, #0]
  RCC_APB1RSTR1 = 0x00000000;                     //--- Clear All Peripherial Resets
 800027e:	4b63      	ldr	r3, [pc, #396]	; (800040c <fnReset_IRQ+0x20c>)
 8000280:	2200      	movs	r2, #0
 8000282:	601a      	str	r2, [r3, #0]

  RCC_APB1RSTR2 = 0xFFFFFFFF;                     //--- Reset All Peripherials
 8000284:	4b62      	ldr	r3, [pc, #392]	; (8000410 <fnReset_IRQ+0x210>)
 8000286:	f04f 32ff 	mov.w	r2, #4294967295
 800028a:	601a      	str	r2, [r3, #0]
  RCC_APB1RSTR2 = 0x00000000;                     //--- Clear All Peripherial Resets
 800028c:	4b60      	ldr	r3, [pc, #384]	; (8000410 <fnReset_IRQ+0x210>)
 800028e:	2200      	movs	r2, #0
 8000290:	601a      	str	r2, [r3, #0]

  RCC_APB2RSTR = 0xFFFFFFFF;                      //--- Reset All Peripherials
 8000292:	4b60      	ldr	r3, [pc, #384]	; (8000414 <fnReset_IRQ+0x214>)
 8000294:	f04f 32ff 	mov.w	r2, #4294967295
 8000298:	601a      	str	r2, [r3, #0]
  RCC_APB2RSTR = 0x00000000;                      //--- Clear All Peripherial Resets
 800029a:	4b5e      	ldr	r3, [pc, #376]	; (8000414 <fnReset_IRQ+0x214>)
 800029c:	2200      	movs	r2, #0
 800029e:	601a      	str	r2, [r3, #0]

  RCC_AHB1RSTR = 0xFFFFFFFF;                      //--- Reset All Peripherials
 80002a0:	4b5d      	ldr	r3, [pc, #372]	; (8000418 <fnReset_IRQ+0x218>)
 80002a2:	f04f 32ff 	mov.w	r2, #4294967295
 80002a6:	601a      	str	r2, [r3, #0]
  RCC_AHB1RSTR = 0x00000000;                      //--- Clear All Peripherial Resets
 80002a8:	4b5b      	ldr	r3, [pc, #364]	; (8000418 <fnReset_IRQ+0x218>)
 80002aa:	2200      	movs	r2, #0
 80002ac:	601a      	str	r2, [r3, #0]

  RCC_AHB2RSTR = 0xFFFFFFFF;                      //--- Reset All Peripherials
 80002ae:	4b5b      	ldr	r3, [pc, #364]	; (800041c <fnReset_IRQ+0x21c>)
 80002b0:	f04f 32ff 	mov.w	r2, #4294967295
 80002b4:	601a      	str	r2, [r3, #0]
  RCC_AHB2RSTR = 0x00000000;                      //--- Clear All Peripherial Resets
 80002b6:	4b59      	ldr	r3, [pc, #356]	; (800041c <fnReset_IRQ+0x21c>)
 80002b8:	2200      	movs	r2, #0
 80002ba:	601a      	str	r2, [r3, #0]

  RCC_AHB3RSTR = 0xFFFFFFFF;                      //--- Reset All Peripherials
 80002bc:	4b58      	ldr	r3, [pc, #352]	; (8000420 <fnReset_IRQ+0x220>)
 80002be:	f04f 32ff 	mov.w	r2, #4294967295
 80002c2:	601a      	str	r2, [r3, #0]
  RCC_AHB3RSTR = 0x00000000;                      //--- Clear All Peripherial Resets
 80002c4:	4b56      	ldr	r3, [pc, #344]	; (8000420 <fnReset_IRQ+0x220>)
 80002c6:	2200      	movs	r2, #0
 80002c8:	601a      	str	r2, [r3, #0]

  nop48;                                          //--- Waste a little time
 80002ca:	bf00      	nop
 80002cc:	bf00      	nop
 80002ce:	bf00      	nop
 80002d0:	bf00      	nop
 80002d2:	bf00      	nop
 80002d4:	bf00      	nop
 80002d6:	bf00      	nop
 80002d8:	bf00      	nop
 80002da:	bf00      	nop
 80002dc:	bf00      	nop
 80002de:	bf00      	nop
 80002e0:	bf00      	nop
 80002e2:	bf00      	nop
 80002e4:	bf00      	nop
 80002e6:	bf00      	nop
 80002e8:	bf00      	nop
 80002ea:	bf00      	nop
 80002ec:	bf00      	nop
 80002ee:	bf00      	nop
 80002f0:	bf00      	nop
 80002f2:	bf00      	nop
 80002f4:	bf00      	nop
 80002f6:	bf00      	nop
 80002f8:	bf00      	nop
 80002fa:	bf00      	nop
 80002fc:	bf00      	nop
 80002fe:	bf00      	nop
 8000300:	bf00      	nop
 8000302:	bf00      	nop
 8000304:	bf00      	nop
 8000306:	bf00      	nop
 8000308:	bf00      	nop
 800030a:	bf00      	nop
 800030c:	bf00      	nop
 800030e:	bf00      	nop
 8000310:	bf00      	nop
 8000312:	bf00      	nop
 8000314:	bf00      	nop
 8000316:	bf00      	nop
 8000318:	bf00      	nop
 800031a:	bf00      	nop
 800031c:	bf00      	nop
 800031e:	bf00      	nop
 8000320:	bf00      	nop
 8000322:	bf00      	nop
 8000324:	bf00      	nop
 8000326:	bf00      	nop
 8000328:	bf00      	nop
  //      -------------    ----   ---
  //      RTCAPB            10    Hi              //--- Enable RTC Clock
  //      PWREN             28    Hi              //--- Enable Access to Power Registers
  //      All Others              Lo
  //
  RCC_APB1ENR1 = 0x10000400;
 800032a:	4b3e      	ldr	r3, [pc, #248]	; (8000424 <fnReset_IRQ+0x224>)
 800032c:	4a3e      	ldr	r2, [pc, #248]	; (8000428 <fnReset_IRQ+0x228>)
 800032e:	601a      	str	r2, [r3, #0]
  RCC_APB1SMENR1 = 0x10000400;
 8000330:	4b3e      	ldr	r3, [pc, #248]	; (800042c <fnReset_IRQ+0x22c>)
 8000332:	4a3d      	ldr	r2, [pc, #244]	; (8000428 <fnReset_IRQ+0x228>)
 8000334:	601a      	str	r2, [r3, #0]

  nop12;                                          //--- Waste a little time
 8000336:	bf00      	nop
 8000338:	bf00      	nop
 800033a:	bf00      	nop
 800033c:	bf00      	nop
 800033e:	bf00      	nop
 8000340:	bf00      	nop
 8000342:	bf00      	nop
 8000344:	bf00      	nop
 8000346:	bf00      	nop
 8000348:	bf00      	nop
 800034a:	bf00      	nop
 800034c:	bf00      	nop
  //      VOS-0             09    Hi
  //      VOS-1             10    Lo
  //      LPR               14    Lo
  //      All Others              Lo
  //
  PWR_CR1 |= 0x00000300;                            //--- Enable BDCR Write
 800034e:	4b38      	ldr	r3, [pc, #224]	; (8000430 <fnReset_IRQ+0x230>)
 8000350:	681b      	ldr	r3, [r3, #0]
 8000352:	4a37      	ldr	r2, [pc, #220]	; (8000430 <fnReset_IRQ+0x230>)
 8000354:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8000358:	6013      	str	r3, [r2, #0]
  nop12;
 800035a:	bf00      	nop
 800035c:	bf00      	nop
 800035e:	bf00      	nop
 8000360:	bf00      	nop
 8000362:	bf00      	nop
 8000364:	bf00      	nop
 8000366:	bf00      	nop
 8000368:	bf00      	nop
 800036a:	bf00      	nop
 800036c:	bf00      	nop
 800036e:	bf00      	nop
 8000370:	bf00      	nop
  //      RTC Select 0      08    Hi  = LSE Clock
  //      RTC Select 1      09    Lo  = LSE Clock
  //      RTC_Enabled       15    Hi  = Enabled
  //      LSCO = Disabled   24    Lo
  //      LSCO = LSE        25    Hi
  RCC_BDCR = 0x0300811D;                          //--- Turn On LSE
 8000372:	4b30      	ldr	r3, [pc, #192]	; (8000434 <fnReset_IRQ+0x234>)
 8000374:	4a30      	ldr	r2, [pc, #192]	; (8000438 <fnReset_IRQ+0x238>)
 8000376:	601a      	str	r2, [r3, #0]

  //--- Wait for LSE Clock to settle for up To 100,000 Loops
  ulT = 100000;
 8000378:	4b30      	ldr	r3, [pc, #192]	; (800043c <fnReset_IRQ+0x23c>)
 800037a:	4a31      	ldr	r2, [pc, #196]	; (8000440 <fnReset_IRQ+0x240>)
 800037c:	601a      	str	r2, [r3, #0]

  //--- Test if LSE is Ready and running
  while (!(RCC_BDCR & 0x00000002) && (ulT > 0))
 800037e:	e010      	b.n	80003a2 <fnReset_IRQ+0x1a2>
  {
    ulT--;                                        //--- Decrement Period Counter
 8000380:	4b2e      	ldr	r3, [pc, #184]	; (800043c <fnReset_IRQ+0x23c>)
 8000382:	681b      	ldr	r3, [r3, #0]
 8000384:	3b01      	subs	r3, #1
 8000386:	4a2d      	ldr	r2, [pc, #180]	; (800043c <fnReset_IRQ+0x23c>)
 8000388:	6013      	str	r3, [r2, #0]
    nop12;
 800038a:	bf00      	nop
 800038c:	bf00      	nop
 800038e:	bf00      	nop
 8000390:	bf00      	nop
 8000392:	bf00      	nop
 8000394:	bf00      	nop
 8000396:	bf00      	nop
 8000398:	bf00      	nop
 800039a:	bf00      	nop
 800039c:	bf00      	nop
 800039e:	bf00      	nop
 80003a0:	bf00      	nop
  while (!(RCC_BDCR & 0x00000002) && (ulT > 0))
 80003a2:	4b24      	ldr	r3, [pc, #144]	; (8000434 <fnReset_IRQ+0x234>)
 80003a4:	681b      	ldr	r3, [r3, #0]
 80003a6:	f003 0302 	and.w	r3, r3, #2
 80003aa:	2b00      	cmp	r3, #0
 80003ac:	d103      	bne.n	80003b6 <fnReset_IRQ+0x1b6>
 80003ae:	4b23      	ldr	r3, [pc, #140]	; (800043c <fnReset_IRQ+0x23c>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d1e4      	bne.n	8000380 <fnReset_IRQ+0x180>
  }

  //--- Notate Success of LSE in SystemFlags
  if (ulT > 0)
 80003b6:	4b21      	ldr	r3, [pc, #132]	; (800043c <fnReset_IRQ+0x23c>)
 80003b8:	681b      	ldr	r3, [r3, #0]
 80003ba:	2b00      	cmp	r3, #0
 80003bc:	d006      	beq.n	80003cc <fnReset_IRQ+0x1cc>
  {
    ulSystemFlags |= 0x00000001;                  //--- Success = Hi Bit (0)
 80003be:	4b21      	ldr	r3, [pc, #132]	; (8000444 <fnReset_IRQ+0x244>)
 80003c0:	681b      	ldr	r3, [r3, #0]
 80003c2:	f043 0301 	orr.w	r3, r3, #1
 80003c6:	4a1f      	ldr	r2, [pc, #124]	; (8000444 <fnReset_IRQ+0x244>)
 80003c8:	6013      	str	r3, [r2, #0]
 80003ca:	e005      	b.n	80003d8 <fnReset_IRQ+0x1d8>
  }
  else
  {
    ulSystemFlags &= 0xFFFFFFFE;                  //--- Failure = Lo Bit (0)
 80003cc:	4b1d      	ldr	r3, [pc, #116]	; (8000444 <fnReset_IRQ+0x244>)
 80003ce:	681b      	ldr	r3, [r3, #0]
 80003d0:	f023 0301 	bic.w	r3, r3, #1
 80003d4:	4a1b      	ldr	r2, [pc, #108]	; (8000444 <fnReset_IRQ+0x244>)
 80003d6:	6013      	str	r3, [r2, #0]
  //
  //    MSI_ON
  //    MSI Range Register = RCC_CR
  //    MSI FREQ = 4 MHz
  //    Reset Val = 0x00000069
  RCC_CR = 0x00000069;
 80003d8:	4b1b      	ldr	r3, [pc, #108]	; (8000448 <fnReset_IRQ+0x248>)
 80003da:	2269      	movs	r2, #105	; 0x69
 80003dc:	601a      	str	r2, [r3, #0]

  //--- Wait for MSI Clock to settle
  ulT = 100000;
 80003de:	4b17      	ldr	r3, [pc, #92]	; (800043c <fnReset_IRQ+0x23c>)
 80003e0:	4a17      	ldr	r2, [pc, #92]	; (8000440 <fnReset_IRQ+0x240>)
 80003e2:	601a      	str	r2, [r3, #0]

  while (((RCC_CR & 0x00000002) != 0x00000002) && (ulT > 0))
 80003e4:	e043      	b.n	800046e <fnReset_IRQ+0x26e>
 80003e6:	bf00      	nop
 80003e8:	20000430 	.word	0x20000430
 80003ec:	20004940 	.word	0x20004940
 80003f0:	08006794 	.word	0x08006794
 80003f4:	20000000 	.word	0x20000000
 80003f8:	20000000 	.word	0x20000000
 80003fc:	20000458 	.word	0x20000458
 8000400:	40022000 	.word	0x40022000
 8000404:	40021018 	.word	0x40021018
 8000408:	40021020 	.word	0x40021020
 800040c:	40021038 	.word	0x40021038
 8000410:	4002103c 	.word	0x4002103c
 8000414:	40021040 	.word	0x40021040
 8000418:	40021028 	.word	0x40021028
 800041c:	4002102c 	.word	0x4002102c
 8000420:	40021030 	.word	0x40021030
 8000424:	40021058 	.word	0x40021058
 8000428:	10000400 	.word	0x10000400
 800042c:	40021078 	.word	0x40021078
 8000430:	40007000 	.word	0x40007000
 8000434:	40021090 	.word	0x40021090
 8000438:	0300811d 	.word	0x0300811d
 800043c:	20000430 	.word	0x20000430
 8000440:	000186a0 	.word	0x000186a0
 8000444:	20000434 	.word	0x20000434
 8000448:	40021000 	.word	0x40021000
  {
    ulT--;                                        //--- Decrement Period Counter
 800044c:	4b80      	ldr	r3, [pc, #512]	; (8000650 <fnReset_IRQ+0x450>)
 800044e:	681b      	ldr	r3, [r3, #0]
 8000450:	3b01      	subs	r3, #1
 8000452:	4a7f      	ldr	r2, [pc, #508]	; (8000650 <fnReset_IRQ+0x450>)
 8000454:	6013      	str	r3, [r2, #0]
    nop12;
 8000456:	bf00      	nop
 8000458:	bf00      	nop
 800045a:	bf00      	nop
 800045c:	bf00      	nop
 800045e:	bf00      	nop
 8000460:	bf00      	nop
 8000462:	bf00      	nop
 8000464:	bf00      	nop
 8000466:	bf00      	nop
 8000468:	bf00      	nop
 800046a:	bf00      	nop
 800046c:	bf00      	nop
  while (((RCC_CR & 0x00000002) != 0x00000002) && (ulT > 0))
 800046e:	4b79      	ldr	r3, [pc, #484]	; (8000654 <fnReset_IRQ+0x454>)
 8000470:	681b      	ldr	r3, [r3, #0]
 8000472:	f003 0302 	and.w	r3, r3, #2
 8000476:	2b02      	cmp	r3, #2
 8000478:	d003      	beq.n	8000482 <fnReset_IRQ+0x282>
 800047a:	4b75      	ldr	r3, [pc, #468]	; (8000650 <fnReset_IRQ+0x450>)
 800047c:	681b      	ldr	r3, [r3, #0]
 800047e:	2b00      	cmp	r3, #0
 8000480:	d1e4      	bne.n	800044c <fnReset_IRQ+0x24c>
  }

  //--- Notate Success of MSI @ 4 MHz at StartUp
  if (ulT > 0)
 8000482:	4b73      	ldr	r3, [pc, #460]	; (8000650 <fnReset_IRQ+0x450>)
 8000484:	681b      	ldr	r3, [r3, #0]
 8000486:	2b00      	cmp	r3, #0
 8000488:	d006      	beq.n	8000498 <fnReset_IRQ+0x298>
  {
    ulSystemFlags |= 0x00000002;                  //--- Success = Hi
 800048a:	4b73      	ldr	r3, [pc, #460]	; (8000658 <fnReset_IRQ+0x458>)
 800048c:	681b      	ldr	r3, [r3, #0]
 800048e:	f043 0302 	orr.w	r3, r3, #2
 8000492:	4a71      	ldr	r2, [pc, #452]	; (8000658 <fnReset_IRQ+0x458>)
 8000494:	6013      	str	r3, [r2, #0]
 8000496:	e005      	b.n	80004a4 <fnReset_IRQ+0x2a4>
  }
  else
  {
    ulSystemFlags &= 0xFFFFFFFD;                  //--- Failure = Lo
 8000498:	4b6f      	ldr	r3, [pc, #444]	; (8000658 <fnReset_IRQ+0x458>)
 800049a:	681b      	ldr	r3, [r3, #0]
 800049c:	f023 0302 	bic.w	r3, r3, #2
 80004a0:	4a6d      	ldr	r2, [pc, #436]	; (8000658 <fnReset_IRQ+0x458>)
 80004a2:	6013      	str	r3, [r2, #0]
  //    MSI_ON
  //    MSI_PLL Enable
  //    MSI Range Register = RCC_CR
  //    MSI FREQ = 4 MHz
  //    Main System PLL Disabled
  RCC_CR |= 0x0000006D;
 80004a4:	4b6b      	ldr	r3, [pc, #428]	; (8000654 <fnReset_IRQ+0x454>)
 80004a6:	681b      	ldr	r3, [r3, #0]
 80004a8:	4a6a      	ldr	r2, [pc, #424]	; (8000654 <fnReset_IRQ+0x454>)
 80004aa:	f043 036d 	orr.w	r3, r3, #109	; 0x6d
 80004ae:	6013      	str	r3, [r2, #0]
  nop48;
 80004b0:	bf00      	nop
 80004b2:	bf00      	nop
 80004b4:	bf00      	nop
 80004b6:	bf00      	nop
 80004b8:	bf00      	nop
 80004ba:	bf00      	nop
 80004bc:	bf00      	nop
 80004be:	bf00      	nop
 80004c0:	bf00      	nop
 80004c2:	bf00      	nop
 80004c4:	bf00      	nop
 80004c6:	bf00      	nop
 80004c8:	bf00      	nop
 80004ca:	bf00      	nop
 80004cc:	bf00      	nop
 80004ce:	bf00      	nop
 80004d0:	bf00      	nop
 80004d2:	bf00      	nop
 80004d4:	bf00      	nop
 80004d6:	bf00      	nop
 80004d8:	bf00      	nop
 80004da:	bf00      	nop
 80004dc:	bf00      	nop
 80004de:	bf00      	nop
 80004e0:	bf00      	nop
 80004e2:	bf00      	nop
 80004e4:	bf00      	nop
 80004e6:	bf00      	nop
 80004e8:	bf00      	nop
 80004ea:	bf00      	nop
 80004ec:	bf00      	nop
 80004ee:	bf00      	nop
 80004f0:	bf00      	nop
 80004f2:	bf00      	nop
 80004f4:	bf00      	nop
 80004f6:	bf00      	nop
 80004f8:	bf00      	nop
 80004fa:	bf00      	nop
 80004fc:	bf00      	nop
 80004fe:	bf00      	nop
 8000500:	bf00      	nop
 8000502:	bf00      	nop
 8000504:	bf00      	nop
 8000506:	bf00      	nop
 8000508:	bf00      	nop
 800050a:	bf00      	nop
 800050c:	bf00      	nop
 800050e:	bf00      	nop

  //--- Wait for MSI Clock PLL to settle
  ulT = 100000;
 8000510:	4b4f      	ldr	r3, [pc, #316]	; (8000650 <fnReset_IRQ+0x450>)
 8000512:	4a52      	ldr	r2, [pc, #328]	; (800065c <fnReset_IRQ+0x45c>)
 8000514:	601a      	str	r2, [r3, #0]

  while (((RCC_CR & 0x00000002) != 0x00000002) && (ulT > 0))
 8000516:	e010      	b.n	800053a <fnReset_IRQ+0x33a>
  {
    ulT--;                                        //--- Decrement Period Counter
 8000518:	4b4d      	ldr	r3, [pc, #308]	; (8000650 <fnReset_IRQ+0x450>)
 800051a:	681b      	ldr	r3, [r3, #0]
 800051c:	3b01      	subs	r3, #1
 800051e:	4a4c      	ldr	r2, [pc, #304]	; (8000650 <fnReset_IRQ+0x450>)
 8000520:	6013      	str	r3, [r2, #0]
    nop12;
 8000522:	bf00      	nop
 8000524:	bf00      	nop
 8000526:	bf00      	nop
 8000528:	bf00      	nop
 800052a:	bf00      	nop
 800052c:	bf00      	nop
 800052e:	bf00      	nop
 8000530:	bf00      	nop
 8000532:	bf00      	nop
 8000534:	bf00      	nop
 8000536:	bf00      	nop
 8000538:	bf00      	nop
  while (((RCC_CR & 0x00000002) != 0x00000002) && (ulT > 0))
 800053a:	4b46      	ldr	r3, [pc, #280]	; (8000654 <fnReset_IRQ+0x454>)
 800053c:	681b      	ldr	r3, [r3, #0]
 800053e:	f003 0302 	and.w	r3, r3, #2
 8000542:	2b02      	cmp	r3, #2
 8000544:	d003      	beq.n	800054e <fnReset_IRQ+0x34e>
 8000546:	4b42      	ldr	r3, [pc, #264]	; (8000650 <fnReset_IRQ+0x450>)
 8000548:	681b      	ldr	r3, [r3, #0]
 800054a:	2b00      	cmp	r3, #0
 800054c:	d1e4      	bne.n	8000518 <fnReset_IRQ+0x318>
  }

  //--- Notate Success of MSI PLL @ 4 MHz at StartUp
  if (ulT > 0)
 800054e:	4b40      	ldr	r3, [pc, #256]	; (8000650 <fnReset_IRQ+0x450>)
 8000550:	681b      	ldr	r3, [r3, #0]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d006      	beq.n	8000564 <fnReset_IRQ+0x364>
  {
    ulSystemFlags |= 0x00000004;                  //--- Success = Hi
 8000556:	4b40      	ldr	r3, [pc, #256]	; (8000658 <fnReset_IRQ+0x458>)
 8000558:	681b      	ldr	r3, [r3, #0]
 800055a:	f043 0304 	orr.w	r3, r3, #4
 800055e:	4a3e      	ldr	r2, [pc, #248]	; (8000658 <fnReset_IRQ+0x458>)
 8000560:	6013      	str	r3, [r2, #0]
 8000562:	e005      	b.n	8000570 <fnReset_IRQ+0x370>
  }
  else
  {
    ulSystemFlags &= 0xFFFFFFFB;                  //--- Failure = Lo
 8000564:	4b3c      	ldr	r3, [pc, #240]	; (8000658 <fnReset_IRQ+0x458>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	f023 0304 	bic.w	r3, r3, #4
 800056c:	4a3a      	ldr	r2, [pc, #232]	; (8000658 <fnReset_IRQ+0x458>)
 800056e:	6013      	str	r3, [r2, #0]
  //    PLLR = /4   (288 / 4) = 72 MHz + Enable       .... 0011
  //    PLLP = OFF                                    0000
  //
  //    PLLVCO INPUT = ((4000000 / 1) * 72) = 288 MHz
  //    PLLCLK = VCO / 4 = 72 MHz
  RCC_PLLCFGR = 0x03504801;
 8000570:	4b3b      	ldr	r3, [pc, #236]	; (8000660 <fnReset_IRQ+0x460>)
 8000572:	4a3c      	ldr	r2, [pc, #240]	; (8000664 <fnReset_IRQ+0x464>)
 8000574:	601a      	str	r2, [r3, #0]
  nop48;
 8000576:	bf00      	nop
 8000578:	bf00      	nop
 800057a:	bf00      	nop
 800057c:	bf00      	nop
 800057e:	bf00      	nop
 8000580:	bf00      	nop
 8000582:	bf00      	nop
 8000584:	bf00      	nop
 8000586:	bf00      	nop
 8000588:	bf00      	nop
 800058a:	bf00      	nop
 800058c:	bf00      	nop
 800058e:	bf00      	nop
 8000590:	bf00      	nop
 8000592:	bf00      	nop
 8000594:	bf00      	nop
 8000596:	bf00      	nop
 8000598:	bf00      	nop
 800059a:	bf00      	nop
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	bf00      	nop
 80005b4:	bf00      	nop
 80005b6:	bf00      	nop
 80005b8:	bf00      	nop
 80005ba:	bf00      	nop
 80005bc:	bf00      	nop
 80005be:	bf00      	nop
 80005c0:	bf00      	nop
 80005c2:	bf00      	nop
 80005c4:	bf00      	nop
 80005c6:	bf00      	nop
 80005c8:	bf00      	nop
 80005ca:	bf00      	nop
 80005cc:	bf00      	nop
 80005ce:	bf00      	nop
 80005d0:	bf00      	nop
 80005d2:	bf00      	nop
 80005d4:	bf00      	nop
  //    MAIN PLL ON
  //    MSI_ON
  //    MSI_PLL Enable
  //    MSI Range Register = RCC_CR
  //    MSI FREQ = 4 MHz
  RCC_CR |= 0x0100006D;
 80005d6:	4b1f      	ldr	r3, [pc, #124]	; (8000654 <fnReset_IRQ+0x454>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	4a1e      	ldr	r2, [pc, #120]	; (8000654 <fnReset_IRQ+0x454>)
 80005dc:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80005e0:	f043 036d 	orr.w	r3, r3, #109	; 0x6d
 80005e4:	6013      	str	r3, [r2, #0]
  nop48;
 80005e6:	bf00      	nop
 80005e8:	bf00      	nop
 80005ea:	bf00      	nop
 80005ec:	bf00      	nop
 80005ee:	bf00      	nop
 80005f0:	bf00      	nop
 80005f2:	bf00      	nop
 80005f4:	bf00      	nop
 80005f6:	bf00      	nop
 80005f8:	bf00      	nop
 80005fa:	bf00      	nop
 80005fc:	bf00      	nop
 80005fe:	bf00      	nop
 8000600:	bf00      	nop
 8000602:	bf00      	nop
 8000604:	bf00      	nop
 8000606:	bf00      	nop
 8000608:	bf00      	nop
 800060a:	bf00      	nop
 800060c:	bf00      	nop
 800060e:	bf00      	nop
 8000610:	bf00      	nop
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	bf00      	nop
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	bf00      	nop
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	bf00      	nop

  //--- Wait for PLL & MSI clocks to show "Ready"
  ulT = 100000;  //    Wait for upto 100K Loops
 8000646:	4b02      	ldr	r3, [pc, #8]	; (8000650 <fnReset_IRQ+0x450>)
 8000648:	4a04      	ldr	r2, [pc, #16]	; (800065c <fnReset_IRQ+0x45c>)
 800064a:	601a      	str	r2, [r3, #0]

  while (((RCC_CR & 0x02000002) != 0x02000002) && ulT)
 800064c:	e01d      	b.n	800068a <fnReset_IRQ+0x48a>
 800064e:	bf00      	nop
 8000650:	20000430 	.word	0x20000430
 8000654:	40021000 	.word	0x40021000
 8000658:	20000434 	.word	0x20000434
 800065c:	000186a0 	.word	0x000186a0
 8000660:	4002100c 	.word	0x4002100c
 8000664:	03504801 	.word	0x03504801
  {
    ulT--;                                        //--- Decrement Period Counter
 8000668:	4b2c      	ldr	r3, [pc, #176]	; (800071c <fnReset_IRQ+0x51c>)
 800066a:	681b      	ldr	r3, [r3, #0]
 800066c:	3b01      	subs	r3, #1
 800066e:	4a2b      	ldr	r2, [pc, #172]	; (800071c <fnReset_IRQ+0x51c>)
 8000670:	6013      	str	r3, [r2, #0]
    nop12;
 8000672:	bf00      	nop
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	bf00      	nop
 800067a:	bf00      	nop
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	bf00      	nop
 8000682:	bf00      	nop
 8000684:	bf00      	nop
 8000686:	bf00      	nop
 8000688:	bf00      	nop
  while (((RCC_CR & 0x02000002) != 0x02000002) && ulT)
 800068a:	4b25      	ldr	r3, [pc, #148]	; (8000720 <fnReset_IRQ+0x520>)
 800068c:	681a      	ldr	r2, [r3, #0]
 800068e:	4b25      	ldr	r3, [pc, #148]	; (8000724 <fnReset_IRQ+0x524>)
 8000690:	4013      	ands	r3, r2
 8000692:	4a24      	ldr	r2, [pc, #144]	; (8000724 <fnReset_IRQ+0x524>)
 8000694:	4293      	cmp	r3, r2
 8000696:	d003      	beq.n	80006a0 <fnReset_IRQ+0x4a0>
 8000698:	4b20      	ldr	r3, [pc, #128]	; (800071c <fnReset_IRQ+0x51c>)
 800069a:	681b      	ldr	r3, [r3, #0]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d1e3      	bne.n	8000668 <fnReset_IRQ+0x468>
  }

  //--- Notate Success of Main PLL StartUp
  if (ulT > 0)
 80006a0:	4b1e      	ldr	r3, [pc, #120]	; (800071c <fnReset_IRQ+0x51c>)
 80006a2:	681b      	ldr	r3, [r3, #0]
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d006      	beq.n	80006b6 <fnReset_IRQ+0x4b6>
  {
    ulSystemFlags |= 0x00000008;                  //--- Success = Hi
 80006a8:	4b1f      	ldr	r3, [pc, #124]	; (8000728 <fnReset_IRQ+0x528>)
 80006aa:	681b      	ldr	r3, [r3, #0]
 80006ac:	f043 0308 	orr.w	r3, r3, #8
 80006b0:	4a1d      	ldr	r2, [pc, #116]	; (8000728 <fnReset_IRQ+0x528>)
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	e005      	b.n	80006c2 <fnReset_IRQ+0x4c2>
  }
  else
  {
    ulSystemFlags &= 0xFFFFFFF7;                  //--- Failure = Lo
 80006b6:	4b1c      	ldr	r3, [pc, #112]	; (8000728 <fnReset_IRQ+0x528>)
 80006b8:	681b      	ldr	r3, [r3, #0]
 80006ba:	f023 0308 	bic.w	r3, r3, #8
 80006be:	4a1a      	ldr	r2, [pc, #104]	; (8000728 <fnReset_IRQ+0x528>)
 80006c0:	6013      	str	r3, [r2, #0]
  //      AHB Prescale = /1
  //      APB1 Prescale = /1
  //      APB2 Prescale = /1
  //      Wake Up = MSI
  //      No MCO Output on PA08
  RCC_CFGR = 0x00000003;
 80006c2:	4b1a      	ldr	r3, [pc, #104]	; (800072c <fnReset_IRQ+0x52c>)
 80006c4:	2203      	movs	r2, #3
 80006c6:	601a      	str	r2, [r3, #0]
  //      MCO / 1  = 72 MHz = PA08
  //-----------------------------------------------------
  //  RCC_CFGR = 0x01000003;

  //--- Wait for System to show PLL as Sys Clock
  ulT = 100000;  //    Wait for upto 100K Loops
 80006c8:	4b14      	ldr	r3, [pc, #80]	; (800071c <fnReset_IRQ+0x51c>)
 80006ca:	4a19      	ldr	r2, [pc, #100]	; (8000730 <fnReset_IRQ+0x530>)
 80006cc:	601a      	str	r2, [r3, #0]

  while (((RCC_CFGR & 0x0000000C) != 0x0000000C) && ulT)
 80006ce:	e010      	b.n	80006f2 <fnReset_IRQ+0x4f2>
  {
    ulT--;                                        //--- Decrement Period Counter
 80006d0:	4b12      	ldr	r3, [pc, #72]	; (800071c <fnReset_IRQ+0x51c>)
 80006d2:	681b      	ldr	r3, [r3, #0]
 80006d4:	3b01      	subs	r3, #1
 80006d6:	4a11      	ldr	r2, [pc, #68]	; (800071c <fnReset_IRQ+0x51c>)
 80006d8:	6013      	str	r3, [r2, #0]
    nop12;
 80006da:	bf00      	nop
 80006dc:	bf00      	nop
 80006de:	bf00      	nop
 80006e0:	bf00      	nop
 80006e2:	bf00      	nop
 80006e4:	bf00      	nop
 80006e6:	bf00      	nop
 80006e8:	bf00      	nop
 80006ea:	bf00      	nop
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	bf00      	nop
  while (((RCC_CFGR & 0x0000000C) != 0x0000000C) && ulT)
 80006f2:	4b0e      	ldr	r3, [pc, #56]	; (800072c <fnReset_IRQ+0x52c>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f003 030c 	and.w	r3, r3, #12
 80006fa:	2b0c      	cmp	r3, #12
 80006fc:	d003      	beq.n	8000706 <fnReset_IRQ+0x506>
 80006fe:	4b07      	ldr	r3, [pc, #28]	; (800071c <fnReset_IRQ+0x51c>)
 8000700:	681b      	ldr	r3, [r3, #0]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d1e4      	bne.n	80006d0 <fnReset_IRQ+0x4d0>
  }

  //--- Notate Success of PLL StartUp
  if (ulT > 0)
 8000706:	4b05      	ldr	r3, [pc, #20]	; (800071c <fnReset_IRQ+0x51c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	2b00      	cmp	r3, #0
 800070c:	d012      	beq.n	8000734 <fnReset_IRQ+0x534>
  {
    ulSystemFlags |= 0x00000010;                  //--- Success = Hi
 800070e:	4b06      	ldr	r3, [pc, #24]	; (8000728 <fnReset_IRQ+0x528>)
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	f043 0310 	orr.w	r3, r3, #16
 8000716:	4a04      	ldr	r2, [pc, #16]	; (8000728 <fnReset_IRQ+0x528>)
 8000718:	6013      	str	r3, [r2, #0]
 800071a:	e011      	b.n	8000740 <fnReset_IRQ+0x540>
 800071c:	20000430 	.word	0x20000430
 8000720:	40021000 	.word	0x40021000
 8000724:	02000002 	.word	0x02000002
 8000728:	20000434 	.word	0x20000434
 800072c:	40021008 	.word	0x40021008
 8000730:	000186a0 	.word	0x000186a0
  }
  else
  {
    ulSystemFlags &= 0xFFFFFFEF;                  //--- Failure = Lo
 8000734:	4b88      	ldr	r3, [pc, #544]	; (8000958 <fnReset_IRQ+0x758>)
 8000736:	681b      	ldr	r3, [r3, #0]
 8000738:	f023 0310 	bic.w	r3, r3, #16
 800073c:	4a86      	ldr	r2, [pc, #536]	; (8000958 <fnReset_IRQ+0x758>)
 800073e:	6013      	str	r3, [r2, #0]
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  //
  RCC_CCIPR = 0x00000000;
 8000740:	4b86      	ldr	r3, [pc, #536]	; (800095c <fnReset_IRQ+0x75c>)
 8000742:	2200      	movs	r2, #0
 8000744:	601a      	str	r2, [r3, #0]
  //      DMA 1 Off
  //      DMA 2 Off
  //      Flash Memory On
  //      Touch Sensor Off
  //      CRC Generator Off
  RCC_AHB1ENR = 0x00000100;
 8000746:	4b86      	ldr	r3, [pc, #536]	; (8000960 <fnReset_IRQ+0x760>)
 8000748:	f44f 7280 	mov.w	r2, #256	; 0x100
 800074c:	601a      	str	r2, [r3, #0]
  RCC_AHB1SMENR = 0x00000300;
 800074e:	4b85      	ldr	r3, [pc, #532]	; (8000964 <fnReset_IRQ+0x764>)
 8000750:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000754:	601a      	str	r2, [r3, #0]
  //      GPIO D Port Off
  //      GPIO E Port Off
  //      GPIO H Port Off
  //      AESEN Encoder Accelerator Off
  //      Random Number Generator On
  RCC_AHB2ENR = 0x00040007;
 8000756:	4b84      	ldr	r3, [pc, #528]	; (8000968 <fnReset_IRQ+0x768>)
 8000758:	4a84      	ldr	r2, [pc, #528]	; (800096c <fnReset_IRQ+0x76c>)
 800075a:	601a      	str	r2, [r3, #0]
  RCC_AHB2SMENR = 0x00040007;
 800075c:	4b84      	ldr	r3, [pc, #528]	; (8000970 <fnReset_IRQ+0x770>)
 800075e:	4a83      	ldr	r2, [pc, #524]	; (800096c <fnReset_IRQ+0x76c>)
 8000760:	601a      	str	r2, [r3, #0]
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... ...| .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  //      QPSI Off
  RCC_AHB3ENR = 0x00000000;
 8000762:	4b84      	ldr	r3, [pc, #528]	; (8000974 <fnReset_IRQ+0x774>)
 8000764:	2200      	movs	r2, #0
 8000766:	601a      	str	r2, [r3, #0]
  RCC_AHB3SMENR = 0x00000000;
 8000768:	4b83      	ldr	r3, [pc, #524]	; (8000978 <fnReset_IRQ+0x778>)
 800076a:	2200      	movs	r2, #0
 800076c:	601a      	str	r2, [r3, #0]
  //      PWREN             28    On
  //      DAC 1             29    Off
  //      OPAMP             30    Off
  //      LPTIM 1           31    Off
  //
  RCC_APB1ENR1 = 0x10200800;
 800076e:	4b83      	ldr	r3, [pc, #524]	; (800097c <fnReset_IRQ+0x77c>)
 8000770:	4a83      	ldr	r2, [pc, #524]	; (8000980 <fnReset_IRQ+0x780>)
 8000772:	601a      	str	r2, [r3, #0]
  RCC_APB1SMENR1 = 0x10200800;
 8000774:	4b83      	ldr	r3, [pc, #524]	; (8000984 <fnReset_IRQ+0x784>)
 8000776:	4a82      	ldr	r2, [pc, #520]	; (8000980 <fnReset_IRQ+0x780>)
 8000778:	601a      	str	r2, [r3, #0]
  //
  //  LPUART 1 Ena      Off
  //  I2C4 Ena          Off
  //  LPUART 1 Ena      Off
  //  LPUART 1 Ena      Off
  RCC_APB1ENR2 = 0x00000000;
 800077a:	4b83      	ldr	r3, [pc, #524]	; (8000988 <fnReset_IRQ+0x788>)
 800077c:	2200      	movs	r2, #0
 800077e:	601a      	str	r2, [r3, #0]
  RCC_APB1SMENR2 = 0x00000000;
 8000780:	4b82      	ldr	r3, [pc, #520]	; (800098c <fnReset_IRQ+0x78c>)
 8000782:	2200      	movs	r2, #0
 8000784:	601a      	str	r2, [r3, #0]
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ...|
  //      0000 0000 0000 0000 0000 0000 0000 0001
  //
  //
  RCC_APB2ENR = 0x00000001;
 8000786:	4b82      	ldr	r3, [pc, #520]	; (8000990 <fnReset_IRQ+0x790>)
 8000788:	2201      	movs	r2, #1
 800078a:	601a      	str	r2, [r3, #0]
  RCC_APB2SMENR = 0x00000001;
 800078c:	4b81      	ldr	r3, [pc, #516]	; (8000994 <fnReset_IRQ+0x794>)
 800078e:	2201      	movs	r2, #1
 8000790:	601a      	str	r2, [r3, #0]

  //--- Wait to settle down
  nop100;
 8000792:	bf00      	nop
 8000794:	bf00      	nop
 8000796:	bf00      	nop
 8000798:	bf00      	nop
 800079a:	bf00      	nop
 800079c:	bf00      	nop
 800079e:	bf00      	nop
 80007a0:	bf00      	nop
 80007a2:	bf00      	nop
 80007a4:	bf00      	nop
 80007a6:	bf00      	nop
 80007a8:	bf00      	nop
 80007aa:	bf00      	nop
 80007ac:	bf00      	nop
 80007ae:	bf00      	nop
 80007b0:	bf00      	nop
 80007b2:	bf00      	nop
 80007b4:	bf00      	nop
 80007b6:	bf00      	nop
 80007b8:	bf00      	nop
 80007ba:	bf00      	nop
 80007bc:	bf00      	nop
 80007be:	bf00      	nop
 80007c0:	bf00      	nop
 80007c2:	bf00      	nop
 80007c4:	bf00      	nop
 80007c6:	bf00      	nop
 80007c8:	bf00      	nop
 80007ca:	bf00      	nop
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	bf00      	nop
 80007d2:	bf00      	nop
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	bf00      	nop
 80007da:	bf00      	nop
 80007dc:	bf00      	nop
 80007de:	bf00      	nop
 80007e0:	bf00      	nop
 80007e2:	bf00      	nop
 80007e4:	bf00      	nop
 80007e6:	bf00      	nop
 80007e8:	bf00      	nop
 80007ea:	bf00      	nop
 80007ec:	bf00      	nop
 80007ee:	bf00      	nop
 80007f0:	bf00      	nop
 80007f2:	bf00      	nop
 80007f4:	bf00      	nop
 80007f6:	bf00      	nop
 80007f8:	bf00      	nop
 80007fa:	bf00      	nop
 80007fc:	bf00      	nop
 80007fe:	bf00      	nop
 8000800:	bf00      	nop
 8000802:	bf00      	nop
 8000804:	bf00      	nop
 8000806:	bf00      	nop
 8000808:	bf00      	nop
 800080a:	bf00      	nop
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	bf00      	nop
 800081c:	bf00      	nop
 800081e:	bf00      	nop
 8000820:	bf00      	nop
 8000822:	bf00      	nop
 8000824:	bf00      	nop
 8000826:	bf00      	nop
 8000828:	bf00      	nop
 800082a:	bf00      	nop
 800082c:	bf00      	nop
 800082e:	bf00      	nop
 8000830:	bf00      	nop
 8000832:	bf00      	nop
 8000834:	bf00      	nop
 8000836:	bf00      	nop
 8000838:	bf00      	nop
 800083a:	bf00      	nop
 800083c:	bf00      	nop
 800083e:	bf00      	nop
 8000840:	bf00      	nop
 8000842:	bf00      	nop
 8000844:	bf00      	nop
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	bf00      	nop
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	bf00      	nop
 8000852:	bf00      	nop
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	bf00      	nop
  //      33 22 22 22 22 22 11 11 11 11 11 00 00 00 00 00
  //      10 98 76 54 32 10 98 76 54 32 10 98 76 54 32 10
  //      .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
  //      00 00.00 00.00 00.00 00.01 01.01 01.01 01.01 01
  //      OT OT OT OT OT OT OT OT OT OT OT OT OT OT OT OT
  GPIOA_MODER = 0x55555555;                       //--- Set Port Pin I/O Type A08 = MOC Out
 800085a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800085e:	f04f 3255 	mov.w	r2, #1431655765	; 0x55555555
 8000862:	601a      	str	r2, [r3, #0]
  //      GPIO OTYPE
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOA_OTYPER = 0x00000000;                      //--- All Outputs are Push/Pull
 8000864:	4b4c      	ldr	r3, [pc, #304]	; (8000998 <fnReset_IRQ+0x798>)
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
  //      33 22 22 22 22 22 11 11 11 11 11 00 00 00 00 00
  //      10 98 76 54 32 10 98 76 54 32 10 98 76 54 32 10
  //      .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
  //      11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11
  //      FS FS FS FS FS FS FS FS FS FS FS FS FS FS FS FS
  GPIOA_OSPEEDR = 0xFFFFFFFF;                     //--- Every One is High Speed
 800086a:	4b4c      	ldr	r3, [pc, #304]	; (800099c <fnReset_IRQ+0x79c>)
 800086c:	f04f 32ff 	mov.w	r2, #4294967295
 8000870:	601a      	str	r2, [r3, #0]
  //      33 22 22 22 22 22 11 11 11 11 11 00 00 00 00 00
  //      10 98 76 54 32 10 98 76 54 32 10 98 76 54 32 10
  //      .. ..|.. ..|.. ..|.. ..|.. ..|.. ..|.. ..|.. ..
  //      00 00 00 00 00 00 00 01 00 00 00 00 00 00 00 00
  //      PU PU PU NP NP PU NP PU NP NP NP NP NP NP NP NP
  GPIOA_PUPDR = 0x00000000;                       //--- Set 01 As Pull Ups
 8000872:	4b4b      	ldr	r3, [pc, #300]	; (80009a0 <fnReset_IRQ+0x7a0>)
 8000874:	2200      	movs	r2, #0
 8000876:	601a      	str	r2, [r3, #0]
  //      GPIO ODR
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOA_ODR = 0x00000000;                         //--- Start with all 0's out
 8000878:	4b4a      	ldr	r3, [pc, #296]	; (80009a4 <fnReset_IRQ+0x7a4>)
 800087a:	2200      	movs	r2, #0
 800087c:	601a      	str	r2, [r3, #0]
  //      GPIOBSRR
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOA_BSRR = 0x00000000;                        //--- Nothing to BSRR
 800087e:	4b4a      	ldr	r3, [pc, #296]	; (80009a8 <fnReset_IRQ+0x7a8>)
 8000880:	2200      	movs	r2, #0
 8000882:	601a      	str	r2, [r3, #0]
  //      GPIO LCKR
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOA_LCKR = 0x00000000;                        //--- All Ports are unlocked
 8000884:	4b49      	ldr	r3, [pc, #292]	; (80009ac <fnReset_IRQ+0x7ac>)
 8000886:	2200      	movs	r2, #0
 8000888:	601a      	str	r2, [r3, #0]
  //      GPIO AFRL
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOA_AFRL = 0x00000000;                        //--- Set AFRL to 0
 800088a:	4b49      	ldr	r3, [pc, #292]	; (80009b0 <fnReset_IRQ+0x7b0>)
 800088c:	2200      	movs	r2, #0
 800088e:	601a      	str	r2, [r3, #0]
  //      GPIO AFRH
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOA_AFRH = 0x00000000;                        //--- Set AFRH to 0
 8000890:	4b48      	ldr	r3, [pc, #288]	; (80009b4 <fnReset_IRQ+0x7b4>)
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
  //      33 22 22 22 22 22 11 11 11 11 11 00 00 00 00 00
  //      10 98 76 54 32 10 98 76 54 32 10 98 76 54 32 10
  //      .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
  //      00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
  //      IN IN.IN IN.IN IN.IN IN.IN IN.IN IN.IN IN.OT OT
  GPIOB_MODER = 0x00000005;
 8000896:	4b48      	ldr	r3, [pc, #288]	; (80009b8 <fnReset_IRQ+0x7b8>)
 8000898:	2205      	movs	r2, #5
 800089a:	601a      	str	r2, [r3, #0]
  //      GPIO OTYPE
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOB_OTYPER = 0x00000000;
 800089c:	4b47      	ldr	r3, [pc, #284]	; (80009bc <fnReset_IRQ+0x7bc>)
 800089e:	2200      	movs	r2, #0
 80008a0:	601a      	str	r2, [r3, #0]
  //      33 22 22 22 22 22 11 11 11 11 11 00 00 00 00 00
  //      10 98 76 54 32 10 98 76 54 32 10 98 76 54 32 10
  //      .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
  //      11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11
  //      FS FS FS FS FS FS FS FS FS FS FS FS FS FS FS FS
  GPIOB_OSPEEDR = 0xFFFFFFFF;
 80008a2:	4b47      	ldr	r3, [pc, #284]	; (80009c0 <fnReset_IRQ+0x7c0>)
 80008a4:	f04f 32ff 	mov.w	r2, #4294967295
 80008a8:	601a      	str	r2, [r3, #0]
  //      15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
  //      33 22 22 22 22 22 11 11 11 11 11 00 00 00 00 00
  //      10 98 76 54 32 10 98 76 54 32 10 98 76 54 32 10
  //      .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
  //      00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  GPIOB_PUPDR = 0x00000000;
 80008aa:	4b46      	ldr	r3, [pc, #280]	; (80009c4 <fnReset_IRQ+0x7c4>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	601a      	str	r2, [r3, #0]
  //      GPIO ODR
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOB_ODR = 0x00000000;
 80008b0:	4b45      	ldr	r3, [pc, #276]	; (80009c8 <fnReset_IRQ+0x7c8>)
 80008b2:	2200      	movs	r2, #0
 80008b4:	601a      	str	r2, [r3, #0]
  //      GPIOBSRR
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOB_BSRR = 0x00000000;
 80008b6:	4b45      	ldr	r3, [pc, #276]	; (80009cc <fnReset_IRQ+0x7cc>)
 80008b8:	2200      	movs	r2, #0
 80008ba:	601a      	str	r2, [r3, #0]
  //      GPIO LCKR
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOB_LCKR = 0x00000000;
 80008bc:	4b44      	ldr	r3, [pc, #272]	; (80009d0 <fnReset_IRQ+0x7d0>)
 80008be:	2200      	movs	r2, #0
 80008c0:	601a      	str	r2, [r3, #0]
  //      GPIO AFRL
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0100 0100 0000 0000 0000 0000 0000 0000
  GPIOB_AFRL = 0x00000000;
 80008c2:	4b44      	ldr	r3, [pc, #272]	; (80009d4 <fnReset_IRQ+0x7d4>)
 80008c4:	2200      	movs	r2, #0
 80008c6:	601a      	str	r2, [r3, #0]
  //      GPIO AFRH
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOB_AFRH = 0x00000000;
 80008c8:	4b43      	ldr	r3, [pc, #268]	; (80009d8 <fnReset_IRQ+0x7d8>)
 80008ca:	2200      	movs	r2, #0
 80008cc:	601a      	str	r2, [r3, #0]

  //--- Waste a little Time for things to settle down
  nop48;
 80008ce:	bf00      	nop
 80008d0:	bf00      	nop
 80008d2:	bf00      	nop
 80008d4:	bf00      	nop
 80008d6:	bf00      	nop
 80008d8:	bf00      	nop
 80008da:	bf00      	nop
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop
 80008e8:	bf00      	nop
 80008ea:	bf00      	nop
 80008ec:	bf00      	nop
 80008ee:	bf00      	nop
 80008f0:	bf00      	nop
 80008f2:	bf00      	nop
 80008f4:	bf00      	nop
 80008f6:	bf00      	nop
 80008f8:	bf00      	nop
 80008fa:	bf00      	nop
 80008fc:	bf00      	nop
 80008fe:	bf00      	nop
 8000900:	bf00      	nop
 8000902:	bf00      	nop
 8000904:	bf00      	nop
 8000906:	bf00      	nop
 8000908:	bf00      	nop
 800090a:	bf00      	nop
 800090c:	bf00      	nop
 800090e:	bf00      	nop
 8000910:	bf00      	nop
 8000912:	bf00      	nop
 8000914:	bf00      	nop
 8000916:	bf00      	nop
 8000918:	bf00      	nop
 800091a:	bf00      	nop
 800091c:	bf00      	nop
 800091e:	bf00      	nop
 8000920:	bf00      	nop
 8000922:	bf00      	nop
 8000924:	bf00      	nop
 8000926:	bf00      	nop
 8000928:	bf00      	nop
 800092a:	bf00      	nop
 800092c:	bf00      	nop
  //      33 22 22 22 22 22 11 11 11 11 11 00 00 00 00 00
  //      10 98 76 54 32 10 98 76 54 32 10 98 76 54 32 10
  //      .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
  //      01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  //      OT IN.IN IN.IN IN.IN IN.IN IN.IN IN.IN IN.IN IN
  GPIOC_MODER = 0x40000000;
 800092e:	4b2b      	ldr	r3, [pc, #172]	; (80009dc <fnReset_IRQ+0x7dc>)
 8000930:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000934:	601a      	str	r2, [r3, #0]
  //      GPIO OTYPE
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOC_OTYPER = 0x00000000;
 8000936:	4b2a      	ldr	r3, [pc, #168]	; (80009e0 <fnReset_IRQ+0x7e0>)
 8000938:	2200      	movs	r2, #0
 800093a:	601a      	str	r2, [r3, #0]
  //      33 22 22 22 22 22 11 11 11 11 11 00 00 00 00 00
  //      10 98 76 54 32 10 98 76 54 32 10 98 76 54 32 10
  //      .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
  //      11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11
  //      FS FS FS FS FS FS FS FS FS FS FS FS FS FS FS FS
  GPIOC_OSPEEDR = 0xFFFFFFFF;
 800093c:	4b29      	ldr	r3, [pc, #164]	; (80009e4 <fnReset_IRQ+0x7e4>)
 800093e:	f04f 32ff 	mov.w	r2, #4294967295
 8000942:	601a      	str	r2, [r3, #0]
  //      15 14 13 12 11 10 09 08 07 06 05 04 03 02 01 00
  //      33 22 22 22 22 22 11 11 11 11 11 00 00 00 00 00
  //      10 98 76 54 32 10 98 76 54 32 10 98 76 54 32 10
  //      .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
  //      00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  GPIOC_PUPDR = 0x00000000;
 8000944:	4b28      	ldr	r3, [pc, #160]	; (80009e8 <fnReset_IRQ+0x7e8>)
 8000946:	2200      	movs	r2, #0
 8000948:	601a      	str	r2, [r3, #0]
  //      GPIO ODR
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOC_ODR = 0x00000000;
 800094a:	4b28      	ldr	r3, [pc, #160]	; (80009ec <fnReset_IRQ+0x7ec>)
 800094c:	2200      	movs	r2, #0
 800094e:	601a      	str	r2, [r3, #0]
  //      GPIOBSRR
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOC_BSRR = 0x00000000;
 8000950:	4b27      	ldr	r3, [pc, #156]	; (80009f0 <fnReset_IRQ+0x7f0>)
 8000952:	2200      	movs	r2, #0
 8000954:	601a      	str	r2, [r3, #0]
 8000956:	e04d      	b.n	80009f4 <fnReset_IRQ+0x7f4>
 8000958:	20000434 	.word	0x20000434
 800095c:	40021088 	.word	0x40021088
 8000960:	40021048 	.word	0x40021048
 8000964:	40021068 	.word	0x40021068
 8000968:	4002104c 	.word	0x4002104c
 800096c:	00040007 	.word	0x00040007
 8000970:	4002106c 	.word	0x4002106c
 8000974:	40021050 	.word	0x40021050
 8000978:	40021070 	.word	0x40021070
 800097c:	40021058 	.word	0x40021058
 8000980:	10200800 	.word	0x10200800
 8000984:	40021078 	.word	0x40021078
 8000988:	4002105c 	.word	0x4002105c
 800098c:	4002107c 	.word	0x4002107c
 8000990:	40021060 	.word	0x40021060
 8000994:	40021080 	.word	0x40021080
 8000998:	48000004 	.word	0x48000004
 800099c:	48000008 	.word	0x48000008
 80009a0:	4800000c 	.word	0x4800000c
 80009a4:	48000014 	.word	0x48000014
 80009a8:	48000018 	.word	0x48000018
 80009ac:	4800001c 	.word	0x4800001c
 80009b0:	48000020 	.word	0x48000020
 80009b4:	48000024 	.word	0x48000024
 80009b8:	48000400 	.word	0x48000400
 80009bc:	48000404 	.word	0x48000404
 80009c0:	48000408 	.word	0x48000408
 80009c4:	4800040c 	.word	0x4800040c
 80009c8:	48000414 	.word	0x48000414
 80009cc:	48000418 	.word	0x48000418
 80009d0:	4800041c 	.word	0x4800041c
 80009d4:	48000420 	.word	0x48000420
 80009d8:	48000424 	.word	0x48000424
 80009dc:	48000800 	.word	0x48000800
 80009e0:	48000804 	.word	0x48000804
 80009e4:	48000808 	.word	0x48000808
 80009e8:	4800080c 	.word	0x4800080c
 80009ec:	48000814 	.word	0x48000814
 80009f0:	48000818 	.word	0x48000818
  //      GPIO LCKR
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOC_LCKR = 0x00000000;
 80009f4:	4b54      	ldr	r3, [pc, #336]	; (8000b48 <fnReset_IRQ+0x948>)
 80009f6:	2200      	movs	r2, #0
 80009f8:	601a      	str	r2, [r3, #0]
  //      GPIO AFRL
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0100 0100 0000 0000 0000 0000 0000 0000
  GPIOC_AFRL = 0x00000000;
 80009fa:	4b54      	ldr	r3, [pc, #336]	; (8000b4c <fnReset_IRQ+0x94c>)
 80009fc:	2200      	movs	r2, #0
 80009fe:	601a      	str	r2, [r3, #0]
  //      GPIO AFRH
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOC_AFRH = 0x00000000;
 8000a00:	4b53      	ldr	r3, [pc, #332]	; (8000b50 <fnReset_IRQ+0x950>)
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]

  //--- Waste a little Time for things to settle down
  nop48;
 8000a06:	bf00      	nop
 8000a08:	bf00      	nop
 8000a0a:	bf00      	nop
 8000a0c:	bf00      	nop
 8000a0e:	bf00      	nop
 8000a10:	bf00      	nop
 8000a12:	bf00      	nop
 8000a14:	bf00      	nop
 8000a16:	bf00      	nop
 8000a18:	bf00      	nop
 8000a1a:	bf00      	nop
 8000a1c:	bf00      	nop
 8000a1e:	bf00      	nop
 8000a20:	bf00      	nop
 8000a22:	bf00      	nop
 8000a24:	bf00      	nop
 8000a26:	bf00      	nop
 8000a28:	bf00      	nop
 8000a2a:	bf00      	nop
 8000a2c:	bf00      	nop
 8000a2e:	bf00      	nop
 8000a30:	bf00      	nop
 8000a32:	bf00      	nop
 8000a34:	bf00      	nop
 8000a36:	bf00      	nop
 8000a38:	bf00      	nop
 8000a3a:	bf00      	nop
 8000a3c:	bf00      	nop
 8000a3e:	bf00      	nop
 8000a40:	bf00      	nop
 8000a42:	bf00      	nop
 8000a44:	bf00      	nop
 8000a46:	bf00      	nop
 8000a48:	bf00      	nop
 8000a4a:	bf00      	nop
 8000a4c:	bf00      	nop
 8000a4e:	bf00      	nop
 8000a50:	bf00      	nop
 8000a52:	bf00      	nop
 8000a54:	bf00      	nop
 8000a56:	bf00      	nop
 8000a58:	bf00      	nop
 8000a5a:	bf00      	nop
 8000a5c:	bf00      	nop
 8000a5e:	bf00      	nop
 8000a60:	bf00      	nop
 8000a62:	bf00      	nop
 8000a64:	bf00      	nop

  //--- Enable FPU
  FPU_ENA;
 8000a66:	f8df 0104 	ldr.w	r0, [pc, #260]	; 8000b6c <fnReset_IRQ+0x96c>
 8000a6a:	6801      	ldr	r1, [r0, #0]
 8000a6c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000a70:	6001      	str	r1, [r0, #0]
 8000a72:	f3bf 8f4f 	dsb	sy
 8000a76:	f3bf 8f6f 	isb	sy
  //      VREFBUF
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0101
  VREFBUF_CSR = 0x00000005;                     //--- VREF = 2.500V Internal Ref
 8000a7a:	4b36      	ldr	r3, [pc, #216]	; (8000b54 <fnReset_IRQ+0x954>)
 8000a7c:	2205      	movs	r2, #5
 8000a7e:	601a      	str	r2, [r3, #0]
  //  VREFBUF_CSR = 0x00000001;                     //--- VREF = 2.048V Internal Ref
  //  VREFBUF_CSR = 0x00000000;                     //--- VREF = External Reference


  //--- Start Up SysTick Timer As Pacer Set for 10 KHz
  STK_LOAD = 899;
 8000a80:	4b35      	ldr	r3, [pc, #212]	; (8000b58 <fnReset_IRQ+0x958>)
 8000a82:	f240 3283 	movw	r2, #899	; 0x383
 8000a86:	601a      	str	r2, [r3, #0]
  STK_VAL = 0;
 8000a88:	4b34      	ldr	r3, [pc, #208]	; (8000b5c <fnReset_IRQ+0x95c>)
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	601a      	str	r2, [r3, #0]
  STK_CTRL = 0x00000007;
 8000a8e:	4b34      	ldr	r3, [pc, #208]	; (8000b60 <fnReset_IRQ+0x960>)
 8000a90:	2207      	movs	r2, #7
 8000a92:	601a      	str	r2, [r3, #0]

  //--- Show that Init Complete
  ulSystemFlags |= 0x00000020;                  //--- Success = Hi
 8000a94:	4b33      	ldr	r3, [pc, #204]	; (8000b64 <fnReset_IRQ+0x964>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f043 0320 	orr.w	r3, r3, #32
 8000a9c:	4a31      	ldr	r2, [pc, #196]	; (8000b64 <fnReset_IRQ+0x964>)
 8000a9e:	6013      	str	r3, [r2, #0]

  //--- Set Port A to reflect ulSystemFlags from Boot Sequence
  if (ulSystemFlags & 0x00000001) SET_PA00;
 8000aa0:	4b30      	ldr	r3, [pc, #192]	; (8000b64 <fnReset_IRQ+0x964>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	f003 0301 	and.w	r3, r3, #1
 8000aa8:	2b00      	cmp	r3, #0
 8000aaa:	d002      	beq.n	8000ab2 <fnReset_IRQ+0x8b2>
 8000aac:	4b2e      	ldr	r3, [pc, #184]	; (8000b68 <fnReset_IRQ+0x968>)
 8000aae:	2201      	movs	r2, #1
 8000ab0:	601a      	str	r2, [r3, #0]
  if (ulSystemFlags & 0x00000002) SET_PA01;
 8000ab2:	4b2c      	ldr	r3, [pc, #176]	; (8000b64 <fnReset_IRQ+0x964>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	f003 0302 	and.w	r3, r3, #2
 8000aba:	2b00      	cmp	r3, #0
 8000abc:	d002      	beq.n	8000ac4 <fnReset_IRQ+0x8c4>
 8000abe:	4b2a      	ldr	r3, [pc, #168]	; (8000b68 <fnReset_IRQ+0x968>)
 8000ac0:	2202      	movs	r2, #2
 8000ac2:	601a      	str	r2, [r3, #0]
  if (ulSystemFlags & 0x00000004) SET_PA02;
 8000ac4:	4b27      	ldr	r3, [pc, #156]	; (8000b64 <fnReset_IRQ+0x964>)
 8000ac6:	681b      	ldr	r3, [r3, #0]
 8000ac8:	f003 0304 	and.w	r3, r3, #4
 8000acc:	2b00      	cmp	r3, #0
 8000ace:	d002      	beq.n	8000ad6 <fnReset_IRQ+0x8d6>
 8000ad0:	4b25      	ldr	r3, [pc, #148]	; (8000b68 <fnReset_IRQ+0x968>)
 8000ad2:	2204      	movs	r2, #4
 8000ad4:	601a      	str	r2, [r3, #0]
  if (ulSystemFlags & 0x00000008) SET_PA03;
 8000ad6:	4b23      	ldr	r3, [pc, #140]	; (8000b64 <fnReset_IRQ+0x964>)
 8000ad8:	681b      	ldr	r3, [r3, #0]
 8000ada:	f003 0308 	and.w	r3, r3, #8
 8000ade:	2b00      	cmp	r3, #0
 8000ae0:	d002      	beq.n	8000ae8 <fnReset_IRQ+0x8e8>
 8000ae2:	4b21      	ldr	r3, [pc, #132]	; (8000b68 <fnReset_IRQ+0x968>)
 8000ae4:	2208      	movs	r2, #8
 8000ae6:	601a      	str	r2, [r3, #0]
  if (ulSystemFlags & 0x00000010) SET_PA04;
 8000ae8:	4b1e      	ldr	r3, [pc, #120]	; (8000b64 <fnReset_IRQ+0x964>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	f003 0310 	and.w	r3, r3, #16
 8000af0:	2b00      	cmp	r3, #0
 8000af2:	d002      	beq.n	8000afa <fnReset_IRQ+0x8fa>
 8000af4:	4b1c      	ldr	r3, [pc, #112]	; (8000b68 <fnReset_IRQ+0x968>)
 8000af6:	2210      	movs	r2, #16
 8000af8:	601a      	str	r2, [r3, #0]
  if (ulSystemFlags & 0x00000020) SET_PA05;
 8000afa:	4b1a      	ldr	r3, [pc, #104]	; (8000b64 <fnReset_IRQ+0x964>)
 8000afc:	681b      	ldr	r3, [r3, #0]
 8000afe:	f003 0320 	and.w	r3, r3, #32
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d002      	beq.n	8000b0c <fnReset_IRQ+0x90c>
 8000b06:	4b18      	ldr	r3, [pc, #96]	; (8000b68 <fnReset_IRQ+0x968>)
 8000b08:	2220      	movs	r2, #32
 8000b0a:	601a      	str	r2, [r3, #0]

  nop24;
 8000b0c:	bf00      	nop
 8000b0e:	bf00      	nop
 8000b10:	bf00      	nop
 8000b12:	bf00      	nop
 8000b14:	bf00      	nop
 8000b16:	bf00      	nop
 8000b18:	bf00      	nop
 8000b1a:	bf00      	nop
 8000b1c:	bf00      	nop
 8000b1e:	bf00      	nop
 8000b20:	bf00      	nop
 8000b22:	bf00      	nop
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	bf00      	nop
 8000b2e:	bf00      	nop
 8000b30:	bf00      	nop
 8000b32:	bf00      	nop
 8000b34:	bf00      	nop
 8000b36:	bf00      	nop
 8000b38:	bf00      	nop
 8000b3a:	bf00      	nop

  //--- Call the Main Function after basic boot complete
  main();
 8000b3c:	f002 fe9a 	bl	8003874 <main>
}
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	4800081c 	.word	0x4800081c
 8000b4c:	48000820 	.word	0x48000820
 8000b50:	48000824 	.word	0x48000824
 8000b54:	40010030 	.word	0x40010030
 8000b58:	e000e014 	.word	0xe000e014
 8000b5c:	e000e018 	.word	0xe000e018
 8000b60:	e000e010 	.word	0xe000e010
 8000b64:	20000434 	.word	0x20000434
 8000b68:	48000018 	.word	0x48000018
 8000b6c:	e000ed88 	.word	0xe000ed88

08000b70 <fnZeroString>:

//---------------------------------------------------------------------------------------------
//                        Zero All of a Strings Member Bytes n Length
//---------------------------------------------------------------------------------------------
void  fnZeroString (u08 ubS[], u16 uwLen)
{
 8000b70:	b480      	push	{r7}
 8000b72:	b085      	sub	sp, #20
 8000b74:	af00      	add	r7, sp, #0
 8000b76:	6078      	str	r0, [r7, #4]
 8000b78:	460b      	mov	r3, r1
 8000b7a:	807b      	strh	r3, [r7, #2]
  u16 uwP;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  if ((uwLen <1) || (uwLen > 8)) return;        //--- Exit if bad length
 8000b7c:	887b      	ldrh	r3, [r7, #2]
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d012      	beq.n	8000ba8 <fnZeroString+0x38>
 8000b82:	887b      	ldrh	r3, [r7, #2]
 8000b84:	2b08      	cmp	r3, #8
 8000b86:	d80f      	bhi.n	8000ba8 <fnZeroString+0x38>

  for (uwP = 0; uwP < uwLen; uwP++)
 8000b88:	2300      	movs	r3, #0
 8000b8a:	81fb      	strh	r3, [r7, #14]
 8000b8c:	e007      	b.n	8000b9e <fnZeroString+0x2e>
  {
    ubS[uwP] = 0;
 8000b8e:	89fb      	ldrh	r3, [r7, #14]
 8000b90:	687a      	ldr	r2, [r7, #4]
 8000b92:	4413      	add	r3, r2
 8000b94:	2200      	movs	r2, #0
 8000b96:	701a      	strb	r2, [r3, #0]
  for (uwP = 0; uwP < uwLen; uwP++)
 8000b98:	89fb      	ldrh	r3, [r7, #14]
 8000b9a:	3301      	adds	r3, #1
 8000b9c:	81fb      	strh	r3, [r7, #14]
 8000b9e:	89fa      	ldrh	r2, [r7, #14]
 8000ba0:	887b      	ldrh	r3, [r7, #2]
 8000ba2:	429a      	cmp	r2, r3
 8000ba4:	d3f3      	bcc.n	8000b8e <fnZeroString+0x1e>
 8000ba6:	e000      	b.n	8000baa <fnZeroString+0x3a>
  if ((uwLen <1) || (uwLen > 8)) return;        //--- Exit if bad length
 8000ba8:	bf00      	nop
  }
}
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <fnMergString>:

//---------------------------------------------------------------------------------------------
//                          Place a string within another string
//---------------------------------------------------------------------------------------------
u32   fnMergString (u08 ubDst[], u08 ubSrc[], u16 uwPos, u16 uwLen)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	4611      	mov	r1, r2
 8000bc0:	461a      	mov	r2, r3
 8000bc2:	460b      	mov	r3, r1
 8000bc4:	80fb      	strh	r3, [r7, #6]
 8000bc6:	4613      	mov	r3, r2
 8000bc8:	80bb      	strh	r3, [r7, #4]
  u16 uwLS;
  u16 uwP;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  uwLS = strlen(ubSrc);
 8000bca:	68b8      	ldr	r0, [r7, #8]
 8000bcc:	f003 fc78 	bl	80044c0 <strlen>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	82bb      	strh	r3, [r7, #20]
  uwLD = strlen(ubDst);
 8000bd4:	68f8      	ldr	r0, [r7, #12]
 8000bd6:	f003 fc73 	bl	80044c0 <strlen>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	827b      	strh	r3, [r7, #18]

  //--- Test that all the lengths are within range

  if (uwLen > uwLD) return FALSE;                 //--- Destination too small
 8000bde:	88ba      	ldrh	r2, [r7, #4]
 8000be0:	8a7b      	ldrh	r3, [r7, #18]
 8000be2:	429a      	cmp	r2, r3
 8000be4:	d901      	bls.n	8000bea <fnMergString+0x36>
 8000be6:	2300      	movs	r3, #0
 8000be8:	e02e      	b.n	8000c48 <fnMergString+0x94>
  if (uwLen > uwLS) return FALSE;                 //--- Source too small
 8000bea:	88ba      	ldrh	r2, [r7, #4]
 8000bec:	8abb      	ldrh	r3, [r7, #20]
 8000bee:	429a      	cmp	r2, r3
 8000bf0:	d901      	bls.n	8000bf6 <fnMergString+0x42>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	e028      	b.n	8000c48 <fnMergString+0x94>
  if ((!uwLS) || (!uwLD) || (!uwLen)) return FALSE; //--- Zero length strings
 8000bf6:	8abb      	ldrh	r3, [r7, #20]
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d005      	beq.n	8000c08 <fnMergString+0x54>
 8000bfc:	8a7b      	ldrh	r3, [r7, #18]
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d002      	beq.n	8000c08 <fnMergString+0x54>
 8000c02:	88bb      	ldrh	r3, [r7, #4]
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d101      	bne.n	8000c0c <fnMergString+0x58>
 8000c08:	2300      	movs	r3, #0
 8000c0a:	e01d      	b.n	8000c48 <fnMergString+0x94>
  if ((uwPos + uwLen) > uwLD) return FALSE;       //--- Result won't fit
 8000c0c:	88fa      	ldrh	r2, [r7, #6]
 8000c0e:	88bb      	ldrh	r3, [r7, #4]
 8000c10:	441a      	add	r2, r3
 8000c12:	8a7b      	ldrh	r3, [r7, #18]
 8000c14:	429a      	cmp	r2, r3
 8000c16:	dd01      	ble.n	8000c1c <fnMergString+0x68>
 8000c18:	2300      	movs	r3, #0
 8000c1a:	e015      	b.n	8000c48 <fnMergString+0x94>

  //--- Copy characters from Src to Dst

  for (uwP = 0; uwP < uwLen; uwP++)
 8000c1c:	2300      	movs	r3, #0
 8000c1e:	82fb      	strh	r3, [r7, #22]
 8000c20:	e00d      	b.n	8000c3e <fnMergString+0x8a>
  {
    ubDst[uwPos + uwP] = ubSrc[uwP];
 8000c22:	8afb      	ldrh	r3, [r7, #22]
 8000c24:	68ba      	ldr	r2, [r7, #8]
 8000c26:	441a      	add	r2, r3
 8000c28:	88f9      	ldrh	r1, [r7, #6]
 8000c2a:	8afb      	ldrh	r3, [r7, #22]
 8000c2c:	440b      	add	r3, r1
 8000c2e:	4619      	mov	r1, r3
 8000c30:	68fb      	ldr	r3, [r7, #12]
 8000c32:	440b      	add	r3, r1
 8000c34:	7812      	ldrb	r2, [r2, #0]
 8000c36:	701a      	strb	r2, [r3, #0]
  for (uwP = 0; uwP < uwLen; uwP++)
 8000c38:	8afb      	ldrh	r3, [r7, #22]
 8000c3a:	3301      	adds	r3, #1
 8000c3c:	82fb      	strh	r3, [r7, #22]
 8000c3e:	8afa      	ldrh	r2, [r7, #22]
 8000c40:	88bb      	ldrh	r3, [r7, #4]
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d3ed      	bcc.n	8000c22 <fnMergString+0x6e>
  }

  return TRUE;
 8000c46:	2301      	movs	r3, #1
}
 8000c48:	4618      	mov	r0, r3
 8000c4a:	3718      	adds	r7, #24
 8000c4c:	46bd      	mov	sp, r7
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <fnFindSinS>:
//                       Find one string inside of another String
//
//           Returns (-1) if not found or Character N+1 for Starting Location
//---------------------------------------------------------------------------------------------
s16   fnFindSinS (u08 ubFind[], u08 ubSrc[])
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	b086      	sub	sp, #24
 8000c54:	af00      	add	r7, sp, #0
 8000c56:	6078      	str	r0, [r7, #4]
 8000c58:	6039      	str	r1, [r7, #0]
  u16 uwA;
  u16 uwB;
  u16 uwFlag;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  uwLF = fnStrLen (ubFind);
 8000c5a:	6878      	ldr	r0, [r7, #4]
 8000c5c:	f000 f9b8 	bl	8000fd0 <fnStrLen>
 8000c60:	4603      	mov	r3, r0
 8000c62:	823b      	strh	r3, [r7, #16]
  uwLS = fnStrLen (ubSrc);
 8000c64:	6838      	ldr	r0, [r7, #0]
 8000c66:	f000 f9b3 	bl	8000fd0 <fnStrLen>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	81fb      	strh	r3, [r7, #14]

  //--- Scan Source String for "Find" String
  for (uwA = 0; uwA < (uwLS - uwLF); uwA++)
 8000c6e:	2300      	movs	r3, #0
 8000c70:	82fb      	strh	r3, [r7, #22]
 8000c72:	e024      	b.n	8000cbe <fnFindSinS+0x6e>
  {
    uwFlag = TRUE;                                //--- Preset Flag for Success
 8000c74:	2301      	movs	r3, #1
 8000c76:	827b      	strh	r3, [r7, #18]
    for (uwB = 0; uwB < uwLF; uwB++)
 8000c78:	2300      	movs	r3, #0
 8000c7a:	82bb      	strh	r3, [r7, #20]
 8000c7c:	e012      	b.n	8000ca4 <fnFindSinS+0x54>
    {
      if (ubSrc[uwA+uwB] != ubFind[uwB])          //--- Check each Src byte for match in Find
 8000c7e:	8afa      	ldrh	r2, [r7, #22]
 8000c80:	8abb      	ldrh	r3, [r7, #20]
 8000c82:	4413      	add	r3, r2
 8000c84:	461a      	mov	r2, r3
 8000c86:	683b      	ldr	r3, [r7, #0]
 8000c88:	4413      	add	r3, r2
 8000c8a:	781a      	ldrb	r2, [r3, #0]
 8000c8c:	8abb      	ldrh	r3, [r7, #20]
 8000c8e:	6879      	ldr	r1, [r7, #4]
 8000c90:	440b      	add	r3, r1
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	429a      	cmp	r2, r3
 8000c96:	d002      	beq.n	8000c9e <fnFindSinS+0x4e>
      {
        uwFlag = FALSE;                           //--- If non match set flag & Exit
 8000c98:	2300      	movs	r3, #0
 8000c9a:	827b      	strh	r3, [r7, #18]
        break;
 8000c9c:	e006      	b.n	8000cac <fnFindSinS+0x5c>
    for (uwB = 0; uwB < uwLF; uwB++)
 8000c9e:	8abb      	ldrh	r3, [r7, #20]
 8000ca0:	3301      	adds	r3, #1
 8000ca2:	82bb      	strh	r3, [r7, #20]
 8000ca4:	8aba      	ldrh	r2, [r7, #20]
 8000ca6:	8a3b      	ldrh	r3, [r7, #16]
 8000ca8:	429a      	cmp	r2, r3
 8000caa:	d3e8      	bcc.n	8000c7e <fnFindSinS+0x2e>
      }
    }

    //--- If every thing matched then exit function with pos16er to start of string
    if (uwFlag)
 8000cac:	8a7b      	ldrh	r3, [r7, #18]
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d002      	beq.n	8000cb8 <fnFindSinS+0x68>
    {
      return uwA;
 8000cb2:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000cb6:	e00a      	b.n	8000cce <fnFindSinS+0x7e>
  for (uwA = 0; uwA < (uwLS - uwLF); uwA++)
 8000cb8:	8afb      	ldrh	r3, [r7, #22]
 8000cba:	3301      	adds	r3, #1
 8000cbc:	82fb      	strh	r3, [r7, #22]
 8000cbe:	8afa      	ldrh	r2, [r7, #22]
 8000cc0:	89f9      	ldrh	r1, [r7, #14]
 8000cc2:	8a3b      	ldrh	r3, [r7, #16]
 8000cc4:	1acb      	subs	r3, r1, r3
 8000cc6:	429a      	cmp	r2, r3
 8000cc8:	dbd4      	blt.n	8000c74 <fnFindSinS+0x24>
    }
  }
  return -1;                                      //--- -1 is failed to find
 8000cca:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000cce:	4618      	mov	r0, r3
 8000cd0:	3718      	adds	r7, #24
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <fnGrabArrayBytes>:

//---------------------------------------------------------------------------------------------
//                          Extract Part of A Character Array
//---------------------------------------------------------------------------------------------
void  fnGrabArrayBytes (u08 ubDstArray[], u08 ubSrcArray[], u16 uwPtr, u16 uwCount)
{
 8000cd6:	b480      	push	{r7}
 8000cd8:	b087      	sub	sp, #28
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	4611      	mov	r1, r2
 8000ce2:	461a      	mov	r2, r3
 8000ce4:	460b      	mov	r3, r1
 8000ce6:	80fb      	strh	r3, [r7, #6]
 8000ce8:	4613      	mov	r3, r2
 8000cea:	80bb      	strh	r3, [r7, #4]
  u16 uwC;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  for (uwC = 0; uwC < uwCount; uwC++)
 8000cec:	2300      	movs	r3, #0
 8000cee:	82fb      	strh	r3, [r7, #22]
 8000cf0:	e00d      	b.n	8000d0e <fnGrabArrayBytes+0x38>
  {
    ubDstArray[uwC] = ubSrcArray[uwPtr];
 8000cf2:	88fb      	ldrh	r3, [r7, #6]
 8000cf4:	68ba      	ldr	r2, [r7, #8]
 8000cf6:	441a      	add	r2, r3
 8000cf8:	8afb      	ldrh	r3, [r7, #22]
 8000cfa:	68f9      	ldr	r1, [r7, #12]
 8000cfc:	440b      	add	r3, r1
 8000cfe:	7812      	ldrb	r2, [r2, #0]
 8000d00:	701a      	strb	r2, [r3, #0]
    uwPtr++;
 8000d02:	88fb      	ldrh	r3, [r7, #6]
 8000d04:	3301      	adds	r3, #1
 8000d06:	80fb      	strh	r3, [r7, #6]
  for (uwC = 0; uwC < uwCount; uwC++)
 8000d08:	8afb      	ldrh	r3, [r7, #22]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	82fb      	strh	r3, [r7, #22]
 8000d0e:	8afa      	ldrh	r2, [r7, #22]
 8000d10:	88bb      	ldrh	r3, [r7, #4]
 8000d12:	429a      	cmp	r2, r3
 8000d14:	d3ed      	bcc.n	8000cf2 <fnGrabArrayBytes+0x1c>
  }
}
 8000d16:	bf00      	nop
 8000d18:	bf00      	nop
 8000d1a:	371c      	adds	r7, #28
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d22:	4770      	bx	lr

08000d24 <fnLTRIM>:

//---------------------------------------------------------------------------------------------
//                         Remove Left Most Tabs and Spaces from String
//---------------------------------------------------------------------------------------------
u32  fnLTRIM (u08  ubSrc[])
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  u32 ulP;
  u32 ulL;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  ulL = strlen (ubSrc);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f003 fbc7 	bl	80044c0 <strlen>
 8000d32:	60b8      	str	r0, [r7, #8]

  if (!ulL) return ulL;
 8000d34:	68bb      	ldr	r3, [r7, #8]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d11d      	bne.n	8000d76 <fnLTRIM+0x52>
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	e028      	b.n	8000d90 <fnLTRIM+0x6c>

  //--- Test for Space or TAB as First Character

  while ((ubSrc[0] == 0x20) || (ubSrc[0] == 0x09))
  {
    for (ulP = 0; ulP < (ulL - 1); ulP++)
 8000d3e:	2300      	movs	r3, #0
 8000d40:	60fb      	str	r3, [r7, #12]
 8000d42:	e00b      	b.n	8000d5c <fnLTRIM+0x38>
    {
      ubSrc[ulP] = ubSrc[ulP + 1];
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	3301      	adds	r3, #1
 8000d48:	687a      	ldr	r2, [r7, #4]
 8000d4a:	441a      	add	r2, r3
 8000d4c:	6879      	ldr	r1, [r7, #4]
 8000d4e:	68fb      	ldr	r3, [r7, #12]
 8000d50:	440b      	add	r3, r1
 8000d52:	7812      	ldrb	r2, [r2, #0]
 8000d54:	701a      	strb	r2, [r3, #0]
    for (ulP = 0; ulP < (ulL - 1); ulP++)
 8000d56:	68fb      	ldr	r3, [r7, #12]
 8000d58:	3301      	adds	r3, #1
 8000d5a:	60fb      	str	r3, [r7, #12]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	3b01      	subs	r3, #1
 8000d60:	68fa      	ldr	r2, [r7, #12]
 8000d62:	429a      	cmp	r2, r3
 8000d64:	d3ee      	bcc.n	8000d44 <fnLTRIM+0x20>
    }
    ubSrc[ulP] = 0;
 8000d66:	687a      	ldr	r2, [r7, #4]
 8000d68:	68fb      	ldr	r3, [r7, #12]
 8000d6a:	4413      	add	r3, r2
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
    ulL--;
 8000d70:	68bb      	ldr	r3, [r7, #8]
 8000d72:	3b01      	subs	r3, #1
 8000d74:	60bb      	str	r3, [r7, #8]
  while ((ubSrc[0] == 0x20) || (ubSrc[0] == 0x09))
 8000d76:	687b      	ldr	r3, [r7, #4]
 8000d78:	781b      	ldrb	r3, [r3, #0]
 8000d7a:	2b20      	cmp	r3, #32
 8000d7c:	d0df      	beq.n	8000d3e <fnLTRIM+0x1a>
 8000d7e:	687b      	ldr	r3, [r7, #4]
 8000d80:	781b      	ldrb	r3, [r3, #0]
 8000d82:	2b09      	cmp	r3, #9
 8000d84:	d0db      	beq.n	8000d3e <fnLTRIM+0x1a>
  }

  ulL = strlen (ubSrc);
 8000d86:	6878      	ldr	r0, [r7, #4]
 8000d88:	f003 fb9a 	bl	80044c0 <strlen>
 8000d8c:	60b8      	str	r0, [r7, #8]
  return ulL;
 8000d8e:	68bb      	ldr	r3, [r7, #8]
}
 8000d90:	4618      	mov	r0, r3
 8000d92:	3710      	adds	r7, #16
 8000d94:	46bd      	mov	sp, r7
 8000d96:	bd80      	pop	{r7, pc}

08000d98 <fnRTRIM>:

//---------------------------------------------------------------------------------------------
//                        Remove Right Most Tabs and Spaces from String
//---------------------------------------------------------------------------------------------
u32  fnRTRIM (u08  ubSrc[])
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  u32 ulP;
  u32 ulL;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  ulL = strlen (ubSrc);
 8000da0:	6878      	ldr	r0, [r7, #4]
 8000da2:	f003 fb8d 	bl	80044c0 <strlen>
 8000da6:	60b8      	str	r0, [r7, #8]

  if (!ulL) return ulL;
 8000da8:	68bb      	ldr	r3, [r7, #8]
 8000daa:	2b00      	cmp	r3, #0
 8000dac:	d101      	bne.n	8000db2 <fnRTRIM+0x1a>
 8000dae:	68bb      	ldr	r3, [r7, #8]
 8000db0:	e022      	b.n	8000df8 <fnRTRIM+0x60>
  ulP = ulL - 1;
 8000db2:	68bb      	ldr	r3, [r7, #8]
 8000db4:	3b01      	subs	r3, #1
 8000db6:	60fb      	str	r3, [r7, #12]

  //--- Test for Space or TAB as First Character

  while (((ubSrc[ulP] == 0x20) || (ubSrc[ulP] == 0x09)) && (ulL > 0))
 8000db8:	e00a      	b.n	8000dd0 <fnRTRIM+0x38>
  {
    ubSrc[ulP] = 0x00;
 8000dba:	687a      	ldr	r2, [r7, #4]
 8000dbc:	68fb      	ldr	r3, [r7, #12]
 8000dbe:	4413      	add	r3, r2
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	701a      	strb	r2, [r3, #0]
    ulL--;
 8000dc4:	68bb      	ldr	r3, [r7, #8]
 8000dc6:	3b01      	subs	r3, #1
 8000dc8:	60bb      	str	r3, [r7, #8]
    ulP--;
 8000dca:	68fb      	ldr	r3, [r7, #12]
 8000dcc:	3b01      	subs	r3, #1
 8000dce:	60fb      	str	r3, [r7, #12]
  while (((ubSrc[ulP] == 0x20) || (ubSrc[ulP] == 0x09)) && (ulL > 0))
 8000dd0:	687a      	ldr	r2, [r7, #4]
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	4413      	add	r3, r2
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	2b20      	cmp	r3, #32
 8000dda:	d005      	beq.n	8000de8 <fnRTRIM+0x50>
 8000ddc:	687a      	ldr	r2, [r7, #4]
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	4413      	add	r3, r2
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b09      	cmp	r3, #9
 8000de6:	d102      	bne.n	8000dee <fnRTRIM+0x56>
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	2b00      	cmp	r3, #0
 8000dec:	d1e5      	bne.n	8000dba <fnRTRIM+0x22>
  }

  ulL = strlen (ubSrc);
 8000dee:	6878      	ldr	r0, [r7, #4]
 8000df0:	f003 fb66 	bl	80044c0 <strlen>
 8000df4:	60b8      	str	r0, [r7, #8]
  return ulL;
 8000df6:	68bb      	ldr	r3, [r7, #8]
}
 8000df8:	4618      	mov	r0, r3
 8000dfa:	3710      	adds	r7, #16
 8000dfc:	46bd      	mov	sp, r7
 8000dfe:	bd80      	pop	{r7, pc}

08000e00 <fnLoByte>:
//---------------------------------------------------------------------------------------------
//                       Functions to extract Hi & Lo Bytes of Word
//---------------------------------------------------------------------------------------------

u08   fnLoByte (u16 uwWord)
{
 8000e00:	b480      	push	{r7}
 8000e02:	b083      	sub	sp, #12
 8000e04:	af00      	add	r7, sp, #0
 8000e06:	4603      	mov	r3, r0
 8000e08:	80fb      	strh	r3, [r7, #6]
  return  (u08)(uwWord & 0x00FF);
 8000e0a:	88fb      	ldrh	r3, [r7, #6]
 8000e0c:	b2db      	uxtb	r3, r3
}
 8000e0e:	4618      	mov	r0, r3
 8000e10:	370c      	adds	r7, #12
 8000e12:	46bd      	mov	sp, r7
 8000e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e18:	4770      	bx	lr

08000e1a <fnHiByte>:

u08   fnHiByte (u16 uwWord)
{
 8000e1a:	b480      	push	{r7}
 8000e1c:	b083      	sub	sp, #12
 8000e1e:	af00      	add	r7, sp, #0
 8000e20:	4603      	mov	r3, r0
 8000e22:	80fb      	strh	r3, [r7, #6]
  return  (u08)((uwWord / 0x100) & 0x00FF);
 8000e24:	88fb      	ldrh	r3, [r7, #6]
 8000e26:	0a1b      	lsrs	r3, r3, #8
 8000e28:	b29b      	uxth	r3, r3
 8000e2a:	b2db      	uxtb	r3, r3
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	370c      	adds	r7, #12
 8000e30:	46bd      	mov	sp, r7
 8000e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e36:	4770      	bx	lr

08000e38 <fnBytesToWord>:

u16   fnBytesToWord (u08 ubLoByte, u08 ubHiByte)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	4603      	mov	r3, r0
 8000e40:	460a      	mov	r2, r1
 8000e42:	71fb      	strb	r3, [r7, #7]
 8000e44:	4613      	mov	r3, r2
 8000e46:	71bb      	strb	r3, [r7, #6]
  u16   uwWork;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  uwWork = (u16) ubHiByte;
 8000e48:	79bb      	ldrb	r3, [r7, #6]
 8000e4a:	81fb      	strh	r3, [r7, #14]
  uwWork = uwWork << 8;
 8000e4c:	89fb      	ldrh	r3, [r7, #14]
 8000e4e:	021b      	lsls	r3, r3, #8
 8000e50:	81fb      	strh	r3, [r7, #14]
  uwWork |= (u16) ubLoByte;
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	b29a      	uxth	r2, r3
 8000e56:	89fb      	ldrh	r3, [r7, #14]
 8000e58:	4313      	orrs	r3, r2
 8000e5a:	81fb      	strh	r3, [r7, #14]
  return uwWork;
 8000e5c:	89fb      	ldrh	r3, [r7, #14]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3714      	adds	r7, #20
 8000e62:	46bd      	mov	sp, r7
 8000e64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e68:	4770      	bx	lr

08000e6a <fnBCD2Bin>:

//---------------------------------------------------------------------------------------------
//                       Functions to Convert BCD to Binary and Back
//---------------------------------------------------------------------------------------------
u08   fnBCD2Bin (u08  ubBCD)
{
 8000e6a:	b480      	push	{r7}
 8000e6c:	b085      	sub	sp, #20
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	71fb      	strb	r3, [r7, #7]
  u08 ubWork;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  ubWork = ((ubBCD >> 4) & 0x0F) * 10;
 8000e74:	79fb      	ldrb	r3, [r7, #7]
 8000e76:	091b      	lsrs	r3, r3, #4
 8000e78:	b2db      	uxtb	r3, r3
 8000e7a:	461a      	mov	r2, r3
 8000e7c:	0092      	lsls	r2, r2, #2
 8000e7e:	4413      	add	r3, r2
 8000e80:	005b      	lsls	r3, r3, #1
 8000e82:	73fb      	strb	r3, [r7, #15]
  ubWork += ubBCD & 0x0F;
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	f003 030f 	and.w	r3, r3, #15
 8000e8a:	b2da      	uxtb	r2, r3
 8000e8c:	7bfb      	ldrb	r3, [r7, #15]
 8000e8e:	4413      	add	r3, r2
 8000e90:	73fb      	strb	r3, [r7, #15]
  return ubWork;
 8000e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e94:	4618      	mov	r0, r3
 8000e96:	3714      	adds	r7, #20
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <fnBin2BCD>:

u08   fnBin2BCD (u08  ubBin)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	b085      	sub	sp, #20
 8000ea4:	af00      	add	r7, sp, #0
 8000ea6:	4603      	mov	r3, r0
 8000ea8:	71fb      	strb	r3, [r7, #7]
  u08 ubWork;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  ubWork = ((ubBin / 10) << 4) & 0xF0;
 8000eaa:	79fb      	ldrb	r3, [r7, #7]
 8000eac:	4a10      	ldr	r2, [pc, #64]	; (8000ef0 <fnBin2BCD+0x50>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	08db      	lsrs	r3, r3, #3
 8000eb4:	b2db      	uxtb	r3, r3
 8000eb6:	011b      	lsls	r3, r3, #4
 8000eb8:	73fb      	strb	r3, [r7, #15]
  ubWork |= ((ubBin % 10) & 0x0F);
 8000eba:	79fa      	ldrb	r2, [r7, #7]
 8000ebc:	4b0c      	ldr	r3, [pc, #48]	; (8000ef0 <fnBin2BCD+0x50>)
 8000ebe:	fba3 1302 	umull	r1, r3, r3, r2
 8000ec2:	08d9      	lsrs	r1, r3, #3
 8000ec4:	460b      	mov	r3, r1
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	440b      	add	r3, r1
 8000eca:	005b      	lsls	r3, r3, #1
 8000ecc:	1ad3      	subs	r3, r2, r3
 8000ece:	b2db      	uxtb	r3, r3
 8000ed0:	b25b      	sxtb	r3, r3
 8000ed2:	f003 030f 	and.w	r3, r3, #15
 8000ed6:	b25a      	sxtb	r2, r3
 8000ed8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000edc:	4313      	orrs	r3, r2
 8000ede:	b25b      	sxtb	r3, r3
 8000ee0:	73fb      	strb	r3, [r7, #15]
  return ubWork;
 8000ee2:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3714      	adds	r7, #20
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eee:	4770      	bx	lr
 8000ef0:	cccccccd 	.word	0xcccccccd

08000ef4 <fnByte2Hex>:

//---------------------------------------------------------------------------------------------
//                     Functions to Convert a Byte Value to 2 Hex Characters
//---------------------------------------------------------------------------------------------
void  fnByte2Hex (u08 ubByte, u08 ubOut[])
{
 8000ef4:	b590      	push	{r4, r7, lr}
 8000ef6:	b085      	sub	sp, #20
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	4603      	mov	r3, r0
 8000efc:	6039      	str	r1, [r7, #0]
 8000efe:	71fb      	strb	r3, [r7, #7]
  u08 ubWork;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  ubWork = (ubByte & 0xF0) / 0x10;
 8000f00:	79fb      	ldrb	r3, [r7, #7]
 8000f02:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	da00      	bge.n	8000f0c <fnByte2Hex+0x18>
 8000f0a:	330f      	adds	r3, #15
 8000f0c:	111b      	asrs	r3, r3, #4
 8000f0e:	73fb      	strb	r3, [r7, #15]
  ubOut[0] = fnByte2Chr (ubWork);
 8000f10:	7bfb      	ldrb	r3, [r7, #15]
 8000f12:	4618      	mov	r0, r3
 8000f14:	f000 f814 	bl	8000f40 <fnByte2Chr>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	461a      	mov	r2, r3
 8000f1c:	683b      	ldr	r3, [r7, #0]
 8000f1e:	701a      	strb	r2, [r3, #0]
  ubWork = (ubByte & 0x0F);
 8000f20:	79fb      	ldrb	r3, [r7, #7]
 8000f22:	f003 030f 	and.w	r3, r3, #15
 8000f26:	73fb      	strb	r3, [r7, #15]
  ubOut[1] = fnByte2Chr (ubWork);
 8000f28:	683b      	ldr	r3, [r7, #0]
 8000f2a:	1c5c      	adds	r4, r3, #1
 8000f2c:	7bfb      	ldrb	r3, [r7, #15]
 8000f2e:	4618      	mov	r0, r3
 8000f30:	f000 f806 	bl	8000f40 <fnByte2Chr>
 8000f34:	4603      	mov	r3, r0
 8000f36:	7023      	strb	r3, [r4, #0]
}
 8000f38:	bf00      	nop
 8000f3a:	3714      	adds	r7, #20
 8000f3c:	46bd      	mov	sp, r7
 8000f3e:	bd90      	pop	{r4, r7, pc}

08000f40 <fnByte2Chr>:

//---------------------------------------------------------------------------------------------
//                   Functions to Convert a Byte Value a Hex Character 0-9/A-F
//---------------------------------------------------------------------------------------------
u08 fnByte2Chr (u08 ubByte)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	4603      	mov	r3, r0
 8000f48:	71fb      	strb	r3, [r7, #7]
  u08 ubWork = 0;
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	73fb      	strb	r3, [r7, #15]

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  ubByte &= 0x0F;
 8000f4e:	79fb      	ldrb	r3, [r7, #7]
 8000f50:	f003 030f 	and.w	r3, r3, #15
 8000f54:	71fb      	strb	r3, [r7, #7]

  switch (ubByte)
 8000f56:	79fb      	ldrb	r3, [r7, #7]
 8000f58:	2b09      	cmp	r3, #9
 8000f5a:	dc02      	bgt.n	8000f62 <fnByte2Chr+0x22>
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	da04      	bge.n	8000f6a <fnByte2Chr+0x2a>
 8000f60:	e00b      	b.n	8000f7a <fnByte2Chr+0x3a>
 8000f62:	3b0a      	subs	r3, #10
 8000f64:	2b05      	cmp	r3, #5
 8000f66:	d808      	bhi.n	8000f7a <fnByte2Chr+0x3a>
 8000f68:	e003      	b.n	8000f72 <fnByte2Chr+0x32>
  {
    case 0: case 1: case 2: case 3: case 4:
    case 5: case 6: case 7: case 8: case 9:
      ubWork = 0x30 + ubByte;
 8000f6a:	79fb      	ldrb	r3, [r7, #7]
 8000f6c:	3330      	adds	r3, #48	; 0x30
 8000f6e:	73fb      	strb	r3, [r7, #15]
      break;
 8000f70:	e003      	b.n	8000f7a <fnByte2Chr+0x3a>

    case 10: case 11: case 12: case 13: case 14: case 15:
      ubWork = ubByte + 0x37;
 8000f72:	79fb      	ldrb	r3, [r7, #7]
 8000f74:	3337      	adds	r3, #55	; 0x37
 8000f76:	73fb      	strb	r3, [r7, #15]
      break;
 8000f78:	bf00      	nop
  }

  return ubWork;
 8000f7a:	7bfb      	ldrb	r3, [r7, #15]
}
 8000f7c:	4618      	mov	r0, r3
 8000f7e:	3714      	adds	r7, #20
 8000f80:	46bd      	mov	sp, r7
 8000f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f86:	4770      	bx	lr

08000f88 <fnStrCpy>:

//---------------------------------------------------------------------------------------------
//                        Function to simply copy 1 string to another
//---------------------------------------------------------------------------------------------
void  fnStrCpy (u08 ubDst[], u08 ubSrc[])
{
 8000f88:	b480      	push	{r7}
 8000f8a:	b085      	sub	sp, #20
 8000f8c:	af00      	add	r7, sp, #0
 8000f8e:	6078      	str	r0, [r7, #4]
 8000f90:	6039      	str	r1, [r7, #0]
  u16 uwPtr = 0;
 8000f92:	2300      	movs	r3, #0
 8000f94:	81fb      	strh	r3, [r7, #14]

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  while (ubSrc[uwPtr])
 8000f96:	e00a      	b.n	8000fae <fnStrCpy+0x26>
  {
    ubDst[uwPtr] = ubSrc[uwPtr];
 8000f98:	89fb      	ldrh	r3, [r7, #14]
 8000f9a:	683a      	ldr	r2, [r7, #0]
 8000f9c:	441a      	add	r2, r3
 8000f9e:	89fb      	ldrh	r3, [r7, #14]
 8000fa0:	6879      	ldr	r1, [r7, #4]
 8000fa2:	440b      	add	r3, r1
 8000fa4:	7812      	ldrb	r2, [r2, #0]
 8000fa6:	701a      	strb	r2, [r3, #0]
    uwPtr++;
 8000fa8:	89fb      	ldrh	r3, [r7, #14]
 8000faa:	3301      	adds	r3, #1
 8000fac:	81fb      	strh	r3, [r7, #14]
  while (ubSrc[uwPtr])
 8000fae:	89fb      	ldrh	r3, [r7, #14]
 8000fb0:	683a      	ldr	r2, [r7, #0]
 8000fb2:	4413      	add	r3, r2
 8000fb4:	781b      	ldrb	r3, [r3, #0]
 8000fb6:	2b00      	cmp	r3, #0
 8000fb8:	d1ee      	bne.n	8000f98 <fnStrCpy+0x10>
  }

  ubDst[uwPtr] = 0;
 8000fba:	89fb      	ldrh	r3, [r7, #14]
 8000fbc:	687a      	ldr	r2, [r7, #4]
 8000fbe:	4413      	add	r3, r2
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	701a      	strb	r2, [r3, #0]
}
 8000fc4:	bf00      	nop
 8000fc6:	3714      	adds	r7, #20
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr

08000fd0 <fnStrLen>:

//---------------------------------------------------------------------------------------------
//                      Function to simply measure the length of a string
//---------------------------------------------------------------------------------------------
u16   fnStrLen (u08 ubSrc[])
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b085      	sub	sp, #20
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  u16 uwLen = 0;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	81fb      	strh	r3, [r7, #14]

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  while (ubSrc[uwLen])
 8000fdc:	e002      	b.n	8000fe4 <fnStrLen+0x14>
  {
    uwLen++;
 8000fde:	89fb      	ldrh	r3, [r7, #14]
 8000fe0:	3301      	adds	r3, #1
 8000fe2:	81fb      	strh	r3, [r7, #14]
  while (ubSrc[uwLen])
 8000fe4:	89fb      	ldrh	r3, [r7, #14]
 8000fe6:	687a      	ldr	r2, [r7, #4]
 8000fe8:	4413      	add	r3, r2
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1f6      	bne.n	8000fde <fnStrLen+0xe>
  }
  return uwLen;
 8000ff0:	89fb      	ldrh	r3, [r7, #14]
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3714      	adds	r7, #20
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ffc:	4770      	bx	lr

08000ffe <fnCINTF>:

//---------------------------------------------------------------------------------------------
//                        Convert Single Precision Value to Closest integer
//---------------------------------------------------------------------------------------------
s32 fnCINTF (flt sfFloat)
{
 8000ffe:	b480      	push	{r7}
 8001000:	b085      	sub	sp, #20
 8001002:	af00      	add	r7, sp, #0
 8001004:	ed87 0a01 	vstr	s0, [r7, #4]
  s32 slWork;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  slWork = (s32)sfFloat;
 8001008:	edd7 7a01 	vldr	s15, [r7, #4]
 800100c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001010:	ee17 3a90 	vmov	r3, s15
 8001014:	60fb      	str	r3, [r7, #12]

  //--- Test if we round up or down

  if (fabsf(sfFloat - (flt)slWork) > 0.5)
 8001016:	68fb      	ldr	r3, [r7, #12]
 8001018:	ee07 3a90 	vmov	s15, r3
 800101c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001020:	ed97 7a01 	vldr	s14, [r7, #4]
 8001024:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001028:	eef0 7ae7 	vabs.f32	s15, s15
 800102c:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8001030:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001034:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001038:	dd09      	ble.n	800104e <fnCINTF+0x50>
  {
    if (slWork >= 0)
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	2b00      	cmp	r3, #0
 800103e:	db03      	blt.n	8001048 <fnCINTF+0x4a>
      slWork = slWork + 1;
 8001040:	68fb      	ldr	r3, [r7, #12]
 8001042:	3301      	adds	r3, #1
 8001044:	60fb      	str	r3, [r7, #12]
 8001046:	e002      	b.n	800104e <fnCINTF+0x50>
    else
      slWork = slWork - 1;
 8001048:	68fb      	ldr	r3, [r7, #12]
 800104a:	3b01      	subs	r3, #1
 800104c:	60fb      	str	r3, [r7, #12]
  }
  return slWork;
 800104e:	68fb      	ldr	r3, [r7, #12]
}
 8001050:	4618      	mov	r0, r3
 8001052:	3714      	adds	r7, #20
 8001054:	46bd      	mov	sp, r7
 8001056:	f85d 7b04 	ldr.w	r7, [sp], #4
 800105a:	4770      	bx	lr

0800105c <fnCINTD>:

//---------------------------------------------------------------------------------------------
//                   Convert Float Double Precision Value to Closest integer
//---------------------------------------------------------------------------------------------
s32 fnCINTD (dbl dblFloat)
{
 800105c:	b5b0      	push	{r4, r5, r7, lr}
 800105e:	b084      	sub	sp, #16
 8001060:	af00      	add	r7, sp, #0
 8001062:	ed87 0b00 	vstr	d0, [r7]
  s32 slWork;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  slWork = (s32)dblFloat;
 8001066:	e9d7 0100 	ldrd	r0, r1, [r7]
 800106a:	f003 f9a5 	bl	80043b8 <__aeabi_d2iz>
 800106e:	4603      	mov	r3, r0
 8001070:	60fb      	str	r3, [r7, #12]

  //--- Test if we round up or down

  if (fabs(dblFloat - (dbl)slWork) > 0.5)
 8001072:	68f8      	ldr	r0, [r7, #12]
 8001074:	f002 fe86 	bl	8003d84 <__aeabi_i2d>
 8001078:	4602      	mov	r2, r0
 800107a:	460b      	mov	r3, r1
 800107c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001080:	f002 fd32 	bl	8003ae8 <__aeabi_dsub>
 8001084:	4602      	mov	r2, r0
 8001086:	460b      	mov	r3, r1
 8001088:	4614      	mov	r4, r2
 800108a:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 800108e:	f04f 0200 	mov.w	r2, #0
 8001092:	4b0b      	ldr	r3, [pc, #44]	; (80010c0 <fnCINTD+0x64>)
 8001094:	4620      	mov	r0, r4
 8001096:	4629      	mov	r1, r5
 8001098:	f003 f96e 	bl	8004378 <__aeabi_dcmpgt>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d009      	beq.n	80010b6 <fnCINTD+0x5a>
  {
    if (slWork >= 0)
 80010a2:	68fb      	ldr	r3, [r7, #12]
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	db03      	blt.n	80010b0 <fnCINTD+0x54>
      slWork = slWork + 1;
 80010a8:	68fb      	ldr	r3, [r7, #12]
 80010aa:	3301      	adds	r3, #1
 80010ac:	60fb      	str	r3, [r7, #12]
 80010ae:	e002      	b.n	80010b6 <fnCINTD+0x5a>
    else
      slWork = slWork - 1;
 80010b0:	68fb      	ldr	r3, [r7, #12]
 80010b2:	3b01      	subs	r3, #1
 80010b4:	60fb      	str	r3, [r7, #12]
  }
  return slWork;
 80010b6:	68fb      	ldr	r3, [r7, #12]
}
 80010b8:	4618      	mov	r0, r3
 80010ba:	3710      	adds	r7, #16
 80010bc:	46bd      	mov	sp, r7
 80010be:	bdb0      	pop	{r4, r5, r7, pc}
 80010c0:	3fe00000 	.word	0x3fe00000

080010c4 <fnLc2Uc>:

//---------------------------------------------------------------------------------------------
//                       Convert a lower case (a-z) to Upper Case (A-Z)
//---------------------------------------------------------------------------------------------
u08 fnLc2Uc (u08  ubChar)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	4603      	mov	r3, r0
 80010cc:	71fb      	strb	r3, [r7, #7]
  if ((ubChar > 0x60) && (ubChar < 0x7B))
 80010ce:	79fb      	ldrb	r3, [r7, #7]
 80010d0:	2b60      	cmp	r3, #96	; 0x60
 80010d2:	d905      	bls.n	80010e0 <fnLc2Uc+0x1c>
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	2b7a      	cmp	r3, #122	; 0x7a
 80010d8:	d802      	bhi.n	80010e0 <fnLc2Uc+0x1c>
  {
    ubChar -= 0x20;
 80010da:	79fb      	ldrb	r3, [r7, #7]
 80010dc:	3b20      	subs	r3, #32
 80010de:	71fb      	strb	r3, [r7, #7]
  }

  return ubChar;
 80010e0:	79fb      	ldrb	r3, [r7, #7]
}
 80010e2:	4618      	mov	r0, r3
 80010e4:	370c      	adds	r7, #12
 80010e6:	46bd      	mov	sp, r7
 80010e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ec:	4770      	bx	lr

080010ee <ftoa>:

//---------------------------------------------------------------------------------------------
//                Converts a Single Precision Floating-Point number to a String
//---------------------------------------------------------------------------------------------
void ftoa(flt sfIn, u08 sOut[])
{
 80010ee:	b5b0      	push	{r4, r5, r7, lr}
 80010f0:	b08a      	sub	sp, #40	; 0x28
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	ed87 0a01 	vstr	s0, [r7, #4]
 80010f8:	6038      	str	r0, [r7, #0]
  s16   swDigit;                                  //--- Magnititude Values
  flt   sfMag, sfM1;                              //--- Magnititude Values
  u08   ubNflag = False;                          //--- Negative Number Flag
 80010fa:	2300      	movs	r3, #0
 80010fc:	77fb      	strb	r3, [r7, #31]
  u08   ubEflag = False;                          //--- Use Exponent Flag
 80010fe:	2300      	movs	r3, #0
 8001100:	77bb      	strb	r3, [r7, #30]
  u16   uwPtr;                                    //--- String Pointer
  s16   swI, swJ, swM0, swM1;                     //--- Temporary Variables

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  uwPtr = 0;                                      //--- Reset output character pointer
 8001102:	2300      	movs	r3, #0
 8001104:	83bb      	strh	r3, [r7, #28]
  sOut[uwPtr] = 0;
 8001106:	8bbb      	ldrh	r3, [r7, #28]
 8001108:	683a      	ldr	r2, [r7, #0]
 800110a:	4413      	add	r3, r2
 800110c:	2200      	movs	r2, #0
 800110e:	701a      	strb	r2, [r3, #0]

  //--- Handle special cases
  uwFlag = isnan(sfIn);
 8001110:	ed97 7a01 	vldr	s14, [r7, #4]
 8001114:	edd7 7a01 	vldr	s15, [r7, #4]
 8001118:	eeb4 7a67 	vcmp.f32	s14, s15
 800111c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001120:	bf6c      	ite	vs
 8001122:	2301      	movvs	r3, #1
 8001124:	2300      	movvc	r3, #0
 8001126:	b2db      	uxtb	r3, r3
 8001128:	827b      	strh	r3, [r7, #18]
  if (uwFlag)                                     //--- Not a Number
 800112a:	8a7b      	ldrh	r3, [r7, #18]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d006      	beq.n	800113e <ftoa+0x50>
  {
    strcpy(sOut, "#NaN");                         //--- Copy Notation and Exit
 8001130:	683b      	ldr	r3, [r7, #0]
 8001132:	4abb      	ldr	r2, [pc, #748]	; (8001420 <ftoa+0x332>)
 8001134:	6810      	ldr	r0, [r2, #0]
 8001136:	6018      	str	r0, [r3, #0]
 8001138:	7912      	ldrb	r2, [r2, #4]
 800113a:	711a      	strb	r2, [r3, #4]
    return;
 800113c:	e1fb      	b.n	8001536 <ftoa+0x448>
  }

  uwFlag = isinf(sfIn);                          //--- Infinite
 800113e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001142:	eef0 7ae7 	vabs.f32	s15, s15
 8001146:	ed9f 7ab7 	vldr	s14, [pc, #732]	; 8001424 <ftoa+0x336>
 800114a:	eef4 7a47 	vcmp.f32	s15, s14
 800114e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001152:	dc01      	bgt.n	8001158 <ftoa+0x6a>
 8001154:	2300      	movs	r3, #0
 8001156:	e008      	b.n	800116a <ftoa+0x7c>
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800115e:	2b00      	cmp	r3, #0
 8001160:	d002      	beq.n	8001168 <ftoa+0x7a>
 8001162:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001166:	e000      	b.n	800116a <ftoa+0x7c>
 8001168:	2301      	movs	r3, #1
 800116a:	827b      	strh	r3, [r7, #18]
  if (uwFlag)                                     //--- Not a Number
 800116c:	8a7b      	ldrh	r3, [r7, #18]
 800116e:	2b00      	cmp	r3, #0
 8001170:	d006      	beq.n	8001180 <ftoa+0x92>
  {
    strcpy(sOut, "#Inf");                         //--- Copy Notation and Exit
 8001172:	683b      	ldr	r3, [r7, #0]
 8001174:	4aac      	ldr	r2, [pc, #688]	; (8001428 <ftoa+0x33a>)
 8001176:	6810      	ldr	r0, [r2, #0]
 8001178:	6018      	str	r0, [r3, #0]
 800117a:	7912      	ldrb	r2, [r2, #4]
 800117c:	711a      	strb	r2, [r3, #4]
    return;
 800117e:	e1da      	b.n	8001536 <ftoa+0x448>
  }

  if (sfIn == 0.0)
 8001180:	edd7 7a01 	vldr	s15, [r7, #4]
 8001184:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001188:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800118c:	d104      	bne.n	8001198 <ftoa+0xaa>
  {
    strcpy(sOut, "0.0");                          //--- Copy Notation and Exit
 800118e:	683b      	ldr	r3, [r7, #0]
 8001190:	4aa6      	ldr	r2, [pc, #664]	; (800142c <ftoa+0x33e>)
 8001192:	6810      	ldr	r0, [r2, #0]
 8001194:	6018      	str	r0, [r3, #0]
    return;
 8001196:	e1ce      	b.n	8001536 <ftoa+0x448>
  }

  //--- If number is negative then flip sign & set flag
  if (sfIn < 0)
 8001198:	edd7 7a01 	vldr	s15, [r7, #4]
 800119c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80011a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011a4:	d510      	bpl.n	80011c8 <ftoa+0xda>
  {
    ubNflag = True;                               //--- Cet Negative Flag
 80011a6:	2301      	movs	r3, #1
 80011a8:	77fb      	strb	r3, [r7, #31]
    sfIn = -sfIn;                                 //--- Reverse sign of number
 80011aa:	edd7 7a01 	vldr	s15, [r7, #4]
 80011ae:	eef1 7a67 	vneg.f32	s15, s15
 80011b2:	edc7 7a01 	vstr	s15, [r7, #4]
    sOut[uwPtr] = '-';                            //--- Add Negative sign to output string
 80011b6:	8bbb      	ldrh	r3, [r7, #28]
 80011b8:	683a      	ldr	r2, [r7, #0]
 80011ba:	4413      	add	r3, r2
 80011bc:	222d      	movs	r2, #45	; 0x2d
 80011be:	701a      	strb	r2, [r3, #0]
    uwPtr++;
 80011c0:	8bbb      	ldrh	r3, [r7, #28]
 80011c2:	3301      	adds	r3, #1
 80011c4:	83bb      	strh	r3, [r7, #28]
 80011c6:	e001      	b.n	80011cc <ftoa+0xde>
  }
  else
  {
    ubNflag = False;                              //--- Clear negative flag
 80011c8:	2300      	movs	r3, #0
 80011ca:	77fb      	strb	r3, [r7, #31]
  }

  //--- Calculate magnitude of number as an integer
  sfMag = log10(sfIn);
 80011cc:	6878      	ldr	r0, [r7, #4]
 80011ce:	f002 fdeb 	bl	8003da8 <__aeabi_f2d>
 80011d2:	4602      	mov	r2, r0
 80011d4:	460b      	mov	r3, r1
 80011d6:	ec43 2b10 	vmov	d0, r2, r3
 80011da:	f003 fa65 	bl	80046a8 <log10>
 80011de:	ec53 2b10 	vmov	r2, r3, d0
 80011e2:	4610      	mov	r0, r2
 80011e4:	4619      	mov	r1, r3
 80011e6:	f003 f90f 	bl	8004408 <__aeabi_d2f>
 80011ea:	4603      	mov	r3, r0
 80011ec:	627b      	str	r3, [r7, #36]	; 0x24

  //--- See if we use exponent notation
  if ((sfMag > 6.0) || (sfMag < -6.0) || (ubNflag && (sfMag > 6.0)))
 80011ee:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80011f2:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80011f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80011fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80011fe:	dc14      	bgt.n	800122a <ftoa+0x13c>
 8001200:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001204:	eeb9 7a08 	vmov.f32	s14, #152	; 0xc0c00000 -6.0
 8001208:	eef4 7ac7 	vcmpe.f32	s15, s14
 800120c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001210:	d40b      	bmi.n	800122a <ftoa+0x13c>
 8001212:	7ffb      	ldrb	r3, [r7, #31]
 8001214:	2b00      	cmp	r3, #0
 8001216:	d00a      	beq.n	800122e <ftoa+0x140>
 8001218:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800121c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001220:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001224:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001228:	dd01      	ble.n	800122e <ftoa+0x140>
  {
    ubEflag = True;
 800122a:	2301      	movs	r3, #1
 800122c:	77bb      	strb	r3, [r7, #30]

  //  ubEflag = (m >= 7 || (ubNflag && m >= 7) || m <= -7);

  //--- If there are more than 6 digits then
  //    Set up for scientific notation
  if (ubEflag)
 800122e:	7fbb      	ldrb	r3, [r7, #30]
 8001230:	2b00      	cmp	r3, #0
 8001232:	d031      	beq.n	8001298 <ftoa+0x1aa>
  {
    //--- is Exponent Negative?
    if (sfMag < 0.0) sfMag -= 1.0;
 8001234:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001238:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800123c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001240:	d507      	bpl.n	8001252 <ftoa+0x164>
 8001242:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001246:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800124a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800124e:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
    sfIn = sfIn / pow(10.0, sfMag);
 8001252:	6878      	ldr	r0, [r7, #4]
 8001254:	f002 fda8 	bl	8003da8 <__aeabi_f2d>
 8001258:	4604      	mov	r4, r0
 800125a:	460d      	mov	r5, r1
 800125c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800125e:	f002 fda3 	bl	8003da8 <__aeabi_f2d>
 8001262:	4602      	mov	r2, r0
 8001264:	460b      	mov	r3, r1
 8001266:	ec43 2b11 	vmov	d1, r2, r3
 800126a:	ed9f 0b6b 	vldr	d0, [pc, #428]	; 8001418 <ftoa+0x32a>
 800126e:	f003 fa63 	bl	8004738 <pow>
 8001272:	ec53 2b10 	vmov	r2, r3, d0
 8001276:	4620      	mov	r0, r4
 8001278:	4629      	mov	r1, r5
 800127a:	f002 ff17 	bl	80040ac <__aeabi_ddiv>
 800127e:	4602      	mov	r2, r0
 8001280:	460b      	mov	r3, r1
 8001282:	4610      	mov	r0, r2
 8001284:	4619      	mov	r1, r3
 8001286:	f003 f8bf 	bl	8004408 <__aeabi_d2f>
 800128a:	4603      	mov	r3, r0
 800128c:	607b      	str	r3, [r7, #4]
    sfM1 = sfMag;
 800128e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001290:	623b      	str	r3, [r7, #32]
    sfMag = 0;
 8001292:	f04f 0300 	mov.w	r3, #0
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
  }

  //--- Correct underflow
  if (sfMag < 1.0) sfMag = 0;
 8001298:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800129c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80012a0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80012a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012a8:	d502      	bpl.n	80012b0 <ftoa+0x1c2>
 80012aa:	f04f 0300 	mov.w	r3, #0
 80012ae:	627b      	str	r3, [r7, #36]	; 0x24
  swM0 = (s16)sfMag;                              //--- Save integer magnititude
 80012b0:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80012b4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80012b8:	ee17 3a90 	vmov	r3, s15
 80012bc:	82fb      	strh	r3, [r7, #22]

  //--- Convert the number
  while ((sfIn > 0.0000001f) || swM0 >= 0)
 80012be:	e069      	b.n	8001394 <ftoa+0x2a6>
  {
    sfWeight = powf(10.0, swM0);
 80012c0:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80012c4:	ee07 3a90 	vmov	s15, r3
 80012c8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80012cc:	eef0 0a67 	vmov.f32	s1, s15
 80012d0:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 80012d4:	f003 fb02 	bl	80048dc <powf>
 80012d8:	ed87 0a03 	vstr	s0, [r7, #12]

    //--- Check Range
    if ((sfWeight > 0) && (!isinf(sfWeight)))
 80012dc:	edd7 7a03 	vldr	s15, [r7, #12]
 80012e0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80012e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012e8:	dd3d      	ble.n	8001366 <ftoa+0x278>
 80012ea:	edd7 7a03 	vldr	s15, [r7, #12]
 80012ee:	eef0 7ae7 	vabs.f32	s15, s15
 80012f2:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 8001424 <ftoa+0x336>
 80012f6:	eef4 7a47 	vcmp.f32	s15, s14
 80012fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80012fe:	dc32      	bgt.n	8001366 <ftoa+0x278>
    {
      swDigit = floor(sfIn / sfWeight);           //--- Calculate the Exponent Digits
 8001300:	ed97 7a01 	vldr	s14, [r7, #4]
 8001304:	edd7 7a03 	vldr	s15, [r7, #12]
 8001308:	eec7 6a27 	vdiv.f32	s13, s14, s15
 800130c:	ee16 0a90 	vmov	r0, s13
 8001310:	f002 fd4a 	bl	8003da8 <__aeabi_f2d>
 8001314:	4602      	mov	r2, r0
 8001316:	460b      	mov	r3, r1
 8001318:	ec43 2b10 	vmov	d0, r2, r3
 800131c:	f003 f940 	bl	80045a0 <floor>
 8001320:	ec53 2b10 	vmov	r2, r3, d0
 8001324:	4610      	mov	r0, r2
 8001326:	4619      	mov	r1, r3
 8001328:	f003 f846 	bl	80043b8 <__aeabi_d2iz>
 800132c:	4603      	mov	r3, r0
 800132e:	817b      	strh	r3, [r7, #10]
      sfIn -= ((float)swDigit * sfWeight);
 8001330:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001334:	ee07 3a90 	vmov	s15, r3
 8001338:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800133c:	edd7 7a03 	vldr	s15, [r7, #12]
 8001340:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001344:	ed97 7a01 	vldr	s14, [r7, #4]
 8001348:	ee77 7a67 	vsub.f32	s15, s14, s15
 800134c:	edc7 7a01 	vstr	s15, [r7, #4]
      sOut[uwPtr] = 0x30 + swDigit;               //--- Add Digit to output string
 8001350:	897b      	ldrh	r3, [r7, #10]
 8001352:	b2da      	uxtb	r2, r3
 8001354:	8bbb      	ldrh	r3, [r7, #28]
 8001356:	6839      	ldr	r1, [r7, #0]
 8001358:	440b      	add	r3, r1
 800135a:	3230      	adds	r2, #48	; 0x30
 800135c:	b2d2      	uxtb	r2, r2
 800135e:	701a      	strb	r2, [r3, #0]
      uwPtr++;
 8001360:	8bbb      	ldrh	r3, [r7, #28]
 8001362:	3301      	adds	r3, #1
 8001364:	83bb      	strh	r3, [r7, #28]
    }

    //--- Place the decimal Point
    if ((swM0 == 0) && (sfIn > 0))
 8001366:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d10e      	bne.n	800138c <ftoa+0x29e>
 800136e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001372:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800137a:	dd07      	ble.n	800138c <ftoa+0x29e>
    {
      sOut[uwPtr] = '.';
 800137c:	8bbb      	ldrh	r3, [r7, #28]
 800137e:	683a      	ldr	r2, [r7, #0]
 8001380:	4413      	add	r3, r2
 8001382:	222e      	movs	r2, #46	; 0x2e
 8001384:	701a      	strb	r2, [r3, #0]
      uwPtr++;
 8001386:	8bbb      	ldrh	r3, [r7, #28]
 8001388:	3301      	adds	r3, #1
 800138a:	83bb      	strh	r3, [r7, #28]
    }

    swM0 -= 1;
 800138c:	8afb      	ldrh	r3, [r7, #22]
 800138e:	3b01      	subs	r3, #1
 8001390:	b29b      	uxth	r3, r3
 8001392:	82fb      	strh	r3, [r7, #22]
  while ((sfIn > 0.0000001f) || swM0 >= 0)
 8001394:	edd7 7a01 	vldr	s15, [r7, #4]
 8001398:	ed9f 7a25 	vldr	s14, [pc, #148]	; 8001430 <ftoa+0x342>
 800139c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80013a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013a4:	dc8c      	bgt.n	80012c0 <ftoa+0x1d2>
 80013a6:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	da88      	bge.n	80012c0 <ftoa+0x1d2>
  }

  //--- Process The Exponent
  //    Convert the exponent
  if (ubEflag)
 80013ae:	7fbb      	ldrb	r3, [r7, #30]
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	f000 80ba 	beq.w	800152a <ftoa+0x43c>
  {
    sOut[uwPtr] = 'E';                            //--- Add exponent character to string
 80013b6:	8bbb      	ldrh	r3, [r7, #28]
 80013b8:	683a      	ldr	r2, [r7, #0]
 80013ba:	4413      	add	r3, r2
 80013bc:	2245      	movs	r2, #69	; 0x45
 80013be:	701a      	strb	r2, [r3, #0]
    uwPtr++;                                      //--- Bump Pointer
 80013c0:	8bbb      	ldrh	r3, [r7, #28]
 80013c2:	3301      	adds	r3, #1
 80013c4:	83bb      	strh	r3, [r7, #28]

    if (sfM1 > 0)                                 //--- Add exponent sign to string
 80013c6:	edd7 7a08 	vldr	s15, [r7, #32]
 80013ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80013ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80013d2:	dd08      	ble.n	80013e6 <ftoa+0x2f8>
    {
      sOut[uwPtr] = '+';                          //--- Add exponent + sign to string
 80013d4:	8bbb      	ldrh	r3, [r7, #28]
 80013d6:	683a      	ldr	r2, [r7, #0]
 80013d8:	4413      	add	r3, r2
 80013da:	222b      	movs	r2, #43	; 0x2b
 80013dc:	701a      	strb	r2, [r3, #0]
      uwPtr++;                                    //--- Bump Pointer
 80013de:	8bbb      	ldrh	r3, [r7, #28]
 80013e0:	3301      	adds	r3, #1
 80013e2:	83bb      	strh	r3, [r7, #28]
 80013e4:	e00d      	b.n	8001402 <ftoa+0x314>
    }
    else
    {
      sOut[uwPtr] = '-';                          //--- Add exponent - sign to string
 80013e6:	8bbb      	ldrh	r3, [r7, #28]
 80013e8:	683a      	ldr	r2, [r7, #0]
 80013ea:	4413      	add	r3, r2
 80013ec:	222d      	movs	r2, #45	; 0x2d
 80013ee:	701a      	strb	r2, [r3, #0]
      uwPtr++;                                    //--- Bump Pointer
 80013f0:	8bbb      	ldrh	r3, [r7, #28]
 80013f2:	3301      	adds	r3, #1
 80013f4:	83bb      	strh	r3, [r7, #28]
      sfM1 = -sfM1;
 80013f6:	edd7 7a08 	vldr	s15, [r7, #32]
 80013fa:	eef1 7a67 	vneg.f32	s15, s15
 80013fe:	edc7 7a08 	vstr	s15, [r7, #32]
    }

    //--- Number of Digits as integer
    swM1 = (s16)sfM1;
 8001402:	edd7 7a08 	vldr	s15, [r7, #32]
 8001406:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800140a:	ee17 3a90 	vmov	r3, s15
 800140e:	82bb      	strh	r3, [r7, #20]
    swM0 = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	82fb      	strh	r3, [r7, #22]

    //--- Add padded zeros to string
    while (swM1 > 0)
 8001414:	e035      	b.n	8001482 <ftoa+0x394>
 8001416:	bf00      	nop
 8001418:	00000000 	.word	0x00000000
 800141c:	40240000 	.word	0x40240000
 8001420:	0800671c 	.word	0x0800671c
 8001424:	7f7fffff 	.word	0x7f7fffff
 8001428:	08006724 	.word	0x08006724
 800142c:	0800672c 	.word	0x0800672c
 8001430:	33d6bf95 	.word	0x33d6bf95
    {
      sOut[uwPtr] = '0' + (swM1 % 10);            //--- Place Numeric Character in String
 8001434:	f9b7 2014 	ldrsh.w	r2, [r7, #20]
 8001438:	4b40      	ldr	r3, [pc, #256]	; (800153c <ftoa+0x44e>)
 800143a:	fb83 1302 	smull	r1, r3, r3, r2
 800143e:	1099      	asrs	r1, r3, #2
 8001440:	17d3      	asrs	r3, r2, #31
 8001442:	1ac9      	subs	r1, r1, r3
 8001444:	460b      	mov	r3, r1
 8001446:	009b      	lsls	r3, r3, #2
 8001448:	440b      	add	r3, r1
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	1ad3      	subs	r3, r2, r3
 800144e:	b21b      	sxth	r3, r3
 8001450:	b2da      	uxtb	r2, r3
 8001452:	8bbb      	ldrh	r3, [r7, #28]
 8001454:	6839      	ldr	r1, [r7, #0]
 8001456:	440b      	add	r3, r1
 8001458:	3230      	adds	r2, #48	; 0x30
 800145a:	b2d2      	uxtb	r2, r2
 800145c:	701a      	strb	r2, [r3, #0]
      uwPtr++;                                    //--- Bump Pointer
 800145e:	8bbb      	ldrh	r3, [r7, #28]
 8001460:	3301      	adds	r3, #1
 8001462:	83bb      	strh	r3, [r7, #28]
      swM1 /= 10;                                 //=== Divide by 10
 8001464:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001468:	4a34      	ldr	r2, [pc, #208]	; (800153c <ftoa+0x44e>)
 800146a:	fb82 1203 	smull	r1, r2, r2, r3
 800146e:	1092      	asrs	r2, r2, #2
 8001470:	17db      	asrs	r3, r3, #31
 8001472:	1ad3      	subs	r3, r2, r3
 8001474:	82bb      	strh	r3, [r7, #20]
      swM0++;                                     //--- Increment Magnitude
 8001476:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 800147a:	b29b      	uxth	r3, r3
 800147c:	3301      	adds	r3, #1
 800147e:	b29b      	uxth	r3, r3
 8001480:	82fb      	strh	r3, [r7, #22]
    while (swM1 > 0)
 8001482:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8001486:	2b00      	cmp	r3, #0
 8001488:	dcd4      	bgt.n	8001434 <ftoa+0x346>
    }

    //--- Correct length of string for padding

    for (swI = 0, swJ = swM0 - 1; swI < swJ; swI++, swJ--)
 800148a:	2300      	movs	r3, #0
 800148c:	837b      	strh	r3, [r7, #26]
 800148e:	8afb      	ldrh	r3, [r7, #22]
 8001490:	3b01      	subs	r3, #1
 8001492:	b29b      	uxth	r3, r3
 8001494:	833b      	strh	r3, [r7, #24]
 8001496:	e03e      	b.n	8001516 <ftoa+0x428>
    {
      //--- Swap Without Temporary
      sOut[swI] ^= sOut[swJ];
 8001498:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 800149c:	683a      	ldr	r2, [r7, #0]
 800149e:	4413      	add	r3, r2
 80014a0:	7819      	ldrb	r1, [r3, #0]
 80014a2:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014a6:	683a      	ldr	r2, [r7, #0]
 80014a8:	4413      	add	r3, r2
 80014aa:	781a      	ldrb	r2, [r3, #0]
 80014ac:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80014b0:	6838      	ldr	r0, [r7, #0]
 80014b2:	4403      	add	r3, r0
 80014b4:	404a      	eors	r2, r1
 80014b6:	b2d2      	uxtb	r2, r2
 80014b8:	701a      	strb	r2, [r3, #0]
      sOut[swJ] ^= sOut[swI];
 80014ba:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014be:	683a      	ldr	r2, [r7, #0]
 80014c0:	4413      	add	r3, r2
 80014c2:	7819      	ldrb	r1, [r3, #0]
 80014c4:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80014c8:	683a      	ldr	r2, [r7, #0]
 80014ca:	4413      	add	r3, r2
 80014cc:	781a      	ldrb	r2, [r3, #0]
 80014ce:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014d2:	6838      	ldr	r0, [r7, #0]
 80014d4:	4403      	add	r3, r0
 80014d6:	404a      	eors	r2, r1
 80014d8:	b2d2      	uxtb	r2, r2
 80014da:	701a      	strb	r2, [r3, #0]
      sOut[swI] ^= sOut[swJ];
 80014dc:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80014e0:	683a      	ldr	r2, [r7, #0]
 80014e2:	4413      	add	r3, r2
 80014e4:	7819      	ldrb	r1, [r3, #0]
 80014e6:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 80014ea:	683a      	ldr	r2, [r7, #0]
 80014ec:	4413      	add	r3, r2
 80014ee:	781a      	ldrb	r2, [r3, #0]
 80014f0:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 80014f4:	6838      	ldr	r0, [r7, #0]
 80014f6:	4403      	add	r3, r0
 80014f8:	404a      	eors	r2, r1
 80014fa:	b2d2      	uxtb	r2, r2
 80014fc:	701a      	strb	r2, [r3, #0]
    for (swI = 0, swJ = swM0 - 1; swI < swJ; swI++, swJ--)
 80014fe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001502:	b29b      	uxth	r3, r3
 8001504:	3301      	adds	r3, #1
 8001506:	b29b      	uxth	r3, r3
 8001508:	837b      	strh	r3, [r7, #26]
 800150a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800150e:	b29b      	uxth	r3, r3
 8001510:	3b01      	subs	r3, #1
 8001512:	b29b      	uxth	r3, r3
 8001514:	833b      	strh	r3, [r7, #24]
 8001516:	f9b7 201a 	ldrsh.w	r2, [r7, #26]
 800151a:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 800151e:	429a      	cmp	r2, r3
 8001520:	dbba      	blt.n	8001498 <ftoa+0x3aa>
    }

    uwPtr += swM0;                                //--- Point to end of string
 8001522:	8afa      	ldrh	r2, [r7, #22]
 8001524:	8bbb      	ldrh	r3, [r7, #28]
 8001526:	4413      	add	r3, r2
 8001528:	83bb      	strh	r3, [r7, #28]
  }

  sOut[uwPtr] = 0;                                //--- Terminate output string
 800152a:	8bbb      	ldrh	r3, [r7, #28]
 800152c:	683a      	ldr	r2, [r7, #0]
 800152e:	4413      	add	r3, r2
 8001530:	2200      	movs	r2, #0
 8001532:	701a      	strb	r2, [r3, #0]
  return;
 8001534:	bf00      	nop
}
 8001536:	3728      	adds	r7, #40	; 0x28
 8001538:	46bd      	mov	sp, r7
 800153a:	bdb0      	pop	{r4, r5, r7, pc}
 800153c:	66666667 	.word	0x66666667

08001540 <_sbrk>:
//--- Note: HEAP Starts at Highest Address of Stack Space BSS + StackSize and progresses
//          upward to end of RAM.  Stack progresses from highest Stack Address to lowest
//          and decrements for each value pushed onto stack.

caddr_t _sbrk ( int increment )
{
 8001540:	b480      	push	{r7}
 8001542:	b085      	sub	sp, #20
 8001544:	af00      	add	r7, sp, #0
 8001546:	6078      	str	r0, [r7, #4]
  caddr_t prevHeap;
  caddr_t nextHeap;

  if (heap == NULL)
 8001548:	4b13      	ldr	r3, [pc, #76]	; (8001598 <_sbrk+0x58>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	2b00      	cmp	r3, #0
 800154e:	d102      	bne.n	8001556 <_sbrk+0x16>
  {
    // first allocation
    heap = (caddr_t)&_HEAP_START;
 8001550:	4b11      	ldr	r3, [pc, #68]	; (8001598 <_sbrk+0x58>)
 8001552:	4a12      	ldr	r2, [pc, #72]	; (800159c <_sbrk+0x5c>)
 8001554:	601a      	str	r2, [r3, #0]
  }

  prevHeap = heap;
 8001556:	4b10      	ldr	r3, [pc, #64]	; (8001598 <_sbrk+0x58>)
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	60fb      	str	r3, [r7, #12]

  // Always return data aligned on a 8 byte boundary
  nextHeap = (caddr_t)(((s16)(heap + increment) + 7) & ~7);
 800155c:	4b0e      	ldr	r3, [pc, #56]	; (8001598 <_sbrk+0x58>)
 800155e:	681a      	ldr	r2, [r3, #0]
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	4413      	add	r3, r2
 8001564:	b21b      	sxth	r3, r3
 8001566:	3307      	adds	r3, #7
 8001568:	f023 0307 	bic.w	r3, r3, #7
 800156c:	60bb      	str	r3, [r7, #8]
  // Check enough space and there is no collision with stack coming the other way
  // if stack is above start of heap

//  if ((((caddr_t)&_HEAP_START < stackPtr) && (nextHeap > stackPtr)) || (nextHeap >= (caddr_t)&_HEAP_END))

  if (((nextHeap < (caddr_t)&_HEAP_START)) || (nextHeap >= (caddr_t)&_HEAP_END))
 800156e:	68bb      	ldr	r3, [r7, #8]
 8001570:	4a0a      	ldr	r2, [pc, #40]	; (800159c <_sbrk+0x5c>)
 8001572:	4293      	cmp	r3, r2
 8001574:	d303      	bcc.n	800157e <_sbrk+0x3e>
 8001576:	68bb      	ldr	r3, [r7, #8]
 8001578:	4a09      	ldr	r2, [pc, #36]	; (80015a0 <_sbrk+0x60>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d301      	bcc.n	8001582 <_sbrk+0x42>
  {
    return NULL; // error - no more memory
 800157e:	2300      	movs	r3, #0
 8001580:	e003      	b.n	800158a <_sbrk+0x4a>
  }
  else
  {
    heap = nextHeap;
 8001582:	4a05      	ldr	r2, [pc, #20]	; (8001598 <_sbrk+0x58>)
 8001584:	68bb      	ldr	r3, [r7, #8]
 8001586:	6013      	str	r3, [r2, #0]
    return (caddr_t) prevHeap;
 8001588:	68fb      	ldr	r3, [r7, #12]
  }
}
 800158a:	4618      	mov	r0, r3
 800158c:	3714      	adds	r7, #20
 800158e:	46bd      	mov	sp, r7
 8001590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001594:	4770      	bx	lr
 8001596:	bf00      	nop
 8001598:	20000438 	.word	0x20000438
 800159c:	20004940 	.word	0x20004940
 80015a0:	2000fff8 	.word	0x2000fff8

080015a4 <fnScheduleTask>:
//      If entry was through an interrupt then interrupts remain disabled else the General
//      Interrupt flag is re-enabled
//---------------------------------------------------------------------------------------------

u16 fnScheduleTask (struct Task stInTask)
{
 80015a4:	b084      	sub	sp, #16
 80015a6:	b4b0      	push	{r4, r5, r7}
 80015a8:	b083      	sub	sp, #12
 80015aa:	af00      	add	r7, sp, #0
 80015ac:	f107 0418 	add.w	r4, r7, #24
 80015b0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  u16   uwFlag = TRUE;
 80015b4:	2301      	movs	r3, #1
 80015b6:	80fb      	strh	r3, [r7, #6]

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  GID;                                            //--- Kill All Interrutps
 80015b8:	b672      	cpsid	i
  if (uwTaskCntr < (TASK_FIFO_SIZE-1))
 80015ba:	4b25      	ldr	r3, [pc, #148]	; (8001650 <fnScheduleTask+0xac>)
 80015bc:	881b      	ldrh	r3, [r3, #0]
 80015be:	b29b      	uxth	r3, r3
 80015c0:	2b3e      	cmp	r3, #62	; 0x3e
 80015c2:	d82e      	bhi.n	8001622 <fnScheduleTask+0x7e>
  {
    //--- Extract Task Address and data to pass to Task from TaskFifo
    stTaskFifo[uwTaskIptr] = stInTask;
 80015c4:	4b23      	ldr	r3, [pc, #140]	; (8001654 <fnScheduleTask+0xb0>)
 80015c6:	881b      	ldrh	r3, [r3, #0]
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	4619      	mov	r1, r3
 80015cc:	4a22      	ldr	r2, [pc, #136]	; (8001658 <fnScheduleTask+0xb4>)
 80015ce:	231a      	movs	r3, #26
 80015d0:	fb03 f301 	mul.w	r3, r3, r1
 80015d4:	4413      	add	r3, r2
 80015d6:	461d      	mov	r5, r3
 80015d8:	f107 0418 	add.w	r4, r7, #24
 80015dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015de:	6028      	str	r0, [r5, #0]
 80015e0:	6069      	str	r1, [r5, #4]
 80015e2:	60aa      	str	r2, [r5, #8]
 80015e4:	60eb      	str	r3, [r5, #12]
 80015e6:	cc03      	ldmia	r4!, {r0, r1}
 80015e8:	6128      	str	r0, [r5, #16]
 80015ea:	6169      	str	r1, [r5, #20]
 80015ec:	8823      	ldrh	r3, [r4, #0]
 80015ee:	832b      	strh	r3, [r5, #24]
    uwTaskIptr++;                                 //--- Bumb the Input Pointer
 80015f0:	4b18      	ldr	r3, [pc, #96]	; (8001654 <fnScheduleTask+0xb0>)
 80015f2:	881b      	ldrh	r3, [r3, #0]
 80015f4:	b29b      	uxth	r3, r3
 80015f6:	3301      	adds	r3, #1
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	4b16      	ldr	r3, [pc, #88]	; (8001654 <fnScheduleTask+0xb0>)
 80015fc:	801a      	strh	r2, [r3, #0]
    uwTaskIptr %= TASK_FIFO_SIZE;                 //--- Roll it over
 80015fe:	4b15      	ldr	r3, [pc, #84]	; (8001654 <fnScheduleTask+0xb0>)
 8001600:	881b      	ldrh	r3, [r3, #0]
 8001602:	b29b      	uxth	r3, r3
 8001604:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001608:	b29a      	uxth	r2, r3
 800160a:	4b12      	ldr	r3, [pc, #72]	; (8001654 <fnScheduleTask+0xb0>)
 800160c:	801a      	strh	r2, [r3, #0]
    uwTaskCntr++;                                 //--- Bump task counter +1
 800160e:	4b10      	ldr	r3, [pc, #64]	; (8001650 <fnScheduleTask+0xac>)
 8001610:	881b      	ldrh	r3, [r3, #0]
 8001612:	b29b      	uxth	r3, r3
 8001614:	3301      	adds	r3, #1
 8001616:	b29a      	uxth	r2, r3
 8001618:	4b0d      	ldr	r3, [pc, #52]	; (8001650 <fnScheduleTask+0xac>)
 800161a:	801a      	strh	r2, [r3, #0]
    uwFlag = TRUE;
 800161c:	2301      	movs	r3, #1
 800161e:	80fb      	strh	r3, [r7, #6]
 8001620:	e001      	b.n	8001626 <fnScheduleTask+0x82>
  }
  else
  {
    uwFlag = FALSE;
 8001622:	2300      	movs	r3, #0
 8001624:	80fb      	strh	r3, [r7, #6]
  }

  //--- If Not thru interrupt then enable Interrupts on Exit
  if (!(NVIC_IABR0 || NVIC_IABR1 || NVIC_IABR2))
 8001626:	4b0d      	ldr	r3, [pc, #52]	; (800165c <fnScheduleTask+0xb8>)
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d108      	bne.n	8001640 <fnScheduleTask+0x9c>
 800162e:	4b0c      	ldr	r3, [pc, #48]	; (8001660 <fnScheduleTask+0xbc>)
 8001630:	681b      	ldr	r3, [r3, #0]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d104      	bne.n	8001640 <fnScheduleTask+0x9c>
 8001636:	4b0b      	ldr	r3, [pc, #44]	; (8001664 <fnScheduleTask+0xc0>)
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	2b00      	cmp	r3, #0
 800163c:	d100      	bne.n	8001640 <fnScheduleTask+0x9c>
  {
    GIE;                                          //--- Enable On Exit
 800163e:	b662      	cpsie	i
  }
  return uwFlag;
 8001640:	88fb      	ldrh	r3, [r7, #6]
}
 8001642:	4618      	mov	r0, r3
 8001644:	370c      	adds	r7, #12
 8001646:	46bd      	mov	sp, r7
 8001648:	bcb0      	pop	{r4, r5, r7}
 800164a:	b004      	add	sp, #16
 800164c:	4770      	bx	lr
 800164e:	bf00      	nop
 8001650:	20000b22 	.word	0x20000b22
 8001654:	20000b20 	.word	0x20000b20
 8001658:	200004a0 	.word	0x200004a0
 800165c:	e000e300 	.word	0xe000e300
 8001660:	e000e304 	.word	0xe000e304
 8001664:	e000e308 	.word	0xe000e308

08001668 <fnDispatchCall>:
//---------------------------------------------------------------------------------------------
//                                     Task Dispatcher
//---------------------------------------------------------------------------------------------

void  fnDispatchCall (void)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
  void  (*ptrTask) (union DFLWB unTaskData);
  u16   uwRxData;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  GID;                                            //--- Kill Interrupts on Entry
 800166e:	b672      	cpsid	i

  //--- Test if Task waiting in Dispatch FIFO
  if (uwTaskCntr > 0)
 8001670:	4b2c      	ldr	r3, [pc, #176]	; (8001724 <fnDispatchCall+0xbc>)
 8001672:	881b      	ldrh	r3, [r3, #0]
 8001674:	b29b      	uxth	r3, r3
 8001676:	2b00      	cmp	r3, #0
 8001678:	d039      	beq.n	80016ee <fnDispatchCall+0x86>
  {
    uwTaskCntr--;                                 //--- Bump counter -1
 800167a:	4b2a      	ldr	r3, [pc, #168]	; (8001724 <fnDispatchCall+0xbc>)
 800167c:	881b      	ldrh	r3, [r3, #0]
 800167e:	b29b      	uxth	r3, r3
 8001680:	3b01      	subs	r3, #1
 8001682:	b29a      	uxth	r2, r3
 8001684:	4b27      	ldr	r3, [pc, #156]	; (8001724 <fnDispatchCall+0xbc>)
 8001686:	801a      	strh	r2, [r3, #0]

    //--- Extract Task address and data to pass to Task from TaskFifo
    ptrTask = (void (*)(union DFLWB))stTaskFifo[uwTaskOptr].ptrTask;
 8001688:	4b27      	ldr	r3, [pc, #156]	; (8001728 <fnDispatchCall+0xc0>)
 800168a:	881b      	ldrh	r3, [r3, #0]
 800168c:	b29b      	uxth	r3, r3
 800168e:	4619      	mov	r1, r3
 8001690:	4a26      	ldr	r2, [pc, #152]	; (800172c <fnDispatchCall+0xc4>)
 8001692:	231a      	movs	r3, #26
 8001694:	fb03 f301 	mul.w	r3, r3, r1
 8001698:	4413      	add	r3, r2
 800169a:	3308      	adds	r3, #8
 800169c:	f8d3 3006 	ldr.w	r3, [r3, #6]
 80016a0:	60fb      	str	r3, [r7, #12]
    unTaskData = stTaskFifo[uwTaskOptr].unTaskData;
 80016a2:	4b21      	ldr	r3, [pc, #132]	; (8001728 <fnDispatchCall+0xc0>)
 80016a4:	881b      	ldrh	r3, [r3, #0]
 80016a6:	b29b      	uxth	r3, r3
 80016a8:	4619      	mov	r1, r3
 80016aa:	4a20      	ldr	r2, [pc, #128]	; (800172c <fnDispatchCall+0xc4>)
 80016ac:	231a      	movs	r3, #26
 80016ae:	fb03 f301 	mul.w	r3, r3, r1
 80016b2:	4413      	add	r3, r2
 80016b4:	f103 0210 	add.w	r2, r3, #16
 80016b8:	463b      	mov	r3, r7
 80016ba:	3202      	adds	r2, #2
 80016bc:	6810      	ldr	r0, [r2, #0]
 80016be:	6851      	ldr	r1, [r2, #4]
 80016c0:	c303      	stmia	r3!, {r0, r1}
    uwTaskOptr++;                                 //--- Bump the Out Pointer
 80016c2:	4b19      	ldr	r3, [pc, #100]	; (8001728 <fnDispatchCall+0xc0>)
 80016c4:	881b      	ldrh	r3, [r3, #0]
 80016c6:	b29b      	uxth	r3, r3
 80016c8:	3301      	adds	r3, #1
 80016ca:	b29a      	uxth	r2, r3
 80016cc:	4b16      	ldr	r3, [pc, #88]	; (8001728 <fnDispatchCall+0xc0>)
 80016ce:	801a      	strh	r2, [r3, #0]
    uwTaskOptr %= TASK_FIFO_SIZE;                 //--- Roll the Out Pointer Over
 80016d0:	4b15      	ldr	r3, [pc, #84]	; (8001728 <fnDispatchCall+0xc0>)
 80016d2:	881b      	ldrh	r3, [r3, #0]
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80016da:	b29a      	uxth	r2, r3
 80016dc:	4b12      	ldr	r3, [pc, #72]	; (8001728 <fnDispatchCall+0xc0>)
 80016de:	801a      	strh	r2, [r3, #0]

    GIE;                                          //--- Enable Interrupts On Exit
 80016e0:	b662      	cpsie	i
    (*ptrTask)(unTaskData);                       //--- Call Task Function With Data
 80016e2:	68fb      	ldr	r3, [r7, #12]
 80016e4:	463a      	mov	r2, r7
 80016e6:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016ea:	4798      	blx	r3
 80016ec:	e000      	b.n	80016f0 <fnDispatchCall+0x88>

  }
  else
  {
    GIE;                                          //--- Enable Interrupts & Exit
 80016ee:	b662      	cpsie	i
  }

  //-------------------------------------------------------------------------------------------
  //    Test if there are bytes waiting in RX FIFO for USART1
  //-------------------------------------------------------------------------------------------
  uwRxData = fnGetNextUSART1 ();                  //--- See if Rx Data Available
 80016f0:	f000 f966 	bl	80019c0 <fnGetNextUSART1>
 80016f4:	4603      	mov	r3, r0
 80016f6:	817b      	strh	r3, [r7, #10]

  //--- If RX Data Ready then Immediately process it
  if (uwRxData & 0x8000)
 80016f8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80016fc:	2b00      	cmp	r3, #0
 80016fe:	da05      	bge.n	800170c <fnDispatchCall+0xa4>
  {
    GIE;
 8001700:	b662      	cpsie	i
    //--- Add Call to Rx Processing Routine
    //--- fnRxProcessUSART1();
    nop4;                                         //--- Code Place Holder delete this
 8001702:	bf00      	nop
 8001704:	bf00      	nop
 8001706:	bf00      	nop
 8001708:	bf00      	nop
    GID;
 800170a:	b672      	cpsid	i
  }

  //--- Interrupt Catch-Up Pause Period
  nop8;
 800170c:	bf00      	nop
 800170e:	bf00      	nop
 8001710:	bf00      	nop
 8001712:	bf00      	nop
 8001714:	bf00      	nop
 8001716:	bf00      	nop
 8001718:	bf00      	nop
 800171a:	bf00      	nop
}
 800171c:	bf00      	nop
 800171e:	3710      	adds	r7, #16
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	20000b22 	.word	0x20000b22
 8001728:	2000045c 	.word	0x2000045c
 800172c:	200004a0 	.word	0x200004a0

08001730 <fnPurgeTask>:
//---------------------------------------------------------------------------------------------
//                            Purge a Task from the Task Dispatcher
//---------------------------------------------------------------------------------------------

void  fnPurgeTask (void (*ptrTask))
{
 8001730:	b480      	push	{r7}
 8001732:	b085      	sub	sp, #20
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
  u32   ulTp;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  GID;
 8001738:	b672      	cpsid	i

  //--- Purge task from task dispatcher

  if (uwTaskCntr)
 800173a:	4b2a      	ldr	r3, [pc, #168]	; (80017e4 <fnPurgeTask+0xb4>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	b29b      	uxth	r3, r3
 8001740:	2b00      	cmp	r3, #0
 8001742:	d01e      	beq.n	8001782 <fnPurgeTask+0x52>
  {
    for (ulTp = 0; ulTp < TASK_FIFO_SIZE; ulTp++)
 8001744:	2300      	movs	r3, #0
 8001746:	60fb      	str	r3, [r7, #12]
 8001748:	e018      	b.n	800177c <fnPurgeTask+0x4c>
    {
      if (stTaskFifo [ulTp].ptrTask == ptrTask)
 800174a:	4a27      	ldr	r2, [pc, #156]	; (80017e8 <fnPurgeTask+0xb8>)
 800174c:	68fb      	ldr	r3, [r7, #12]
 800174e:	211a      	movs	r1, #26
 8001750:	fb01 f303 	mul.w	r3, r1, r3
 8001754:	4413      	add	r3, r2
 8001756:	3308      	adds	r3, #8
 8001758:	f8d3 3006 	ldr.w	r3, [r3, #6]
 800175c:	687a      	ldr	r2, [r7, #4]
 800175e:	429a      	cmp	r2, r3
 8001760:	d109      	bne.n	8001776 <fnPurgeTask+0x46>
      {
        stTaskFifo[ulTp].ptrTask = (void *)&fnNullTask;
 8001762:	4a21      	ldr	r2, [pc, #132]	; (80017e8 <fnPurgeTask+0xb8>)
 8001764:	68fb      	ldr	r3, [r7, #12]
 8001766:	211a      	movs	r1, #26
 8001768:	fb01 f303 	mul.w	r3, r1, r3
 800176c:	4413      	add	r3, r2
 800176e:	3308      	adds	r3, #8
 8001770:	4a1e      	ldr	r2, [pc, #120]	; (80017ec <fnPurgeTask+0xbc>)
 8001772:	f8c3 2006 	str.w	r2, [r3, #6]
    for (ulTp = 0; ulTp < TASK_FIFO_SIZE; ulTp++)
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	3301      	adds	r3, #1
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	2b3f      	cmp	r3, #63	; 0x3f
 8001780:	d9e3      	bls.n	800174a <fnPurgeTask+0x1a>
      }
    }
  }

  //--- Test if any timers active for the task
  for (ulTp = 0; ulTp < NUMBER_OF_TIMERS; ulTp++)
 8001782:	2300      	movs	r3, #0
 8001784:	60fb      	str	r3, [r7, #12]
 8001786:	e023      	b.n	80017d0 <fnPurgeTask+0xa0>
  {
    if (stTimers[ulTp].ulTimer)                   //--- Test if timer active
 8001788:	4a19      	ldr	r2, [pc, #100]	; (80017f0 <fnPurgeTask+0xc0>)
 800178a:	68fb      	ldr	r3, [r7, #12]
 800178c:	011b      	lsls	r3, r3, #4
 800178e:	4413      	add	r3, r2
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	2b00      	cmp	r3, #0
 8001794:	d019      	beq.n	80017ca <fnPurgeTask+0x9a>
    {
      if (stTimers [ulTp].ptrTask == ptrTask)
 8001796:	4a16      	ldr	r2, [pc, #88]	; (80017f0 <fnPurgeTask+0xc0>)
 8001798:	68fb      	ldr	r3, [r7, #12]
 800179a:	011b      	lsls	r3, r3, #4
 800179c:	4413      	add	r3, r2
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	429a      	cmp	r2, r3
 80017a4:	d111      	bne.n	80017ca <fnPurgeTask+0x9a>
      {
        stTimers[ulTp].ulTimer = 0;
 80017a6:	4a12      	ldr	r2, [pc, #72]	; (80017f0 <fnPurgeTask+0xc0>)
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	011b      	lsls	r3, r3, #4
 80017ac:	4413      	add	r3, r2
 80017ae:	2200      	movs	r2, #0
 80017b0:	701a      	strb	r2, [r3, #0]
 80017b2:	2200      	movs	r2, #0
 80017b4:	705a      	strb	r2, [r3, #1]
 80017b6:	2200      	movs	r2, #0
 80017b8:	709a      	strb	r2, [r3, #2]
 80017ba:	2200      	movs	r2, #0
 80017bc:	70da      	strb	r2, [r3, #3]
        stTimers[ulTp].ptrTask = (void *)&fnNullTask;
 80017be:	4a0c      	ldr	r2, [pc, #48]	; (80017f0 <fnPurgeTask+0xc0>)
 80017c0:	68fb      	ldr	r3, [r7, #12]
 80017c2:	011b      	lsls	r3, r3, #4
 80017c4:	4413      	add	r3, r2
 80017c6:	4a09      	ldr	r2, [pc, #36]	; (80017ec <fnPurgeTask+0xbc>)
 80017c8:	605a      	str	r2, [r3, #4]
  for (ulTp = 0; ulTp < NUMBER_OF_TIMERS; ulTp++)
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	3301      	adds	r3, #1
 80017ce:	60fb      	str	r3, [r7, #12]
 80017d0:	68fb      	ldr	r3, [r7, #12]
 80017d2:	2b03      	cmp	r3, #3
 80017d4:	d9d8      	bls.n	8001788 <fnPurgeTask+0x58>
      }
    }
  }

  GIE;
 80017d6:	b662      	cpsie	i
}
 80017d8:	bf00      	nop
 80017da:	3714      	adds	r7, #20
 80017dc:	46bd      	mov	sp, r7
 80017de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e2:	4770      	bx	lr
 80017e4:	20000b22 	.word	0x20000b22
 80017e8:	200004a0 	.word	0x200004a0
 80017ec:	080017f5 	.word	0x080017f5
 80017f0:	20000460 	.word	0x20000460

080017f4 <fnNullTask>:
//---------------------------------------------------------------------------------------------

//--- Tasks have variables

void  fnNullTask (union DFLWB unData)
{
 80017f4:	b480      	push	{r7}
 80017f6:	b083      	sub	sp, #12
 80017f8:	af00      	add	r7, sp, #0
 80017fa:	463b      	mov	r3, r7
 80017fc:	e883 0003 	stmia.w	r3, {r0, r1}

}
 8001800:	bf00      	nop
 8001802:	370c      	adds	r7, #12
 8001804:	46bd      	mov	sp, r7
 8001806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180a:	4770      	bx	lr

0800180c <fnScheduleTimer>:
//---------------------------------------------------------------------------------------------
//  struct  Timer
//---------------------------------------------------------------------------------------------

u16 fnScheduleTimer (struct Timer stInTimer)
{
 800180c:	b490      	push	{r4, r7}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	463c      	mov	r4, r7
 8001814:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  u32   ulA;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  GID;
 8001818:	b672      	cpsid	i

  for (ulA = 0; ulA < NUMBER_OF_TIMERS; ulA++)
 800181a:	2300      	movs	r3, #0
 800181c:	617b      	str	r3, [r7, #20]
 800181e:	e024      	b.n	800186a <fnScheduleTimer+0x5e>
  {
    if (!(stTimers[ulA].ulTimer))                 //--- Test if timer is available
 8001820:	4a17      	ldr	r2, [pc, #92]	; (8001880 <fnScheduleTimer+0x74>)
 8001822:	697b      	ldr	r3, [r7, #20]
 8001824:	011b      	lsls	r3, r3, #4
 8001826:	4413      	add	r3, r2
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	2b00      	cmp	r3, #0
 800182c:	d11a      	bne.n	8001864 <fnScheduleTimer+0x58>
    {
      GID;
 800182e:	b672      	cpsid	i
      stTimers[ulA].ulTimer = stInTimer.ulTimer;
 8001830:	683a      	ldr	r2, [r7, #0]
 8001832:	4913      	ldr	r1, [pc, #76]	; (8001880 <fnScheduleTimer+0x74>)
 8001834:	697b      	ldr	r3, [r7, #20]
 8001836:	011b      	lsls	r3, r3, #4
 8001838:	440b      	add	r3, r1
 800183a:	601a      	str	r2, [r3, #0]
      stTimers[ulA].ptrTask = stInTimer.ptrTask;
 800183c:	687a      	ldr	r2, [r7, #4]
 800183e:	4910      	ldr	r1, [pc, #64]	; (8001880 <fnScheduleTimer+0x74>)
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	011b      	lsls	r3, r3, #4
 8001844:	440b      	add	r3, r1
 8001846:	605a      	str	r2, [r3, #4]
      stTimers[ulA].unTaskData = stInTimer.unTaskData;
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <fnScheduleTimer+0x74>)
 800184a:	697b      	ldr	r3, [r7, #20]
 800184c:	011b      	lsls	r3, r3, #4
 800184e:	4413      	add	r3, r2
 8001850:	3308      	adds	r3, #8
 8001852:	461a      	mov	r2, r3
 8001854:	f107 0308 	add.w	r3, r7, #8
 8001858:	cb03      	ldmia	r3!, {r0, r1}
 800185a:	6010      	str	r0, [r2, #0]
 800185c:	6051      	str	r1, [r2, #4]
      GIE;
 800185e:	b662      	cpsie	i
      return TRUE;                                //--- Exit Timer Loop
 8001860:	2301      	movs	r3, #1
 8001862:	e007      	b.n	8001874 <fnScheduleTimer+0x68>
  for (ulA = 0; ulA < NUMBER_OF_TIMERS; ulA++)
 8001864:	697b      	ldr	r3, [r7, #20]
 8001866:	3301      	adds	r3, #1
 8001868:	617b      	str	r3, [r7, #20]
 800186a:	697b      	ldr	r3, [r7, #20]
 800186c:	2b03      	cmp	r3, #3
 800186e:	d9d7      	bls.n	8001820 <fnScheduleTimer+0x14>
    }
  }

  GIE;
 8001870:	b662      	cpsie	i
  return FALSE;
 8001872:	2300      	movs	r3, #0
}
 8001874:	4618      	mov	r0, r3
 8001876:	3718      	adds	r7, #24
 8001878:	46bd      	mov	sp, r7
 800187a:	bc90      	pop	{r4, r7}
 800187c:	4770      	bx	lr
 800187e:	bf00      	nop
 8001880:	20000460 	.word	0x20000460

08001884 <fnInitUSART1>:

//---------------------------------------------------------------------------------------------
//                    Initialize USART1 for Transmit and receive @ 115200
//---------------------------------------------------------------------------------------------
void  fnInitUSART1 (u32 ulBaud)                   //--- Initialize USART1 Communications
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	6078      	str	r0, [r7, #4]
  uwUSART1TxCntr = 0;                             //--- Reset the FIFO's
 800188c:	4b3d      	ldr	r3, [pc, #244]	; (8001984 <fnInitUSART1+0x100>)
 800188e:	2200      	movs	r2, #0
 8001890:	801a      	strh	r2, [r3, #0]
  uwUSART1TxIptr = 0;
 8001892:	4b3d      	ldr	r3, [pc, #244]	; (8001988 <fnInitUSART1+0x104>)
 8001894:	2200      	movs	r2, #0
 8001896:	801a      	strh	r2, [r3, #0]
  uwUSART1TxOptr = 0;
 8001898:	4b3c      	ldr	r3, [pc, #240]	; (800198c <fnInitUSART1+0x108>)
 800189a:	2200      	movs	r2, #0
 800189c:	801a      	strh	r2, [r3, #0]

  uwUSART1RxCntr = 0;
 800189e:	4b3c      	ldr	r3, [pc, #240]	; (8001990 <fnInitUSART1+0x10c>)
 80018a0:	2200      	movs	r2, #0
 80018a2:	801a      	strh	r2, [r3, #0]
  uwUSART1RxIptr = 0;
 80018a4:	4b3b      	ldr	r3, [pc, #236]	; (8001994 <fnInitUSART1+0x110>)
 80018a6:	2200      	movs	r2, #0
 80018a8:	801a      	strh	r2, [r3, #0]
  uwUSART1RxOptr = 0;
 80018aa:	4b3b      	ldr	r3, [pc, #236]	; (8001998 <fnInitUSART1+0x114>)
 80018ac:	2200      	movs	r2, #0
 80018ae:	801a      	strh	r2, [r3, #0]

  USART1_CR1 = 0x0000;                            //--- Kill the UART
 80018b0:	4b3a      	ldr	r3, [pc, #232]	; (800199c <fnInitUSART1+0x118>)
 80018b2:	2200      	movs	r2, #0
 80018b4:	601a      	str	r2, [r3, #0]
  USART1_CR2 = 0x0000;
 80018b6:	4b3a      	ldr	r3, [pc, #232]	; (80019a0 <fnInitUSART1+0x11c>)
 80018b8:	2200      	movs	r2, #0
 80018ba:	601a      	str	r2, [r3, #0]
  USART1_CR3 = 0x0000;
 80018bc:	4b39      	ldr	r3, [pc, #228]	; (80019a4 <fnInitUSART1+0x120>)
 80018be:	2200      	movs	r2, #0
 80018c0:	601a      	str	r2, [r3, #0]

  fnClrIntPend (USART1_IRQn);                     //--- Clear ANY interrupt
 80018c2:	2025      	movs	r0, #37	; 0x25
 80018c4:	f001 fd25 	bl	8003312 <fnClrIntPend>

  //--- Calculate Baud Rate
  //    NOTE: BAUD rates lower than 1000 are not possible with this USART
  //    OverSampling by 16 used  Base Clock = System Clock = 72 MHz

  USART1_BRR = SYSCLK / ulBaud;                   //--- Set Baud Rate to integer part
 80018c8:	4a37      	ldr	r2, [pc, #220]	; (80019a8 <fnInitUSART1+0x124>)
 80018ca:	4938      	ldr	r1, [pc, #224]	; (80019ac <fnInitUSART1+0x128>)
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	fbb1 f3f3 	udiv	r3, r1, r3
 80018d2:	6013      	str	r3, [r2, #0]
  USART1_CR3 = 0x0000;                            //--- All Synchronous Stuff Off
 80018d4:	4b33      	ldr	r3, [pc, #204]	; (80019a4 <fnInitUSART1+0x120>)
 80018d6:	2200      	movs	r2, #0
 80018d8:	601a      	str	r2, [r3, #0]
  USART1_CR2 = 0x0000;
 80018da:	4b31      	ldr	r3, [pc, #196]	; (80019a0 <fnInitUSART1+0x11c>)
 80018dc:	2200      	movs	r2, #0
 80018de:	601a      	str	r2, [r3, #0]
  //--- Modify this depending on USART Set_Up
  USART1_CR1 = 0x202C;                            //--- N81, Rx Int, Enable
 80018e0:	4b2e      	ldr	r3, [pc, #184]	; (800199c <fnInitUSART1+0x118>)
 80018e2:	f242 022c 	movw	r2, #8236	; 0x202c
 80018e6:	601a      	str	r2, [r3, #0]

  nop48;                                          //--- Waste a little time
 80018e8:	bf00      	nop
 80018ea:	bf00      	nop
 80018ec:	bf00      	nop
 80018ee:	bf00      	nop
 80018f0:	bf00      	nop
 80018f2:	bf00      	nop
 80018f4:	bf00      	nop
 80018f6:	bf00      	nop
 80018f8:	bf00      	nop
 80018fa:	bf00      	nop
 80018fc:	bf00      	nop
 80018fe:	bf00      	nop
 8001900:	bf00      	nop
 8001902:	bf00      	nop
 8001904:	bf00      	nop
 8001906:	bf00      	nop
 8001908:	bf00      	nop
 800190a:	bf00      	nop
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	bf00      	nop
 8001912:	bf00      	nop
 8001914:	bf00      	nop
 8001916:	bf00      	nop
 8001918:	bf00      	nop
 800191a:	bf00      	nop
 800191c:	bf00      	nop
 800191e:	bf00      	nop
 8001920:	bf00      	nop
 8001922:	bf00      	nop
 8001924:	bf00      	nop
 8001926:	bf00      	nop
 8001928:	bf00      	nop
 800192a:	bf00      	nop
 800192c:	bf00      	nop
 800192e:	bf00      	nop
 8001930:	bf00      	nop
 8001932:	bf00      	nop
 8001934:	bf00      	nop
 8001936:	bf00      	nop
 8001938:	bf00      	nop
 800193a:	bf00      	nop
 800193c:	bf00      	nop
 800193e:	bf00      	nop
 8001940:	bf00      	nop
 8001942:	bf00      	nop
 8001944:	bf00      	nop
 8001946:	bf00      	nop

  fnClrIntPend (USART1_IRQn);                     //--- Clear ANY interrupt
 8001948:	2025      	movs	r0, #37	; 0x25
 800194a:	f001 fce2 	bl	8003312 <fnClrIntPend>
  fnEnaInt (USART1_IRQn);                         //--- Enable the interrupt
 800194e:	2025      	movs	r0, #37	; 0x25
 8001950:	f001 fcb2 	bl	80032b8 <fnEnaInt>

  //--- Calculate the PACER Ticks required between BYTE Transmissions
  //    10000 / (ulBaud / 10)
  uwXmit_1_Delay = (u16)10000 / (ulBaud / 10);
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	4a16      	ldr	r2, [pc, #88]	; (80019b0 <fnInitUSART1+0x12c>)
 8001958:	fba2 2303 	umull	r2, r3, r2, r3
 800195c:	08db      	lsrs	r3, r3, #3
 800195e:	f242 7210 	movw	r2, #10000	; 0x2710
 8001962:	fbb2 f3f3 	udiv	r3, r2, r3
 8001966:	b29a      	uxth	r2, r3
 8001968:	4b12      	ldr	r3, [pc, #72]	; (80019b4 <fnInitUSART1+0x130>)
 800196a:	801a      	strh	r2, [r3, #0]
  uwXmit_1_Count = uwXmit_1_Delay;                //--- Reset the Count
 800196c:	4b11      	ldr	r3, [pc, #68]	; (80019b4 <fnInitUSART1+0x130>)
 800196e:	881a      	ldrh	r2, [r3, #0]
 8001970:	4b11      	ldr	r3, [pc, #68]	; (80019b8 <fnInitUSART1+0x134>)
 8001972:	801a      	strh	r2, [r3, #0]

  USART1_DR = ZERO;                               //--- Send a Zero
 8001974:	4b11      	ldr	r3, [pc, #68]	; (80019bc <fnInitUSART1+0x138>)
 8001976:	2200      	movs	r2, #0
 8001978:	601a      	str	r2, [r3, #0]
}
 800197a:	bf00      	nop
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
 8001982:	bf00      	nop
 8001984:	20001368 	.word	0x20001368
 8001988:	2000136c 	.word	0x2000136c
 800198c:	20000b28 	.word	0x20000b28
 8001990:	2000136e 	.word	0x2000136e
 8001994:	20003478 	.word	0x20003478
 8001998:	20003374 	.word	0x20003374
 800199c:	4001380c 	.word	0x4001380c
 80019a0:	40013810 	.word	0x40013810
 80019a4:	40013814 	.word	0x40013814
 80019a8:	40013808 	.word	0x40013808
 80019ac:	044aa200 	.word	0x044aa200
 80019b0:	cccccccd 	.word	0xcccccccd
 80019b4:	2000447c 	.word	0x2000447c
 80019b8:	200044ac 	.word	0x200044ac
 80019bc:	40013804 	.word	0x40013804

080019c0 <fnGetNextUSART1>:

//---------------------------------------------------------------------------------------------
//                     Check for and Return Data for USART Rx FIFO
//---------------------------------------------------------------------------------------------
u16   fnGetNextUSART1 (void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
  u16 uwRxData = 0;                               //--- Zero Data on Entry
 80019c6:	2300      	movs	r3, #0
 80019c8:	80fb      	strh	r3, [r7, #6]

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  GID;                                            //--- Kill Interrupts
 80019ca:	b672      	cpsid	i

  if (uwUSART1RxCntr)                             //--- Get FIFO Counter
 80019cc:	4b16      	ldr	r3, [pc, #88]	; (8001a28 <fnGetNextUSART1+0x68>)
 80019ce:	881b      	ldrh	r3, [r3, #0]
 80019d0:	2b00      	cmp	r3, #0
 80019d2:	d01f      	beq.n	8001a14 <fnGetNextUSART1+0x54>
  {
    //--- Extract the Data Byte
    uwRxData = (u16) ubUSART1RxFIFO[uwUSART1RxOptr];
 80019d4:	4b15      	ldr	r3, [pc, #84]	; (8001a2c <fnGetNextUSART1+0x6c>)
 80019d6:	881b      	ldrh	r3, [r3, #0]
 80019d8:	461a      	mov	r2, r3
 80019da:	4b15      	ldr	r3, [pc, #84]	; (8001a30 <fnGetNextUSART1+0x70>)
 80019dc:	5c9b      	ldrb	r3, [r3, r2]
 80019de:	80fb      	strh	r3, [r7, #6]
    uwRxData |= 0x8000;                           //--- Set the valid data flag
 80019e0:	88fb      	ldrh	r3, [r7, #6]
 80019e2:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 80019e6:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 80019ea:	80fb      	strh	r3, [r7, #6]
    uwUSART1RxCntr --;                            //--- Bump the counter
 80019ec:	4b0e      	ldr	r3, [pc, #56]	; (8001a28 <fnGetNextUSART1+0x68>)
 80019ee:	881b      	ldrh	r3, [r3, #0]
 80019f0:	3b01      	subs	r3, #1
 80019f2:	b29a      	uxth	r2, r3
 80019f4:	4b0c      	ldr	r3, [pc, #48]	; (8001a28 <fnGetNextUSART1+0x68>)
 80019f6:	801a      	strh	r2, [r3, #0]
    uwUSART1RxOptr ++;                            //--- Bump the input pointer
 80019f8:	4b0c      	ldr	r3, [pc, #48]	; (8001a2c <fnGetNextUSART1+0x6c>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	3301      	adds	r3, #1
 80019fe:	b29a      	uxth	r2, r3
 8001a00:	4b0a      	ldr	r3, [pc, #40]	; (8001a2c <fnGetNextUSART1+0x6c>)
 8001a02:	801a      	strh	r2, [r3, #0]
    uwUSART1RxOptr %= USART1_RX_FIFO_SIZE;        //--- Modulo Count Rx FIFO Size
 8001a04:	4b09      	ldr	r3, [pc, #36]	; (8001a2c <fnGetNextUSART1+0x6c>)
 8001a06:	881b      	ldrh	r3, [r3, #0]
 8001a08:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a0c:	b29a      	uxth	r2, r3
 8001a0e:	4b07      	ldr	r3, [pc, #28]	; (8001a2c <fnGetNextUSART1+0x6c>)
 8001a10:	801a      	strh	r2, [r3, #0]
 8001a12:	e001      	b.n	8001a18 <fnGetNextUSART1+0x58>
  }
  else
  {
    uwRxData = 0x0000;                            //--- No Data Available
 8001a14:	2300      	movs	r3, #0
 8001a16:	80fb      	strh	r3, [r7, #6]
  }

  GIE;
 8001a18:	b662      	cpsie	i
  return uwRxData;                                //--- Return the data
 8001a1a:	88fb      	ldrh	r3, [r7, #6]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	370c      	adds	r7, #12
 8001a20:	46bd      	mov	sp, r7
 8001a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a26:	4770      	bx	lr
 8001a28:	2000136e 	.word	0x2000136e
 8001a2c:	20003374 	.word	0x20003374
 8001a30:	20000d5c 	.word	0x20000d5c

08001a34 <fnUSART1_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : USART_1 Rx Interrupt Handler
//---------------------------------------------------------------------------------------------
void  fnUSART1_IRQ(void)     // 37 - USART1 General Interrupt              0x000000D4
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
  u08 ubRxData;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  GID;                                            //--- Kill Interrupts
 8001a3a:	b672      	cpsid	i
  fnClrIntPend (USART1_IRQn);                     //--- Clear the interrupt
 8001a3c:	2025      	movs	r0, #37	; 0x25
 8001a3e:	f001 fc68 	bl	8003312 <fnClrIntPend>

  if (USART1_SR & 0x0008)                         //--- Is overrun error triggered?
 8001a42:	4b1a      	ldr	r3, [pc, #104]	; (8001aac <fnUSART1_IRQ+0x78>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 0308 	and.w	r3, r3, #8
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d004      	beq.n	8001a58 <fnUSART1_IRQ+0x24>
  {
    ubRxData = (u08)USART1_DR;                    //--- Read in the data byte from USART
 8001a4e:	4b18      	ldr	r3, [pc, #96]	; (8001ab0 <fnUSART1_IRQ+0x7c>)
 8001a50:	681b      	ldr	r3, [r3, #0]
 8001a52:	71fb      	strb	r3, [r7, #7]
    GIE;                                          //--- Enable Interrupts
 8001a54:	b662      	cpsie	i
    return;                                       //--- Get out of here
 8001a56:	e025      	b.n	8001aa4 <fnUSART1_IRQ+0x70>
  }

  ubRxData = (u08)USART1_DR;                      //--- Read in the data byte from USART
 8001a58:	4b15      	ldr	r3, [pc, #84]	; (8001ab0 <fnUSART1_IRQ+0x7c>)
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	71fb      	strb	r3, [r7, #7]

  //--- Copy Rx Data to Rx FIFO
  if (uwUSART1RxCntr < (USART1_RX_FIFO_SIZE - 2))
 8001a5e:	4b15      	ldr	r3, [pc, #84]	; (8001ab4 <fnUSART1_IRQ+0x80>)
 8001a60:	881b      	ldrh	r3, [r3, #0]
 8001a62:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8001a66:	4293      	cmp	r3, r2
 8001a68:	d818      	bhi.n	8001a9c <fnUSART1_IRQ+0x68>
  {
    ubUSART1RxFIFO[uwUSART1RxIptr] = ubRxData;
 8001a6a:	4b13      	ldr	r3, [pc, #76]	; (8001ab8 <fnUSART1_IRQ+0x84>)
 8001a6c:	881b      	ldrh	r3, [r3, #0]
 8001a6e:	4619      	mov	r1, r3
 8001a70:	4a12      	ldr	r2, [pc, #72]	; (8001abc <fnUSART1_IRQ+0x88>)
 8001a72:	79fb      	ldrb	r3, [r7, #7]
 8001a74:	5453      	strb	r3, [r2, r1]
    uwUSART1RxCntr++;                             //--- Bump the RX Counter
 8001a76:	4b0f      	ldr	r3, [pc, #60]	; (8001ab4 <fnUSART1_IRQ+0x80>)
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	3301      	adds	r3, #1
 8001a7c:	b29a      	uxth	r2, r3
 8001a7e:	4b0d      	ldr	r3, [pc, #52]	; (8001ab4 <fnUSART1_IRQ+0x80>)
 8001a80:	801a      	strh	r2, [r3, #0]
    uwUSART1RxIptr++;                             //--- Bump the In Pointer
 8001a82:	4b0d      	ldr	r3, [pc, #52]	; (8001ab8 <fnUSART1_IRQ+0x84>)
 8001a84:	881b      	ldrh	r3, [r3, #0]
 8001a86:	3301      	adds	r3, #1
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	4b0b      	ldr	r3, [pc, #44]	; (8001ab8 <fnUSART1_IRQ+0x84>)
 8001a8c:	801a      	strh	r2, [r3, #0]
    uwUSART1RxIptr %= USART1_RX_FIFO_SIZE;        //--- Roll Over the FIFO
 8001a8e:	4b0a      	ldr	r3, [pc, #40]	; (8001ab8 <fnUSART1_IRQ+0x84>)
 8001a90:	881b      	ldrh	r3, [r3, #0]
 8001a92:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001a96:	b29a      	uxth	r2, r3
 8001a98:	4b07      	ldr	r3, [pc, #28]	; (8001ab8 <fnUSART1_IRQ+0x84>)
 8001a9a:	801a      	strh	r2, [r3, #0]
  }

  ubRxData = (u08)USART1_DR;                      //--- Read in the data byte from USART
 8001a9c:	4b04      	ldr	r3, [pc, #16]	; (8001ab0 <fnUSART1_IRQ+0x7c>)
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	71fb      	strb	r3, [r7, #7]
  GIE;                                            //--- Enable Interrupts before Exit
 8001aa2:	b662      	cpsie	i
}
 8001aa4:	3708      	adds	r7, #8
 8001aa6:	46bd      	mov	sp, r7
 8001aa8:	bd80      	pop	{r7, pc}
 8001aaa:	bf00      	nop
 8001aac:	40013800 	.word	0x40013800
 8001ab0:	40013804 	.word	0x40013804
 8001ab4:	2000136e 	.word	0x2000136e
 8001ab8:	20003478 	.word	0x20003478
 8001abc:	20000d5c 	.word	0x20000d5c

08001ac0 <fnXmitSvc_1>:
//                       Extract and Transmit 1 Byte from TX FIFO
//                       ----------------------------------------
//                       This function is called from the Pacer
//---------------------------------------------------------------------------------------------
void  fnXmitSvc_1 (void)
{
 8001ac0:	b480      	push	{r7}
 8001ac2:	af00      	add	r7, sp, #0
  GID;                                            //--- Kill All Interrupts
 8001ac4:	b672      	cpsid	i

  //--- Service USART #1 Transmit
  if (uwUSART1TxCntr > 0)                         //--- Test if Character Waiting
 8001ac6:	4b12      	ldr	r3, [pc, #72]	; (8001b10 <fnXmitSvc_1+0x50>)
 8001ac8:	881b      	ldrh	r3, [r3, #0]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	d019      	beq.n	8001b02 <fnXmitSvc_1+0x42>
  {
    USART1_DR = ubUSART1TxFIFO[uwUSART1TxOptr];   //--- Xmit the data
 8001ace:	4b11      	ldr	r3, [pc, #68]	; (8001b14 <fnXmitSvc_1+0x54>)
 8001ad0:	881b      	ldrh	r3, [r3, #0]
 8001ad2:	461a      	mov	r2, r3
 8001ad4:	4b10      	ldr	r3, [pc, #64]	; (8001b18 <fnXmitSvc_1+0x58>)
 8001ad6:	5c9a      	ldrb	r2, [r3, r2]
 8001ad8:	4b10      	ldr	r3, [pc, #64]	; (8001b1c <fnXmitSvc_1+0x5c>)
 8001ada:	601a      	str	r2, [r3, #0]
    uwUSART1TxCntr--;                             //--- Bump the Counter -1
 8001adc:	4b0c      	ldr	r3, [pc, #48]	; (8001b10 <fnXmitSvc_1+0x50>)
 8001ade:	881b      	ldrh	r3, [r3, #0]
 8001ae0:	3b01      	subs	r3, #1
 8001ae2:	b29a      	uxth	r2, r3
 8001ae4:	4b0a      	ldr	r3, [pc, #40]	; (8001b10 <fnXmitSvc_1+0x50>)
 8001ae6:	801a      	strh	r2, [r3, #0]
    uwUSART1TxOptr++;                             //--- Bump pointer
 8001ae8:	4b0a      	ldr	r3, [pc, #40]	; (8001b14 <fnXmitSvc_1+0x54>)
 8001aea:	881b      	ldrh	r3, [r3, #0]
 8001aec:	3301      	adds	r3, #1
 8001aee:	b29a      	uxth	r2, r3
 8001af0:	4b08      	ldr	r3, [pc, #32]	; (8001b14 <fnXmitSvc_1+0x54>)
 8001af2:	801a      	strh	r2, [r3, #0]
    uwUSART1TxOptr %= USART1_TX_FIFO_SIZE;        //--- Rollover mask
 8001af4:	4b07      	ldr	r3, [pc, #28]	; (8001b14 <fnXmitSvc_1+0x54>)
 8001af6:	881b      	ldrh	r3, [r3, #0]
 8001af8:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001afc:	b29a      	uxth	r2, r3
 8001afe:	4b05      	ldr	r3, [pc, #20]	; (8001b14 <fnXmitSvc_1+0x54>)
 8001b00:	801a      	strh	r2, [r3, #0]
  }

  GIE;                                            //--- Restore All Interrupts
 8001b02:	b662      	cpsie	i
}
 8001b04:	bf00      	nop
 8001b06:	46bd      	mov	sp, r7
 8001b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0c:	4770      	bx	lr
 8001b0e:	bf00      	nop
 8001b10:	20001368 	.word	0x20001368
 8001b14:	20000b28 	.word	0x20000b28
 8001b18:	200044b4 	.word	0x200044b4
 8001b1c:	40013804 	.word	0x40013804

08001b20 <fnByteToFIFO_1>:

//---------------------------------------------------------------------------------------------
//                         Send a single character to TX FIFO
//---------------------------------------------------------------------------------------------
void  fnByteToFIFO_1 (u08 ubByte)
{
 8001b20:	b480      	push	{r7}
 8001b22:	b083      	sub	sp, #12
 8001b24:	af00      	add	r7, sp, #0
 8001b26:	4603      	mov	r3, r0
 8001b28:	71fb      	strb	r3, [r7, #7]
  GID;                                            //--- Kill All Interrupts
 8001b2a:	b672      	cpsid	i
  //--- Place Character in FIFO
  if (uwUSART1TxCntr < (USART1_TX_FIFO_SIZE - 2))
 8001b2c:	4b12      	ldr	r3, [pc, #72]	; (8001b78 <fnByteToFIFO_1+0x58>)
 8001b2e:	881b      	ldrh	r3, [r3, #0]
 8001b30:	f240 32fd 	movw	r2, #1021	; 0x3fd
 8001b34:	4293      	cmp	r3, r2
 8001b36:	d818      	bhi.n	8001b6a <fnByteToFIFO_1+0x4a>
  {
    ubUSART1TxFIFO[uwUSART1TxIptr] = ubByte;      //--- Put Byte into FIFO
 8001b38:	4b10      	ldr	r3, [pc, #64]	; (8001b7c <fnByteToFIFO_1+0x5c>)
 8001b3a:	881b      	ldrh	r3, [r3, #0]
 8001b3c:	4619      	mov	r1, r3
 8001b3e:	4a10      	ldr	r2, [pc, #64]	; (8001b80 <fnByteToFIFO_1+0x60>)
 8001b40:	79fb      	ldrb	r3, [r7, #7]
 8001b42:	5453      	strb	r3, [r2, r1]
    uwUSART1TxIptr++;                             //--- Bump pointer
 8001b44:	4b0d      	ldr	r3, [pc, #52]	; (8001b7c <fnByteToFIFO_1+0x5c>)
 8001b46:	881b      	ldrh	r3, [r3, #0]
 8001b48:	3301      	adds	r3, #1
 8001b4a:	b29a      	uxth	r2, r3
 8001b4c:	4b0b      	ldr	r3, [pc, #44]	; (8001b7c <fnByteToFIFO_1+0x5c>)
 8001b4e:	801a      	strh	r2, [r3, #0]
    uwUSART1TxIptr %= USART1_TX_FIFO_SIZE;        //--- Rollover mask
 8001b50:	4b0a      	ldr	r3, [pc, #40]	; (8001b7c <fnByteToFIFO_1+0x5c>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	4b08      	ldr	r3, [pc, #32]	; (8001b7c <fnByteToFIFO_1+0x5c>)
 8001b5c:	801a      	strh	r2, [r3, #0]
    uwUSART1TxCntr++;                             //--- Bump the Counter
 8001b5e:	4b06      	ldr	r3, [pc, #24]	; (8001b78 <fnByteToFIFO_1+0x58>)
 8001b60:	881b      	ldrh	r3, [r3, #0]
 8001b62:	3301      	adds	r3, #1
 8001b64:	b29a      	uxth	r2, r3
 8001b66:	4b04      	ldr	r3, [pc, #16]	; (8001b78 <fnByteToFIFO_1+0x58>)
 8001b68:	801a      	strh	r2, [r3, #0]
  };

  GIE;                                            //--- Restore All Interrupts
 8001b6a:	b662      	cpsie	i
}
 8001b6c:	bf00      	nop
 8001b6e:	370c      	adds	r7, #12
 8001b70:	46bd      	mov	sp, r7
 8001b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b76:	4770      	bx	lr
 8001b78:	20001368 	.word	0x20001368
 8001b7c:	2000136c 	.word	0x2000136c
 8001b80:	200044b4 	.word	0x200044b4

08001b84 <fnSendPacketToHost>:
//          ubDL = Number of Data Unions Transmitted
//          ubData = FBWL Union  (4 Bytes;
//---------------------------------------------------------------------------------------------

void  fnSendPacketToHost (u08 ubFC, u08 ubSC, u08 ubDL, union FLWB unData[8])
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b08e      	sub	sp, #56	; 0x38
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	603b      	str	r3, [r7, #0]
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	71fb      	strb	r3, [r7, #7]
 8001b90:	460b      	mov	r3, r1
 8001b92:	71bb      	strb	r3, [r7, #6]
 8001b94:	4613      	mov	r3, r2
 8001b96:	717b      	strb	r3, [r7, #5]
  u08 ubDP;
  u08 ubVP;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  for (ubCntr = 0; ubCntr < 40; ubCntr++)
 8001b98:	2300      	movs	r3, #0
 8001b9a:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001b9e:	e00c      	b.n	8001bba <fnSendPacketToHost+0x36>
  {
    ubMessage[ubCntr] = 0;
 8001ba0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001ba4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001ba8:	4413      	add	r3, r2
 8001baa:	2200      	movs	r2, #0
 8001bac:	f803 2c30 	strb.w	r2, [r3, #-48]
  for (ubCntr = 0; ubCntr < 40; ubCntr++)
 8001bb0:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8001bba:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8001bbe:	2b27      	cmp	r3, #39	; 0x27
 8001bc0:	d9ee      	bls.n	8001ba0 <fnSendPacketToHost+0x1c>
  }

  ubMessage[0] = 0x01;
 8001bc2:	2301      	movs	r3, #1
 8001bc4:	723b      	strb	r3, [r7, #8]
  ubMessage[1] = 0xE1;
 8001bc6:	23e1      	movs	r3, #225	; 0xe1
 8001bc8:	727b      	strb	r3, [r7, #9]
  ubMessage[2] = 0x69;
 8001bca:	2369      	movs	r3, #105	; 0x69
 8001bcc:	72bb      	strb	r3, [r7, #10]
  ubMessage[3] = 0xA5;
 8001bce:	23a5      	movs	r3, #165	; 0xa5
 8001bd0:	72fb      	strb	r3, [r7, #11]
  ubMessage[4] = 0x3C;
 8001bd2:	233c      	movs	r3, #60	; 0x3c
 8001bd4:	733b      	strb	r3, [r7, #12]
  ubLRC = 0x01^0xE1^0x69^0xA5^0x3C;               //--- Calculate Message Header LRC
 8001bd6:	2310      	movs	r3, #16
 8001bd8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  //--- Add In Function Code
  ubMessage[5] = ubFC;
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	737b      	strb	r3, [r7, #13]
  ubLRC ^= ubFC;
 8001be0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001be4:	79fb      	ldrb	r3, [r7, #7]
 8001be6:	4053      	eors	r3, r2
 8001be8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  //--- Add In Sub Function Code
  ubMessage[6] = ubSC;
 8001bec:	79bb      	ldrb	r3, [r7, #6]
 8001bee:	73bb      	strb	r3, [r7, #14]
  ubLRC ^= ubSC;
 8001bf0:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001bf4:	79bb      	ldrb	r3, [r7, #6]
 8001bf6:	4053      	eors	r3, r2
 8001bf8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37

  //--- Get number of Variables Sent (4 bytes Each)
  ubMessage[7] = ubDL;
 8001bfc:	797b      	ldrb	r3, [r7, #5]
 8001bfe:	73fb      	strb	r3, [r7, #15]
  ubLRC ^= ubDL;                                  //--- Calculate New LRC
 8001c00:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001c04:	797b      	ldrb	r3, [r7, #5]
 8001c06:	4053      	eors	r3, r2
 8001c08:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  ubDP = 8;                                       //--- Next Byte in Message starts @ 8
 8001c0c:	2308      	movs	r3, #8
 8001c0e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  ubVP = 0;                                       //--- Var Pointer = 0
 8001c12:	2300      	movs	r3, #0
 8001c14:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

  //--- Data Blocks are always 4 bytes
  if (ubDL > 0)                                   //--- If Number of FBWL unions is > 0
 8001c18:	797b      	ldrb	r3, [r7, #5]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	f000 8082 	beq.w	8001d24 <fnSendPacketToHost+0x1a0>
  {
    for (ubVP = 0; ubVP < ubDL; ubVP++)
 8001c20:	2300      	movs	r3, #0
 8001c22:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001c26:	e078      	b.n	8001d1a <fnSendPacketToHost+0x196>
    {
      ubWork = unData[ubVP].ubByte[0];
 8001c28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c2c:	009b      	lsls	r3, r3, #2
 8001c2e:	683a      	ldr	r2, [r7, #0]
 8001c30:	4413      	add	r3, r2
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      ubMessage[ubDP] = ubWork;
 8001c38:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c3c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c40:	4413      	add	r3, r2
 8001c42:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001c46:	f803 2c30 	strb.w	r2, [r3, #-48]
      ubLRC ^= ubWork;
 8001c4a:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001c4e:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001c52:	4053      	eors	r3, r2
 8001c54:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      ubDP++;
 8001c58:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c5c:	3301      	adds	r3, #1
 8001c5e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

      ubWork = unData[ubVP].ubByte[1];
 8001c62:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001c66:	009b      	lsls	r3, r3, #2
 8001c68:	683a      	ldr	r2, [r7, #0]
 8001c6a:	4413      	add	r3, r2
 8001c6c:	785b      	ldrb	r3, [r3, #1]
 8001c6e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      ubMessage[ubDP] = ubWork;
 8001c72:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c76:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001c7a:	4413      	add	r3, r2
 8001c7c:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001c80:	f803 2c30 	strb.w	r2, [r3, #-48]
      ubLRC ^= ubWork;
 8001c84:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001c88:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001c8c:	4053      	eors	r3, r2
 8001c8e:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      ubDP++;
 8001c92:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001c96:	3301      	adds	r3, #1
 8001c98:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

      ubWork = unData[ubVP].ubByte[2];
 8001c9c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001ca0:	009b      	lsls	r3, r3, #2
 8001ca2:	683a      	ldr	r2, [r7, #0]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	789b      	ldrb	r3, [r3, #2]
 8001ca8:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      ubMessage[ubDP] = ubWork;
 8001cac:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001cb0:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001cb4:	4413      	add	r3, r2
 8001cb6:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001cba:	f803 2c30 	strb.w	r2, [r3, #-48]
      ubLRC ^= ubWork;
 8001cbe:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001cc2:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001cc6:	4053      	eors	r3, r2
 8001cc8:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      ubDP++;
 8001ccc:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001cd0:	3301      	adds	r3, #1
 8001cd2:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

      ubWork = unData[ubVP].ubByte[3];
 8001cd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001cda:	009b      	lsls	r3, r3, #2
 8001cdc:	683a      	ldr	r2, [r7, #0]
 8001cde:	4413      	add	r3, r2
 8001ce0:	78db      	ldrb	r3, [r3, #3]
 8001ce2:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
      ubMessage[ubDP] = ubWork;
 8001ce6:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001cea:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001cee:	4413      	add	r3, r2
 8001cf0:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001cf4:	f803 2c30 	strb.w	r2, [r3, #-48]
      ubLRC ^= ubWork;
 8001cf8:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001cfc:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001d00:	4053      	eors	r3, r2
 8001d02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
      ubDP++;
 8001d06:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001d0a:	3301      	adds	r3, #1
 8001d0c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
    for (ubVP = 0; ubVP < ubDL; ubVP++)
 8001d10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8001d14:	3301      	adds	r3, #1
 8001d16:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8001d1a:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8001d1e:	797b      	ldrb	r3, [r7, #5]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	d381      	bcc.n	8001c28 <fnSendPacketToHost+0xa4>
    }
  }

  //--- Terminate message with LRC and ~LRC
  ubMessage [ubDP] = ubLRC;
 8001d24:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001d28:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d2c:	4413      	add	r3, r2
 8001d2e:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001d32:	f803 2c30 	strb.w	r2, [r3, #-48]
  ubDP++;
 8001d36:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
  ubMessage [ubDP] = ~ubLRC;
 8001d40:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001d44:	f897 2037 	ldrb.w	r2, [r7, #55]	; 0x37
 8001d48:	43d2      	mvns	r2, r2
 8001d4a:	b2d2      	uxtb	r2, r2
 8001d4c:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8001d50:	440b      	add	r3, r1
 8001d52:	f803 2c30 	strb.w	r2, [r3, #-48]
  ubDP++;
 8001d56:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001d5a:	3301      	adds	r3, #1
 8001d5c:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34

  //--- Move Message to transmit FIFO
  for (ubWork = (0); ubWork < ubDP; ubWork++)
 8001d60:	2300      	movs	r3, #0
 8001d62:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001d66:	e00e      	b.n	8001d86 <fnSendPacketToHost+0x202>
  {
    fnByteToFIFO_1 (ubMessage[ubWork]);
 8001d68:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001d6c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8001d70:	4413      	add	r3, r2
 8001d72:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fed2 	bl	8001b20 <fnByteToFIFO_1>
  for (ubWork = (0); ubWork < ubDP; ubWork++)
 8001d7c:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 8001d80:	3301      	adds	r3, #1
 8001d82:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
 8001d86:	f897 2036 	ldrb.w	r2, [r7, #54]	; 0x36
 8001d8a:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8001d8e:	429a      	cmp	r2, r3
 8001d90:	d3ea      	bcc.n	8001d68 <fnSendPacketToHost+0x1e4>
  }
}
 8001d92:	bf00      	nop
 8001d94:	bf00      	nop
 8001d96:	3738      	adds	r7, #56	; 0x38
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	bd80      	pop	{r7, pc}

08001d9c <fnSendStop>:

//---------------------------------------------------------------------------------------------
//                         Send END Back to Host
//---------------------------------------------------------------------------------------------
void  fnSendStop (void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	b082      	sub	sp, #8
 8001da0:	af00      	add	r7, sp, #0
  u08 ubLRC = 0;
 8001da2:	2300      	movs	r3, #0
 8001da4:	71fb      	strb	r3, [r7, #7]

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  fnByteToFIFO_1 (0x01);                          //--- Start of Header
 8001da6:	2001      	movs	r0, #1
 8001da8:	f7ff feba 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x01;
 8001dac:	79fb      	ldrb	r3, [r7, #7]
 8001dae:	f083 0301 	eor.w	r3, r3, #1
 8001db2:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0xE1);                          //--- Header E1
 8001db4:	20e1      	movs	r0, #225	; 0xe1
 8001db6:	f7ff feb3 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0xE1;
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	f083 031e 	eor.w	r3, r3, #30
 8001dc0:	43db      	mvns	r3, r3
 8001dc2:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0x69);                          //--- Header 69
 8001dc4:	2069      	movs	r0, #105	; 0x69
 8001dc6:	f7ff feab 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x69;
 8001dca:	79fb      	ldrb	r3, [r7, #7]
 8001dcc:	f083 0369 	eor.w	r3, r3, #105	; 0x69
 8001dd0:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0xA5);                          //--- Header A5
 8001dd2:	20a5      	movs	r0, #165	; 0xa5
 8001dd4:	f7ff fea4 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0xA5;
 8001dd8:	79fb      	ldrb	r3, [r7, #7]
 8001dda:	f083 035a 	eor.w	r3, r3, #90	; 0x5a
 8001dde:	43db      	mvns	r3, r3
 8001de0:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0x3C);                          //--- Header 3C
 8001de2:	203c      	movs	r0, #60	; 0x3c
 8001de4:	f7ff fe9c 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x3C;
 8001de8:	79fb      	ldrb	r3, [r7, #7]
 8001dea:	f083 033c 	eor.w	r3, r3, #60	; 0x3c
 8001dee:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0x01);                          //--- STOP Function Code
 8001df0:	2001      	movs	r0, #1
 8001df2:	f7ff fe95 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x01;
 8001df6:	79fb      	ldrb	r3, [r7, #7]
 8001df8:	f083 0301 	eor.w	r3, r3, #1
 8001dfc:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0x00);                          //--- Sub Function Code = 00
 8001dfe:	2000      	movs	r0, #0
 8001e00:	f7ff fe8e 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x00;

  fnByteToFIFO_1 (0x01);                          //--- Data Length = 1
 8001e04:	2001      	movs	r0, #1
 8001e06:	f7ff fe8b 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x01;
 8001e0a:	79fb      	ldrb	r3, [r7, #7]
 8001e0c:	f083 0301 	eor.w	r3, r3, #1
 8001e10:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0);                             //--- Null
 8001e12:	2000      	movs	r0, #0
 8001e14:	f7ff fe84 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (0);                             //--- Null
 8001e18:	2000      	movs	r0, #0
 8001e1a:	f7ff fe81 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (0);                             //--- Null
 8001e1e:	2000      	movs	r0, #0
 8001e20:	f7ff fe7e 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (0);                             //--- Null
 8001e24:	2000      	movs	r0, #0
 8001e26:	f7ff fe7b 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (ubLRC);                         //--- LRC
 8001e2a:	79fb      	ldrb	r3, [r7, #7]
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	f7ff fe77 	bl	8001b20 <fnByteToFIFO_1>

  fnByteToFIFO_1 (~ubLRC);                        //--- ~LRC
 8001e32:	79fb      	ldrb	r3, [r7, #7]
 8001e34:	43db      	mvns	r3, r3
 8001e36:	b2db      	uxtb	r3, r3
 8001e38:	4618      	mov	r0, r3
 8001e3a:	f7ff fe71 	bl	8001b20 <fnByteToFIFO_1>
}
 8001e3e:	bf00      	nop
 8001e40:	3708      	adds	r7, #8
 8001e42:	46bd      	mov	sp, r7
 8001e44:	bd80      	pop	{r7, pc}

08001e46 <fnSendStart>:

//---------------------------------------------------------------------------------------------
//                         Send Start Button Back to Host
//---------------------------------------------------------------------------------------------
void  fnSendStart (void)
{
 8001e46:	b580      	push	{r7, lr}
 8001e48:	b082      	sub	sp, #8
 8001e4a:	af00      	add	r7, sp, #0
  u08 ubLRC = 0;
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	71fb      	strb	r3, [r7, #7]

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  fnByteToFIFO_1 (0x01);                          //--- Start of Header
 8001e50:	2001      	movs	r0, #1
 8001e52:	f7ff fe65 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x01;
 8001e56:	79fb      	ldrb	r3, [r7, #7]
 8001e58:	f083 0301 	eor.w	r3, r3, #1
 8001e5c:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0xE1);                          //--- Header E1
 8001e5e:	20e1      	movs	r0, #225	; 0xe1
 8001e60:	f7ff fe5e 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0xE1;
 8001e64:	79fb      	ldrb	r3, [r7, #7]
 8001e66:	f083 031e 	eor.w	r3, r3, #30
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0x69);                          //--- Header 69
 8001e6e:	2069      	movs	r0, #105	; 0x69
 8001e70:	f7ff fe56 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x69;
 8001e74:	79fb      	ldrb	r3, [r7, #7]
 8001e76:	f083 0369 	eor.w	r3, r3, #105	; 0x69
 8001e7a:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0xA5);                          //--- Header A5
 8001e7c:	20a5      	movs	r0, #165	; 0xa5
 8001e7e:	f7ff fe4f 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0xA5;
 8001e82:	79fb      	ldrb	r3, [r7, #7]
 8001e84:	f083 035a 	eor.w	r3, r3, #90	; 0x5a
 8001e88:	43db      	mvns	r3, r3
 8001e8a:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0x3C);                          //--- Header 3C
 8001e8c:	203c      	movs	r0, #60	; 0x3c
 8001e8e:	f7ff fe47 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x3C;
 8001e92:	79fb      	ldrb	r3, [r7, #7]
 8001e94:	f083 033c 	eor.w	r3, r3, #60	; 0x3c
 8001e98:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0x02);                          //--- New Start Button Pressed
 8001e9a:	2002      	movs	r0, #2
 8001e9c:	f7ff fe40 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x02;
 8001ea0:	79fb      	ldrb	r3, [r7, #7]
 8001ea2:	f083 0302 	eor.w	r3, r3, #2
 8001ea6:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0x00);                          //--- Sub Function Code = 00
 8001ea8:	2000      	movs	r0, #0
 8001eaa:	f7ff fe39 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x00;

  fnByteToFIFO_1 (0x01);                          //--- Data Length = 1
 8001eae:	2001      	movs	r0, #1
 8001eb0:	f7ff fe36 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x01;
 8001eb4:	79fb      	ldrb	r3, [r7, #7]
 8001eb6:	f083 0301 	eor.w	r3, r3, #1
 8001eba:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0);                             //--- Null
 8001ebc:	2000      	movs	r0, #0
 8001ebe:	f7ff fe2f 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (0);                             //--- Null
 8001ec2:	2000      	movs	r0, #0
 8001ec4:	f7ff fe2c 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (0);                             //--- Null
 8001ec8:	2000      	movs	r0, #0
 8001eca:	f7ff fe29 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (0);                             //--- Null
 8001ece:	2000      	movs	r0, #0
 8001ed0:	f7ff fe26 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (ubLRC);                         //--- LRC
 8001ed4:	79fb      	ldrb	r3, [r7, #7]
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	f7ff fe22 	bl	8001b20 <fnByteToFIFO_1>

  fnByteToFIFO_1 (~ubLRC);                        //--- ~LRC
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	43db      	mvns	r3, r3
 8001ee0:	b2db      	uxtb	r3, r3
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	f7ff fe1c 	bl	8001b20 <fnByteToFIFO_1>
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}

08001ef0 <fnProgramLoadRequest>:

//---------------------------------------------------------------------------------------------
//    Send Program Request To Host  Code = 0xF0
//---------------------------------------------------------------------------------------------
void  fnProgramLoadRequest (void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	b082      	sub	sp, #8
 8001ef4:	af00      	add	r7, sp, #0
  u08 ubLRC = 0;
 8001ef6:	2300      	movs	r3, #0
 8001ef8:	71fb      	strb	r3, [r7, #7]

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  fnByteToFIFO_1 (0x01);                          //--- Start of Header
 8001efa:	2001      	movs	r0, #1
 8001efc:	f7ff fe10 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x01;
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	f083 0301 	eor.w	r3, r3, #1
 8001f06:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0xE1);                          //--- Header E1
 8001f08:	20e1      	movs	r0, #225	; 0xe1
 8001f0a:	f7ff fe09 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0xE1;
 8001f0e:	79fb      	ldrb	r3, [r7, #7]
 8001f10:	f083 031e 	eor.w	r3, r3, #30
 8001f14:	43db      	mvns	r3, r3
 8001f16:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0x69);                          //--- Header 69
 8001f18:	2069      	movs	r0, #105	; 0x69
 8001f1a:	f7ff fe01 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x69;
 8001f1e:	79fb      	ldrb	r3, [r7, #7]
 8001f20:	f083 0369 	eor.w	r3, r3, #105	; 0x69
 8001f24:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0xA5);                          //--- Header A5
 8001f26:	20a5      	movs	r0, #165	; 0xa5
 8001f28:	f7ff fdfa 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0xA5;
 8001f2c:	79fb      	ldrb	r3, [r7, #7]
 8001f2e:	f083 035a 	eor.w	r3, r3, #90	; 0x5a
 8001f32:	43db      	mvns	r3, r3
 8001f34:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0x3C);                          //--- Header 3C
 8001f36:	203c      	movs	r0, #60	; 0x3c
 8001f38:	f7ff fdf2 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x3C;
 8001f3c:	79fb      	ldrb	r3, [r7, #7]
 8001f3e:	f083 033c 	eor.w	r3, r3, #60	; 0x3c
 8001f42:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0xF0);                          //--- Start Load Request
 8001f44:	20f0      	movs	r0, #240	; 0xf0
 8001f46:	f7ff fdeb 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0xF0;
 8001f4a:	79fb      	ldrb	r3, [r7, #7]
 8001f4c:	f083 030f 	eor.w	r3, r3, #15
 8001f50:	43db      	mvns	r3, r3
 8001f52:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0x00);                          //--- Sub Function Code = 00
 8001f54:	2000      	movs	r0, #0
 8001f56:	f7ff fde3 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x00;

  fnByteToFIFO_1 (0x01);                          //--- Data Length = 1 4 Byte Union
 8001f5a:	2001      	movs	r0, #1
 8001f5c:	f7ff fde0 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x01;
 8001f60:	79fb      	ldrb	r3, [r7, #7]
 8001f62:	f083 0301 	eor.w	r3, r3, #1
 8001f66:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0);                             //--- Null
 8001f68:	2000      	movs	r0, #0
 8001f6a:	f7ff fdd9 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (0);                             //--- Null
 8001f6e:	2000      	movs	r0, #0
 8001f70:	f7ff fdd6 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (0);                             //--- Null
 8001f74:	2000      	movs	r0, #0
 8001f76:	f7ff fdd3 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (0);                             //--- Null
 8001f7a:	2000      	movs	r0, #0
 8001f7c:	f7ff fdd0 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (ubLRC);                         //--- LRC
 8001f80:	79fb      	ldrb	r3, [r7, #7]
 8001f82:	4618      	mov	r0, r3
 8001f84:	f7ff fdcc 	bl	8001b20 <fnByteToFIFO_1>

  fnByteToFIFO_1 (~ubLRC);                        //--- ~LRC
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	43db      	mvns	r3, r3
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	4618      	mov	r0, r3
 8001f90:	f7ff fdc6 	bl	8001b20 <fnByteToFIFO_1>
}
 8001f94:	bf00      	nop
 8001f96:	3708      	adds	r7, #8
 8001f98:	46bd      	mov	sp, r7
 8001f9a:	bd80      	pop	{r7, pc}

08001f9c <fnSendNextLineRequest>:

//---------------------------------------------------------------------------------------------
//    Send Next Program Line Request To Host  Code = 0xF1
//---------------------------------------------------------------------------------------------
void fnSendNextLineRequest (void)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
  u08 ubLRC = 0;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	71fb      	strb	r3, [r7, #7]

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  fnByteToFIFO_1 (0x01);                          //--- Start of Header
 8001fa6:	2001      	movs	r0, #1
 8001fa8:	f7ff fdba 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x01;
 8001fac:	79fb      	ldrb	r3, [r7, #7]
 8001fae:	f083 0301 	eor.w	r3, r3, #1
 8001fb2:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0xE1);                          //--- Header E1
 8001fb4:	20e1      	movs	r0, #225	; 0xe1
 8001fb6:	f7ff fdb3 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0xE1;
 8001fba:	79fb      	ldrb	r3, [r7, #7]
 8001fbc:	f083 031e 	eor.w	r3, r3, #30
 8001fc0:	43db      	mvns	r3, r3
 8001fc2:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0x69);                          //--- Header 69
 8001fc4:	2069      	movs	r0, #105	; 0x69
 8001fc6:	f7ff fdab 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x69;
 8001fca:	79fb      	ldrb	r3, [r7, #7]
 8001fcc:	f083 0369 	eor.w	r3, r3, #105	; 0x69
 8001fd0:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0xA5);                          //--- Header A5
 8001fd2:	20a5      	movs	r0, #165	; 0xa5
 8001fd4:	f7ff fda4 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0xA5;
 8001fd8:	79fb      	ldrb	r3, [r7, #7]
 8001fda:	f083 035a 	eor.w	r3, r3, #90	; 0x5a
 8001fde:	43db      	mvns	r3, r3
 8001fe0:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0x3C);                          //--- Header 3C
 8001fe2:	203c      	movs	r0, #60	; 0x3c
 8001fe4:	f7ff fd9c 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x3C;
 8001fe8:	79fb      	ldrb	r3, [r7, #7]
 8001fea:	f083 033c 	eor.w	r3, r3, #60	; 0x3c
 8001fee:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0xF1);                          //--- ACK Function Code
 8001ff0:	20f1      	movs	r0, #241	; 0xf1
 8001ff2:	f7ff fd95 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0xFE;
 8001ff6:	79fb      	ldrb	r3, [r7, #7]
 8001ff8:	f083 0301 	eor.w	r3, r3, #1
 8001ffc:	43db      	mvns	r3, r3
 8001ffe:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0x00);                          //--- Sub Function Code = 00
 8002000:	2000      	movs	r0, #0
 8002002:	f7ff fd8d 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x00;

  fnByteToFIFO_1 (0x01);                          //--- Data Length = 1 4 Byte Union
 8002006:	2001      	movs	r0, #1
 8002008:	f7ff fd8a 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x01;
 800200c:	79fb      	ldrb	r3, [r7, #7]
 800200e:	f083 0301 	eor.w	r3, r3, #1
 8002012:	71fb      	strb	r3, [r7, #7]

  fnByteToFIFO_1 (0);                             //--- Null
 8002014:	2000      	movs	r0, #0
 8002016:	f7ff fd83 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (0);                             //--- Null
 800201a:	2000      	movs	r0, #0
 800201c:	f7ff fd80 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (0);                             //--- Null
 8002020:	2000      	movs	r0, #0
 8002022:	f7ff fd7d 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (0);                             //--- Null
 8002026:	2000      	movs	r0, #0
 8002028:	f7ff fd7a 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (ubLRC);                         //--- LRC
 800202c:	79fb      	ldrb	r3, [r7, #7]
 800202e:	4618      	mov	r0, r3
 8002030:	f7ff fd76 	bl	8001b20 <fnByteToFIFO_1>

  fnByteToFIFO_1 (~ubLRC);                        //--- ~LRC
 8002034:	79fb      	ldrb	r3, [r7, #7]
 8002036:	43db      	mvns	r3, r3
 8002038:	b2db      	uxtb	r3, r3
 800203a:	4618      	mov	r0, r3
 800203c:	f7ff fd70 	bl	8001b20 <fnByteToFIFO_1>
}
 8002040:	bf00      	nop
 8002042:	3708      	adds	r7, #8
 8002044:	46bd      	mov	sp, r7
 8002046:	bd80      	pop	{r7, pc}

08002048 <fnSendACK>:

//---------------------------------------------------------------------------------------------
//                         Send ACK Back to Host
//---------------------------------------------------------------------------------------------
void  fnSendACK (u08 ubRxFC)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	b084      	sub	sp, #16
 800204c:	af00      	add	r7, sp, #0
 800204e:	4603      	mov	r3, r0
 8002050:	71fb      	strb	r3, [r7, #7]
  u08 ubLRC = 0;
 8002052:	2300      	movs	r3, #0
 8002054:	73fb      	strb	r3, [r7, #15]

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  fnByteToFIFO_1 (0x01);                          //--- Start of Header
 8002056:	2001      	movs	r0, #1
 8002058:	f7ff fd62 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x01;
 800205c:	7bfb      	ldrb	r3, [r7, #15]
 800205e:	f083 0301 	eor.w	r3, r3, #1
 8002062:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (0xE1);                          //--- Header E1
 8002064:	20e1      	movs	r0, #225	; 0xe1
 8002066:	f7ff fd5b 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0xE1;
 800206a:	7bfb      	ldrb	r3, [r7, #15]
 800206c:	f083 031e 	eor.w	r3, r3, #30
 8002070:	43db      	mvns	r3, r3
 8002072:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (0x69);                          //--- Header 69
 8002074:	2069      	movs	r0, #105	; 0x69
 8002076:	f7ff fd53 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x69;
 800207a:	7bfb      	ldrb	r3, [r7, #15]
 800207c:	f083 0369 	eor.w	r3, r3, #105	; 0x69
 8002080:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (0xA5);                          //--- Header A5
 8002082:	20a5      	movs	r0, #165	; 0xa5
 8002084:	f7ff fd4c 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0xA5;
 8002088:	7bfb      	ldrb	r3, [r7, #15]
 800208a:	f083 035a 	eor.w	r3, r3, #90	; 0x5a
 800208e:	43db      	mvns	r3, r3
 8002090:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (0x3C);                          //--- Header 3C
 8002092:	203c      	movs	r0, #60	; 0x3c
 8002094:	f7ff fd44 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x3C;
 8002098:	7bfb      	ldrb	r3, [r7, #15]
 800209a:	f083 033c 	eor.w	r3, r3, #60	; 0x3c
 800209e:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (0xFE);                          //--- ACK Function Code
 80020a0:	20fe      	movs	r0, #254	; 0xfe
 80020a2:	f7ff fd3d 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0xFE;
 80020a6:	7bfb      	ldrb	r3, [r7, #15]
 80020a8:	f083 0301 	eor.w	r3, r3, #1
 80020ac:	43db      	mvns	r3, r3
 80020ae:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (0x00);                          //--- Sub Function Code = 00
 80020b0:	2000      	movs	r0, #0
 80020b2:	f7ff fd35 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x00;

  fnByteToFIFO_1 (0x01);                          //--- Data Length = 1 4 Byte Union
 80020b6:	2001      	movs	r0, #1
 80020b8:	f7ff fd32 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x01;
 80020bc:	7bfb      	ldrb	r3, [r7, #15]
 80020be:	f083 0301 	eor.w	r3, r3, #1
 80020c2:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (ubRxFC);                        //--- Received function code to ACK
 80020c4:	79fb      	ldrb	r3, [r7, #7]
 80020c6:	4618      	mov	r0, r3
 80020c8:	f7ff fd2a 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= ubRxFC;
 80020cc:	7bfa      	ldrb	r2, [r7, #15]
 80020ce:	79fb      	ldrb	r3, [r7, #7]
 80020d0:	4053      	eors	r3, r2
 80020d2:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (0);                             //--- Null
 80020d4:	2000      	movs	r0, #0
 80020d6:	f7ff fd23 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (0);                             //--- Null
 80020da:	2000      	movs	r0, #0
 80020dc:	f7ff fd20 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (0);                             //--- Null
 80020e0:	2000      	movs	r0, #0
 80020e2:	f7ff fd1d 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (ubLRC);                         //--- LRC
 80020e6:	7bfb      	ldrb	r3, [r7, #15]
 80020e8:	4618      	mov	r0, r3
 80020ea:	f7ff fd19 	bl	8001b20 <fnByteToFIFO_1>

  fnByteToFIFO_1 (~ubLRC);                        //--- ~LRC
 80020ee:	7bfb      	ldrb	r3, [r7, #15]
 80020f0:	43db      	mvns	r3, r3
 80020f2:	b2db      	uxtb	r3, r3
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7ff fd13 	bl	8001b20 <fnByteToFIFO_1>
}
 80020fa:	bf00      	nop
 80020fc:	3710      	adds	r7, #16
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}

08002102 <fnSendNAK>:

//---------------------------------------------------------------------------------------------
//                         Send NAK Back to Host
//---------------------------------------------------------------------------------------------
void  fnSendNAK (u08 ubRxFC, u08 ubEC)
{
 8002102:	b580      	push	{r7, lr}
 8002104:	b084      	sub	sp, #16
 8002106:	af00      	add	r7, sp, #0
 8002108:	4603      	mov	r3, r0
 800210a:	460a      	mov	r2, r1
 800210c:	71fb      	strb	r3, [r7, #7]
 800210e:	4613      	mov	r3, r2
 8002110:	71bb      	strb	r3, [r7, #6]
  u08 ubLRC = 0;
 8002112:	2300      	movs	r3, #0
 8002114:	73fb      	strb	r3, [r7, #15]

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  fnByteToFIFO_1 (0x01);                          //--- Start of Header
 8002116:	2001      	movs	r0, #1
 8002118:	f7ff fd02 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x01;
 800211c:	7bfb      	ldrb	r3, [r7, #15]
 800211e:	f083 0301 	eor.w	r3, r3, #1
 8002122:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (0xE1);                          //--- Header E1
 8002124:	20e1      	movs	r0, #225	; 0xe1
 8002126:	f7ff fcfb 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0xE1;
 800212a:	7bfb      	ldrb	r3, [r7, #15]
 800212c:	f083 031e 	eor.w	r3, r3, #30
 8002130:	43db      	mvns	r3, r3
 8002132:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (0x69);                          //--- Header 69
 8002134:	2069      	movs	r0, #105	; 0x69
 8002136:	f7ff fcf3 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x69;
 800213a:	7bfb      	ldrb	r3, [r7, #15]
 800213c:	f083 0369 	eor.w	r3, r3, #105	; 0x69
 8002140:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (0xA5);                          //--- Header A5
 8002142:	20a5      	movs	r0, #165	; 0xa5
 8002144:	f7ff fcec 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0xA5;
 8002148:	7bfb      	ldrb	r3, [r7, #15]
 800214a:	f083 035a 	eor.w	r3, r3, #90	; 0x5a
 800214e:	43db      	mvns	r3, r3
 8002150:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (0x3C);                          //--- Header 3C
 8002152:	203c      	movs	r0, #60	; 0x3c
 8002154:	f7ff fce4 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x3C;
 8002158:	7bfb      	ldrb	r3, [r7, #15]
 800215a:	f083 033c 	eor.w	r3, r3, #60	; 0x3c
 800215e:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (0xFF);                          //--- NACK Function Code
 8002160:	20ff      	movs	r0, #255	; 0xff
 8002162:	f7ff fcdd 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0xFF;
 8002166:	7bfb      	ldrb	r3, [r7, #15]
 8002168:	43db      	mvns	r3, r3
 800216a:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (0x00);                          //--- Sub Function Code = 00
 800216c:	2000      	movs	r0, #0
 800216e:	f7ff fcd7 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x00;

  fnByteToFIFO_1 (0x01);                          //--- Data Length = 1
 8002172:	2001      	movs	r0, #1
 8002174:	f7ff fcd4 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x01;
 8002178:	7bfb      	ldrb	r3, [r7, #15]
 800217a:	f083 0301 	eor.w	r3, r3, #1
 800217e:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (ubRxFC);                        //--- Received function code to NACK
 8002180:	79fb      	ldrb	r3, [r7, #7]
 8002182:	4618      	mov	r0, r3
 8002184:	f7ff fccc 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= ubRxFC;
 8002188:	7bfa      	ldrb	r2, [r7, #15]
 800218a:	79fb      	ldrb	r3, [r7, #7]
 800218c:	4053      	eors	r3, r2
 800218e:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (ubEC);                          //--- Error Code
 8002190:	79bb      	ldrb	r3, [r7, #6]
 8002192:	4618      	mov	r0, r3
 8002194:	f7ff fcc4 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (0);                             //--- Null
 8002198:	2000      	movs	r0, #0
 800219a:	f7ff fcc1 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (0);                             //--- Null
 800219e:	2000      	movs	r0, #0
 80021a0:	f7ff fcbe 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (ubLRC);                         //--- LRC
 80021a4:	7bfb      	ldrb	r3, [r7, #15]
 80021a6:	4618      	mov	r0, r3
 80021a8:	f7ff fcba 	bl	8001b20 <fnByteToFIFO_1>
  fnByteToFIFO_1 (~ubLRC);                        //--- ~LRC Bit Compliment
 80021ac:	7bfb      	ldrb	r3, [r7, #15]
 80021ae:	43db      	mvns	r3, r3
 80021b0:	b2db      	uxtb	r3, r3
 80021b2:	4618      	mov	r0, r3
 80021b4:	f7ff fcb4 	bl	8001b20 <fnByteToFIFO_1>
}
 80021b8:	bf00      	nop
 80021ba:	3710      	adds	r7, #16
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd80      	pop	{r7, pc}

080021c0 <fnSendERR>:

//---------------------------------------------------------------------------------------------
//                         Send ERR Back to Host
//---------------------------------------------------------------------------------------------
void  fnSendERR (u16 uwErrLine, u08 ubRxFC)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b084      	sub	sp, #16
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	4603      	mov	r3, r0
 80021c8:	460a      	mov	r2, r1
 80021ca:	80fb      	strh	r3, [r7, #6]
 80021cc:	4613      	mov	r3, r2
 80021ce:	717b      	strb	r3, [r7, #5]
  u08 ubLRC = 0;
 80021d0:	2300      	movs	r3, #0
 80021d2:	73fb      	strb	r3, [r7, #15]
  u08 ubA;
  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  fnByteToFIFO_1 (0x01);                          //--- Start of Header
 80021d4:	2001      	movs	r0, #1
 80021d6:	f7ff fca3 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x01;
 80021da:	7bfb      	ldrb	r3, [r7, #15]
 80021dc:	f083 0301 	eor.w	r3, r3, #1
 80021e0:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (0xE1);                          //--- Header E1
 80021e2:	20e1      	movs	r0, #225	; 0xe1
 80021e4:	f7ff fc9c 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0xE1;
 80021e8:	7bfb      	ldrb	r3, [r7, #15]
 80021ea:	f083 031e 	eor.w	r3, r3, #30
 80021ee:	43db      	mvns	r3, r3
 80021f0:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (0x69);                          //--- Header 69
 80021f2:	2069      	movs	r0, #105	; 0x69
 80021f4:	f7ff fc94 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x69;
 80021f8:	7bfb      	ldrb	r3, [r7, #15]
 80021fa:	f083 0369 	eor.w	r3, r3, #105	; 0x69
 80021fe:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (0xA5);                          //--- Header A5
 8002200:	20a5      	movs	r0, #165	; 0xa5
 8002202:	f7ff fc8d 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0xA5;
 8002206:	7bfb      	ldrb	r3, [r7, #15]
 8002208:	f083 035a 	eor.w	r3, r3, #90	; 0x5a
 800220c:	43db      	mvns	r3, r3
 800220e:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (0x3C);                          //--- Header 3C
 8002210:	203c      	movs	r0, #60	; 0x3c
 8002212:	f7ff fc85 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x69;
 8002216:	7bfb      	ldrb	r3, [r7, #15]
 8002218:	f083 0369 	eor.w	r3, r3, #105	; 0x69
 800221c:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (0xFD);                          //--- Error Function Code
 800221e:	20fd      	movs	r0, #253	; 0xfd
 8002220:	f7ff fc7e 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0xFD;
 8002224:	7bfb      	ldrb	r3, [r7, #15]
 8002226:	f083 0302 	eor.w	r3, r3, #2
 800222a:	43db      	mvns	r3, r3
 800222c:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (0x00);                          //--- Sub Function Code = 00
 800222e:	2000      	movs	r0, #0
 8002230:	f7ff fc76 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x00;

  fnByteToFIFO_1 (0x01);                          //--- Data Length = 1 Long
 8002234:	2001      	movs	r0, #1
 8002236:	f7ff fc73 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0x01;
 800223a:	7bfb      	ldrb	r3, [r7, #15]
 800223c:	f083 0301 	eor.w	r3, r3, #1
 8002240:	73fb      	strb	r3, [r7, #15]

  ubA = uwErrLine & 0xFF;                         //--- Line Number Low
 8002242:	88fb      	ldrh	r3, [r7, #6]
 8002244:	73bb      	strb	r3, [r7, #14]
  fnByteToFIFO_1 (ubA);                           //--- Transmitted Error Line #
 8002246:	7bbb      	ldrb	r3, [r7, #14]
 8002248:	4618      	mov	r0, r3
 800224a:	f7ff fc69 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= ubA;
 800224e:	7bfa      	ldrb	r2, [r7, #15]
 8002250:	7bbb      	ldrb	r3, [r7, #14]
 8002252:	4053      	eors	r3, r2
 8002254:	73fb      	strb	r3, [r7, #15]

  ubA = (uwErrLine / 16) & 0xFF;                  //--- Line Number High
 8002256:	88fb      	ldrh	r3, [r7, #6]
 8002258:	091b      	lsrs	r3, r3, #4
 800225a:	b29b      	uxth	r3, r3
 800225c:	73bb      	strb	r3, [r7, #14]
  fnByteToFIFO_1 (ubA);                           //--- Transmitted Error Line #
 800225e:	7bbb      	ldrb	r3, [r7, #14]
 8002260:	4618      	mov	r0, r3
 8002262:	f7ff fc5d 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= ubA;
 8002266:	7bfa      	ldrb	r2, [r7, #15]
 8002268:	7bbb      	ldrb	r3, [r7, #14]
 800226a:	4053      	eors	r3, r2
 800226c:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (ubRxFC);                        //--- Command Function to Report
 800226e:	797b      	ldrb	r3, [r7, #5]
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fc55 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= ubRxFC;
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	797b      	ldrb	r3, [r7, #5]
 800227a:	4053      	eors	r3, r2
 800227c:	73fb      	strb	r3, [r7, #15]

  fnByteToFIFO_1 (0);                             //--- Null
 800227e:	2000      	movs	r0, #0
 8002280:	f7ff fc4e 	bl	8001b20 <fnByteToFIFO_1>
  ubLRC ^= 0;

  fnByteToFIFO_1 (ubLRC);                         //--- LRC
 8002284:	7bfb      	ldrb	r3, [r7, #15]
 8002286:	4618      	mov	r0, r3
 8002288:	f7ff fc4a 	bl	8001b20 <fnByteToFIFO_1>
  fnByteToFIFO_1 (~ubLRC);                        //--- ~LRC
 800228c:	7bfb      	ldrb	r3, [r7, #15]
 800228e:	43db      	mvns	r3, r3
 8002290:	b2db      	uxtb	r3, r3
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fc44 	bl	8001b20 <fnByteToFIFO_1>
}
 8002298:	bf00      	nop
 800229a:	3710      	adds	r7, #16
 800229c:	46bd      	mov	sp, r7
 800229e:	bd80      	pop	{r7, pc}

080022a0 <fnRxStateMachine_1>:

u16 uwInByteCntr1;
u16 uwInBytePntr1;

void  fnRxStateMachine_1 (u08 ubRxData)
{
 80022a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80022a2:	b08f      	sub	sp, #60	; 0x3c
 80022a4:	af04      	add	r7, sp, #16
 80022a6:	4603      	mov	r3, r0
 80022a8:	71fb      	strb	r3, [r7, #7]
  struct Task stMakeTask;

  //--- Depending on character Perform a task

  switch (ubRxState1)
 80022aa:	4b9c      	ldr	r3, [pc, #624]	; (800251c <fnRxStateMachine_1+0x27c>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b0a      	cmp	r3, #10
 80022b0:	f200 81ac 	bhi.w	800260c <fnRxStateMachine_1+0x36c>
 80022b4:	a201      	add	r2, pc, #4	; (adr r2, 80022bc <fnRxStateMachine_1+0x1c>)
 80022b6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022ba:	bf00      	nop
 80022bc:	080022e9 	.word	0x080022e9
 80022c0:	08002311 	.word	0x08002311
 80022c4:	0800234d 	.word	0x0800234d
 80022c8:	08002389 	.word	0x08002389
 80022cc:	080023c5 	.word	0x080023c5
 80022d0:	08002401 	.word	0x08002401
 80022d4:	08002423 	.word	0x08002423
 80022d8:	08002445 	.word	0x08002445
 80022dc:	0800249f 	.word	0x0800249f
 80022e0:	080024eb 	.word	0x080024eb
 80022e4:	08002539 	.word	0x08002539
  {
    //--- Wait for SOH Character
    case 0:
      if (ubRxData == 0x01)
 80022e8:	79fb      	ldrb	r3, [r7, #7]
 80022ea:	2b01      	cmp	r3, #1
 80022ec:	d109      	bne.n	8002302 <fnRxStateMachine_1+0x62>
      {
        ubRxState1++;
 80022ee:	4b8b      	ldr	r3, [pc, #556]	; (800251c <fnRxStateMachine_1+0x27c>)
 80022f0:	781b      	ldrb	r3, [r3, #0]
 80022f2:	3301      	adds	r3, #1
 80022f4:	b2da      	uxtb	r2, r3
 80022f6:	4b89      	ldr	r3, [pc, #548]	; (800251c <fnRxStateMachine_1+0x27c>)
 80022f8:	701a      	strb	r2, [r3, #0]
        ubRxLRC1 = 0x01;                        //--- Preset LRC
 80022fa:	4b89      	ldr	r3, [pc, #548]	; (8002520 <fnRxStateMachine_1+0x280>)
 80022fc:	2201      	movs	r2, #1
 80022fe:	701a      	strb	r2, [r3, #0]
 8002300:	e002      	b.n	8002308 <fnRxStateMachine_1+0x68>
      }
      else
      {
        ubRxState1 = 0;                         //--- Reset State Machine
 8002302:	4b86      	ldr	r3, [pc, #536]	; (800251c <fnRxStateMachine_1+0x27c>)
 8002304:	2200      	movs	r2, #0
 8002306:	701a      	strb	r2, [r3, #0]
      }

      ubPulseCntr = 0;
 8002308:	4b86      	ldr	r3, [pc, #536]	; (8002524 <fnRxStateMachine_1+0x284>)
 800230a:	2200      	movs	r2, #0
 800230c:	701a      	strb	r2, [r3, #0]
      break;
 800230e:	e182      	b.n	8002616 <fnRxStateMachine_1+0x376>

    //--- Get Header 0xE1
    case 1:
      if (ubRxData == 0xE1)                     //--- Test for E1
 8002310:	79fb      	ldrb	r3, [r7, #7]
 8002312:	2be1      	cmp	r3, #225	; 0xe1
 8002314:	d10d      	bne.n	8002332 <fnRxStateMachine_1+0x92>
      {
        ubRxState1++;
 8002316:	4b81      	ldr	r3, [pc, #516]	; (800251c <fnRxStateMachine_1+0x27c>)
 8002318:	781b      	ldrb	r3, [r3, #0]
 800231a:	3301      	adds	r3, #1
 800231c:	b2da      	uxtb	r2, r3
 800231e:	4b7f      	ldr	r3, [pc, #508]	; (800251c <fnRxStateMachine_1+0x27c>)
 8002320:	701a      	strb	r2, [r3, #0]
        ubRxLRC1 ^= ubRxData;                   //--- Calculate LRC
 8002322:	4b7f      	ldr	r3, [pc, #508]	; (8002520 <fnRxStateMachine_1+0x280>)
 8002324:	781a      	ldrb	r2, [r3, #0]
 8002326:	79fb      	ldrb	r3, [r7, #7]
 8002328:	4053      	eors	r3, r2
 800232a:	b2da      	uxtb	r2, r3
 800232c:	4b7c      	ldr	r3, [pc, #496]	; (8002520 <fnRxStateMachine_1+0x280>)
 800232e:	701a      	strb	r2, [r3, #0]
//        fnFlashLED (2, 100);                    //--- Error LED (Red #2)
        uwErrCntr1++;
        //#############################
        ubPulseCntr = 1;
      }
      break;
 8002330:	e171      	b.n	8002616 <fnRxStateMachine_1+0x376>
        ubRxState1 = 0;                         //--- Error = Reset State Machine
 8002332:	4b7a      	ldr	r3, [pc, #488]	; (800251c <fnRxStateMachine_1+0x27c>)
 8002334:	2200      	movs	r2, #0
 8002336:	701a      	strb	r2, [r3, #0]
        uwErrCntr1++;
 8002338:	4b7b      	ldr	r3, [pc, #492]	; (8002528 <fnRxStateMachine_1+0x288>)
 800233a:	881b      	ldrh	r3, [r3, #0]
 800233c:	3301      	adds	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	4b79      	ldr	r3, [pc, #484]	; (8002528 <fnRxStateMachine_1+0x288>)
 8002342:	801a      	strh	r2, [r3, #0]
        ubPulseCntr = 1;
 8002344:	4b77      	ldr	r3, [pc, #476]	; (8002524 <fnRxStateMachine_1+0x284>)
 8002346:	2201      	movs	r2, #1
 8002348:	701a      	strb	r2, [r3, #0]
      break;
 800234a:	e164      	b.n	8002616 <fnRxStateMachine_1+0x376>

    //--- Get Header 0x69
    case 2:
      if (ubRxData == 0x69)                     //--- Test for 69
 800234c:	79fb      	ldrb	r3, [r7, #7]
 800234e:	2b69      	cmp	r3, #105	; 0x69
 8002350:	d10d      	bne.n	800236e <fnRxStateMachine_1+0xce>
      {
        ubRxState1++;
 8002352:	4b72      	ldr	r3, [pc, #456]	; (800251c <fnRxStateMachine_1+0x27c>)
 8002354:	781b      	ldrb	r3, [r3, #0]
 8002356:	3301      	adds	r3, #1
 8002358:	b2da      	uxtb	r2, r3
 800235a:	4b70      	ldr	r3, [pc, #448]	; (800251c <fnRxStateMachine_1+0x27c>)
 800235c:	701a      	strb	r2, [r3, #0]
        ubRxLRC1 ^= ubRxData;                   //--- Calculate LRC
 800235e:	4b70      	ldr	r3, [pc, #448]	; (8002520 <fnRxStateMachine_1+0x280>)
 8002360:	781a      	ldrb	r2, [r3, #0]
 8002362:	79fb      	ldrb	r3, [r7, #7]
 8002364:	4053      	eors	r3, r2
 8002366:	b2da      	uxtb	r2, r3
 8002368:	4b6d      	ldr	r3, [pc, #436]	; (8002520 <fnRxStateMachine_1+0x280>)
 800236a:	701a      	strb	r2, [r3, #0]
//        fnFlashLED (2, 100);                    //--- Error LED (Red #2)
        uwErrCntr1++;
        //#############################
        ubPulseCntr = 2;
      }
      break;
 800236c:	e153      	b.n	8002616 <fnRxStateMachine_1+0x376>
        ubRxState1 = 0;                         //--- Error = Reset State Machine
 800236e:	4b6b      	ldr	r3, [pc, #428]	; (800251c <fnRxStateMachine_1+0x27c>)
 8002370:	2200      	movs	r2, #0
 8002372:	701a      	strb	r2, [r3, #0]
        uwErrCntr1++;
 8002374:	4b6c      	ldr	r3, [pc, #432]	; (8002528 <fnRxStateMachine_1+0x288>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	3301      	adds	r3, #1
 800237a:	b29a      	uxth	r2, r3
 800237c:	4b6a      	ldr	r3, [pc, #424]	; (8002528 <fnRxStateMachine_1+0x288>)
 800237e:	801a      	strh	r2, [r3, #0]
        ubPulseCntr = 2;
 8002380:	4b68      	ldr	r3, [pc, #416]	; (8002524 <fnRxStateMachine_1+0x284>)
 8002382:	2202      	movs	r2, #2
 8002384:	701a      	strb	r2, [r3, #0]
      break;
 8002386:	e146      	b.n	8002616 <fnRxStateMachine_1+0x376>

    //--- Get Header 0xA5
    case 3:
      if (ubRxData == 0xA5)                     //--- Test for A5
 8002388:	79fb      	ldrb	r3, [r7, #7]
 800238a:	2ba5      	cmp	r3, #165	; 0xa5
 800238c:	d10d      	bne.n	80023aa <fnRxStateMachine_1+0x10a>
      {
        ubRxState1++;
 800238e:	4b63      	ldr	r3, [pc, #396]	; (800251c <fnRxStateMachine_1+0x27c>)
 8002390:	781b      	ldrb	r3, [r3, #0]
 8002392:	3301      	adds	r3, #1
 8002394:	b2da      	uxtb	r2, r3
 8002396:	4b61      	ldr	r3, [pc, #388]	; (800251c <fnRxStateMachine_1+0x27c>)
 8002398:	701a      	strb	r2, [r3, #0]
        ubRxLRC1 ^= ubRxData;                   //--- Calculate LRC
 800239a:	4b61      	ldr	r3, [pc, #388]	; (8002520 <fnRxStateMachine_1+0x280>)
 800239c:	781a      	ldrb	r2, [r3, #0]
 800239e:	79fb      	ldrb	r3, [r7, #7]
 80023a0:	4053      	eors	r3, r2
 80023a2:	b2da      	uxtb	r2, r3
 80023a4:	4b5e      	ldr	r3, [pc, #376]	; (8002520 <fnRxStateMachine_1+0x280>)
 80023a6:	701a      	strb	r2, [r3, #0]
//        fnFlashLED (2, 100);                    //--- Error LED (Red #2)
        uwErrCntr1++;
        //#############################
        ubPulseCntr = 3;
      }
      break;
 80023a8:	e135      	b.n	8002616 <fnRxStateMachine_1+0x376>
        ubRxState1 = 0;                         //--- Error = Reset State Machine
 80023aa:	4b5c      	ldr	r3, [pc, #368]	; (800251c <fnRxStateMachine_1+0x27c>)
 80023ac:	2200      	movs	r2, #0
 80023ae:	701a      	strb	r2, [r3, #0]
        uwErrCntr1++;
 80023b0:	4b5d      	ldr	r3, [pc, #372]	; (8002528 <fnRxStateMachine_1+0x288>)
 80023b2:	881b      	ldrh	r3, [r3, #0]
 80023b4:	3301      	adds	r3, #1
 80023b6:	b29a      	uxth	r2, r3
 80023b8:	4b5b      	ldr	r3, [pc, #364]	; (8002528 <fnRxStateMachine_1+0x288>)
 80023ba:	801a      	strh	r2, [r3, #0]
        ubPulseCntr = 3;
 80023bc:	4b59      	ldr	r3, [pc, #356]	; (8002524 <fnRxStateMachine_1+0x284>)
 80023be:	2203      	movs	r2, #3
 80023c0:	701a      	strb	r2, [r3, #0]
      break;
 80023c2:	e128      	b.n	8002616 <fnRxStateMachine_1+0x376>

    //--- Get Header 0x3C
    case 4:
      if (ubRxData == 0x3C)                     //--- Test for 3C
 80023c4:	79fb      	ldrb	r3, [r7, #7]
 80023c6:	2b3c      	cmp	r3, #60	; 0x3c
 80023c8:	d10d      	bne.n	80023e6 <fnRxStateMachine_1+0x146>
      {
        ubRxState1++;
 80023ca:	4b54      	ldr	r3, [pc, #336]	; (800251c <fnRxStateMachine_1+0x27c>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	3301      	adds	r3, #1
 80023d0:	b2da      	uxtb	r2, r3
 80023d2:	4b52      	ldr	r3, [pc, #328]	; (800251c <fnRxStateMachine_1+0x27c>)
 80023d4:	701a      	strb	r2, [r3, #0]
        ubRxLRC1 ^= ubRxData;                   //--- Calculate LRC
 80023d6:	4b52      	ldr	r3, [pc, #328]	; (8002520 <fnRxStateMachine_1+0x280>)
 80023d8:	781a      	ldrb	r2, [r3, #0]
 80023da:	79fb      	ldrb	r3, [r7, #7]
 80023dc:	4053      	eors	r3, r2
 80023de:	b2da      	uxtb	r2, r3
 80023e0:	4b4f      	ldr	r3, [pc, #316]	; (8002520 <fnRxStateMachine_1+0x280>)
 80023e2:	701a      	strb	r2, [r3, #0]
//        fnFlashLED (2, 100);                    //--- Error LED (Red #2)
        uwErrCntr1++;
        //#############################
        ubPulseCntr = 4;
      }
      break;
 80023e4:	e117      	b.n	8002616 <fnRxStateMachine_1+0x376>
        ubRxState1 = 0;                         //--- Error = Reset State Machine
 80023e6:	4b4d      	ldr	r3, [pc, #308]	; (800251c <fnRxStateMachine_1+0x27c>)
 80023e8:	2200      	movs	r2, #0
 80023ea:	701a      	strb	r2, [r3, #0]
        uwErrCntr1++;
 80023ec:	4b4e      	ldr	r3, [pc, #312]	; (8002528 <fnRxStateMachine_1+0x288>)
 80023ee:	881b      	ldrh	r3, [r3, #0]
 80023f0:	3301      	adds	r3, #1
 80023f2:	b29a      	uxth	r2, r3
 80023f4:	4b4c      	ldr	r3, [pc, #304]	; (8002528 <fnRxStateMachine_1+0x288>)
 80023f6:	801a      	strh	r2, [r3, #0]
        ubPulseCntr = 4;
 80023f8:	4b4a      	ldr	r3, [pc, #296]	; (8002524 <fnRxStateMachine_1+0x284>)
 80023fa:	2204      	movs	r2, #4
 80023fc:	701a      	strb	r2, [r3, #0]
      break;
 80023fe:	e10a      	b.n	8002616 <fnRxStateMachine_1+0x376>

    //--- Get Function Code
    case 5:
      ubRxLRC1 ^= ubRxData;                     //--- Calculate LRC
 8002400:	4b47      	ldr	r3, [pc, #284]	; (8002520 <fnRxStateMachine_1+0x280>)
 8002402:	781a      	ldrb	r2, [r3, #0]
 8002404:	79fb      	ldrb	r3, [r7, #7]
 8002406:	4053      	eors	r3, r2
 8002408:	b2da      	uxtb	r2, r3
 800240a:	4b45      	ldr	r3, [pc, #276]	; (8002520 <fnRxStateMachine_1+0x280>)
 800240c:	701a      	strb	r2, [r3, #0]
      stUSART1_Rx_Msg.ubFC = ubRxData;
 800240e:	4a47      	ldr	r2, [pc, #284]	; (800252c <fnRxStateMachine_1+0x28c>)
 8002410:	79fb      	ldrb	r3, [r7, #7]
 8002412:	7013      	strb	r3, [r2, #0]
      ubRxState1++;
 8002414:	4b41      	ldr	r3, [pc, #260]	; (800251c <fnRxStateMachine_1+0x27c>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	3301      	adds	r3, #1
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b3f      	ldr	r3, [pc, #252]	; (800251c <fnRxStateMachine_1+0x27c>)
 800241e:	701a      	strb	r2, [r3, #0]
      break;
 8002420:	e0f9      	b.n	8002616 <fnRxStateMachine_1+0x376>

    //--- Get Sub Function Code
    case 6:
      ubRxLRC1 ^= ubRxData;                     //--- Calculate LRC
 8002422:	4b3f      	ldr	r3, [pc, #252]	; (8002520 <fnRxStateMachine_1+0x280>)
 8002424:	781a      	ldrb	r2, [r3, #0]
 8002426:	79fb      	ldrb	r3, [r7, #7]
 8002428:	4053      	eors	r3, r2
 800242a:	b2da      	uxtb	r2, r3
 800242c:	4b3c      	ldr	r3, [pc, #240]	; (8002520 <fnRxStateMachine_1+0x280>)
 800242e:	701a      	strb	r2, [r3, #0]
      stUSART1_Rx_Msg.ubSC = ubRxData;
 8002430:	4a3e      	ldr	r2, [pc, #248]	; (800252c <fnRxStateMachine_1+0x28c>)
 8002432:	79fb      	ldrb	r3, [r7, #7]
 8002434:	7053      	strb	r3, [r2, #1]
      ubRxState1++;
 8002436:	4b39      	ldr	r3, [pc, #228]	; (800251c <fnRxStateMachine_1+0x27c>)
 8002438:	781b      	ldrb	r3, [r3, #0]
 800243a:	3301      	adds	r3, #1
 800243c:	b2da      	uxtb	r2, r3
 800243e:	4b37      	ldr	r3, [pc, #220]	; (800251c <fnRxStateMachine_1+0x27c>)
 8002440:	701a      	strb	r2, [r3, #0]
      break;
 8002442:	e0e8      	b.n	8002616 <fnRxStateMachine_1+0x376>

    //--- Get Data Len Low  (0-8) Data Length in 4 Byte Variable Assignments Bytes= 4 * Dlen
    case 7:
      ubRxLRC1 ^= ubRxData;                     //--- Calculate LRC
 8002444:	4b36      	ldr	r3, [pc, #216]	; (8002520 <fnRxStateMachine_1+0x280>)
 8002446:	781a      	ldrb	r2, [r3, #0]
 8002448:	79fb      	ldrb	r3, [r7, #7]
 800244a:	4053      	eors	r3, r2
 800244c:	b2da      	uxtb	r2, r3
 800244e:	4b34      	ldr	r3, [pc, #208]	; (8002520 <fnRxStateMachine_1+0x280>)
 8002450:	701a      	strb	r2, [r3, #0]
      stUSART1_Rx_Msg.ubDlen = ubRxData;
 8002452:	4a36      	ldr	r2, [pc, #216]	; (800252c <fnRxStateMachine_1+0x28c>)
 8002454:	79fb      	ldrb	r3, [r7, #7]
 8002456:	7093      	strb	r3, [r2, #2]

      //=== If too much Data then error out
      if (ubRxData > 8)
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	2b08      	cmp	r3, #8
 800245c:	d903      	bls.n	8002466 <fnRxStateMachine_1+0x1c6>
      {
        ubRxState1 = 0;
 800245e:	4b2f      	ldr	r3, [pc, #188]	; (800251c <fnRxStateMachine_1+0x27c>)
 8002460:	2200      	movs	r2, #0
 8002462:	701a      	strb	r2, [r3, #0]
        break;
 8002464:	e0d7      	b.n	8002616 <fnRxStateMachine_1+0x376>
      }

      if (stUSART1_Rx_Msg.ubDlen > 0)           //--- Test if Data
 8002466:	4b31      	ldr	r3, [pc, #196]	; (800252c <fnRxStateMachine_1+0x28c>)
 8002468:	789b      	ldrb	r3, [r3, #2]
 800246a:	2b00      	cmp	r3, #0
 800246c:	d010      	beq.n	8002490 <fnRxStateMachine_1+0x1f0>
      {
        ubRxState1++;                           //--- Set Next State
 800246e:	4b2b      	ldr	r3, [pc, #172]	; (800251c <fnRxStateMachine_1+0x27c>)
 8002470:	781b      	ldrb	r3, [r3, #0]
 8002472:	3301      	adds	r3, #1
 8002474:	b2da      	uxtb	r2, r3
 8002476:	4b29      	ldr	r3, [pc, #164]	; (800251c <fnRxStateMachine_1+0x27c>)
 8002478:	701a      	strb	r2, [r3, #0]
        uwInByteCntr1 = (u16)stUSART1_Rx_Msg.ubDlen * 4;   //--- Set Data Length
 800247a:	4b2c      	ldr	r3, [pc, #176]	; (800252c <fnRxStateMachine_1+0x28c>)
 800247c:	789b      	ldrb	r3, [r3, #2]
 800247e:	b29b      	uxth	r3, r3
 8002480:	009b      	lsls	r3, r3, #2
 8002482:	b29a      	uxth	r2, r3
 8002484:	4b2a      	ldr	r3, [pc, #168]	; (8002530 <fnRxStateMachine_1+0x290>)
 8002486:	801a      	strh	r2, [r3, #0]
        uwInBytePntr1 = 0;                      //--- Point to Zero Position to start
 8002488:	4b2a      	ldr	r3, [pc, #168]	; (8002534 <fnRxStateMachine_1+0x294>)
 800248a:	2200      	movs	r2, #0
 800248c:	801a      	strh	r2, [r3, #0]
      }
      else
      {
        ubRxState1 += 2;                        //--- No Data
      }
      break;
 800248e:	e0c2      	b.n	8002616 <fnRxStateMachine_1+0x376>
        ubRxState1 += 2;                        //--- No Data
 8002490:	4b22      	ldr	r3, [pc, #136]	; (800251c <fnRxStateMachine_1+0x27c>)
 8002492:	781b      	ldrb	r3, [r3, #0]
 8002494:	3302      	adds	r3, #2
 8002496:	b2da      	uxtb	r2, r3
 8002498:	4b20      	ldr	r3, [pc, #128]	; (800251c <fnRxStateMachine_1+0x27c>)
 800249a:	701a      	strb	r2, [r3, #0]
      break;
 800249c:	e0bb      	b.n	8002616 <fnRxStateMachine_1+0x376>

    //--- Input Data to Buffer
    case 8:
      ubRxLRC1 ^= ubRxData;                     //--- Calculate LRC
 800249e:	4b20      	ldr	r3, [pc, #128]	; (8002520 <fnRxStateMachine_1+0x280>)
 80024a0:	781a      	ldrb	r2, [r3, #0]
 80024a2:	79fb      	ldrb	r3, [r7, #7]
 80024a4:	4053      	eors	r3, r2
 80024a6:	b2da      	uxtb	r2, r3
 80024a8:	4b1d      	ldr	r3, [pc, #116]	; (8002520 <fnRxStateMachine_1+0x280>)
 80024aa:	701a      	strb	r2, [r3, #0]
      stUSART1_Rx_Msg.unComData[0].ubByte[uwInBytePntr1] = ubRxData;  //--- Store Data
 80024ac:	4b21      	ldr	r3, [pc, #132]	; (8002534 <fnRxStateMachine_1+0x294>)
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	461a      	mov	r2, r3
 80024b2:	4b1e      	ldr	r3, [pc, #120]	; (800252c <fnRxStateMachine_1+0x28c>)
 80024b4:	4413      	add	r3, r2
 80024b6:	79fa      	ldrb	r2, [r7, #7]
 80024b8:	70da      	strb	r2, [r3, #3]
      uwInBytePntr1++;                          //--- Bump Input Pointer
 80024ba:	4b1e      	ldr	r3, [pc, #120]	; (8002534 <fnRxStateMachine_1+0x294>)
 80024bc:	881b      	ldrh	r3, [r3, #0]
 80024be:	3301      	adds	r3, #1
 80024c0:	b29a      	uxth	r2, r3
 80024c2:	4b1c      	ldr	r3, [pc, #112]	; (8002534 <fnRxStateMachine_1+0x294>)
 80024c4:	801a      	strh	r2, [r3, #0]
      uwInByteCntr1--;                          //--- Bump Byte Counter -1
 80024c6:	4b1a      	ldr	r3, [pc, #104]	; (8002530 <fnRxStateMachine_1+0x290>)
 80024c8:	881b      	ldrh	r3, [r3, #0]
 80024ca:	3b01      	subs	r3, #1
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	4b18      	ldr	r3, [pc, #96]	; (8002530 <fnRxStateMachine_1+0x290>)
 80024d0:	801a      	strh	r2, [r3, #0]

      if (!uwInByteCntr1)                       //--- If we get to (0) then next state
 80024d2:	4b17      	ldr	r3, [pc, #92]	; (8002530 <fnRxStateMachine_1+0x290>)
 80024d4:	881b      	ldrh	r3, [r3, #0]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	f040 809c 	bne.w	8002614 <fnRxStateMachine_1+0x374>
      {
        ubRxState1++;
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <fnRxStateMachine_1+0x27c>)
 80024de:	781b      	ldrb	r3, [r3, #0]
 80024e0:	3301      	adds	r3, #1
 80024e2:	b2da      	uxtb	r2, r3
 80024e4:	4b0d      	ldr	r3, [pc, #52]	; (800251c <fnRxStateMachine_1+0x27c>)
 80024e6:	701a      	strb	r2, [r3, #0]
      }
      break;
 80024e8:	e094      	b.n	8002614 <fnRxStateMachine_1+0x374>

    //--- Get and Test LRC
    case 9:
      if (ubRxData == ubRxLRC1)                 //--- Does LRC Match?
 80024ea:	4b0d      	ldr	r3, [pc, #52]	; (8002520 <fnRxStateMachine_1+0x280>)
 80024ec:	781b      	ldrb	r3, [r3, #0]
 80024ee:	79fa      	ldrb	r2, [r7, #7]
 80024f0:	429a      	cmp	r2, r3
 80024f2:	d106      	bne.n	8002502 <fnRxStateMachine_1+0x262>
      {
        ubRxState1++;                           //--- Yes!
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <fnRxStateMachine_1+0x27c>)
 80024f6:	781b      	ldrb	r3, [r3, #0]
 80024f8:	3301      	adds	r3, #1
 80024fa:	b2da      	uxtb	r2, r3
 80024fc:	4b07      	ldr	r3, [pc, #28]	; (800251c <fnRxStateMachine_1+0x27c>)
 80024fe:	701a      	strb	r2, [r3, #0]
//        fnFlashLED (2, 100);                    //--- Error LED (Red #2)
        uwErrCntr1++;
        //#############################
        ubPulseCntr = 9;
      }
      break;
 8002500:	e089      	b.n	8002616 <fnRxStateMachine_1+0x376>
        ubRxState1 = 0;                         //--- Error = Reset State Machine
 8002502:	4b06      	ldr	r3, [pc, #24]	; (800251c <fnRxStateMachine_1+0x27c>)
 8002504:	2200      	movs	r2, #0
 8002506:	701a      	strb	r2, [r3, #0]
        uwErrCntr1++;
 8002508:	4b07      	ldr	r3, [pc, #28]	; (8002528 <fnRxStateMachine_1+0x288>)
 800250a:	881b      	ldrh	r3, [r3, #0]
 800250c:	3301      	adds	r3, #1
 800250e:	b29a      	uxth	r2, r3
 8002510:	4b05      	ldr	r3, [pc, #20]	; (8002528 <fnRxStateMachine_1+0x288>)
 8002512:	801a      	strh	r2, [r3, #0]
        ubPulseCntr = 9;
 8002514:	4b03      	ldr	r3, [pc, #12]	; (8002524 <fnRxStateMachine_1+0x284>)
 8002516:	2209      	movs	r2, #9
 8002518:	701a      	strb	r2, [r3, #0]
      break;
 800251a:	e07c      	b.n	8002616 <fnRxStateMachine_1+0x376>
 800251c:	200044a8 	.word	0x200044a8
 8002520:	2000115e 	.word	0x2000115e
 8002524:	2000492c 	.word	0x2000492c
 8002528:	2000136a 	.word	0x2000136a
 800252c:	20004480 	.word	0x20004480
 8002530:	20000b24 	.word	0x20000b24
 8002534:	20000b26 	.word	0x20000b26

    //--- Get & Test LRC Compliment
    case 10:
      if (ubRxData != (ubRxLRC1 ^ 0xFF))
 8002538:	4b38      	ldr	r3, [pc, #224]	; (800261c <fnRxStateMachine_1+0x37c>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	43db      	mvns	r3, r3
 800253e:	b2db      	uxtb	r3, r3
 8002540:	79fa      	ldrb	r2, [r7, #7]
 8002542:	429a      	cmp	r2, r3
 8002544:	d006      	beq.n	8002554 <fnRxStateMachine_1+0x2b4>
      {
//        fnFlashLED (2, 100);                    //--- Error LED (Red #2)
        ubRxState1 = 0;                         //--- Reset State Machine
 8002546:	4b36      	ldr	r3, [pc, #216]	; (8002620 <fnRxStateMachine_1+0x380>)
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
        //#############################
        ubPulseCntr = 10;
 800254c:	4b35      	ldr	r3, [pc, #212]	; (8002624 <fnRxStateMachine_1+0x384>)
 800254e:	220a      	movs	r2, #10
 8002550:	701a      	strb	r2, [r3, #0]
        return;      //--- Error Does LRC! Match?
 8002552:	e060      	b.n	8002616 <fnRxStateMachine_1+0x376>
      }

      //--- See if Room In Message FIFO
      if (uwRx1MsgCNT < 16)                     //--- Enough Room in FIFO?
 8002554:	4b34      	ldr	r3, [pc, #208]	; (8002628 <fnRxStateMachine_1+0x388>)
 8002556:	881b      	ldrh	r3, [r3, #0]
 8002558:	2b0f      	cmp	r3, #15
 800255a:	d84a      	bhi.n	80025f2 <fnRxStateMachine_1+0x352>
      {
        //--- Message Tests Ok so Place in Fifo & Shecdule Processing
        stUSART1_Msg_FIFO[uwRx1MsgIP] = stUSART1_Rx_Msg; //--- Copy to FIFO
 800255c:	4b33      	ldr	r3, [pc, #204]	; (800262c <fnRxStateMachine_1+0x38c>)
 800255e:	881b      	ldrh	r3, [r3, #0]
 8002560:	461a      	mov	r2, r3
 8002562:	4933      	ldr	r1, [pc, #204]	; (8002630 <fnRxStateMachine_1+0x390>)
 8002564:	4613      	mov	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	00da      	lsls	r2, r3, #3
 800256c:	1ad2      	subs	r2, r2, r3
 800256e:	440a      	add	r2, r1
 8002570:	4b30      	ldr	r3, [pc, #192]	; (8002634 <fnRxStateMachine_1+0x394>)
 8002572:	4610      	mov	r0, r2
 8002574:	f103 0420 	add.w	r4, r3, #32
 8002578:	4602      	mov	r2, r0
 800257a:	4619      	mov	r1, r3
 800257c:	f8d1 c000 	ldr.w	ip, [r1]
 8002580:	684e      	ldr	r6, [r1, #4]
 8002582:	688d      	ldr	r5, [r1, #8]
 8002584:	68c9      	ldr	r1, [r1, #12]
 8002586:	f8c2 c000 	str.w	ip, [r2]
 800258a:	6056      	str	r6, [r2, #4]
 800258c:	6095      	str	r5, [r2, #8]
 800258e:	60d1      	str	r1, [r2, #12]
 8002590:	3310      	adds	r3, #16
 8002592:	3010      	adds	r0, #16
 8002594:	42a3      	cmp	r3, r4
 8002596:	d1ef      	bne.n	8002578 <fnRxStateMachine_1+0x2d8>
 8002598:	4602      	mov	r2, r0
 800259a:	8819      	ldrh	r1, [r3, #0]
 800259c:	789b      	ldrb	r3, [r3, #2]
 800259e:	8011      	strh	r1, [r2, #0]
 80025a0:	7093      	strb	r3, [r2, #2]

        //--- Bump FIFO Pointers & Counters
        uwRx1MsgIP++;                           //--- Bump the input pointer
 80025a2:	4b22      	ldr	r3, [pc, #136]	; (800262c <fnRxStateMachine_1+0x38c>)
 80025a4:	881b      	ldrh	r3, [r3, #0]
 80025a6:	3301      	adds	r3, #1
 80025a8:	b29a      	uxth	r2, r3
 80025aa:	4b20      	ldr	r3, [pc, #128]	; (800262c <fnRxStateMachine_1+0x38c>)
 80025ac:	801a      	strh	r2, [r3, #0]
        uwRx1MsgIP %= 16;
 80025ae:	4b1f      	ldr	r3, [pc, #124]	; (800262c <fnRxStateMachine_1+0x38c>)
 80025b0:	881b      	ldrh	r3, [r3, #0]
 80025b2:	f003 030f 	and.w	r3, r3, #15
 80025b6:	b29a      	uxth	r2, r3
 80025b8:	4b1c      	ldr	r3, [pc, #112]	; (800262c <fnRxStateMachine_1+0x38c>)
 80025ba:	801a      	strh	r2, [r3, #0]
        uwRx1MsgCNT++;                          //--- Bump Message Counter
 80025bc:	4b1a      	ldr	r3, [pc, #104]	; (8002628 <fnRxStateMachine_1+0x388>)
 80025be:	881b      	ldrh	r3, [r3, #0]
 80025c0:	3301      	adds	r3, #1
 80025c2:	b29a      	uxth	r2, r3
 80025c4:	4b18      	ldr	r3, [pc, #96]	; (8002628 <fnRxStateMachine_1+0x388>)
 80025c6:	801a      	strh	r2, [r3, #0]

        //--- Test if this message is ment for me?
        stMakeTask.ptrTask = (void *) &fnProcMessage_1;
 80025c8:	4b1b      	ldr	r3, [pc, #108]	; (8002638 <fnRxStateMachine_1+0x398>)
 80025ca:	f8c7 301a 	str.w	r3, [r7, #26]
        stMakeTask.unTaskData.uwWord[0] = (u32)uwRx1MsgIP;   //--- Message pointer
 80025ce:	4b17      	ldr	r3, [pc, #92]	; (800262c <fnRxStateMachine_1+0x38c>)
 80025d0:	881b      	ldrh	r3, [r3, #0]
 80025d2:	83fb      	strh	r3, [r7, #30]
        fnScheduleTask (stMakeTask);
 80025d4:	466b      	mov	r3, sp
 80025d6:	f107 021c 	add.w	r2, r7, #28
 80025da:	ca07      	ldmia	r2, {r0, r1, r2}
 80025dc:	c303      	stmia	r3!, {r0, r1}
 80025de:	801a      	strh	r2, [r3, #0]
 80025e0:	f107 030c 	add.w	r3, r7, #12
 80025e4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80025e6:	f7fe ffdd 	bl	80015a4 <fnScheduleTask>
//        fnFlashLED (2, 100);                    //--- Error LED (Red #2)
        uwErrCntr1++;
        ubPulseCntr = 11;
        return;      //--- Error Does LRC! Match?
      }
      ubRxState1 = 0;                           //--- Reset State Machine
 80025ea:	4b0d      	ldr	r3, [pc, #52]	; (8002620 <fnRxStateMachine_1+0x380>)
 80025ec:	2200      	movs	r2, #0
 80025ee:	701a      	strb	r2, [r3, #0]
      break;
 80025f0:	e011      	b.n	8002616 <fnRxStateMachine_1+0x376>
        ubRxState1 = 0;                         //--- Reset State Machine
 80025f2:	4b0b      	ldr	r3, [pc, #44]	; (8002620 <fnRxStateMachine_1+0x380>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
        uwErrCntr1++;
 80025f8:	4b10      	ldr	r3, [pc, #64]	; (800263c <fnRxStateMachine_1+0x39c>)
 80025fa:	881b      	ldrh	r3, [r3, #0]
 80025fc:	3301      	adds	r3, #1
 80025fe:	b29a      	uxth	r2, r3
 8002600:	4b0e      	ldr	r3, [pc, #56]	; (800263c <fnRxStateMachine_1+0x39c>)
 8002602:	801a      	strh	r2, [r3, #0]
        ubPulseCntr = 11;
 8002604:	4b07      	ldr	r3, [pc, #28]	; (8002624 <fnRxStateMachine_1+0x384>)
 8002606:	220b      	movs	r2, #11
 8002608:	701a      	strb	r2, [r3, #0]
        return;      //--- Error Does LRC! Match?
 800260a:	e004      	b.n	8002616 <fnRxStateMachine_1+0x376>

    default:
      ubRxState1 = 0;                           //--- Error = Reset State Machine
 800260c:	4b04      	ldr	r3, [pc, #16]	; (8002620 <fnRxStateMachine_1+0x380>)
 800260e:	2200      	movs	r2, #0
 8002610:	701a      	strb	r2, [r3, #0]
      break;
 8002612:	e000      	b.n	8002616 <fnRxStateMachine_1+0x376>
      break;
 8002614:	bf00      	nop
  }
}
 8002616:	372c      	adds	r7, #44	; 0x2c
 8002618:	46bd      	mov	sp, r7
 800261a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800261c:	2000115e 	.word	0x2000115e
 8002620:	200044a8 	.word	0x200044a8
 8002624:	2000492c 	.word	0x2000492c
 8002628:	200044a4 	.word	0x200044a4
 800262c:	20001372 	.word	0x20001372
 8002630:	20000b2c 	.word	0x20000b2c
 8002634:	20004480 	.word	0x20004480
 8002638:	08002641 	.word	0x08002641
 800263c:	2000136a 	.word	0x2000136a

08002640 <fnProcMessage_1>:
//---------------------------------------------------------------------------------------------
//    Process complete message from RX State Machine #1
//---------------------------------------------------------------------------------------------

void  fnProcMessage_1 (union FLWB unData)
{
 8002640:	b480      	push	{r7}
 8002642:	b083      	sub	sp, #12
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]

}
 8002648:	bf00      	nop
 800264a:	370c      	adds	r7, #12
 800264c:	46bd      	mov	sp, r7
 800264e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002652:	4770      	bx	lr

08002654 <fnInitUSART2>:

//---------------------------------------------------------------------------------------------
//                    Initialize USART2 for Transmit and receive @ 115200
//---------------------------------------------------------------------------------------------
void  fnInitUSART2 (u32 ulBaud)                    //--- Initialize USART1 Communications
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b082      	sub	sp, #8
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
  uwUSART2TxCntr = 0;                             //--- Reset the FIFO's
 800265c:	4b3d      	ldr	r3, [pc, #244]	; (8002754 <fnInitUSART2+0x100>)
 800265e:	2200      	movs	r2, #0
 8002660:	801a      	strh	r2, [r3, #0]
  uwUSART2TxIptr = 0;
 8002662:	4b3d      	ldr	r3, [pc, #244]	; (8002758 <fnInitUSART2+0x104>)
 8002664:	2200      	movs	r2, #0
 8002666:	801a      	strh	r2, [r3, #0]
  uwUSART2TxOptr = 0;
 8002668:	4b3c      	ldr	r3, [pc, #240]	; (800275c <fnInitUSART2+0x108>)
 800266a:	2200      	movs	r2, #0
 800266c:	801a      	strh	r2, [r3, #0]

  uwUSART2RxCntr = 0;
 800266e:	4b3c      	ldr	r3, [pc, #240]	; (8002760 <fnInitUSART2+0x10c>)
 8002670:	2200      	movs	r2, #0
 8002672:	801a      	strh	r2, [r3, #0]
  uwUSART2RxIptr = 0;
 8002674:	4b3b      	ldr	r3, [pc, #236]	; (8002764 <fnInitUSART2+0x110>)
 8002676:	2200      	movs	r2, #0
 8002678:	801a      	strh	r2, [r3, #0]
  uwUSART2RxOptr = 0;
 800267a:	4b3b      	ldr	r3, [pc, #236]	; (8002768 <fnInitUSART2+0x114>)
 800267c:	2200      	movs	r2, #0
 800267e:	801a      	strh	r2, [r3, #0]

  USART2_CR1 = 0x0000;                            //--- Kill the UART
 8002680:	4b3a      	ldr	r3, [pc, #232]	; (800276c <fnInitUSART2+0x118>)
 8002682:	2200      	movs	r2, #0
 8002684:	601a      	str	r2, [r3, #0]
  USART2_CR2 = 0x0000;
 8002686:	4b3a      	ldr	r3, [pc, #232]	; (8002770 <fnInitUSART2+0x11c>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]
  USART2_CR3 = 0x0000;
 800268c:	4b39      	ldr	r3, [pc, #228]	; (8002774 <fnInitUSART2+0x120>)
 800268e:	2200      	movs	r2, #0
 8002690:	601a      	str	r2, [r3, #0]

  fnClrIntPend (USART2_IRQn);                     //--- Clear ANY interrupt
 8002692:	2026      	movs	r0, #38	; 0x26
 8002694:	f000 fe3d 	bl	8003312 <fnClrIntPend>

  //--- Calculate Baud Rate
  //    NOTE: BAUD rates lower than 1000 are not possible with this USART
  //    OverSampling by 16 used  Base Clock = System Clock = 72 MHz

  USART1_BRR = SYSCLK / ulBaud;                   //--- Set Baud Rate to integer part
 8002698:	4a37      	ldr	r2, [pc, #220]	; (8002778 <fnInitUSART2+0x124>)
 800269a:	4938      	ldr	r1, [pc, #224]	; (800277c <fnInitUSART2+0x128>)
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	fbb1 f3f3 	udiv	r3, r1, r3
 80026a2:	6013      	str	r3, [r2, #0]

  USART2_CR3 = 0x0000;                            //--- All Synchronous Stuff Off
 80026a4:	4b33      	ldr	r3, [pc, #204]	; (8002774 <fnInitUSART2+0x120>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	601a      	str	r2, [r3, #0]
  USART2_CR2 = 0x0000;
 80026aa:	4b31      	ldr	r3, [pc, #196]	; (8002770 <fnInitUSART2+0x11c>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	601a      	str	r2, [r3, #0]
  //--- Modify this depending on USART Set_Up
  USART2_CR1 = 0x202C;                            //--- N81, Rx Int, Enable
 80026b0:	4b2e      	ldr	r3, [pc, #184]	; (800276c <fnInitUSART2+0x118>)
 80026b2:	f242 022c 	movw	r2, #8236	; 0x202c
 80026b6:	601a      	str	r2, [r3, #0]

  nop48;                                          //--- Waste a little time
 80026b8:	bf00      	nop
 80026ba:	bf00      	nop
 80026bc:	bf00      	nop
 80026be:	bf00      	nop
 80026c0:	bf00      	nop
 80026c2:	bf00      	nop
 80026c4:	bf00      	nop
 80026c6:	bf00      	nop
 80026c8:	bf00      	nop
 80026ca:	bf00      	nop
 80026cc:	bf00      	nop
 80026ce:	bf00      	nop
 80026d0:	bf00      	nop
 80026d2:	bf00      	nop
 80026d4:	bf00      	nop
 80026d6:	bf00      	nop
 80026d8:	bf00      	nop
 80026da:	bf00      	nop
 80026dc:	bf00      	nop
 80026de:	bf00      	nop
 80026e0:	bf00      	nop
 80026e2:	bf00      	nop
 80026e4:	bf00      	nop
 80026e6:	bf00      	nop
 80026e8:	bf00      	nop
 80026ea:	bf00      	nop
 80026ec:	bf00      	nop
 80026ee:	bf00      	nop
 80026f0:	bf00      	nop
 80026f2:	bf00      	nop
 80026f4:	bf00      	nop
 80026f6:	bf00      	nop
 80026f8:	bf00      	nop
 80026fa:	bf00      	nop
 80026fc:	bf00      	nop
 80026fe:	bf00      	nop
 8002700:	bf00      	nop
 8002702:	bf00      	nop
 8002704:	bf00      	nop
 8002706:	bf00      	nop
 8002708:	bf00      	nop
 800270a:	bf00      	nop
 800270c:	bf00      	nop
 800270e:	bf00      	nop
 8002710:	bf00      	nop
 8002712:	bf00      	nop
 8002714:	bf00      	nop
 8002716:	bf00      	nop

  fnClrIntPend (USART2_IRQn);                     //--- Clear ANY interrupt
 8002718:	2026      	movs	r0, #38	; 0x26
 800271a:	f000 fdfa 	bl	8003312 <fnClrIntPend>
  fnEnaInt (USART2_IRQn);                         //--- Enable the interrupt
 800271e:	2026      	movs	r0, #38	; 0x26
 8002720:	f000 fdca 	bl	80032b8 <fnEnaInt>

  //--- Calculate the PACER Ticks required between BYTE Transmissions
  //    10000 / (ulBaud / 10)
  uwXmit_2_Delay = (u16)10000 / (ulBaud / 10);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	4a16      	ldr	r2, [pc, #88]	; (8002780 <fnInitUSART2+0x12c>)
 8002728:	fba2 2303 	umull	r2, r3, r2, r3
 800272c:	08db      	lsrs	r3, r3, #3
 800272e:	f242 7210 	movw	r2, #10000	; 0x2710
 8002732:	fbb2 f3f3 	udiv	r3, r2, r3
 8002736:	b29a      	uxth	r2, r3
 8002738:	4b12      	ldr	r3, [pc, #72]	; (8002784 <fnInitUSART2+0x130>)
 800273a:	801a      	strh	r2, [r3, #0]
  uwXmit_2_Count = uwXmit_2_Delay;                //--- Reset the Count
 800273c:	4b11      	ldr	r3, [pc, #68]	; (8002784 <fnInitUSART2+0x130>)
 800273e:	881a      	ldrh	r2, [r3, #0]
 8002740:	4b11      	ldr	r3, [pc, #68]	; (8002788 <fnInitUSART2+0x134>)
 8002742:	801a      	strh	r2, [r3, #0]

  USART1_DR = ZERO;                               //--- Send a Zero
 8002744:	4b11      	ldr	r3, [pc, #68]	; (800278c <fnInitUSART2+0x138>)
 8002746:	2200      	movs	r2, #0
 8002748:	601a      	str	r2, [r3, #0]
}
 800274a:	bf00      	nop
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}
 8002752:	bf00      	nop
 8002754:	200044a6 	.word	0x200044a6
 8002758:	200044ae 	.word	0x200044ae
 800275c:	20001362 	.word	0x20001362
 8002760:	200044b0 	.word	0x200044b0
 8002764:	2000447e 	.word	0x2000447e
 8002768:	20001370 	.word	0x20001370
 800276c:	4000440c 	.word	0x4000440c
 8002770:	40004410 	.word	0x40004410
 8002774:	40004414 	.word	0x40004414
 8002778:	40013808 	.word	0x40013808
 800277c:	044aa200 	.word	0x044aa200
 8002780:	cccccccd 	.word	0xcccccccd
 8002784:	200044aa 	.word	0x200044aa
 8002788:	20001360 	.word	0x20001360
 800278c:	40013804 	.word	0x40013804

08002790 <fnUSART2_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : USART_2 Rx Interrupt Handler
//---------------------------------------------------------------------------------------------
void  fnUSART2_IRQ(void)                        //--- 38 - USART2 General Interrupt
{
 8002790:	b580      	push	{r7, lr}
 8002792:	b082      	sub	sp, #8
 8002794:	af00      	add	r7, sp, #0
  u08 ubRxData;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  GID;                                            //--- Kill Interrupts
 8002796:	b672      	cpsid	i

  fnClrIntPend (USART2_IRQn);                     //--- Clear the interrupt
 8002798:	2026      	movs	r0, #38	; 0x26
 800279a:	f000 fdba 	bl	8003312 <fnClrIntPend>

  if (USART2_SR & 0x0008)                         //--- Is overrun error triggered?
 800279e:	4b1a      	ldr	r3, [pc, #104]	; (8002808 <fnUSART2_IRQ+0x78>)
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	f003 0308 	and.w	r3, r3, #8
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d004      	beq.n	80027b4 <fnUSART2_IRQ+0x24>
  {
    ubRxData = (u08)USART2_DR;                    //--- Read in the data byte from USART
 80027aa:	4b18      	ldr	r3, [pc, #96]	; (800280c <fnUSART2_IRQ+0x7c>)
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	71fb      	strb	r3, [r7, #7]
    GIE;                                          //--- Enable Interrupts
 80027b0:	b662      	cpsie	i
    return;                                       //--- Get out of here
 80027b2:	e025      	b.n	8002800 <fnUSART2_IRQ+0x70>
  }

  ubRxData = (u08)USART2_DR;                      //--- Read in the data byte from USART
 80027b4:	4b15      	ldr	r3, [pc, #84]	; (800280c <fnUSART2_IRQ+0x7c>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	71fb      	strb	r3, [r7, #7]

  //--- Copy Rx Data to Rx FIFO
  if (uwUSART2RxCntr < (USART2_RX_SIZE - 2))
 80027ba:	4b15      	ldr	r3, [pc, #84]	; (8002810 <fnUSART2_IRQ+0x80>)
 80027bc:	881b      	ldrh	r3, [r3, #0]
 80027be:	f640 72fd 	movw	r2, #4093	; 0xffd
 80027c2:	4293      	cmp	r3, r2
 80027c4:	d818      	bhi.n	80027f8 <fnUSART2_IRQ+0x68>
  {
    ubUSART2RxFIFO[uwUSART1RxIptr] = ubRxData;
 80027c6:	4b13      	ldr	r3, [pc, #76]	; (8002814 <fnUSART2_IRQ+0x84>)
 80027c8:	881b      	ldrh	r3, [r3, #0]
 80027ca:	4619      	mov	r1, r3
 80027cc:	4a12      	ldr	r2, [pc, #72]	; (8002818 <fnUSART2_IRQ+0x88>)
 80027ce:	79fb      	ldrb	r3, [r7, #7]
 80027d0:	5453      	strb	r3, [r2, r1]
    uwUSART2RxCntr++;                             //--- Bump the RX Counter
 80027d2:	4b0f      	ldr	r3, [pc, #60]	; (8002810 <fnUSART2_IRQ+0x80>)
 80027d4:	881b      	ldrh	r3, [r3, #0]
 80027d6:	3301      	adds	r3, #1
 80027d8:	b29a      	uxth	r2, r3
 80027da:	4b0d      	ldr	r3, [pc, #52]	; (8002810 <fnUSART2_IRQ+0x80>)
 80027dc:	801a      	strh	r2, [r3, #0]
    uwUSART2RxIptr++;                             //--- Bump the In Pointer
 80027de:	4b0f      	ldr	r3, [pc, #60]	; (800281c <fnUSART2_IRQ+0x8c>)
 80027e0:	881b      	ldrh	r3, [r3, #0]
 80027e2:	3301      	adds	r3, #1
 80027e4:	b29a      	uxth	r2, r3
 80027e6:	4b0d      	ldr	r3, [pc, #52]	; (800281c <fnUSART2_IRQ+0x8c>)
 80027e8:	801a      	strh	r2, [r3, #0]
    uwUSART2RxIptr %= USART2_RX_SIZE;             //--- Roll Over the FIFO
 80027ea:	4b0c      	ldr	r3, [pc, #48]	; (800281c <fnUSART2_IRQ+0x8c>)
 80027ec:	881b      	ldrh	r3, [r3, #0]
 80027ee:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027f2:	b29a      	uxth	r2, r3
 80027f4:	4b09      	ldr	r3, [pc, #36]	; (800281c <fnUSART2_IRQ+0x8c>)
 80027f6:	801a      	strh	r2, [r3, #0]
  }

  ubRxData = (u08)USART2_DR;                      //--- Read in the data byte from USART
 80027f8:	4b04      	ldr	r3, [pc, #16]	; (800280c <fnUSART2_IRQ+0x7c>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	71fb      	strb	r3, [r7, #7]
  GIE;                                            //--- Enable Interrupts
 80027fe:	b662      	cpsie	i
}
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40004400 	.word	0x40004400
 800280c:	40004404 	.word	0x40004404
 8002810:	200044b0 	.word	0x200044b0
 8002814:	20003478 	.word	0x20003478
 8002818:	2000347c 	.word	0x2000347c
 800281c:	2000447e 	.word	0x2000447e

08002820 <fnGetNextUSART2>:

//---------------------------------------------------------------------------------------------
//                     Check for and Return Data for USART Rx FIFO
//---------------------------------------------------------------------------------------------
u16   fnGetNextUSART2 (void)
{
 8002820:	b480      	push	{r7}
 8002822:	b083      	sub	sp, #12
 8002824:	af00      	add	r7, sp, #0
  u16 uwRxData = 0;                               //--- Zero Data on Entry
 8002826:	2300      	movs	r3, #0
 8002828:	80fb      	strh	r3, [r7, #6]

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  GID;                                            //--- Kill Interrupts
 800282a:	b672      	cpsid	i

  if (uwUSART2RxCntr)                             //--- Get FIFO Counter
 800282c:	4b16      	ldr	r3, [pc, #88]	; (8002888 <fnGetNextUSART2+0x68>)
 800282e:	881b      	ldrh	r3, [r3, #0]
 8002830:	2b00      	cmp	r3, #0
 8002832:	d01f      	beq.n	8002874 <fnGetNextUSART2+0x54>
  {
    //--- Extract the Data Byte
    uwRxData = (u16) ubUSART2RxFIFO[uwUSART1RxOptr];
 8002834:	4b15      	ldr	r3, [pc, #84]	; (800288c <fnGetNextUSART2+0x6c>)
 8002836:	881b      	ldrh	r3, [r3, #0]
 8002838:	461a      	mov	r2, r3
 800283a:	4b15      	ldr	r3, [pc, #84]	; (8002890 <fnGetNextUSART2+0x70>)
 800283c:	5c9b      	ldrb	r3, [r3, r2]
 800283e:	80fb      	strh	r3, [r7, #6]
    uwRxData |= 0x8000;                           //--- Set the valid data flag
 8002840:	88fb      	ldrh	r3, [r7, #6]
 8002842:	ea6f 4343 	mvn.w	r3, r3, lsl #17
 8002846:	ea6f 4353 	mvn.w	r3, r3, lsr #17
 800284a:	80fb      	strh	r3, [r7, #6]
    uwUSART2RxCntr --;                            //--- Bump the counter
 800284c:	4b0e      	ldr	r3, [pc, #56]	; (8002888 <fnGetNextUSART2+0x68>)
 800284e:	881b      	ldrh	r3, [r3, #0]
 8002850:	3b01      	subs	r3, #1
 8002852:	b29a      	uxth	r2, r3
 8002854:	4b0c      	ldr	r3, [pc, #48]	; (8002888 <fnGetNextUSART2+0x68>)
 8002856:	801a      	strh	r2, [r3, #0]
    uwUSART2RxOptr ++;                            //--- Bump the input pointer
 8002858:	4b0e      	ldr	r3, [pc, #56]	; (8002894 <fnGetNextUSART2+0x74>)
 800285a:	881b      	ldrh	r3, [r3, #0]
 800285c:	3301      	adds	r3, #1
 800285e:	b29a      	uxth	r2, r3
 8002860:	4b0c      	ldr	r3, [pc, #48]	; (8002894 <fnGetNextUSART2+0x74>)
 8002862:	801a      	strh	r2, [r3, #0]
    uwUSART2RxOptr %= USART2_RX_SIZE;             //--- Modulo Count Rx FIFO Size
 8002864:	4b0b      	ldr	r3, [pc, #44]	; (8002894 <fnGetNextUSART2+0x74>)
 8002866:	881b      	ldrh	r3, [r3, #0]
 8002868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800286c:	b29a      	uxth	r2, r3
 800286e:	4b09      	ldr	r3, [pc, #36]	; (8002894 <fnGetNextUSART2+0x74>)
 8002870:	801a      	strh	r2, [r3, #0]
 8002872:	e001      	b.n	8002878 <fnGetNextUSART2+0x58>
  }
  else
  {
    uwRxData = 0x0000;                            //--- No Data Available
 8002874:	2300      	movs	r3, #0
 8002876:	80fb      	strh	r3, [r7, #6]
  }

  GIE;
 8002878:	b662      	cpsie	i
  return uwRxData;                                //--- Return the data
 800287a:	88fb      	ldrh	r3, [r7, #6]
}
 800287c:	4618      	mov	r0, r3
 800287e:	370c      	adds	r7, #12
 8002880:	46bd      	mov	sp, r7
 8002882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002886:	4770      	bx	lr
 8002888:	200044b0 	.word	0x200044b0
 800288c:	20003374 	.word	0x20003374
 8002890:	2000347c 	.word	0x2000347c
 8002894:	20001370 	.word	0x20001370

08002898 <fnXmitSvc_2>:
//                       Extract and Transmit 1 Byte from TX FIFO
//                       ----------------------------------------
//                       This function is called once every 100uS
//---------------------------------------------------------------------------------------------
void  fnXmitSvc_2 (void)
{
 8002898:	b480      	push	{r7}
 800289a:	af00      	add	r7, sp, #0
  GID;                                            //--- Kill All Interrupts
 800289c:	b672      	cpsid	i
  //--- Service USART #1 Transmit
  if (uwUSART2TxCntr > 0)                         //--- Test if Character Waiting
 800289e:	4b12      	ldr	r3, [pc, #72]	; (80028e8 <fnXmitSvc_2+0x50>)
 80028a0:	881b      	ldrh	r3, [r3, #0]
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d019      	beq.n	80028da <fnXmitSvc_2+0x42>
  {
    USART2_DR = ubUSART2TxFIFO[uwUSART2TxOptr];   //--- Xmit the data
 80028a6:	4b11      	ldr	r3, [pc, #68]	; (80028ec <fnXmitSvc_2+0x54>)
 80028a8:	881b      	ldrh	r3, [r3, #0]
 80028aa:	461a      	mov	r2, r3
 80028ac:	4b10      	ldr	r3, [pc, #64]	; (80028f0 <fnXmitSvc_2+0x58>)
 80028ae:	5c9a      	ldrb	r2, [r3, r2]
 80028b0:	4b10      	ldr	r3, [pc, #64]	; (80028f4 <fnXmitSvc_2+0x5c>)
 80028b2:	601a      	str	r2, [r3, #0]
    uwUSART2TxCntr--;                             //--- Bump the Counter -1
 80028b4:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <fnXmitSvc_2+0x50>)
 80028b6:	881b      	ldrh	r3, [r3, #0]
 80028b8:	3b01      	subs	r3, #1
 80028ba:	b29a      	uxth	r2, r3
 80028bc:	4b0a      	ldr	r3, [pc, #40]	; (80028e8 <fnXmitSvc_2+0x50>)
 80028be:	801a      	strh	r2, [r3, #0]
    uwUSART2TxOptr++;                             //--- Bump pointer
 80028c0:	4b0a      	ldr	r3, [pc, #40]	; (80028ec <fnXmitSvc_2+0x54>)
 80028c2:	881b      	ldrh	r3, [r3, #0]
 80028c4:	3301      	adds	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	4b08      	ldr	r3, [pc, #32]	; (80028ec <fnXmitSvc_2+0x54>)
 80028ca:	801a      	strh	r2, [r3, #0]
    uwUSART2TxOptr %= USART2_TX_SIZE;             //--- Rollover at 8192 Characters
 80028cc:	4b07      	ldr	r3, [pc, #28]	; (80028ec <fnXmitSvc_2+0x54>)
 80028ce:	881b      	ldrh	r3, [r3, #0]
 80028d0:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80028d4:	b29a      	uxth	r2, r3
 80028d6:	4b05      	ldr	r3, [pc, #20]	; (80028ec <fnXmitSvc_2+0x54>)
 80028d8:	801a      	strh	r2, [r3, #0]
  }

  GIE;                                            //--- Restore All Interrupts
 80028da:	b662      	cpsie	i
}
 80028dc:	bf00      	nop
 80028de:	46bd      	mov	sp, r7
 80028e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e4:	4770      	bx	lr
 80028e6:	bf00      	nop
 80028e8:	200044a6 	.word	0x200044a6
 80028ec:	20001362 	.word	0x20001362
 80028f0:	20001374 	.word	0x20001374
 80028f4:	40004404 	.word	0x40004404

080028f8 <fnByteToFIFO_2>:

//---------------------------------------------------------------------------------------------
//                     Send a single character to TX FIFO
//---------------------------------------------------------------------------------------------
void  fnByteToFIFO_2 (u08 ubChar)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	4603      	mov	r3, r0
 8002900:	71fb      	strb	r3, [r7, #7]
  //--- Place Character in FIFO
  if (uwUSART2TxCntr < (USART2_TX_SIZE - 2))
 8002902:	4b12      	ldr	r3, [pc, #72]	; (800294c <fnByteToFIFO_2+0x54>)
 8002904:	881b      	ldrh	r3, [r3, #0]
 8002906:	f641 72fd 	movw	r2, #8189	; 0x1ffd
 800290a:	4293      	cmp	r3, r2
 800290c:	d818      	bhi.n	8002940 <fnByteToFIFO_2+0x48>
  {
    ubUSART2TxFIFO[uwUSART2TxIptr] = ubChar;      //--- Put Char in FIFO
 800290e:	4b10      	ldr	r3, [pc, #64]	; (8002950 <fnByteToFIFO_2+0x58>)
 8002910:	881b      	ldrh	r3, [r3, #0]
 8002912:	4619      	mov	r1, r3
 8002914:	4a0f      	ldr	r2, [pc, #60]	; (8002954 <fnByteToFIFO_2+0x5c>)
 8002916:	79fb      	ldrb	r3, [r7, #7]
 8002918:	5453      	strb	r3, [r2, r1]
    uwUSART2TxIptr++;                             //--- Bump pointer
 800291a:	4b0d      	ldr	r3, [pc, #52]	; (8002950 <fnByteToFIFO_2+0x58>)
 800291c:	881b      	ldrh	r3, [r3, #0]
 800291e:	3301      	adds	r3, #1
 8002920:	b29a      	uxth	r2, r3
 8002922:	4b0b      	ldr	r3, [pc, #44]	; (8002950 <fnByteToFIFO_2+0x58>)
 8002924:	801a      	strh	r2, [r3, #0]
    uwUSART2TxIptr %= USART2_TX_SIZE;             //--- Rollover at 8192 Characters
 8002926:	4b0a      	ldr	r3, [pc, #40]	; (8002950 <fnByteToFIFO_2+0x58>)
 8002928:	881b      	ldrh	r3, [r3, #0]
 800292a:	f3c3 030c 	ubfx	r3, r3, #0, #13
 800292e:	b29a      	uxth	r2, r3
 8002930:	4b07      	ldr	r3, [pc, #28]	; (8002950 <fnByteToFIFO_2+0x58>)
 8002932:	801a      	strh	r2, [r3, #0]
    uwUSART2TxCntr++;                             //--- Bump the Counter
 8002934:	4b05      	ldr	r3, [pc, #20]	; (800294c <fnByteToFIFO_2+0x54>)
 8002936:	881b      	ldrh	r3, [r3, #0]
 8002938:	3301      	adds	r3, #1
 800293a:	b29a      	uxth	r2, r3
 800293c:	4b03      	ldr	r3, [pc, #12]	; (800294c <fnByteToFIFO_2+0x54>)
 800293e:	801a      	strh	r2, [r3, #0]
  };
}
 8002940:	bf00      	nop
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr
 800294c:	200044a6 	.word	0x200044a6
 8002950:	200044ae 	.word	0x200044ae
 8002954:	20001374 	.word	0x20001374

08002958 <fnMsgOut_2>:

//---------------------------------------------------------------------------------------------
//                     Export String to USART_2
//---------------------------------------------------------------------------------------------
void  fnMsgOut_2 (u08 ubOut[])
{
 8002958:	b580      	push	{r7, lr}
 800295a:	b084      	sub	sp, #16
 800295c:	af00      	add	r7, sp, #0
 800295e:	6078      	str	r0, [r7, #4]
  u16 uwSlen;
  u16 uwPtr;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  uwSlen = strlen (ubOut);
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f001 fdad 	bl	80044c0 <strlen>
 8002966:	4603      	mov	r3, r0
 8002968:	81bb      	strh	r3, [r7, #12]

  for (uwPtr = 0; uwPtr < uwSlen; uwPtr++)
 800296a:	2300      	movs	r3, #0
 800296c:	81fb      	strh	r3, [r7, #14]
 800296e:	e009      	b.n	8002984 <fnMsgOut_2+0x2c>
  {
    fnByteToFIFO_2 (ubOut[uwPtr]);
 8002970:	89fb      	ldrh	r3, [r7, #14]
 8002972:	687a      	ldr	r2, [r7, #4]
 8002974:	4413      	add	r3, r2
 8002976:	781b      	ldrb	r3, [r3, #0]
 8002978:	4618      	mov	r0, r3
 800297a:	f7ff ffbd 	bl	80028f8 <fnByteToFIFO_2>
  for (uwPtr = 0; uwPtr < uwSlen; uwPtr++)
 800297e:	89fb      	ldrh	r3, [r7, #14]
 8002980:	3301      	adds	r3, #1
 8002982:	81fb      	strh	r3, [r7, #14]
 8002984:	89fa      	ldrh	r2, [r7, #14]
 8002986:	89bb      	ldrh	r3, [r7, #12]
 8002988:	429a      	cmp	r2, r3
 800298a:	d3f1      	bcc.n	8002970 <fnMsgOut_2+0x18>
  }
}
 800298c:	bf00      	nop
 800298e:	bf00      	nop
 8002990:	3710      	adds	r7, #16
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop

08002998 <fnPacer>:
//  Note: Pacer Routine Transmits 1 Character from TX Fifos at a Calculated Rate determined
//        By the BAUD rate of the USART
//
//---------------------------------------------------------------------------------------------
void fnPacer (void)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08c      	sub	sp, #48	; 0x30
 800299c:	af04      	add	r7, sp, #16

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  //--- Set Test Pulse Hi   OUTPUT PA15
  //    Comment this out if PA15 used for something else
  SET_PA15;                                         //--- Pacer Test Pulse Hi
 800299e:	4ba8      	ldr	r3, [pc, #672]	; (8002c40 <fnPacer+0x2a8>)
 80029a0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80029a4:	601a      	str	r2, [r3, #0]
  uxTick++;                                         //--- Advance Gross 64 Bit Timer 1 tick
 80029a6:	4ba7      	ldr	r3, [pc, #668]	; (8002c44 <fnPacer+0x2ac>)
 80029a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029ac:	1c50      	adds	r0, r2, #1
 80029ae:	f143 0100 	adc.w	r1, r3, #0
 80029b2:	4ba4      	ldr	r3, [pc, #656]	; (8002c44 <fnPacer+0x2ac>)
 80029b4:	e9c3 0100 	strd	r0, r1, [r3]

  //--- Increments of 100uSec Delay                 //--- Externally readable Downcount Delay
  if(uwFastDelay) uwFastDelay--;
 80029b8:	4ba3      	ldr	r3, [pc, #652]	; (8002c48 <fnPacer+0x2b0>)
 80029ba:	881b      	ldrh	r3, [r3, #0]
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d005      	beq.n	80029cc <fnPacer+0x34>
 80029c0:	4ba1      	ldr	r3, [pc, #644]	; (8002c48 <fnPacer+0x2b0>)
 80029c2:	881b      	ldrh	r3, [r3, #0]
 80029c4:	3b01      	subs	r3, #1
 80029c6:	b29a      	uxth	r2, r3
 80029c8:	4b9f      	ldr	r3, [pc, #636]	; (8002c48 <fnPacer+0x2b0>)
 80029ca:	801a      	strh	r2, [r3, #0]
  //===========================================================================================
  //    Phased Pacer Tasks 10 Phased Tasks Total Ctcle time = 1.000 mSec
  //===========================================================================================

  //--- Depending on Pacer Phase Determine Action
  switch (uwPacerPhase % 10)
 80029cc:	4b9f      	ldr	r3, [pc, #636]	; (8002c4c <fnPacer+0x2b4>)
 80029ce:	881a      	ldrh	r2, [r3, #0]
 80029d0:	4b9f      	ldr	r3, [pc, #636]	; (8002c50 <fnPacer+0x2b8>)
 80029d2:	fba3 1302 	umull	r1, r3, r3, r2
 80029d6:	08d9      	lsrs	r1, r3, #3
 80029d8:	460b      	mov	r3, r1
 80029da:	009b      	lsls	r3, r3, #2
 80029dc:	440b      	add	r3, r1
 80029de:	005b      	lsls	r3, r3, #1
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	b29b      	uxth	r3, r3
 80029e4:	2b09      	cmp	r3, #9
 80029e6:	f200 811f 	bhi.w	8002c28 <fnPacer+0x290>
 80029ea:	a201      	add	r2, pc, #4	; (adr r2, 80029f0 <fnPacer+0x58>)
 80029ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80029f0:	08002a19 	.word	0x08002a19
 80029f4:	08002a47 	.word	0x08002a47
 80029f8:	08002a93 	.word	0x08002a93
 80029fc:	08002adf 	.word	0x08002adf
 8002a00:	08002b2b 	.word	0x08002b2b
 8002a04:	08002b77 	.word	0x08002b77
 8002a08:	08002c31 	.word	0x08002c31
 8002a0c:	08002c31 	.word	0x08002c31
 8002a10:	08002c31 	.word	0x08002c31
 8002a14:	08002c31 	.word	0x08002c31
  {
    case 0x00:                                    //--- At this point update modulo phases
      uwPacerTick++;                              //--- Bump 1ms Pacer Tick
 8002a18:	4b8e      	ldr	r3, [pc, #568]	; (8002c54 <fnPacer+0x2bc>)
 8002a1a:	881b      	ldrh	r3, [r3, #0]
 8002a1c:	3301      	adds	r3, #1
 8002a1e:	b29a      	uxth	r2, r3
 8002a20:	4b8c      	ldr	r3, [pc, #560]	; (8002c54 <fnPacer+0x2bc>)
 8002a22:	801a      	strh	r2, [r3, #0]
      uwPacerTick %= 60000;                       //--- 60,000 Pacer Ticks = 1 Minuite
 8002a24:	4b8b      	ldr	r3, [pc, #556]	; (8002c54 <fnPacer+0x2bc>)
 8002a26:	881b      	ldrh	r3, [r3, #0]
 8002a28:	4a8b      	ldr	r2, [pc, #556]	; (8002c58 <fnPacer+0x2c0>)
 8002a2a:	fba2 1203 	umull	r1, r2, r2, r3
 8002a2e:	0b92      	lsrs	r2, r2, #14
 8002a30:	f64e 2160 	movw	r1, #60000	; 0xea60
 8002a34:	fb01 f202 	mul.w	r2, r1, r2
 8002a38:	1a9b      	subs	r3, r3, r2
 8002a3a:	b29a      	uxth	r2, r3
 8002a3c:	4b85      	ldr	r3, [pc, #532]	; (8002c54 <fnPacer+0x2bc>)
 8002a3e:	801a      	strh	r2, [r3, #0]

      //--- If Test Routines are Active then output pulses
        fnPulseOut ();
 8002a40:	f000 feee 	bl	8003820 <fnPulseOut>
      break;
 8002a44:	e117      	b.n	8002c76 <fnPacer+0x2de>

    //-----------------------------------------------------------------------------------------
    //--- Process Timer (0)  at Pacer Phase-1
    //-----------------------------------------------------------------------------------------
    case 0x01:
      if (stTimers[0].ulTimer)                    //--- If timer Active then decrement
 8002a46:	4b85      	ldr	r3, [pc, #532]	; (8002c5c <fnPacer+0x2c4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	f000 80f2 	beq.w	8002c34 <fnPacer+0x29c>
      {
        stTimers[0].ulTimer--;                    //--- Decrement timer & test for 0
 8002a50:	4b82      	ldr	r3, [pc, #520]	; (8002c5c <fnPacer+0x2c4>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	3b01      	subs	r3, #1
 8002a56:	4a81      	ldr	r2, [pc, #516]	; (8002c5c <fnPacer+0x2c4>)
 8002a58:	6013      	str	r3, [r2, #0]
        if (!stTimers[0].ulTimer)                 //--- Did we get to (0000)?
 8002a5a:	4b80      	ldr	r3, [pc, #512]	; (8002c5c <fnPacer+0x2c4>)
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	f040 80e8 	bne.w	8002c34 <fnPacer+0x29c>
        {
          stWork.ptrTask = stTimers[0].ptrTask;
 8002a64:	4b7d      	ldr	r3, [pc, #500]	; (8002c5c <fnPacer+0x2c4>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	f8c7 3012 	str.w	r3, [r7, #18]
          stWork.unTaskData = stTimers[0].unTaskData;
 8002a6c:	4a7b      	ldr	r2, [pc, #492]	; (8002c5c <fnPacer+0x2c4>)
 8002a6e:	f107 0316 	add.w	r3, r7, #22
 8002a72:	3208      	adds	r2, #8
 8002a74:	6811      	ldr	r1, [r2, #0]
 8002a76:	6852      	ldr	r2, [r2, #4]
 8002a78:	6019      	str	r1, [r3, #0]
 8002a7a:	605a      	str	r2, [r3, #4]
          fnScheduleTask (stWork);
 8002a7c:	466b      	mov	r3, sp
 8002a7e:	f107 0214 	add.w	r2, r7, #20
 8002a82:	ca07      	ldmia	r2, {r0, r1, r2}
 8002a84:	c303      	stmia	r3!, {r0, r1}
 8002a86:	801a      	strh	r2, [r3, #0]
 8002a88:	1d3b      	adds	r3, r7, #4
 8002a8a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002a8c:	f7fe fd8a 	bl	80015a4 <fnScheduleTask>
        }
      }
      break;
 8002a90:	e0d0      	b.n	8002c34 <fnPacer+0x29c>
    //-----------------------------------------------------------------------------------------
    //--- Process Timer (1)  at Pacer Phase-2
    //-----------------------------------------------------------------------------------------
    case 0x02:
      if (stTimers[1].ulTimer)                    //--- If timer Active then decrement
 8002a92:	4b72      	ldr	r3, [pc, #456]	; (8002c5c <fnPacer+0x2c4>)
 8002a94:	691b      	ldr	r3, [r3, #16]
 8002a96:	2b00      	cmp	r3, #0
 8002a98:	f000 80ce 	beq.w	8002c38 <fnPacer+0x2a0>
      {
        stTimers[1].ulTimer--;                    //--- Decrement timer & test for 0
 8002a9c:	4b6f      	ldr	r3, [pc, #444]	; (8002c5c <fnPacer+0x2c4>)
 8002a9e:	691b      	ldr	r3, [r3, #16]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	4a6e      	ldr	r2, [pc, #440]	; (8002c5c <fnPacer+0x2c4>)
 8002aa4:	6113      	str	r3, [r2, #16]
        if (!stTimers[1].ulTimer)                 //--- Did we get to (0000)?
 8002aa6:	4b6d      	ldr	r3, [pc, #436]	; (8002c5c <fnPacer+0x2c4>)
 8002aa8:	691b      	ldr	r3, [r3, #16]
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	f040 80c4 	bne.w	8002c38 <fnPacer+0x2a0>
        {
          stWork.ptrTask = stTimers[1].ptrTask;
 8002ab0:	4b6a      	ldr	r3, [pc, #424]	; (8002c5c <fnPacer+0x2c4>)
 8002ab2:	695b      	ldr	r3, [r3, #20]
 8002ab4:	f8c7 3012 	str.w	r3, [r7, #18]
          stWork.unTaskData = stTimers[1].unTaskData;
 8002ab8:	4a68      	ldr	r2, [pc, #416]	; (8002c5c <fnPacer+0x2c4>)
 8002aba:	f107 0316 	add.w	r3, r7, #22
 8002abe:	3218      	adds	r2, #24
 8002ac0:	6811      	ldr	r1, [r2, #0]
 8002ac2:	6852      	ldr	r2, [r2, #4]
 8002ac4:	6019      	str	r1, [r3, #0]
 8002ac6:	605a      	str	r2, [r3, #4]
          fnScheduleTask (stWork);
 8002ac8:	466b      	mov	r3, sp
 8002aca:	f107 0214 	add.w	r2, r7, #20
 8002ace:	ca07      	ldmia	r2, {r0, r1, r2}
 8002ad0:	c303      	stmia	r3!, {r0, r1}
 8002ad2:	801a      	strh	r2, [r3, #0]
 8002ad4:	1d3b      	adds	r3, r7, #4
 8002ad6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002ad8:	f7fe fd64 	bl	80015a4 <fnScheduleTask>
        }
      }
      break;
 8002adc:	e0ac      	b.n	8002c38 <fnPacer+0x2a0>

    //-----------------------------------------------------------------------------------------
    //--- Process Timer (2)  at Pacer Phase-3
    //-----------------------------------------------------------------------------------------
    case 0x03:
      if (stTimers[2].ulTimer)                    //--- If timer Active then decrement
 8002ade:	4b5f      	ldr	r3, [pc, #380]	; (8002c5c <fnPacer+0x2c4>)
 8002ae0:	6a1b      	ldr	r3, [r3, #32]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 80aa 	beq.w	8002c3c <fnPacer+0x2a4>
      {
        stTimers[2].ulTimer--;                    //--- Decrement timer & test for 0
 8002ae8:	4b5c      	ldr	r3, [pc, #368]	; (8002c5c <fnPacer+0x2c4>)
 8002aea:	6a1b      	ldr	r3, [r3, #32]
 8002aec:	3b01      	subs	r3, #1
 8002aee:	4a5b      	ldr	r2, [pc, #364]	; (8002c5c <fnPacer+0x2c4>)
 8002af0:	6213      	str	r3, [r2, #32]
        if (!stTimers[2].ulTimer)                 //--- Did we get to (0000)?
 8002af2:	4b5a      	ldr	r3, [pc, #360]	; (8002c5c <fnPacer+0x2c4>)
 8002af4:	6a1b      	ldr	r3, [r3, #32]
 8002af6:	2b00      	cmp	r3, #0
 8002af8:	f040 80a0 	bne.w	8002c3c <fnPacer+0x2a4>
        {
          stWork.ptrTask = stTimers[2].ptrTask;
 8002afc:	4b57      	ldr	r3, [pc, #348]	; (8002c5c <fnPacer+0x2c4>)
 8002afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b00:	f8c7 3012 	str.w	r3, [r7, #18]
          stWork.unTaskData = stTimers[2].unTaskData;
 8002b04:	4a55      	ldr	r2, [pc, #340]	; (8002c5c <fnPacer+0x2c4>)
 8002b06:	f107 0316 	add.w	r3, r7, #22
 8002b0a:	3228      	adds	r2, #40	; 0x28
 8002b0c:	6811      	ldr	r1, [r2, #0]
 8002b0e:	6852      	ldr	r2, [r2, #4]
 8002b10:	6019      	str	r1, [r3, #0]
 8002b12:	605a      	str	r2, [r3, #4]
          fnScheduleTask (stWork);
 8002b14:	466b      	mov	r3, sp
 8002b16:	f107 0214 	add.w	r2, r7, #20
 8002b1a:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b1c:	c303      	stmia	r3!, {r0, r1}
 8002b1e:	801a      	strh	r2, [r3, #0]
 8002b20:	1d3b      	adds	r3, r7, #4
 8002b22:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b24:	f7fe fd3e 	bl	80015a4 <fnScheduleTask>
        }
      }
      break;
 8002b28:	e088      	b.n	8002c3c <fnPacer+0x2a4>

    //-----------------------------------------------------------------------------------------
    //--- Process Timer (3)  at Pacer Phase-4
    //-----------------------------------------------------------------------------------------
    case 0x04:
      if (stTimers[3].ulTimer)                        //--- If timer Active then decrement
 8002b2a:	4b4c      	ldr	r3, [pc, #304]	; (8002c5c <fnPacer+0x2c4>)
 8002b2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b2e:	2b00      	cmp	r3, #0
 8002b30:	f000 80a0 	beq.w	8002c74 <fnPacer+0x2dc>
      {
        stTimers[3].ulTimer--;                        //--- Decrement timer & test for 0
 8002b34:	4b49      	ldr	r3, [pc, #292]	; (8002c5c <fnPacer+0x2c4>)
 8002b36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b38:	3b01      	subs	r3, #1
 8002b3a:	4a48      	ldr	r2, [pc, #288]	; (8002c5c <fnPacer+0x2c4>)
 8002b3c:	6313      	str	r3, [r2, #48]	; 0x30
        if (!stTimers[3].ulTimer)                     //--- Did we get to (0000)?
 8002b3e:	4b47      	ldr	r3, [pc, #284]	; (8002c5c <fnPacer+0x2c4>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	f040 8096 	bne.w	8002c74 <fnPacer+0x2dc>
        {
          stWork.ptrTask = stTimers[3].ptrTask;
 8002b48:	4b44      	ldr	r3, [pc, #272]	; (8002c5c <fnPacer+0x2c4>)
 8002b4a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4c:	f8c7 3012 	str.w	r3, [r7, #18]
          stWork.unTaskData = stTimers[3].unTaskData;
 8002b50:	4a42      	ldr	r2, [pc, #264]	; (8002c5c <fnPacer+0x2c4>)
 8002b52:	f107 0316 	add.w	r3, r7, #22
 8002b56:	3238      	adds	r2, #56	; 0x38
 8002b58:	6811      	ldr	r1, [r2, #0]
 8002b5a:	6852      	ldr	r2, [r2, #4]
 8002b5c:	6019      	str	r1, [r3, #0]
 8002b5e:	605a      	str	r2, [r3, #4]
          fnScheduleTask (stWork);
 8002b60:	466b      	mov	r3, sp
 8002b62:	f107 0214 	add.w	r2, r7, #20
 8002b66:	ca07      	ldmia	r2, {r0, r1, r2}
 8002b68:	c303      	stmia	r3!, {r0, r1}
 8002b6a:	801a      	strh	r2, [r3, #0]
 8002b6c:	1d3b      	adds	r3, r7, #4
 8002b6e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002b70:	f7fe fd18 	bl	80015a4 <fnScheduleTask>
        }
      }
      break;
 8002b74:	e07e      	b.n	8002c74 <fnPacer+0x2dc>
    //-----------------------------------------------------------------------------------------
    //--- Process PACER LED Visual Bright and Dim & Update Motion
    //-----------------------------------------------------------------------------------------
    case 0x05:
      //--- Every 25 mSec change LED PWM
      if (!(uwPacerTick % 25))
 8002b76:	4b37      	ldr	r3, [pc, #220]	; (8002c54 <fnPacer+0x2bc>)
 8002b78:	881a      	ldrh	r2, [r3, #0]
 8002b7a:	4b39      	ldr	r3, [pc, #228]	; (8002c60 <fnPacer+0x2c8>)
 8002b7c:	fba3 1302 	umull	r1, r3, r3, r2
 8002b80:	08d9      	lsrs	r1, r3, #3
 8002b82:	460b      	mov	r3, r1
 8002b84:	009b      	lsls	r3, r3, #2
 8002b86:	440b      	add	r3, r1
 8002b88:	0099      	lsls	r1, r3, #2
 8002b8a:	440b      	add	r3, r1
 8002b8c:	1ad3      	subs	r3, r2, r3
 8002b8e:	b29b      	uxth	r3, r3
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d12c      	bne.n	8002bee <fnPacer+0x256>
      {
        if (ulSystemFlags & 0x80000000)           //--- Test Brightening / Dimming
 8002b94:	4b33      	ldr	r3, [pc, #204]	; (8002c64 <fnPacer+0x2cc>)
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	da14      	bge.n	8002bc6 <fnPacer+0x22e>
        {
          uwLEDcntr--;
 8002b9c:	4b32      	ldr	r3, [pc, #200]	; (8002c68 <fnPacer+0x2d0>)
 8002b9e:	881b      	ldrh	r3, [r3, #0]
 8002ba0:	3b01      	subs	r3, #1
 8002ba2:	b29a      	uxth	r2, r3
 8002ba4:	4b30      	ldr	r3, [pc, #192]	; (8002c68 <fnPacer+0x2d0>)
 8002ba6:	801a      	strh	r2, [r3, #0]
          uwLEDtime = uwLEDcntr;
 8002ba8:	4b2f      	ldr	r3, [pc, #188]	; (8002c68 <fnPacer+0x2d0>)
 8002baa:	881a      	ldrh	r2, [r3, #0]
 8002bac:	4b2f      	ldr	r3, [pc, #188]	; (8002c6c <fnPacer+0x2d4>)
 8002bae:	801a      	strh	r2, [r3, #0]
          if (uwLEDcntr < 2)
 8002bb0:	4b2d      	ldr	r3, [pc, #180]	; (8002c68 <fnPacer+0x2d0>)
 8002bb2:	881b      	ldrh	r3, [r3, #0]
 8002bb4:	2b01      	cmp	r3, #1
 8002bb6:	d81a      	bhi.n	8002bee <fnPacer+0x256>
          {
            ulSystemFlags &= 0x7FFFFFFF;          //--- Clear Brightening Flag LED dims
 8002bb8:	4b2a      	ldr	r3, [pc, #168]	; (8002c64 <fnPacer+0x2cc>)
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002bc0:	4a28      	ldr	r2, [pc, #160]	; (8002c64 <fnPacer+0x2cc>)
 8002bc2:	6013      	str	r3, [r2, #0]
 8002bc4:	e013      	b.n	8002bee <fnPacer+0x256>
          }
        }
        else
        {
          uwLEDcntr++;
 8002bc6:	4b28      	ldr	r3, [pc, #160]	; (8002c68 <fnPacer+0x2d0>)
 8002bc8:	881b      	ldrh	r3, [r3, #0]
 8002bca:	3301      	adds	r3, #1
 8002bcc:	b29a      	uxth	r2, r3
 8002bce:	4b26      	ldr	r3, [pc, #152]	; (8002c68 <fnPacer+0x2d0>)
 8002bd0:	801a      	strh	r2, [r3, #0]
          uwLEDtime = uwLEDcntr;
 8002bd2:	4b25      	ldr	r3, [pc, #148]	; (8002c68 <fnPacer+0x2d0>)
 8002bd4:	881a      	ldrh	r2, [r3, #0]
 8002bd6:	4b25      	ldr	r3, [pc, #148]	; (8002c6c <fnPacer+0x2d4>)
 8002bd8:	801a      	strh	r2, [r3, #0]
          if (uwLEDcntr > 24)
 8002bda:	4b23      	ldr	r3, [pc, #140]	; (8002c68 <fnPacer+0x2d0>)
 8002bdc:	881b      	ldrh	r3, [r3, #0]
 8002bde:	2b18      	cmp	r3, #24
 8002be0:	d905      	bls.n	8002bee <fnPacer+0x256>
          {
            ulSystemFlags |= 0x80000000;          //--- Set Brightening Flag LED brightens
 8002be2:	4b20      	ldr	r3, [pc, #128]	; (8002c64 <fnPacer+0x2cc>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002bea:	4a1e      	ldr	r2, [pc, #120]	; (8002c64 <fnPacer+0x2cc>)
 8002bec:	6013      	str	r3, [r2, #0]
          }
        }
      }

      //--- Turn LED On/Off variable time amounts
      if (uwLEDtime)
 8002bee:	4b1f      	ldr	r3, [pc, #124]	; (8002c6c <fnPacer+0x2d4>)
 8002bf0:	881b      	ldrh	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d013      	beq.n	8002c1e <fnPacer+0x286>
      {
        uwLEDtime--;                              //--- Decrement LED On Timer
 8002bf6:	4b1d      	ldr	r3, [pc, #116]	; (8002c6c <fnPacer+0x2d4>)
 8002bf8:	881b      	ldrh	r3, [r3, #0]
 8002bfa:	3b01      	subs	r3, #1
 8002bfc:	b29a      	uxth	r2, r3
 8002bfe:	4b1b      	ldr	r3, [pc, #108]	; (8002c6c <fnPacer+0x2d4>)
 8002c00:	801a      	strh	r2, [r3, #0]

        //--- If Timer = 0 then turn LED Off (Set Hi)
        if (!uwLEDtime)
 8002c02:	4b1a      	ldr	r3, [pc, #104]	; (8002c6c <fnPacer+0x2d4>)
 8002c04:	881b      	ldrh	r3, [r3, #0]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d104      	bne.n	8002c14 <fnPacer+0x27c>
        {
          SET_PC15;                               //--- Turn LED Off!
 8002c0a:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <fnPacer+0x2d8>)
 8002c0c:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c10:	601a      	str	r2, [r3, #0]
      }
      else
      {
        SET_PC15;                                //--- Turn LED Off!
      }
      break;
 8002c12:	e030      	b.n	8002c76 <fnPacer+0x2de>
          CLR_PC15;                               //--- Turn LED On!
 8002c14:	4b16      	ldr	r3, [pc, #88]	; (8002c70 <fnPacer+0x2d8>)
 8002c16:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002c1a:	601a      	str	r2, [r3, #0]
      break;
 8002c1c:	e02b      	b.n	8002c76 <fnPacer+0x2de>
        SET_PC15;                                //--- Turn LED Off!
 8002c1e:	4b14      	ldr	r3, [pc, #80]	; (8002c70 <fnPacer+0x2d8>)
 8002c20:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8002c24:	601a      	str	r2, [r3, #0]
      break;
 8002c26:	e026      	b.n	8002c76 <fnPacer+0x2de>
    case 0x09:
      break;

    //--- Error in state machine
    default:
      uwPacerPhase = 0;
 8002c28:	4b08      	ldr	r3, [pc, #32]	; (8002c4c <fnPacer+0x2b4>)
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	801a      	strh	r2, [r3, #0]
      break;
 8002c2e:	e022      	b.n	8002c76 <fnPacer+0x2de>
      break;
 8002c30:	bf00      	nop
 8002c32:	e020      	b.n	8002c76 <fnPacer+0x2de>
      break;
 8002c34:	bf00      	nop
 8002c36:	e01e      	b.n	8002c76 <fnPacer+0x2de>
      break;
 8002c38:	bf00      	nop
 8002c3a:	e01c      	b.n	8002c76 <fnPacer+0x2de>
      break;
 8002c3c:	bf00      	nop
 8002c3e:	e01a      	b.n	8002c76 <fnPacer+0x2de>
 8002c40:	48000018 	.word	0x48000018
 8002c44:	20000440 	.word	0x20000440
 8002c48:	200048b4 	.word	0x200048b4
 8002c4c:	2000044a 	.word	0x2000044a
 8002c50:	cccccccd 	.word	0xcccccccd
 8002c54:	20000448 	.word	0x20000448
 8002c58:	45e7b273 	.word	0x45e7b273
 8002c5c:	20000460 	.word	0x20000460
 8002c60:	51eb851f 	.word	0x51eb851f
 8002c64:	20000434 	.word	0x20000434
 8002c68:	2000044c 	.word	0x2000044c
 8002c6c:	2000044e 	.word	0x2000044e
 8002c70:	48000818 	.word	0x48000818
      break;
 8002c74:	bf00      	nop
  }

  //--- These Items are executed once every PACER / SysTick Pass
  //--- Bump and Modulo the Phase Counter
  uwPacerPhase++;
 8002c76:	4b22      	ldr	r3, [pc, #136]	; (8002d00 <fnPacer+0x368>)
 8002c78:	881b      	ldrh	r3, [r3, #0]
 8002c7a:	3301      	adds	r3, #1
 8002c7c:	b29a      	uxth	r2, r3
 8002c7e:	4b20      	ldr	r3, [pc, #128]	; (8002d00 <fnPacer+0x368>)
 8002c80:	801a      	strh	r2, [r3, #0]
  uwPacerPhase %= 10;
 8002c82:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <fnPacer+0x368>)
 8002c84:	881a      	ldrh	r2, [r3, #0]
 8002c86:	4b1f      	ldr	r3, [pc, #124]	; (8002d04 <fnPacer+0x36c>)
 8002c88:	fba3 1302 	umull	r1, r3, r3, r2
 8002c8c:	08d9      	lsrs	r1, r3, #3
 8002c8e:	460b      	mov	r3, r1
 8002c90:	009b      	lsls	r3, r3, #2
 8002c92:	440b      	add	r3, r1
 8002c94:	005b      	lsls	r3, r3, #1
 8002c96:	1ad3      	subs	r3, r2, r3
 8002c98:	b29a      	uxth	r2, r3
 8002c9a:	4b19      	ldr	r3, [pc, #100]	; (8002d00 <fnPacer+0x368>)
 8002c9c:	801a      	strh	r2, [r3, #0]
  //--- If Xmit Service Timer Active then Bump & Test
  //    This Delay takes care of sending next Byte to UARTS at proper times
  //    Depending on the BaudRate for the UART Port
  //    This TX method can transmit at any BAUD rate up to 115200

  if (uwXmit_1_Count)                         //--- Is Xmit Timer Active?
 8002c9e:	4b1a      	ldr	r3, [pc, #104]	; (8002d08 <fnPacer+0x370>)
 8002ca0:	881b      	ldrh	r3, [r3, #0]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d00f      	beq.n	8002cc6 <fnPacer+0x32e>
  {
    uwXmit_1_Count--;                         //--- Yes so decrement Counter
 8002ca6:	4b18      	ldr	r3, [pc, #96]	; (8002d08 <fnPacer+0x370>)
 8002ca8:	881b      	ldrh	r3, [r3, #0]
 8002caa:	3b01      	subs	r3, #1
 8002cac:	b29a      	uxth	r2, r3
 8002cae:	4b16      	ldr	r3, [pc, #88]	; (8002d08 <fnPacer+0x370>)
 8002cb0:	801a      	strh	r2, [r3, #0]
    if (!uwXmit_1_Count)                      //--- Did we reach TX period time?
 8002cb2:	4b15      	ldr	r3, [pc, #84]	; (8002d08 <fnPacer+0x370>)
 8002cb4:	881b      	ldrh	r3, [r3, #0]
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	d105      	bne.n	8002cc6 <fnPacer+0x32e>
    {
      uwXmit_1_Count = uwXmit_1_Delay;        //--- Refresh the Period Count
 8002cba:	4b14      	ldr	r3, [pc, #80]	; (8002d0c <fnPacer+0x374>)
 8002cbc:	881a      	ldrh	r2, [r3, #0]
 8002cbe:	4b12      	ldr	r3, [pc, #72]	; (8002d08 <fnPacer+0x370>)
 8002cc0:	801a      	strh	r2, [r3, #0]
      fnXmitSvc_1 ();                         //--- Call the Xmit Service Routine
 8002cc2:	f7fe fefd 	bl	8001ac0 <fnXmitSvc_1>
    }
  }

  if (uwXmit_2_Count)                         //--- Is Xmit Timer Active?
 8002cc6:	4b12      	ldr	r3, [pc, #72]	; (8002d10 <fnPacer+0x378>)
 8002cc8:	881b      	ldrh	r3, [r3, #0]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d00f      	beq.n	8002cee <fnPacer+0x356>
  {
    uwXmit_2_Count--;                         //--- Yes so decrement Counter
 8002cce:	4b10      	ldr	r3, [pc, #64]	; (8002d10 <fnPacer+0x378>)
 8002cd0:	881b      	ldrh	r3, [r3, #0]
 8002cd2:	3b01      	subs	r3, #1
 8002cd4:	b29a      	uxth	r2, r3
 8002cd6:	4b0e      	ldr	r3, [pc, #56]	; (8002d10 <fnPacer+0x378>)
 8002cd8:	801a      	strh	r2, [r3, #0]
    if (!uwXmit_2_Count)                      //--- Did we reach TX period time?
 8002cda:	4b0d      	ldr	r3, [pc, #52]	; (8002d10 <fnPacer+0x378>)
 8002cdc:	881b      	ldrh	r3, [r3, #0]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	d105      	bne.n	8002cee <fnPacer+0x356>
    {
      uwXmit_2_Count = uwXmit_2_Delay;        //--- Refresh the Period Count
 8002ce2:	4b0c      	ldr	r3, [pc, #48]	; (8002d14 <fnPacer+0x37c>)
 8002ce4:	881a      	ldrh	r2, [r3, #0]
 8002ce6:	4b0a      	ldr	r3, [pc, #40]	; (8002d10 <fnPacer+0x378>)
 8002ce8:	801a      	strh	r2, [r3, #0]
      fnXmitSvc_2 ();                         //--- Call the Xmit Service Routine
 8002cea:	f7ff fdd5 	bl	8002898 <fnXmitSvc_2>
  //--- Set Test Pulse Lo   OUTPUT PA15
  //    Comment this out if PA15 used for something else
  #ifdef PULSES
    fnPulseOut();
  #endif
  CLR_PA15;                                   //--- Pacer Test Pulse Lo
 8002cee:	4b0a      	ldr	r3, [pc, #40]	; (8002d18 <fnPacer+0x380>)
 8002cf0:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002cf4:	601a      	str	r2, [r3, #0]
}
 8002cf6:	bf00      	nop
 8002cf8:	3720      	adds	r7, #32
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}
 8002cfe:	bf00      	nop
 8002d00:	2000044a 	.word	0x2000044a
 8002d04:	cccccccd 	.word	0xcccccccd
 8002d08:	200044ac 	.word	0x200044ac
 8002d0c:	2000447c 	.word	0x2000447c
 8002d10:	20001360 	.word	0x20001360
 8002d14:	200044aa 	.word	0x200044aa
 8002d18:	48000018 	.word	0x48000018

08002d1c <NVIC_EnableIRQ>:
  //  Enable External Interrupt
  //  The function enables a device-specific interrupt in the NVIC interrupt controller.
  //  \param [in]      IRQn  External interrupt number. Value cannot be negative.
  //
  __STATIC_INLINE void NVIC_EnableIRQ(u32 IRQn)
  {
 8002d1c:	b480      	push	{r7}
 8002d1e:	b083      	sub	sp, #12
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
    NVIC->ISER[(((u32)IRQn) >> 5UL)] = (u32)(1UL << (((u32)IRQn) & 0x1FUL));
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	f003 021f 	and.w	r2, r3, #31
 8002d2a:	4907      	ldr	r1, [pc, #28]	; (8002d48 <NVIC_EnableIRQ+0x2c>)
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	095b      	lsrs	r3, r3, #5
 8002d30:	2001      	movs	r0, #1
 8002d32:	fa00 f202 	lsl.w	r2, r0, r2
 8002d36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
 8002d3a:	bf00      	nop
 8002d3c:	370c      	adds	r7, #12
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d44:	4770      	bx	lr
 8002d46:	bf00      	nop
 8002d48:	e000e100 	.word	0xe000e100

08002d4c <NVIC_DisableIRQ>:
  //  Disable External Interrupt
  //  The function disables a device-specific interrupt in the NVIC interrupt controller.
  //  \param [in]      IRQn  External interrupt number. Value cannot be negative.
  //
  __STATIC_INLINE void NVIC_DisableIRQ(u32 IRQn)
  {
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
    NVIC->ICER[(((u32)IRQn) >> 5UL)] = (u32)(1UL << (((u32)IRQn) & 0x1FUL));
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f003 021f 	and.w	r2, r3, #31
 8002d5a:	4907      	ldr	r1, [pc, #28]	; (8002d78 <NVIC_DisableIRQ+0x2c>)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	095b      	lsrs	r3, r3, #5
 8002d60:	2001      	movs	r0, #1
 8002d62:	fa00 f202 	lsl.w	r2, r0, r2
 8002d66:	3320      	adds	r3, #32
 8002d68:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
 8002d6c:	bf00      	nop
 8002d6e:	370c      	adds	r7, #12
 8002d70:	46bd      	mov	sp, r7
 8002d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d76:	4770      	bx	lr
 8002d78:	e000e100 	.word	0xe000e100

08002d7c <NVIC_ClearPendingIRQ>:
  //  Clear Pending Interrupt
  //  The function clears the pending bit of an external interrupt.
  //  \param [in]      IRQn  External interrupt number. Value cannot be negative.
  //
  __STATIC_INLINE void NVIC_ClearPendingIRQ(u32 IRQn)
  {
 8002d7c:	b480      	push	{r7}
 8002d7e:	b083      	sub	sp, #12
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
    NVIC->ICPR[(((u32)IRQn) >> 5UL)] = (u32)(1UL << (((u32)IRQn) & 0x1FUL));
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	f003 021f 	and.w	r2, r3, #31
 8002d8a:	4907      	ldr	r1, [pc, #28]	; (8002da8 <NVIC_ClearPendingIRQ+0x2c>)
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	095b      	lsrs	r3, r3, #5
 8002d90:	2001      	movs	r0, #1
 8002d92:	fa00 f202 	lsl.w	r2, r0, r2
 8002d96:	3360      	adds	r3, #96	; 0x60
 8002d98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
 8002d9c:	bf00      	nop
 8002d9e:	370c      	adds	r7, #12
 8002da0:	46bd      	mov	sp, r7
 8002da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da6:	4770      	bx	lr
 8002da8:	e000e100 	.word	0xe000e100

08002dac <NVIC_SetPriority>:
  //  \note The priority cannot be set for every core interrupt.
  //  \param [in]      IRQn  Interrupt number.
  //  \param [in]  priority  Priority to set. in range of 0 to 0x0F
  //
  __STATIC_INLINE void NVIC_SetPriority(u32 IRQn, u32 priority)
  {
 8002dac:	b480      	push	{r7}
 8002dae:	b083      	sub	sp, #12
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
 8002db4:	6039      	str	r1, [r7, #0]
    NVIC->IP[((u32)IRQn)] = (u08)((priority << (8 - __NVIC_PRIO_BITS)) & (u32)0xFFUL);
 8002db6:	683b      	ldr	r3, [r7, #0]
 8002db8:	b2db      	uxtb	r3, r3
 8002dba:	4a07      	ldr	r2, [pc, #28]	; (8002dd8 <NVIC_SetPriority+0x2c>)
 8002dbc:	011b      	lsls	r3, r3, #4
 8002dbe:	b2d9      	uxtb	r1, r3
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	4413      	add	r3, r2
 8002dc4:	f503 7340 	add.w	r3, r3, #768	; 0x300
 8002dc8:	460a      	mov	r2, r1
 8002dca:	701a      	strb	r2, [r3, #0]
  }
 8002dcc:	bf00      	nop
 8002dce:	370c      	adds	r7, #12
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd6:	4770      	bx	lr
 8002dd8:	e000e100 	.word	0xe000e100

08002ddc <fnInitNVIC>:
//---------------------------------------------------------------------------------------------
//                    Initialize Interrupt Structure and NVIC Registers
//---------------------------------------------------------------------------------------------

void  fnInitNVIC (void)
{
 8002ddc:	b580      	push	{r7, lr}
 8002dde:	b082      	sub	sp, #8
 8002de0:	af00      	add	r7, sp, #0
  u08   ubA;                                      //--- Work Byte
  u08   ubP;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  GID;                                            //--- Kill All Interrupts
 8002de2:	b672      	cpsid	i

  SCB_AIRCR = 0x05FA0000;                         //--- Reset NVIC to no priority grouping
 8002de4:	4b0f      	ldr	r3, [pc, #60]	; (8002e24 <fnInitNVIC+0x48>)
 8002de6:	4a10      	ldr	r2, [pc, #64]	; (8002e28 <fnInitNVIC+0x4c>)
 8002de8:	601a      	str	r2, [r3, #0]
                                                  //    Reads Back as 0xFA05

  //--- First Initialize All Priority Registers & Enable Interrupts Byte by Byte
  //    Note: Priority Level of 0 = Interrupt OFF
  for (uwA = 0; uwA < 97; uwA++)
 8002dea:	2300      	movs	r3, #0
 8002dec:	80fb      	strh	r3, [r7, #6]
 8002dee:	e010      	b.n	8002e12 <fnInitNVIC+0x36>
  {
    ubA = ubInterruptConfigs[uwA];                //--- Get Interrupt Priority and Enable
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	4a0e      	ldr	r2, [pc, #56]	; (8002e2c <fnInitNVIC+0x50>)
 8002df4:	5cd3      	ldrb	r3, [r2, r3]
 8002df6:	717b      	strb	r3, [r7, #5]
    ubP = ubA & 0x0F;                             //--- Filter Table Entry for Priority
 8002df8:	797b      	ldrb	r3, [r7, #5]
 8002dfa:	f003 030f 	and.w	r3, r3, #15
 8002dfe:	713b      	strb	r3, [r7, #4]
    fnSetIntPriority (uwA, ubP);                  //--- Set Priority in NVIC
 8002e00:	793a      	ldrb	r2, [r7, #4]
 8002e02:	88fb      	ldrh	r3, [r7, #6]
 8002e04:	4611      	mov	r1, r2
 8002e06:	4618      	mov	r0, r3
 8002e08:	f000 fa92 	bl	8003330 <fnSetIntPriority>
  for (uwA = 0; uwA < 97; uwA++)
 8002e0c:	88fb      	ldrh	r3, [r7, #6]
 8002e0e:	3301      	adds	r3, #1
 8002e10:	80fb      	strh	r3, [r7, #6]
 8002e12:	88fb      	ldrh	r3, [r7, #6]
 8002e14:	2b60      	cmp	r3, #96	; 0x60
 8002e16:	d9eb      	bls.n	8002df0 <fnInitNVIC+0x14>
  }

  GIE;                                            //--- Restore Interrrupt Enable
 8002e18:	b662      	cpsie	i
}
 8002e1a:	bf00      	nop
 8002e1c:	3708      	adds	r7, #8
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	bd80      	pop	{r7, pc}
 8002e22:	bf00      	nop
 8002e24:	e000ed0c 	.word	0xe000ed0c
 8002e28:	05fa0000 	.word	0x05fa0000
 8002e2c:	08006730 	.word	0x08006730

08002e30 <fnNull_IRQ>:

//=============================================================================================
//  Function Name  : Do Nothing IRQ
//=============================================================================================
void fnNull_IRQ(void)                           //--- IRQ_XX
{
 8002e30:	b480      	push	{r7}
 8002e32:	af00      	add	r7, sp, #0
}
 8002e34:	bf00      	nop
 8002e36:	46bd      	mov	sp, r7
 8002e38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e3c:	4770      	bx	lr

08002e3e <fnNMI_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : Do Nothing IRQ Service
//---------------------------------------------------------------------------------------------
void fnNMI_IRQ(void)                            //--- IRQ_-14
{
 8002e3e:	b480      	push	{r7}
 8002e40:	af00      	add	r7, sp, #0
}
 8002e42:	bf00      	nop
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr

08002e4c <fnHardFault_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : HardFaultException Error
//---------------------------------------------------------------------------------------------
void fnHardFault_IRQ(void)                      //--- IRQ_-13
{
 8002e4c:	b480      	push	{r7}
 8002e4e:	af00      	add	r7, sp, #0
}
 8002e50:	bf00      	nop
 8002e52:	46bd      	mov	sp, r7
 8002e54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e58:	4770      	bx	lr

08002e5a <fnMemManage_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : Memory Manager
//---------------------------------------------------------------------------------------------
void fnMemManage_IRQ(void)                      //--- IRQ_-12
{
 8002e5a:	b480      	push	{r7}
 8002e5c:	af00      	add	r7, sp, #0
}
 8002e5e:	bf00      	nop
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr

08002e68 <fnBusFault_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : BusFault
//---------------------------------------------------------------------------------------------
void fnBusFault_IRQ(void)                       //--- IRQ_-11
{
 8002e68:	b480      	push	{r7}
 8002e6a:	af00      	add	r7, sp, #0
}
 8002e6c:	bf00      	nop
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr

08002e76 <fnIllegal_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : Illegal Instruction
//---------------------------------------------------------------------------------------------
void fnIllegal_IRQ(void)                        //--- IRQ_-10
{
 8002e76:	b480      	push	{r7}
 8002e78:	af00      	add	r7, sp, #0
}
 8002e7a:	bf00      	nop
 8002e7c:	46bd      	mov	sp, r7
 8002e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e82:	4770      	bx	lr

08002e84 <fnSVC_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : SVCIRQ
//---------------------------------------------------------------------------------------------
void fnSVC_IRQ(void)                            //--- IRQ_ -5
{
 8002e84:	b480      	push	{r7}
 8002e86:	af00      	add	r7, sp, #0
  //--- ubSVCn is set prior to call od svc function
  switch (ubSVCn)
 8002e88:	4b19      	ldr	r3, [pc, #100]	; (8002ef0 <fnSVC_IRQ+0x6c>)
 8002e8a:	781b      	ldrb	r3, [r3, #0]
 8002e8c:	2b0f      	cmp	r3, #15
 8002e8e:	d828      	bhi.n	8002ee2 <fnSVC_IRQ+0x5e>
 8002e90:	a201      	add	r2, pc, #4	; (adr r2, 8002e98 <fnSVC_IRQ+0x14>)
 8002e92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e96:	bf00      	nop
 8002e98:	08002ee3 	.word	0x08002ee3
 8002e9c:	08002ee3 	.word	0x08002ee3
 8002ea0:	08002ee3 	.word	0x08002ee3
 8002ea4:	08002ee3 	.word	0x08002ee3
 8002ea8:	08002ee3 	.word	0x08002ee3
 8002eac:	08002ed9 	.word	0x08002ed9
 8002eb0:	08002ee3 	.word	0x08002ee3
 8002eb4:	08002ee3 	.word	0x08002ee3
 8002eb8:	08002ee3 	.word	0x08002ee3
 8002ebc:	08002ee3 	.word	0x08002ee3
 8002ec0:	08002ee3 	.word	0x08002ee3
 8002ec4:	08002ee3 	.word	0x08002ee3
 8002ec8:	08002ee3 	.word	0x08002ee3
 8002ecc:	08002ee3 	.word	0x08002ee3
 8002ed0:	08002ee3 	.word	0x08002ee3
 8002ed4:	08002ee3 	.word	0x08002ee3
    case 0x04:
      break;

    //--- Case #5 switches SYSTEM to privileged mode
    case 0x05:
      asm ( "MOV  R0, #00\n\t"  "MSR  CONTROL, R0\n\t" );
 8002ed8:	f04f 0000 	mov.w	r0, #0
 8002edc:	f380 8814 	msr	CONTROL, r0
      break;
 8002ee0:	e000      	b.n	8002ee4 <fnSVC_IRQ+0x60>

    case 0x0F:
      break;

    default:
      break;
 8002ee2:	bf00      	nop
  }
}
 8002ee4:	bf00      	nop
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr
 8002eee:	bf00      	nop
 8002ef0:	20000458 	.word	0x20000458

08002ef4 <fnDebug_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : Debugger
//---------------------------------------------------------------------------------------------
void fnDebug_IRQ(void)                          //--- IRQ_ -4
{
 8002ef4:	b480      	push	{r7}
 8002ef6:	af00      	add	r7, sp, #0
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr

08002f02 <fnPendSVC_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : PendSVC
//---------------------------------------------------------------------------------------------
void fnPendSVC_IRQ(void)                        //--- IRQ_ -2
{
 8002f02:	b480      	push	{r7}
 8002f04:	af00      	add	r7, sp, #0
}
 8002f06:	bf00      	nop
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <fnSysTick_IRQ>:
//---------------------------------------------------------------------------------------------
//  Function Name  : SysTickIRQ This function MUST be defined for RTOS
//  Typically this function runs at 1mSec to 0.1 mSec This is a VERY High priority
//---------------------------------------------------------------------------------------------
void fnSysTick_IRQ(void)                        //--- IRQ_- 1
{
 8002f10:	b580      	push	{r7, lr}
 8002f12:	af00      	add	r7, sp, #0
  fnPacer();                                    //--- Call the Pacer Interrupt Handler Function
 8002f14:	f7ff fd40 	bl	8002998 <fnPacer>
}
 8002f18:	bf00      	nop
 8002f1a:	bd80      	pop	{r7, pc}

08002f1c <fnWWDG_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : WWDG_IRQ
//---------------------------------------------------------------------------------------------
void fnWWDG_IRQ(void)                           //--- IRQ_00
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	af00      	add	r7, sp, #0
}
 8002f20:	bf00      	nop
 8002f22:	46bd      	mov	sp, r7
 8002f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f28:	4770      	bx	lr

08002f2a <fnPVD_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : PVD_IRQ
//---------------------------------------------------------------------------------------------
void fnPVD_IRQ(void)                            //--- IRQ_01
{
 8002f2a:	b480      	push	{r7}
 8002f2c:	af00      	add	r7, sp, #0
}
 8002f2e:	bf00      	nop
 8002f30:	46bd      	mov	sp, r7
 8002f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f36:	4770      	bx	lr

08002f38 <fnRTC_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : RTC_IRQ
//---------------------------------------------------------------------------------------------
void fnRTC_IRQ(void)                            //--- IRQ_02
{
 8002f38:	b480      	push	{r7}
 8002f3a:	af00      	add	r7, sp, #0
}
 8002f3c:	bf00      	nop
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f44:	4770      	bx	lr

08002f46 <fnRTC_WKUP_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : RTC Wakeup
//---------------------------------------------------------------------------------------------
void fnRTC_WKUP_IRQ(void)                       //--- IRQ_03
{
 8002f46:	b480      	push	{r7}
 8002f48:	af00      	add	r7, sp, #0
}
 8002f4a:	bf00      	nop
 8002f4c:	46bd      	mov	sp, r7
 8002f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f52:	4770      	bx	lr

08002f54 <fnFLASH_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : FLASH_IRQ
//---------------------------------------------------------------------------------------------
void fnFLASH_IRQ(void)                          //--- IRQ_04
{
 8002f54:	b480      	push	{r7}
 8002f56:	af00      	add	r7, sp, #0
}
 8002f58:	bf00      	nop
 8002f5a:	46bd      	mov	sp, r7
 8002f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f60:	4770      	bx	lr

08002f62 <fnRCC_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : RCC_IRQ
//---------------------------------------------------------------------------------------------
void fnRCC_IRQ(void)                            //--- IRQ_05
{
 8002f62:	b480      	push	{r7}
 8002f64:	af00      	add	r7, sp, #0
}
 8002f66:	bf00      	nop
 8002f68:	46bd      	mov	sp, r7
 8002f6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f6e:	4770      	bx	lr

08002f70 <fnEXTI_0_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : EXTI0_IRQ
//---------------------------------------------------------------------------------------------
void fnEXTI_0_IRQ(void)                         //--- IRQ_06
{
 8002f70:	b480      	push	{r7}
 8002f72:	af00      	add	r7, sp, #0
}
 8002f74:	bf00      	nop
 8002f76:	46bd      	mov	sp, r7
 8002f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f7c:	4770      	bx	lr

08002f7e <fnEXTI_1_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : EXTI1_IRQ
//---------------------------------------------------------------------------------------------
void fnEXTI_1_IRQ(void)                         //--- IRQ_07
{
 8002f7e:	b480      	push	{r7}
 8002f80:	af00      	add	r7, sp, #0
}
 8002f82:	bf00      	nop
 8002f84:	46bd      	mov	sp, r7
 8002f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f8a:	4770      	bx	lr

08002f8c <fnEXTI_2_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : EXTI0_IRQ
//---------------------------------------------------------------------------------------------
void fnEXTI_2_IRQ(void)                         //--- IRQ_08
{
 8002f8c:	b480      	push	{r7}
 8002f8e:	af00      	add	r7, sp, #0
}
 8002f90:	bf00      	nop
 8002f92:	46bd      	mov	sp, r7
 8002f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f98:	4770      	bx	lr

08002f9a <fnEXTI_3_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : EXTI0_IRQ
//---------------------------------------------------------------------------------------------
void fnEXTI_3_IRQ(void)                         //--- IRQ_09
{
 8002f9a:	b480      	push	{r7}
 8002f9c:	af00      	add	r7, sp, #0
}
 8002f9e:	bf00      	nop
 8002fa0:	46bd      	mov	sp, r7
 8002fa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa6:	4770      	bx	lr

08002fa8 <fnEXTI_4_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : EXTI2_IRQ
//---------------------------------------------------------------------------------------------
void fnEXTI_4_IRQ(void)                         //--- IRQ_10
{
 8002fa8:	b480      	push	{r7}
 8002faa:	af00      	add	r7, sp, #0
}
 8002fac:	bf00      	nop
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr

08002fb6 <fnDMA_11_IRQ>:

//---------------------------------------------------------------------------------------------
//  DMA #1 Channel 1
//---------------------------------------------------------------------------------------------
void fnDMA_11_IRQ(void)                         //--- IRQ_11
{
 8002fb6:	b480      	push	{r7}
 8002fb8:	af00      	add	r7, sp, #0
}
 8002fba:	bf00      	nop
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fc2:	4770      	bx	lr

08002fc4 <fnDMA_12_IRQ>:

//---------------------------------------------------------------------------------------------
//  DMA #1 Channel 2
//---------------------------------------------------------------------------------------------
void fnDMA_12_IRQ(void)                         //--- IRQ_12
{
 8002fc4:	b480      	push	{r7}
 8002fc6:	af00      	add	r7, sp, #0
}
 8002fc8:	bf00      	nop
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr

08002fd2 <fnDMA_13_IRQ>:

//---------------------------------------------------------------------------------------------
//  DMA #1 Channel 3
//---------------------------------------------------------------------------------------------
void fnDMA_13_IRQ(void)                         //--- IRQ_13
{
 8002fd2:	b480      	push	{r7}
 8002fd4:	af00      	add	r7, sp, #0
}
 8002fd6:	bf00      	nop
 8002fd8:	46bd      	mov	sp, r7
 8002fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fde:	4770      	bx	lr

08002fe0 <fnDMA_14_IRQ>:

//---------------------------------------------------------------------------------------------
//  DMA #1 Channel 4
//---------------------------------------------------------------------------------------------
void fnDMA_14_IRQ(void)                         //--- IRQ_14
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	af00      	add	r7, sp, #0
}
 8002fe4:	bf00      	nop
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr

08002fee <fnDMA_15_IRQ>:

//---------------------------------------------------------------------------------------------
//  DMA #1 Channel 5
//---------------------------------------------------------------------------------------------
void fnDMA_15_IRQ(void)                         //--- IRQ_15
{
 8002fee:	b480      	push	{r7}
 8002ff0:	af00      	add	r7, sp, #0
}
 8002ff2:	bf00      	nop
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ffa:	4770      	bx	lr

08002ffc <fnDMA_16_IRQ>:

//---------------------------------------------------------------------------------------------
//  DMA #1 Channel 6
//---------------------------------------------------------------------------------------------
void fnDMA_16_IRQ(void)                         //--- IRQ_16
{
 8002ffc:	b480      	push	{r7}
 8002ffe:	af00      	add	r7, sp, #0
}
 8003000:	bf00      	nop
 8003002:	46bd      	mov	sp, r7
 8003004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003008:	4770      	bx	lr

0800300a <fnDMA_17_IRQ>:

//---------------------------------------------------------------------------------------------
//  DMA #1 Channel 7
//---------------------------------------------------------------------------------------------
void fnDMA_17_IRQ(void)                         //--- IRQ_17
{
 800300a:	b480      	push	{r7}
 800300c:	af00      	add	r7, sp, #0
}
 800300e:	bf00      	nop
 8003010:	46bd      	mov	sp, r7
 8003012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003016:	4770      	bx	lr

08003018 <fnADC_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : ADC_IRQ
//---------------------------------------------------------------------------------------------
void fnADC_IRQ(void)                            //--- IRQ_18
{
 8003018:	b480      	push	{r7}
 800301a:	af00      	add	r7, sp, #0
}
 800301c:	bf00      	nop
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr

08003026 <fnCAN1_TX_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : CAN1_TX
//---------------------------------------------------------------------------------------------
void fnCAN1_TX_IRQ(void)                        //--- IRQ_19
{
 8003026:	b480      	push	{r7}
 8003028:	af00      	add	r7, sp, #0
}
 800302a:	bf00      	nop
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr

08003034 <fnCAN1_RX0_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : CAN1_RX0
//---------------------------------------------------------------------------------------------
void fnCAN1_RX0_IRQ(void)                       //--- IRQ_20
{
 8003034:	b480      	push	{r7}
 8003036:	af00      	add	r7, sp, #0
}
 8003038:	bf00      	nop
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr

08003042 <fnCAN1_RX1_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : CAN1_RX1
//---------------------------------------------------------------------------------------------
void fnCAN1_RX1_IRQ(void)                       //--- IRQ_21
{
 8003042:	b480      	push	{r7}
 8003044:	af00      	add	r7, sp, #0
}
 8003046:	bf00      	nop
 8003048:	46bd      	mov	sp, r7
 800304a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800304e:	4770      	bx	lr

08003050 <fnCAN1_SCE_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : CAN1_SCE
//---------------------------------------------------------------------------------------------
void fnCAN1_SCE_IRQ(void)                       //--- IRQ_22
{
 8003050:	b480      	push	{r7}
 8003052:	af00      	add	r7, sp, #0
}
 8003054:	bf00      	nop
 8003056:	46bd      	mov	sp, r7
 8003058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800305c:	4770      	bx	lr

0800305e <fnEXTI_5_9_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : EXTI_5_9
//---------------------------------------------------------------------------------------------
void fnEXTI_5_9_IRQ(void)                       //--- IRQ_23
{
 800305e:	b480      	push	{r7}
 8003060:	af00      	add	r7, sp, #0
}
 8003062:	bf00      	nop
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr

0800306c <fnTIM1_BK_TIM15_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : TIM1_BK_TIM15_IRQ
//---------------------------------------------------------------------------------------------
void fnTIM1_BK_TIM15_IRQ(void)                  //--- IRQ_24
{
 800306c:	b480      	push	{r7}
 800306e:	af00      	add	r7, sp, #0
}
 8003070:	bf00      	nop
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr

0800307a <fnTIM1_UP_TIM16_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : TIM1_UP_TIM16_IRQ
//---------------------------------------------------------------------------------------------
void fnTIM1_UP_TIM16_IRQ(void)                  //--- IRQ_25
{
 800307a:	b480      	push	{r7}
 800307c:	af00      	add	r7, sp, #0
}
 800307e:	bf00      	nop
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr

08003088 <fnTIM1_TRG_COM_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : TIM1_TRG_COM_IRQ
//---------------------------------------------------------------------------------------------
void fnTIM1_TRG_COM_IRQ(void)                   //--- IRQ_26
{
 8003088:	b480      	push	{r7}
 800308a:	af00      	add	r7, sp, #0
}
 800308c:	bf00      	nop
 800308e:	46bd      	mov	sp, r7
 8003090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003094:	4770      	bx	lr

08003096 <fnTIM1_CC_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : TIM1_CC_IRQ
//---------------------------------------------------------------------------------------------
void fnTIM1_CC_IRQ(void)                        //--- IRQ_27
{
 8003096:	b480      	push	{r7}
 8003098:	af00      	add	r7, sp, #0
}
 800309a:	bf00      	nop
 800309c:	46bd      	mov	sp, r7
 800309e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030a2:	4770      	bx	lr

080030a4 <fnTIM2_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : TIM2_IRQ
//---------------------------------------------------------------------------------------------
void fnTIM2_IRQ(void)                           //--- IRQ_28
{
 80030a4:	b480      	push	{r7}
 80030a6:	af00      	add	r7, sp, #0
}
 80030a8:	bf00      	nop
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr

080030b2 <fnTIM3_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : TIM3_IRQ
//---------------------------------------------------------------------------------------------
void fnTIM3_IRQ(void)                           //--- IRQ_29
{
 80030b2:	b480      	push	{r7}
 80030b4:	af00      	add	r7, sp, #0
}
 80030b6:	bf00      	nop
 80030b8:	46bd      	mov	sp, r7
 80030ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030be:	4770      	bx	lr

080030c0 <fnTIM4_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : TIM4_IRQ
//---------------------------------------------------------------------------------------------
void fnTIM4_IRQ(void)                           //--- IRQ_30
{
 80030c0:	b480      	push	{r7}
 80030c2:	af00      	add	r7, sp, #0
}
 80030c4:	bf00      	nop
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr

080030ce <fnI2C1_EV_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : I2C1_EV_IRQ
//---------------------------------------------------------------------------------------------
void fnI2C1_EV_IRQ(void)                        //--- IRQ_31
{
 80030ce:	b480      	push	{r7}
 80030d0:	af00      	add	r7, sp, #0
}
 80030d2:	bf00      	nop
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr

080030dc <fnI2C1_ER_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : I2C1_EV_IRQ
//---------------------------------------------------------------------------------------------
void fnI2C1_ER_IRQ(void)                        //--- IRQ_32
{
 80030dc:	b480      	push	{r7}
 80030de:	af00      	add	r7, sp, #0
}
 80030e0:	bf00      	nop
 80030e2:	46bd      	mov	sp, r7
 80030e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030e8:	4770      	bx	lr

080030ea <fnI2C2_EV_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : I2C1_EV_IRQ
//---------------------------------------------------------------------------------------------
void fnI2C2_EV_IRQ(void)                        //--- IRQ_33
{
 80030ea:	b480      	push	{r7}
 80030ec:	af00      	add	r7, sp, #0
}
 80030ee:	bf00      	nop
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <fnI2C2_ER_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : I2C1_EV_IRQ
//---------------------------------------------------------------------------------------------
void fnI2C2_ER_IRQ(void)                        //--- IRQ_34
{
 80030f8:	b480      	push	{r7}
 80030fa:	af00      	add	r7, sp, #0
}
 80030fc:	bf00      	nop
 80030fe:	46bd      	mov	sp, r7
 8003100:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003104:	4770      	bx	lr

08003106 <fnSPI1_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : SPI1_IRQ
//---------------------------------------------------------------------------------------------
void fnSPI1_IRQ(void)                           //--- IRQ_35
{
 8003106:	b480      	push	{r7}
 8003108:	af00      	add	r7, sp, #0
}
 800310a:	bf00      	nop
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr

08003114 <fnSPI2_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : SPI2_IRQ
//---------------------------------------------------------------------------------------------
void  fnSPI2_IRQ(void)                          //--- IRQ_36
{
 8003114:	b480      	push	{r7}
 8003116:	af00      	add	r7, sp, #0
}
 8003118:	bf00      	nop
 800311a:	46bd      	mov	sp, r7
 800311c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003120:	4770      	bx	lr

08003122 <fnUSART3_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : USART3_IRQ  Defined in UART_COM Source & Header Files
//---------------------------------------------------------------------------------------------
void fnUSART3_IRQ(void)                         //--- IRQ_39
{
 8003122:	b480      	push	{r7}
 8003124:	af00      	add	r7, sp, #0
}
 8003126:	bf00      	nop
 8003128:	46bd      	mov	sp, r7
 800312a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800312e:	4770      	bx	lr

08003130 <fnEXTI_10_15_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : EXTI_10_15_IRQ
//---------------------------------------------------------------------------------------------
void fnEXTI_10_15_IRQ(void)                     //--- IRQ_40
{
 8003130:	b480      	push	{r7}
 8003132:	af00      	add	r7, sp, #0
}
 8003134:	bf00      	nop
 8003136:	46bd      	mov	sp, r7
 8003138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800313c:	4770      	bx	lr

0800313e <fnRTC_ALARM_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : RTC_ALARM_IRQ
//---------------------------------------------------------------------------------------------
void fnRTC_ALARM_IRQ(void)                      //--- IRQ_41
{
 800313e:	b480      	push	{r7}
 8003140:	af00      	add	r7, sp, #0
}
 8003142:	bf00      	nop
 8003144:	46bd      	mov	sp, r7
 8003146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314a:	4770      	bx	lr

0800314c <fnSDMMC1_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  :
//---------------------------------------------------------------------------------------------
void fnSDMMC1_IRQ(void)                         //--- IRQ_49
{
 800314c:	b480      	push	{r7}
 800314e:	af00      	add	r7, sp, #0
}
 8003150:	bf00      	nop
 8003152:	46bd      	mov	sp, r7
 8003154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003158:	4770      	bx	lr

0800315a <fnSPI3_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  :
//---------------------------------------------------------------------------------------------
void fnSPI3_IRQ(void)                           //--- IRQ_51
{
 800315a:	b480      	push	{r7}
 800315c:	af00      	add	r7, sp, #0
}
 800315e:	bf00      	nop
 8003160:	46bd      	mov	sp, r7
 8003162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003166:	4770      	bx	lr

08003168 <fnUSART4_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : USART4_IRQ  Defined in UART_COM Source & Header Files
//---------------------------------------------------------------------------------------------
void fnUSART4_IRQ(void)                         //--- IRQ_52
{
 8003168:	b480      	push	{r7}
 800316a:	af00      	add	r7, sp, #0
}
 800316c:	bf00      	nop
 800316e:	46bd      	mov	sp, r7
 8003170:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003174:	4770      	bx	lr

08003176 <fnTIM6_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  :
//---------------------------------------------------------------------------------------------
void fnTIM6_IRQ(void)                           //--- IRQ_54
{
 8003176:	b480      	push	{r7}
 8003178:	af00      	add	r7, sp, #0
}
 800317a:	bf00      	nop
 800317c:	46bd      	mov	sp, r7
 800317e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003182:	4770      	bx	lr

08003184 <fnTIM7_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  :
//---------------------------------------------------------------------------------------------
void fnTIM7_IRQ(void)                           //--- IRQ_55
{
 8003184:	b480      	push	{r7}
 8003186:	af00      	add	r7, sp, #0
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr

08003192 <fnDMA_21_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  :
//---------------------------------------------------------------------------------------------
void  fnDMA_21_IRQ(void)                        //--- IRQ_56
{
 8003192:	b480      	push	{r7}
 8003194:	af00      	add	r7, sp, #0
}
 8003196:	bf00      	nop
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr

080031a0 <fnDMA_22_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  :
//---------------------------------------------------------------------------------------------
void  fnDMA_22_IRQ(void)                        //--- IRQ_57
{
 80031a0:	b480      	push	{r7}
 80031a2:	af00      	add	r7, sp, #0
}
 80031a4:	bf00      	nop
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr

080031ae <fnDMA_23_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  :
//---------------------------------------------------------------------------------------------
void  fnDMA_23_IRQ(void)                        //--- IRQ_58
{
 80031ae:	b480      	push	{r7}
 80031b0:	af00      	add	r7, sp, #0
}
 80031b2:	bf00      	nop
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr

080031bc <fnDMA_24_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  :
//---------------------------------------------------------------------------------------------
void  fnDMA_24_IRQ(void)                        //--- IRQ_59
{
 80031bc:	b480      	push	{r7}
 80031be:	af00      	add	r7, sp, #0
}
 80031c0:	bf00      	nop
 80031c2:	46bd      	mov	sp, r7
 80031c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031c8:	4770      	bx	lr

080031ca <fnDMA_25_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  :
//---------------------------------------------------------------------------------------------
void  fnDMA_25_IRQ(void)                        //--- IRQ_60
{
 80031ca:	b480      	push	{r7}
 80031cc:	af00      	add	r7, sp, #0
}
 80031ce:	bf00      	nop
 80031d0:	46bd      	mov	sp, r7
 80031d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d6:	4770      	bx	lr

080031d8 <fnCOMP_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : COMParator IRQ
//---------------------------------------------------------------------------------------------
void fnCOMP_IRQ(void)                           //--- IRQ_64
{
 80031d8:	b480      	push	{r7}
 80031da:	af00      	add	r7, sp, #0
}
 80031dc:	bf00      	nop
 80031de:	46bd      	mov	sp, r7
 80031e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e4:	4770      	bx	lr

080031e6 <fnLPTIM1_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : LPTIM1 IRQ
//---------------------------------------------------------------------------------------------
void fnLPTIM1_IRQ(void)                         //--- IRQ_65
{
 80031e6:	b480      	push	{r7}
 80031e8:	af00      	add	r7, sp, #0
}
 80031ea:	bf00      	nop
 80031ec:	46bd      	mov	sp, r7
 80031ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f2:	4770      	bx	lr

080031f4 <fnLPTIM2_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : LPTIM2 IRQ
//---------------------------------------------------------------------------------------------
void fnLPTIM2_IRQ(void)                         //--- IRQ_66
{
 80031f4:	b480      	push	{r7}
 80031f6:	af00      	add	r7, sp, #0
}
 80031f8:	bf00      	nop
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr

08003202 <fnUSB_FS_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : USB Full Speed IRQ
//---------------------------------------------------------------------------------------------
void fnUSB_FS_IRQ(void)                         //--- IRQ_67
{
 8003202:	b480      	push	{r7}
 8003204:	af00      	add	r7, sp, #0
}
 8003206:	bf00      	nop
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr

08003210 <fnDMA_26_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : DMA_26_IRQ
//---------------------------------------------------------------------------------------------
void fnDMA_26_IRQ(void)                         //--- IRQ_68
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
}
 8003214:	bf00      	nop
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr

0800321e <fnDMA_27_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : DMA_27_IRQ
//---------------------------------------------------------------------------------------------
void fnDMA_27_IRQ(void)                         //--- IRQ_69
{
 800321e:	b480      	push	{r7}
 8003220:	af00      	add	r7, sp, #0
}
 8003222:	bf00      	nop
 8003224:	46bd      	mov	sp, r7
 8003226:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322a:	4770      	bx	lr

0800322c <fnLPUART1_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : Low Power UART 1
//---------------------------------------------------------------------------------------------
void fnLPUART1_IRQ(void)                        //--- IRQ_70
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
}
 8003230:	bf00      	nop
 8003232:	46bd      	mov	sp, r7
 8003234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003238:	4770      	bx	lr

0800323a <fnQUADSPI_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : QUAD SPI
//---------------------------------------------------------------------------------------------
void fnQUADSPI_IRQ(void)                        //--- IRQ_71
{
 800323a:	b480      	push	{r7}
 800323c:	af00      	add	r7, sp, #0
}
 800323e:	bf00      	nop
 8003240:	46bd      	mov	sp, r7
 8003242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003246:	4770      	bx	lr

08003248 <fnI2C3_EV_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : I2C3 Event
//---------------------------------------------------------------------------------------------
void fnI2C3_EV_IRQ(void)                        //--- IRQ_72
{
 8003248:	b480      	push	{r7}
 800324a:	af00      	add	r7, sp, #0
}
 800324c:	bf00      	nop
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr

08003256 <fnI2C3_ER_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : I2C3 Error
//---------------------------------------------------------------------------------------------
void fnI2C3_ER_IRQ(void)                        //--- IRQ_73
{
 8003256:	b480      	push	{r7}
 8003258:	af00      	add	r7, sp, #0
}
 800325a:	bf00      	nop
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <fnSAI_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : SAI Event
//---------------------------------------------------------------------------------------------
void fnSAI_IRQ(void)                            //--- IRQ_74
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
}
 8003268:	bf00      	nop
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr

08003272 <fnSWPMI1_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : SWPMI1 Event
//---------------------------------------------------------------------------------------------
void fnSWPMI1_IRQ(void)                         //--- IRQ_76
{
 8003272:	b480      	push	{r7}
 8003274:	af00      	add	r7, sp, #0
}
 8003276:	bf00      	nop
 8003278:	46bd      	mov	sp, r7
 800327a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800327e:	4770      	bx	lr

08003280 <fnTSC_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : TSC Event
//---------------------------------------------------------------------------------------------
void fnTSC_IRQ(void)                            //--- IRQ_77
{
 8003280:	b480      	push	{r7}
 8003282:	af00      	add	r7, sp, #0
}
 8003284:	bf00      	nop
 8003286:	46bd      	mov	sp, r7
 8003288:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328c:	4770      	bx	lr

0800328e <fnRNG_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : Random Number Generator
//---------------------------------------------------------------------------------------------
void fnRNG_IRQ(void)                            //--- IRQ_80
{
 800328e:	b480      	push	{r7}
 8003290:	af00      	add	r7, sp, #0
}
 8003292:	bf00      	nop
 8003294:	46bd      	mov	sp, r7
 8003296:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329a:	4770      	bx	lr

0800329c <fnFPU_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : Floating Point Processor
//---------------------------------------------------------------------------------------------
void fnFPU_IRQ(void)                            //--- IRQ_81
{
 800329c:	b480      	push	{r7}
 800329e:	af00      	add	r7, sp, #0
}
 80032a0:	bf00      	nop
 80032a2:	46bd      	mov	sp, r7
 80032a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032a8:	4770      	bx	lr

080032aa <fnCRS_IRQ>:

//---------------------------------------------------------------------------------------------
//  Function Name  : CRS Event
//---------------------------------------------------------------------------------------------
void fnCRS_IRQ(void)                            //--- IRQ_82
{
 80032aa:	b480      	push	{r7}
 80032ac:	af00      	add	r7, sp, #0
}
 80032ae:	bf00      	nop
 80032b0:	46bd      	mov	sp, r7
 80032b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b6:	4770      	bx	lr

080032b8 <fnEnaInt>:

//---------------------------------------------------------------------------------------------
//    Enable Individual Interrupts  (0 to 96) (97 Total Interrupts)
//---------------------------------------------------------------------------------------------
void  fnEnaInt (u16 uwIntNum)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b082      	sub	sp, #8
 80032bc:	af00      	add	r7, sp, #0
 80032be:	4603      	mov	r3, r0
 80032c0:	80fb      	strh	r3, [r7, #6]
  GID;                                            //--- Kill Other Interrupts
 80032c2:	b672      	cpsid	i
  NVIC_EnableIRQ(uwIntNum);
 80032c4:	88fb      	ldrh	r3, [r7, #6]
 80032c6:	4618      	mov	r0, r3
 80032c8:	f7ff fd28 	bl	8002d1c <NVIC_EnableIRQ>
  GIE;                                            //--- Enable Other Interrupts
 80032cc:	b662      	cpsie	i
}
 80032ce:	bf00      	nop
 80032d0:	3708      	adds	r7, #8
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}

080032d6 <fnDisInt>:

//---------------------------------------------------------------------------------------------
//    Disable Individual Interrupt (0 to 96)
//---------------------------------------------------------------------------------------------
void  fnDisInt (u16 uwIntNum)
{
 80032d6:	b580      	push	{r7, lr}
 80032d8:	b082      	sub	sp, #8
 80032da:	af00      	add	r7, sp, #0
 80032dc:	4603      	mov	r3, r0
 80032de:	80fb      	strh	r3, [r7, #6]
  GID;                                            //--- Kill Other Interrupts
 80032e0:	b672      	cpsid	i
  NVIC_EnableIRQ(uwIntNum);
 80032e2:	88fb      	ldrh	r3, [r7, #6]
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7ff fd19 	bl	8002d1c <NVIC_EnableIRQ>
  GIE;                                            //--- Enable Other Interrupts
 80032ea:	b662      	cpsie	i
}
 80032ec:	bf00      	nop
 80032ee:	3708      	adds	r7, #8
 80032f0:	46bd      	mov	sp, r7
 80032f2:	bd80      	pop	{r7, pc}

080032f4 <fnSetIntPend>:

//---------------------------------------------------------------------------------------------
//    Set an Interrupt Bit in the Interrupts Mask
//---------------------------------------------------------------------------------------------
void  fnSetIntPend (u16 uwIntNum)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	b082      	sub	sp, #8
 80032f8:	af00      	add	r7, sp, #0
 80032fa:	4603      	mov	r3, r0
 80032fc:	80fb      	strh	r3, [r7, #6]
  GID;                                            //--- Kill Other Interrupts
 80032fe:	b672      	cpsid	i
  NVIC_DisableIRQ(uwIntNum);
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	4618      	mov	r0, r3
 8003304:	f7ff fd22 	bl	8002d4c <NVIC_DisableIRQ>
  GIE;                                            //--- Enable Other Interrupts
 8003308:	b662      	cpsie	i
}
 800330a:	bf00      	nop
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}

08003312 <fnClrIntPend>:

//---------------------------------------------------------------------------------------------
//    Clear an Interrupt Bit in the Interrupts Pending Mask
//---------------------------------------------------------------------------------------------
void  fnClrIntPend (u16 uwIntNum)
{
 8003312:	b580      	push	{r7, lr}
 8003314:	b082      	sub	sp, #8
 8003316:	af00      	add	r7, sp, #0
 8003318:	4603      	mov	r3, r0
 800331a:	80fb      	strh	r3, [r7, #6]
  GID;                                            //--- Kill Other Interrupts
 800331c:	b672      	cpsid	i
  NVIC_ClearPendingIRQ(uwIntNum);
 800331e:	88fb      	ldrh	r3, [r7, #6]
 8003320:	4618      	mov	r0, r3
 8003322:	f7ff fd2b 	bl	8002d7c <NVIC_ClearPendingIRQ>
  GIE;                                            //--- Enable Other Interrupts
 8003326:	b662      	cpsie	i
}
 8003328:	bf00      	nop
 800332a:	3708      	adds	r7, #8
 800332c:	46bd      	mov	sp, r7
 800332e:	bd80      	pop	{r7, pc}

08003330 <fnSetIntPriority>:
//
//    uwIntNum = Interrupt Number (0 - 96)
//    ubPri = Priority Level (0 - 15) Higher Number = Weaker priority
//---------------------------------------------------------------------------------------------
void  fnSetIntPriority (u16 uwIntNum, u08 ubPri)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b082      	sub	sp, #8
 8003334:	af00      	add	r7, sp, #0
 8003336:	4603      	mov	r3, r0
 8003338:	460a      	mov	r2, r1
 800333a:	80fb      	strh	r3, [r7, #6]
 800333c:	4613      	mov	r3, r2
 800333e:	717b      	strb	r3, [r7, #5]
  NVIC_SetPriority(uwIntNum, ubPri);
 8003340:	88fb      	ldrh	r3, [r7, #6]
 8003342:	797a      	ldrb	r2, [r7, #5]
 8003344:	4611      	mov	r1, r2
 8003346:	4618      	mov	r0, r3
 8003348:	f7ff fd30 	bl	8002dac <NVIC_SetPriority>
}
 800334c:	bf00      	nop
 800334e:	3708      	adds	r7, #8
 8003350:	46bd      	mov	sp, r7
 8003352:	bd80      	pop	{r7, pc}

08003354 <fnDefinePortPins>:
u08 ubSpoFlag = 0;                                //--- Flag that Pulse Bit Ports are Set
u08 ubPulseCntr;                                  //--- Number of Sequential Pulses to output

//--- Set up Pins to use for Pulse Data Outs
void  fnDefinePortPins (u08 ubCpin, u08 ubDpin)
{
 8003354:	b480      	push	{r7}
 8003356:	b083      	sub	sp, #12
 8003358:	af00      	add	r7, sp, #0
 800335a:	4603      	mov	r3, r0
 800335c:	460a      	mov	r2, r1
 800335e:	71fb      	strb	r3, [r7, #7]
 8003360:	4613      	mov	r3, r2
 8003362:	71bb      	strb	r3, [r7, #6]
  ubSpoFlag = 0xFF;
 8003364:	4b71      	ldr	r3, [pc, #452]	; (800352c <fnDefinePortPins+0x1d8>)
 8003366:	22ff      	movs	r2, #255	; 0xff
 8003368:	701a      	strb	r2, [r3, #0]

  //--- Define the Clock GPIO Port Address
  switch (ubCpin & 0xF0)
 800336a:	79fb      	ldrb	r3, [r7, #7]
 800336c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003370:	2ba0      	cmp	r3, #160	; 0xa0
 8003372:	d04e      	beq.n	8003412 <fnDefinePortPins+0xbe>
 8003374:	2ba0      	cmp	r3, #160	; 0xa0
 8003376:	dc50      	bgt.n	800341a <fnDefinePortPins+0xc6>
 8003378:	2b90      	cmp	r3, #144	; 0x90
 800337a:	d046      	beq.n	800340a <fnDefinePortPins+0xb6>
 800337c:	2b90      	cmp	r3, #144	; 0x90
 800337e:	dc4c      	bgt.n	800341a <fnDefinePortPins+0xc6>
 8003380:	2b80      	cmp	r3, #128	; 0x80
 8003382:	d03e      	beq.n	8003402 <fnDefinePortPins+0xae>
 8003384:	2b80      	cmp	r3, #128	; 0x80
 8003386:	dc48      	bgt.n	800341a <fnDefinePortPins+0xc6>
 8003388:	2b70      	cmp	r3, #112	; 0x70
 800338a:	d036      	beq.n	80033fa <fnDefinePortPins+0xa6>
 800338c:	2b70      	cmp	r3, #112	; 0x70
 800338e:	dc44      	bgt.n	800341a <fnDefinePortPins+0xc6>
 8003390:	2b60      	cmp	r3, #96	; 0x60
 8003392:	d02e      	beq.n	80033f2 <fnDefinePortPins+0x9e>
 8003394:	2b60      	cmp	r3, #96	; 0x60
 8003396:	dc40      	bgt.n	800341a <fnDefinePortPins+0xc6>
 8003398:	2b50      	cmp	r3, #80	; 0x50
 800339a:	d026      	beq.n	80033ea <fnDefinePortPins+0x96>
 800339c:	2b50      	cmp	r3, #80	; 0x50
 800339e:	dc3c      	bgt.n	800341a <fnDefinePortPins+0xc6>
 80033a0:	2b40      	cmp	r3, #64	; 0x40
 80033a2:	d01e      	beq.n	80033e2 <fnDefinePortPins+0x8e>
 80033a4:	2b40      	cmp	r3, #64	; 0x40
 80033a6:	dc38      	bgt.n	800341a <fnDefinePortPins+0xc6>
 80033a8:	2b30      	cmp	r3, #48	; 0x30
 80033aa:	d016      	beq.n	80033da <fnDefinePortPins+0x86>
 80033ac:	2b30      	cmp	r3, #48	; 0x30
 80033ae:	dc34      	bgt.n	800341a <fnDefinePortPins+0xc6>
 80033b0:	2b20      	cmp	r3, #32
 80033b2:	d00e      	beq.n	80033d2 <fnDefinePortPins+0x7e>
 80033b4:	2b20      	cmp	r3, #32
 80033b6:	dc30      	bgt.n	800341a <fnDefinePortPins+0xc6>
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d002      	beq.n	80033c2 <fnDefinePortPins+0x6e>
 80033bc:	2b10      	cmp	r3, #16
 80033be:	d004      	beq.n	80033ca <fnDefinePortPins+0x76>
    case 0xA0:
      Cptr = &GPIOK_BSRR;
      break;

    default:
      break;
 80033c0:	e02b      	b.n	800341a <fnDefinePortPins+0xc6>
      Cptr = &GPIOA_BSRR;
 80033c2:	4b5b      	ldr	r3, [pc, #364]	; (8003530 <fnDefinePortPins+0x1dc>)
 80033c4:	4a5b      	ldr	r2, [pc, #364]	; (8003534 <fnDefinePortPins+0x1e0>)
 80033c6:	601a      	str	r2, [r3, #0]
      break;
 80033c8:	e028      	b.n	800341c <fnDefinePortPins+0xc8>
      Cptr = &GPIOB_BSRR;
 80033ca:	4b59      	ldr	r3, [pc, #356]	; (8003530 <fnDefinePortPins+0x1dc>)
 80033cc:	4a5a      	ldr	r2, [pc, #360]	; (8003538 <fnDefinePortPins+0x1e4>)
 80033ce:	601a      	str	r2, [r3, #0]
      break;
 80033d0:	e024      	b.n	800341c <fnDefinePortPins+0xc8>
      Cptr = &GPIOC_BSRR;
 80033d2:	4b57      	ldr	r3, [pc, #348]	; (8003530 <fnDefinePortPins+0x1dc>)
 80033d4:	4a59      	ldr	r2, [pc, #356]	; (800353c <fnDefinePortPins+0x1e8>)
 80033d6:	601a      	str	r2, [r3, #0]
      break;
 80033d8:	e020      	b.n	800341c <fnDefinePortPins+0xc8>
      Cptr = &GPIOD_BSRR;
 80033da:	4b55      	ldr	r3, [pc, #340]	; (8003530 <fnDefinePortPins+0x1dc>)
 80033dc:	4a58      	ldr	r2, [pc, #352]	; (8003540 <fnDefinePortPins+0x1ec>)
 80033de:	601a      	str	r2, [r3, #0]
      break;
 80033e0:	e01c      	b.n	800341c <fnDefinePortPins+0xc8>
      Cptr = &GPIOE_BSRR;
 80033e2:	4b53      	ldr	r3, [pc, #332]	; (8003530 <fnDefinePortPins+0x1dc>)
 80033e4:	4a57      	ldr	r2, [pc, #348]	; (8003544 <fnDefinePortPins+0x1f0>)
 80033e6:	601a      	str	r2, [r3, #0]
      break;
 80033e8:	e018      	b.n	800341c <fnDefinePortPins+0xc8>
      Cptr = &GPIOF_BSRR;
 80033ea:	4b51      	ldr	r3, [pc, #324]	; (8003530 <fnDefinePortPins+0x1dc>)
 80033ec:	4a56      	ldr	r2, [pc, #344]	; (8003548 <fnDefinePortPins+0x1f4>)
 80033ee:	601a      	str	r2, [r3, #0]
      break;
 80033f0:	e014      	b.n	800341c <fnDefinePortPins+0xc8>
      Cptr = &GPIOG_BSRR;
 80033f2:	4b4f      	ldr	r3, [pc, #316]	; (8003530 <fnDefinePortPins+0x1dc>)
 80033f4:	4a55      	ldr	r2, [pc, #340]	; (800354c <fnDefinePortPins+0x1f8>)
 80033f6:	601a      	str	r2, [r3, #0]
      break;
 80033f8:	e010      	b.n	800341c <fnDefinePortPins+0xc8>
      Cptr = &GPIOH_BSRR;
 80033fa:	4b4d      	ldr	r3, [pc, #308]	; (8003530 <fnDefinePortPins+0x1dc>)
 80033fc:	4a54      	ldr	r2, [pc, #336]	; (8003550 <fnDefinePortPins+0x1fc>)
 80033fe:	601a      	str	r2, [r3, #0]
      break;
 8003400:	e00c      	b.n	800341c <fnDefinePortPins+0xc8>
      Cptr = &GPIOI_BSRR;
 8003402:	4b4b      	ldr	r3, [pc, #300]	; (8003530 <fnDefinePortPins+0x1dc>)
 8003404:	4a53      	ldr	r2, [pc, #332]	; (8003554 <fnDefinePortPins+0x200>)
 8003406:	601a      	str	r2, [r3, #0]
      break;
 8003408:	e008      	b.n	800341c <fnDefinePortPins+0xc8>
      Cptr = &GPIOJ_BSRR;
 800340a:	4b49      	ldr	r3, [pc, #292]	; (8003530 <fnDefinePortPins+0x1dc>)
 800340c:	4a52      	ldr	r2, [pc, #328]	; (8003558 <fnDefinePortPins+0x204>)
 800340e:	601a      	str	r2, [r3, #0]
      break;
 8003410:	e004      	b.n	800341c <fnDefinePortPins+0xc8>
      Cptr = &GPIOK_BSRR;
 8003412:	4b47      	ldr	r3, [pc, #284]	; (8003530 <fnDefinePortPins+0x1dc>)
 8003414:	4a51      	ldr	r2, [pc, #324]	; (800355c <fnDefinePortPins+0x208>)
 8003416:	601a      	str	r2, [r3, #0]
      break;
 8003418:	e000      	b.n	800341c <fnDefinePortPins+0xc8>
      break;
 800341a:	bf00      	nop
  }

  //--- Define the Port Pin for Clock Out
  ulCsetMask = (0x00000001 << (ubCpin & 0x0F));
 800341c:	79fb      	ldrb	r3, [r7, #7]
 800341e:	f003 030f 	and.w	r3, r3, #15
 8003422:	2201      	movs	r2, #1
 8003424:	fa02 f303 	lsl.w	r3, r2, r3
 8003428:	461a      	mov	r2, r3
 800342a:	4b4d      	ldr	r3, [pc, #308]	; (8003560 <fnDefinePortPins+0x20c>)
 800342c:	601a      	str	r2, [r3, #0]
  ulCclrMask = ~(0x00000001 << ((ubCpin & 0x0F) + 16));
 800342e:	79fb      	ldrb	r3, [r7, #7]
 8003430:	f003 030f 	and.w	r3, r3, #15
 8003434:	3310      	adds	r3, #16
 8003436:	2201      	movs	r2, #1
 8003438:	fa02 f303 	lsl.w	r3, r2, r3
 800343c:	43db      	mvns	r3, r3
 800343e:	461a      	mov	r2, r3
 8003440:	4b48      	ldr	r3, [pc, #288]	; (8003564 <fnDefinePortPins+0x210>)
 8003442:	601a      	str	r2, [r3, #0]

  //--- Define the Clock GPIO Port Address
  switch (ubDpin & 0xF0)
 8003444:	79bb      	ldrb	r3, [r7, #6]
 8003446:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800344a:	2ba0      	cmp	r3, #160	; 0xa0
 800344c:	d04e      	beq.n	80034ec <fnDefinePortPins+0x198>
 800344e:	2ba0      	cmp	r3, #160	; 0xa0
 8003450:	dc50      	bgt.n	80034f4 <fnDefinePortPins+0x1a0>
 8003452:	2b90      	cmp	r3, #144	; 0x90
 8003454:	d046      	beq.n	80034e4 <fnDefinePortPins+0x190>
 8003456:	2b90      	cmp	r3, #144	; 0x90
 8003458:	dc4c      	bgt.n	80034f4 <fnDefinePortPins+0x1a0>
 800345a:	2b80      	cmp	r3, #128	; 0x80
 800345c:	d03e      	beq.n	80034dc <fnDefinePortPins+0x188>
 800345e:	2b80      	cmp	r3, #128	; 0x80
 8003460:	dc48      	bgt.n	80034f4 <fnDefinePortPins+0x1a0>
 8003462:	2b70      	cmp	r3, #112	; 0x70
 8003464:	d036      	beq.n	80034d4 <fnDefinePortPins+0x180>
 8003466:	2b70      	cmp	r3, #112	; 0x70
 8003468:	dc44      	bgt.n	80034f4 <fnDefinePortPins+0x1a0>
 800346a:	2b60      	cmp	r3, #96	; 0x60
 800346c:	d02e      	beq.n	80034cc <fnDefinePortPins+0x178>
 800346e:	2b60      	cmp	r3, #96	; 0x60
 8003470:	dc40      	bgt.n	80034f4 <fnDefinePortPins+0x1a0>
 8003472:	2b50      	cmp	r3, #80	; 0x50
 8003474:	d026      	beq.n	80034c4 <fnDefinePortPins+0x170>
 8003476:	2b50      	cmp	r3, #80	; 0x50
 8003478:	dc3c      	bgt.n	80034f4 <fnDefinePortPins+0x1a0>
 800347a:	2b40      	cmp	r3, #64	; 0x40
 800347c:	d01e      	beq.n	80034bc <fnDefinePortPins+0x168>
 800347e:	2b40      	cmp	r3, #64	; 0x40
 8003480:	dc38      	bgt.n	80034f4 <fnDefinePortPins+0x1a0>
 8003482:	2b30      	cmp	r3, #48	; 0x30
 8003484:	d016      	beq.n	80034b4 <fnDefinePortPins+0x160>
 8003486:	2b30      	cmp	r3, #48	; 0x30
 8003488:	dc34      	bgt.n	80034f4 <fnDefinePortPins+0x1a0>
 800348a:	2b20      	cmp	r3, #32
 800348c:	d00e      	beq.n	80034ac <fnDefinePortPins+0x158>
 800348e:	2b20      	cmp	r3, #32
 8003490:	dc30      	bgt.n	80034f4 <fnDefinePortPins+0x1a0>
 8003492:	2b00      	cmp	r3, #0
 8003494:	d002      	beq.n	800349c <fnDefinePortPins+0x148>
 8003496:	2b10      	cmp	r3, #16
 8003498:	d004      	beq.n	80034a4 <fnDefinePortPins+0x150>
    case 0xA0:
      Dptr = &GPIOK_BSRR;
      break;

    default:
      break;
 800349a:	e02b      	b.n	80034f4 <fnDefinePortPins+0x1a0>
      Dptr = &GPIOA_BSRR;
 800349c:	4b32      	ldr	r3, [pc, #200]	; (8003568 <fnDefinePortPins+0x214>)
 800349e:	4a25      	ldr	r2, [pc, #148]	; (8003534 <fnDefinePortPins+0x1e0>)
 80034a0:	601a      	str	r2, [r3, #0]
      break;
 80034a2:	e028      	b.n	80034f6 <fnDefinePortPins+0x1a2>
      Dptr = &GPIOB_BSRR;
 80034a4:	4b30      	ldr	r3, [pc, #192]	; (8003568 <fnDefinePortPins+0x214>)
 80034a6:	4a24      	ldr	r2, [pc, #144]	; (8003538 <fnDefinePortPins+0x1e4>)
 80034a8:	601a      	str	r2, [r3, #0]
      break;
 80034aa:	e024      	b.n	80034f6 <fnDefinePortPins+0x1a2>
      Dptr = &GPIOC_BSRR;
 80034ac:	4b2e      	ldr	r3, [pc, #184]	; (8003568 <fnDefinePortPins+0x214>)
 80034ae:	4a23      	ldr	r2, [pc, #140]	; (800353c <fnDefinePortPins+0x1e8>)
 80034b0:	601a      	str	r2, [r3, #0]
      break;
 80034b2:	e020      	b.n	80034f6 <fnDefinePortPins+0x1a2>
      Dptr = &GPIOD_BSRR;
 80034b4:	4b2c      	ldr	r3, [pc, #176]	; (8003568 <fnDefinePortPins+0x214>)
 80034b6:	4a22      	ldr	r2, [pc, #136]	; (8003540 <fnDefinePortPins+0x1ec>)
 80034b8:	601a      	str	r2, [r3, #0]
      break;
 80034ba:	e01c      	b.n	80034f6 <fnDefinePortPins+0x1a2>
      Dptr = &GPIOE_BSRR;
 80034bc:	4b2a      	ldr	r3, [pc, #168]	; (8003568 <fnDefinePortPins+0x214>)
 80034be:	4a21      	ldr	r2, [pc, #132]	; (8003544 <fnDefinePortPins+0x1f0>)
 80034c0:	601a      	str	r2, [r3, #0]
      break;
 80034c2:	e018      	b.n	80034f6 <fnDefinePortPins+0x1a2>
      Dptr = &GPIOF_BSRR;
 80034c4:	4b28      	ldr	r3, [pc, #160]	; (8003568 <fnDefinePortPins+0x214>)
 80034c6:	4a20      	ldr	r2, [pc, #128]	; (8003548 <fnDefinePortPins+0x1f4>)
 80034c8:	601a      	str	r2, [r3, #0]
      break;
 80034ca:	e014      	b.n	80034f6 <fnDefinePortPins+0x1a2>
      Dptr = &GPIOG_BSRR;
 80034cc:	4b26      	ldr	r3, [pc, #152]	; (8003568 <fnDefinePortPins+0x214>)
 80034ce:	4a1f      	ldr	r2, [pc, #124]	; (800354c <fnDefinePortPins+0x1f8>)
 80034d0:	601a      	str	r2, [r3, #0]
      break;
 80034d2:	e010      	b.n	80034f6 <fnDefinePortPins+0x1a2>
      Dptr = &GPIOH_BSRR;
 80034d4:	4b24      	ldr	r3, [pc, #144]	; (8003568 <fnDefinePortPins+0x214>)
 80034d6:	4a1e      	ldr	r2, [pc, #120]	; (8003550 <fnDefinePortPins+0x1fc>)
 80034d8:	601a      	str	r2, [r3, #0]
      break;
 80034da:	e00c      	b.n	80034f6 <fnDefinePortPins+0x1a2>
      Dptr = &GPIOI_BSRR;
 80034dc:	4b22      	ldr	r3, [pc, #136]	; (8003568 <fnDefinePortPins+0x214>)
 80034de:	4a1d      	ldr	r2, [pc, #116]	; (8003554 <fnDefinePortPins+0x200>)
 80034e0:	601a      	str	r2, [r3, #0]
      break;
 80034e2:	e008      	b.n	80034f6 <fnDefinePortPins+0x1a2>
      Dptr = &GPIOJ_BSRR;
 80034e4:	4b20      	ldr	r3, [pc, #128]	; (8003568 <fnDefinePortPins+0x214>)
 80034e6:	4a1c      	ldr	r2, [pc, #112]	; (8003558 <fnDefinePortPins+0x204>)
 80034e8:	601a      	str	r2, [r3, #0]
      break;
 80034ea:	e004      	b.n	80034f6 <fnDefinePortPins+0x1a2>
      Dptr = &GPIOK_BSRR;
 80034ec:	4b1e      	ldr	r3, [pc, #120]	; (8003568 <fnDefinePortPins+0x214>)
 80034ee:	4a1b      	ldr	r2, [pc, #108]	; (800355c <fnDefinePortPins+0x208>)
 80034f0:	601a      	str	r2, [r3, #0]
      break;
 80034f2:	e000      	b.n	80034f6 <fnDefinePortPins+0x1a2>
      break;
 80034f4:	bf00      	nop
  }

  //--- Define the Port Pin for Data Out
  ulDsetMask = (0x00000001 << (ubCpin & 0x0F));
 80034f6:	79fb      	ldrb	r3, [r7, #7]
 80034f8:	f003 030f 	and.w	r3, r3, #15
 80034fc:	2201      	movs	r2, #1
 80034fe:	fa02 f303 	lsl.w	r3, r2, r3
 8003502:	461a      	mov	r2, r3
 8003504:	4b19      	ldr	r3, [pc, #100]	; (800356c <fnDefinePortPins+0x218>)
 8003506:	601a      	str	r2, [r3, #0]
  ulDclrMask = ~(0x00000001 << ((ubCpin & 0x0F) + 16));
 8003508:	79fb      	ldrb	r3, [r7, #7]
 800350a:	f003 030f 	and.w	r3, r3, #15
 800350e:	3310      	adds	r3, #16
 8003510:	2201      	movs	r2, #1
 8003512:	fa02 f303 	lsl.w	r3, r2, r3
 8003516:	43db      	mvns	r3, r3
 8003518:	461a      	mov	r2, r3
 800351a:	4b15      	ldr	r3, [pc, #84]	; (8003570 <fnDefinePortPins+0x21c>)
 800351c:	601a      	str	r2, [r3, #0]
}
 800351e:	bf00      	nop
 8003520:	370c      	adds	r7, #12
 8003522:	46bd      	mov	sp, r7
 8003524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003528:	4770      	bx	lr
 800352a:	bf00      	nop
 800352c:	20000450 	.word	0x20000450
 8003530:	20004934 	.word	0x20004934
 8003534:	48000018 	.word	0x48000018
 8003538:	48000418 	.word	0x48000418
 800353c:	48000818 	.word	0x48000818
 8003540:	48000c18 	.word	0x48000c18
 8003544:	48001018 	.word	0x48001018
 8003548:	48001418 	.word	0x48001418
 800354c:	48001818 	.word	0x48001818
 8003550:	48001c18 	.word	0x48001c18
 8003554:	48002018 	.word	0x48002018
 8003558:	48002418 	.word	0x48002418
 800355c:	48002c18 	.word	0x48002c18
 8003560:	20004920 	.word	0x20004920
 8003564:	20004930 	.word	0x20004930
 8003568:	20004928 	.word	0x20004928
 800356c:	2000491c 	.word	0x2000491c
 8003570:	20004924 	.word	0x20004924

08003574 <fnSetCpin>:

//--- Functions to Set and Clear Pulse Out Pins
void  fnSetCpin (void)
{
 8003574:	b480      	push	{r7}
 8003576:	af00      	add	r7, sp, #0
  *Cptr |= ulCsetMask;
 8003578:	4b06      	ldr	r3, [pc, #24]	; (8003594 <fnSetCpin+0x20>)
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	6819      	ldr	r1, [r3, #0]
 800357e:	4b06      	ldr	r3, [pc, #24]	; (8003598 <fnSetCpin+0x24>)
 8003580:	681a      	ldr	r2, [r3, #0]
 8003582:	4b04      	ldr	r3, [pc, #16]	; (8003594 <fnSetCpin+0x20>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	430a      	orrs	r2, r1
 8003588:	601a      	str	r2, [r3, #0]
}
 800358a:	bf00      	nop
 800358c:	46bd      	mov	sp, r7
 800358e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003592:	4770      	bx	lr
 8003594:	20004934 	.word	0x20004934
 8003598:	20004920 	.word	0x20004920

0800359c <fnClrCpin>:

void  fnClrCpin (void)
{
 800359c:	b480      	push	{r7}
 800359e:	af00      	add	r7, sp, #0
  *Cptr &= ulCclrMask;
 80035a0:	4b06      	ldr	r3, [pc, #24]	; (80035bc <fnClrCpin+0x20>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	6819      	ldr	r1, [r3, #0]
 80035a6:	4b06      	ldr	r3, [pc, #24]	; (80035c0 <fnClrCpin+0x24>)
 80035a8:	681a      	ldr	r2, [r3, #0]
 80035aa:	4b04      	ldr	r3, [pc, #16]	; (80035bc <fnClrCpin+0x20>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	400a      	ands	r2, r1
 80035b0:	601a      	str	r2, [r3, #0]
}
 80035b2:	bf00      	nop
 80035b4:	46bd      	mov	sp, r7
 80035b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035ba:	4770      	bx	lr
 80035bc:	20004934 	.word	0x20004934
 80035c0:	20004930 	.word	0x20004930

080035c4 <fnSetDpin>:

void  fnSetDpin (void)
{
 80035c4:	b480      	push	{r7}
 80035c6:	af00      	add	r7, sp, #0
  *Dptr |= ulDsetMask;
 80035c8:	4b06      	ldr	r3, [pc, #24]	; (80035e4 <fnSetDpin+0x20>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	6819      	ldr	r1, [r3, #0]
 80035ce:	4b06      	ldr	r3, [pc, #24]	; (80035e8 <fnSetDpin+0x24>)
 80035d0:	681a      	ldr	r2, [r3, #0]
 80035d2:	4b04      	ldr	r3, [pc, #16]	; (80035e4 <fnSetDpin+0x20>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	430a      	orrs	r2, r1
 80035d8:	601a      	str	r2, [r3, #0]
}
 80035da:	bf00      	nop
 80035dc:	46bd      	mov	sp, r7
 80035de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e2:	4770      	bx	lr
 80035e4:	20004928 	.word	0x20004928
 80035e8:	2000491c 	.word	0x2000491c

080035ec <fnClrDpin>:

void  fnClrDpin (void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  *Dptr &= ulDclrMask;
 80035f0:	4b06      	ldr	r3, [pc, #24]	; (800360c <fnClrDpin+0x20>)
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	6819      	ldr	r1, [r3, #0]
 80035f6:	4b06      	ldr	r3, [pc, #24]	; (8003610 <fnClrDpin+0x24>)
 80035f8:	681a      	ldr	r2, [r3, #0]
 80035fa:	4b04      	ldr	r3, [pc, #16]	; (800360c <fnClrDpin+0x20>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	400a      	ands	r2, r1
 8003600:	601a      	str	r2, [r3, #0]
}
 8003602:	bf00      	nop
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr
 800360c:	20004928 	.word	0x20004928
 8003610:	20004924 	.word	0x20004924

08003614 <fnPulseByteOut>:

//--- Output A Pulse Byte
void  fnPulseByteOut (u08 ubPulseByte)
{
 8003614:	b580      	push	{r7, lr}
 8003616:	b084      	sub	sp, #16
 8003618:	af00      	add	r7, sp, #0
 800361a:	4603      	mov	r3, r0
 800361c:	71fb      	strb	r3, [r7, #7]
  u16 uwA;
  u08 ubB = 0x80;                                 //--- Set High Bit Mask
 800361e:	2380      	movs	r3, #128	; 0x80
 8003620:	737b      	strb	r3, [r7, #13]

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  if (!ubSpoFlag) return;                         //--- If Pins NOT Defined Just Exit
 8003622:	4b27      	ldr	r3, [pc, #156]	; (80036c0 <fnPulseByteOut+0xac>)
 8003624:	781b      	ldrb	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	d045      	beq.n	80036b6 <fnPulseByteOut+0xa2>

  //--- Clear Data Pin
  fnClrDpin ();
 800362a:	f7ff ffdf 	bl	80035ec <fnClrDpin>

  //--- Clear Clock Pin
  fnClrCpin ();
 800362e:	f7ff ffb5 	bl	800359c <fnClrCpin>

  for (uwA = 0; uwA < 8; uwA++)
 8003632:	2300      	movs	r3, #0
 8003634:	81fb      	strh	r3, [r7, #14]
 8003636:	e022      	b.n	800367e <fnPulseByteOut+0x6a>
  {
    if (ubPulseByte & ubB)
 8003638:	79fa      	ldrb	r2, [r7, #7]
 800363a:	7b7b      	ldrb	r3, [r7, #13]
 800363c:	4013      	ands	r3, r2
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b00      	cmp	r3, #0
 8003642:	d002      	beq.n	800364a <fnPulseByteOut+0x36>
    {
      fnSetDpin ();
 8003644:	f7ff ffbe 	bl	80035c4 <fnSetDpin>
 8003648:	e001      	b.n	800364e <fnPulseByteOut+0x3a>
    }
    else
    {
      fnClrDpin ();
 800364a:	f7ff ffcf 	bl	80035ec <fnClrDpin>
    }

    nop4;
 800364e:	bf00      	nop
 8003650:	bf00      	nop
 8003652:	bf00      	nop
 8003654:	bf00      	nop

    fnSetCpin ();                                 //--- Set Clock Hi
 8003656:	f7ff ff8d 	bl	8003574 <fnSetCpin>

    nop4;
 800365a:	bf00      	nop
 800365c:	bf00      	nop
 800365e:	bf00      	nop
 8003660:	bf00      	nop

    fnClrCpin ();                                 //--- Set Clock Hi
 8003662:	f7ff ff9b 	bl	800359c <fnClrCpin>

    nop4;
 8003666:	bf00      	nop
 8003668:	bf00      	nop
 800366a:	bf00      	nop
 800366c:	bf00      	nop

    fnClrDpin ();                                 //--- Set Clock Hi
 800366e:	f7ff ffbd 	bl	80035ec <fnClrDpin>

    ubB = ubB >> 1;                               //--- Rotate to Next Bit
 8003672:	7b7b      	ldrb	r3, [r7, #13]
 8003674:	085b      	lsrs	r3, r3, #1
 8003676:	737b      	strb	r3, [r7, #13]
  for (uwA = 0; uwA < 8; uwA++)
 8003678:	89fb      	ldrh	r3, [r7, #14]
 800367a:	3301      	adds	r3, #1
 800367c:	81fb      	strh	r3, [r7, #14]
 800367e:	89fb      	ldrh	r3, [r7, #14]
 8003680:	2b07      	cmp	r3, #7
 8003682:	d9d9      	bls.n	8003638 <fnPulseByteOut+0x24>
  }

  nop24;
 8003684:	bf00      	nop
 8003686:	bf00      	nop
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	bf00      	nop
 800368e:	bf00      	nop
 8003690:	bf00      	nop
 8003692:	bf00      	nop
 8003694:	bf00      	nop
 8003696:	bf00      	nop
 8003698:	bf00      	nop
 800369a:	bf00      	nop
 800369c:	bf00      	nop
 800369e:	bf00      	nop
 80036a0:	bf00      	nop
 80036a2:	bf00      	nop
 80036a4:	bf00      	nop
 80036a6:	bf00      	nop
 80036a8:	bf00      	nop
 80036aa:	bf00      	nop
 80036ac:	bf00      	nop
 80036ae:	bf00      	nop
 80036b0:	bf00      	nop
 80036b2:	bf00      	nop
 80036b4:	e000      	b.n	80036b8 <fnPulseByteOut+0xa4>
  if (!ubSpoFlag) return;                         //--- If Pins NOT Defined Just Exit
 80036b6:	bf00      	nop
}
 80036b8:	3710      	adds	r7, #16
 80036ba:	46bd      	mov	sp, r7
 80036bc:	bd80      	pop	{r7, pc}
 80036be:	bf00      	nop
 80036c0:	20000450 	.word	0x20000450

080036c4 <fnPulseWordOut>:

//--- Output a 16 Bit Word Value
void  fnPulseWordOut (u16 uwPulseWord)
{
 80036c4:	b580      	push	{r7, lr}
 80036c6:	b084      	sub	sp, #16
 80036c8:	af00      	add	r7, sp, #0
 80036ca:	4603      	mov	r3, r0
 80036cc:	80fb      	strh	r3, [r7, #6]
  u16 uwA;
  u16 uwB = 0x8000;
 80036ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80036d2:	81bb      	strh	r3, [r7, #12]

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  if (!ubSpoFlag) return;                         //--- If Pins NOT Defined Just Exit
 80036d4:	4b26      	ldr	r3, [pc, #152]	; (8003770 <fnPulseWordOut+0xac>)
 80036d6:	781b      	ldrb	r3, [r3, #0]
 80036d8:	2b00      	cmp	r3, #0
 80036da:	d045      	beq.n	8003768 <fnPulseWordOut+0xa4>

  //--- Clear Data Pin
  fnClrDpin ();
 80036dc:	f7ff ff86 	bl	80035ec <fnClrDpin>

  //--- Clear Clock Pin
  fnClrCpin ();
 80036e0:	f7ff ff5c 	bl	800359c <fnClrCpin>


  for (uwA = 0; uwA < 16; uwA++)
 80036e4:	2300      	movs	r3, #0
 80036e6:	81fb      	strh	r3, [r7, #14]
 80036e8:	e022      	b.n	8003730 <fnPulseWordOut+0x6c>
  {
    if (uwPulseWord & uwB)
 80036ea:	88fa      	ldrh	r2, [r7, #6]
 80036ec:	89bb      	ldrh	r3, [r7, #12]
 80036ee:	4013      	ands	r3, r2
 80036f0:	b29b      	uxth	r3, r3
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d002      	beq.n	80036fc <fnPulseWordOut+0x38>
    {
      fnSetDpin ();
 80036f6:	f7ff ff65 	bl	80035c4 <fnSetDpin>
 80036fa:	e001      	b.n	8003700 <fnPulseWordOut+0x3c>
    }
    else
    {
      fnClrDpin ();
 80036fc:	f7ff ff76 	bl	80035ec <fnClrDpin>
    }

    nop4;
 8003700:	bf00      	nop
 8003702:	bf00      	nop
 8003704:	bf00      	nop
 8003706:	bf00      	nop

    fnSetCpin ();                                 //--- Set Clock Hi
 8003708:	f7ff ff34 	bl	8003574 <fnSetCpin>

    nop4;
 800370c:	bf00      	nop
 800370e:	bf00      	nop
 8003710:	bf00      	nop
 8003712:	bf00      	nop

    fnClrCpin ();                                 //--- Set Clock Hi
 8003714:	f7ff ff42 	bl	800359c <fnClrCpin>

    nop4;
 8003718:	bf00      	nop
 800371a:	bf00      	nop
 800371c:	bf00      	nop
 800371e:	bf00      	nop

    fnClrDpin ();                                 //--- Set Clock Hi
 8003720:	f7ff ff64 	bl	80035ec <fnClrDpin>

    uwB = uwB >> 1;                               //--- Rotate to Next Bit
 8003724:	89bb      	ldrh	r3, [r7, #12]
 8003726:	085b      	lsrs	r3, r3, #1
 8003728:	81bb      	strh	r3, [r7, #12]
  for (uwA = 0; uwA < 16; uwA++)
 800372a:	89fb      	ldrh	r3, [r7, #14]
 800372c:	3301      	adds	r3, #1
 800372e:	81fb      	strh	r3, [r7, #14]
 8003730:	89fb      	ldrh	r3, [r7, #14]
 8003732:	2b0f      	cmp	r3, #15
 8003734:	d9d9      	bls.n	80036ea <fnPulseWordOut+0x26>
  }

  nop24;
 8003736:	bf00      	nop
 8003738:	bf00      	nop
 800373a:	bf00      	nop
 800373c:	bf00      	nop
 800373e:	bf00      	nop
 8003740:	bf00      	nop
 8003742:	bf00      	nop
 8003744:	bf00      	nop
 8003746:	bf00      	nop
 8003748:	bf00      	nop
 800374a:	bf00      	nop
 800374c:	bf00      	nop
 800374e:	bf00      	nop
 8003750:	bf00      	nop
 8003752:	bf00      	nop
 8003754:	bf00      	nop
 8003756:	bf00      	nop
 8003758:	bf00      	nop
 800375a:	bf00      	nop
 800375c:	bf00      	nop
 800375e:	bf00      	nop
 8003760:	bf00      	nop
 8003762:	bf00      	nop
 8003764:	bf00      	nop
 8003766:	e000      	b.n	800376a <fnPulseWordOut+0xa6>
  if (!ubSpoFlag) return;                         //--- If Pins NOT Defined Just Exit
 8003768:	bf00      	nop
}
 800376a:	3710      	adds	r7, #16
 800376c:	46bd      	mov	sp, r7
 800376e:	bd80      	pop	{r7, pc}
 8003770:	20000450 	.word	0x20000450

08003774 <fnPulseLongOut>:

//--- Output a 32 Bit Long Value
void  fnPulseLongOut (u32 ulPulseLong)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b084      	sub	sp, #16
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
  u16 uwA;
  u32 ulB = 0x80000000;
 800377c:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8003780:	60bb      	str	r3, [r7, #8]

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  if (!ubSpoFlag) return;                         //--- If Pins NOT Defined Just Exit
 8003782:	4b26      	ldr	r3, [pc, #152]	; (800381c <fnPulseLongOut+0xa8>)
 8003784:	781b      	ldrb	r3, [r3, #0]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d044      	beq.n	8003814 <fnPulseLongOut+0xa0>

  //--- Clear Data Pin
  fnClrDpin ();
 800378a:	f7ff ff2f 	bl	80035ec <fnClrDpin>

  //--- Clear Clock Pin
  fnClrCpin ();
 800378e:	f7ff ff05 	bl	800359c <fnClrCpin>


  for (uwA = 0; uwA < 32; uwA++)
 8003792:	2300      	movs	r3, #0
 8003794:	81fb      	strh	r3, [r7, #14]
 8003796:	e021      	b.n	80037dc <fnPulseLongOut+0x68>
  {
    if (ulPulseLong & ulB)
 8003798:	687a      	ldr	r2, [r7, #4]
 800379a:	68bb      	ldr	r3, [r7, #8]
 800379c:	4013      	ands	r3, r2
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d002      	beq.n	80037a8 <fnPulseLongOut+0x34>
    {
      fnSetDpin ();
 80037a2:	f7ff ff0f 	bl	80035c4 <fnSetDpin>
 80037a6:	e001      	b.n	80037ac <fnPulseLongOut+0x38>
    }
    else
    {
      fnClrDpin ();
 80037a8:	f7ff ff20 	bl	80035ec <fnClrDpin>
    }

    nop4;
 80037ac:	bf00      	nop
 80037ae:	bf00      	nop
 80037b0:	bf00      	nop
 80037b2:	bf00      	nop

    fnSetCpin ();                                 //--- Set Clock Hi
 80037b4:	f7ff fede 	bl	8003574 <fnSetCpin>

    nop4;
 80037b8:	bf00      	nop
 80037ba:	bf00      	nop
 80037bc:	bf00      	nop
 80037be:	bf00      	nop

    fnClrCpin ();                                 //--- Set Clock Hi
 80037c0:	f7ff feec 	bl	800359c <fnClrCpin>

    nop4;
 80037c4:	bf00      	nop
 80037c6:	bf00      	nop
 80037c8:	bf00      	nop
 80037ca:	bf00      	nop

    fnClrDpin ();                                 //--- Set Clock Hi
 80037cc:	f7ff ff0e 	bl	80035ec <fnClrDpin>

    ulB = ulB >> 1;                               //--- Rotate to Next Bit
 80037d0:	68bb      	ldr	r3, [r7, #8]
 80037d2:	085b      	lsrs	r3, r3, #1
 80037d4:	60bb      	str	r3, [r7, #8]
  for (uwA = 0; uwA < 32; uwA++)
 80037d6:	89fb      	ldrh	r3, [r7, #14]
 80037d8:	3301      	adds	r3, #1
 80037da:	81fb      	strh	r3, [r7, #14]
 80037dc:	89fb      	ldrh	r3, [r7, #14]
 80037de:	2b1f      	cmp	r3, #31
 80037e0:	d9da      	bls.n	8003798 <fnPulseLongOut+0x24>
  }

  nop24;
 80037e2:	bf00      	nop
 80037e4:	bf00      	nop
 80037e6:	bf00      	nop
 80037e8:	bf00      	nop
 80037ea:	bf00      	nop
 80037ec:	bf00      	nop
 80037ee:	bf00      	nop
 80037f0:	bf00      	nop
 80037f2:	bf00      	nop
 80037f4:	bf00      	nop
 80037f6:	bf00      	nop
 80037f8:	bf00      	nop
 80037fa:	bf00      	nop
 80037fc:	bf00      	nop
 80037fe:	bf00      	nop
 8003800:	bf00      	nop
 8003802:	bf00      	nop
 8003804:	bf00      	nop
 8003806:	bf00      	nop
 8003808:	bf00      	nop
 800380a:	bf00      	nop
 800380c:	bf00      	nop
 800380e:	bf00      	nop
 8003810:	bf00      	nop
 8003812:	e000      	b.n	8003816 <fnPulseLongOut+0xa2>
  if (!ubSpoFlag) return;                         //--- If Pins NOT Defined Just Exit
 8003814:	bf00      	nop
}
 8003816:	3710      	adds	r7, #16
 8003818:	46bd      	mov	sp, r7
 800381a:	bd80      	pop	{r7, pc}
 800381c:	20000450 	.word	0x20000450

08003820 <fnPulseOut>:

//---------------------------------------------------------------------------------------------
//    Output a series of Pulses on PA14
//---------------------------------------------------------------------------------------------
void  fnPulseOut (void)
{
 8003820:	b480      	push	{r7}
 8003822:	af00      	add	r7, sp, #0
  //--- Output a short pulse
  if (ubPulseCntr)
 8003824:	4b11      	ldr	r3, [pc, #68]	; (800386c <fnPulseOut+0x4c>)
 8003826:	781b      	ldrb	r3, [r3, #0]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d019      	beq.n	8003860 <fnPulseOut+0x40>
  {
    SET_PA14;                                 //--- Pulse Out Hi
 800382c:	4b10      	ldr	r3, [pc, #64]	; (8003870 <fnPulseOut+0x50>)
 800382e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8003832:	601a      	str	r2, [r3, #0]
    nop12;                                    //--- Tiny Delay
 8003834:	bf00      	nop
 8003836:	bf00      	nop
 8003838:	bf00      	nop
 800383a:	bf00      	nop
 800383c:	bf00      	nop
 800383e:	bf00      	nop
 8003840:	bf00      	nop
 8003842:	bf00      	nop
 8003844:	bf00      	nop
 8003846:	bf00      	nop
 8003848:	bf00      	nop
 800384a:	bf00      	nop
    CLR_PA14;                                 //--- Pulse Out Lo
 800384c:	4b08      	ldr	r3, [pc, #32]	; (8003870 <fnPulseOut+0x50>)
 800384e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003852:	601a      	str	r2, [r3, #0]
    ubPulseCntr--;                            //--- Down Count # of Pulses
 8003854:	4b05      	ldr	r3, [pc, #20]	; (800386c <fnPulseOut+0x4c>)
 8003856:	781b      	ldrb	r3, [r3, #0]
 8003858:	3b01      	subs	r3, #1
 800385a:	b2da      	uxtb	r2, r3
 800385c:	4b03      	ldr	r3, [pc, #12]	; (800386c <fnPulseOut+0x4c>)
 800385e:	701a      	strb	r2, [r3, #0]
  }
}
 8003860:	bf00      	nop
 8003862:	46bd      	mov	sp, r7
 8003864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003868:	4770      	bx	lr
 800386a:	bf00      	nop
 800386c:	2000492c 	.word	0x2000492c
 8003870:	48000018 	.word	0x48000018

08003874 <main>:
  u08 ubValue;



int main (void)
{
 8003874:	b580      	push	{r7, lr}
 8003876:	af00      	add	r7, sp, #0

  //--- Main Infinite Loop Entry Point Calls Dispatch_Call
  while (1)
  {
    if (uwTaskCntr > 0)
 8003878:	4b03      	ldr	r3, [pc, #12]	; (8003888 <main+0x14>)
 800387a:	881b      	ldrh	r3, [r3, #0]
 800387c:	b29b      	uxth	r3, r3
 800387e:	2b00      	cmp	r3, #0
 8003880:	d0fa      	beq.n	8003878 <main+0x4>
    {
      fnDispatchCall ();
 8003882:	f7fd fef1 	bl	8001668 <fnDispatchCall>
    if (uwTaskCntr > 0)
 8003886:	e7f7      	b.n	8003878 <main+0x4>
 8003888:	20000b22 	.word	0x20000b22
 800388c:	b570      	push	{r4, r5, r6, lr}
 800388e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003892:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003896:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800389a:	bf1d      	ittte	ne
 800389c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80038a0:	ea94 0f0c 	teqne	r4, ip
 80038a4:	ea95 0f0c 	teqne	r5, ip
 80038a8:	f000 f8de 	bleq	8003a68 <main+0x1f4>
 80038ac:	442c      	add	r4, r5
 80038ae:	ea81 0603 	eor.w	r6, r1, r3
 80038b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80038b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80038ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80038be:	bf18      	it	ne
 80038c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80038c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80038c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80038cc:	d038      	beq.n	8003940 <main+0xcc>
 80038ce:	fba0 ce02 	umull	ip, lr, r0, r2
 80038d2:	f04f 0500 	mov.w	r5, #0
 80038d6:	fbe1 e502 	umlal	lr, r5, r1, r2
 80038da:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80038de:	fbe0 e503 	umlal	lr, r5, r0, r3
 80038e2:	f04f 0600 	mov.w	r6, #0
 80038e6:	fbe1 5603 	umlal	r5, r6, r1, r3
 80038ea:	f09c 0f00 	teq	ip, #0
 80038ee:	bf18      	it	ne
 80038f0:	f04e 0e01 	orrne.w	lr, lr, #1
 80038f4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80038f8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80038fc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003900:	d204      	bcs.n	800390c <main+0x98>
 8003902:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003906:	416d      	adcs	r5, r5
 8003908:	eb46 0606 	adc.w	r6, r6, r6
 800390c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003910:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003914:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003918:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 800391c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003920:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003924:	bf88      	it	hi
 8003926:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800392a:	d81e      	bhi.n	800396a <main+0xf6>
 800392c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003930:	bf08      	it	eq
 8003932:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8003936:	f150 0000 	adcs.w	r0, r0, #0
 800393a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800393e:	bd70      	pop	{r4, r5, r6, pc}
 8003940:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003944:	ea46 0101 	orr.w	r1, r6, r1
 8003948:	ea40 0002 	orr.w	r0, r0, r2
 800394c:	ea81 0103 	eor.w	r1, r1, r3
 8003950:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003954:	bfc2      	ittt	gt
 8003956:	ebd4 050c 	rsbsgt	r5, r4, ip
 800395a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800395e:	bd70      	popgt	{r4, r5, r6, pc}
 8003960:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003964:	f04f 0e00 	mov.w	lr, #0
 8003968:	3c01      	subs	r4, #1
 800396a:	f300 80ab 	bgt.w	8003ac4 <main+0x250>
 800396e:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8003972:	bfde      	ittt	le
 8003974:	2000      	movle	r0, #0
 8003976:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800397a:	bd70      	pople	{r4, r5, r6, pc}
 800397c:	f1c4 0400 	rsb	r4, r4, #0
 8003980:	3c20      	subs	r4, #32
 8003982:	da35      	bge.n	80039f0 <main+0x17c>
 8003984:	340c      	adds	r4, #12
 8003986:	dc1b      	bgt.n	80039c0 <main+0x14c>
 8003988:	f104 0414 	add.w	r4, r4, #20
 800398c:	f1c4 0520 	rsb	r5, r4, #32
 8003990:	fa00 f305 	lsl.w	r3, r0, r5
 8003994:	fa20 f004 	lsr.w	r0, r0, r4
 8003998:	fa01 f205 	lsl.w	r2, r1, r5
 800399c:	ea40 0002 	orr.w	r0, r0, r2
 80039a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80039a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80039a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80039ac:	fa21 f604 	lsr.w	r6, r1, r4
 80039b0:	eb42 0106 	adc.w	r1, r2, r6
 80039b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80039b8:	bf08      	it	eq
 80039ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80039be:	bd70      	pop	{r4, r5, r6, pc}
 80039c0:	f1c4 040c 	rsb	r4, r4, #12
 80039c4:	f1c4 0520 	rsb	r5, r4, #32
 80039c8:	fa00 f304 	lsl.w	r3, r0, r4
 80039cc:	fa20 f005 	lsr.w	r0, r0, r5
 80039d0:	fa01 f204 	lsl.w	r2, r1, r4
 80039d4:	ea40 0002 	orr.w	r0, r0, r2
 80039d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80039dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80039e0:	f141 0100 	adc.w	r1, r1, #0
 80039e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80039e8:	bf08      	it	eq
 80039ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80039ee:	bd70      	pop	{r4, r5, r6, pc}
 80039f0:	f1c4 0520 	rsb	r5, r4, #32
 80039f4:	fa00 f205 	lsl.w	r2, r0, r5
 80039f8:	ea4e 0e02 	orr.w	lr, lr, r2
 80039fc:	fa20 f304 	lsr.w	r3, r0, r4
 8003a00:	fa01 f205 	lsl.w	r2, r1, r5
 8003a04:	ea43 0302 	orr.w	r3, r3, r2
 8003a08:	fa21 f004 	lsr.w	r0, r1, r4
 8003a0c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003a10:	fa21 f204 	lsr.w	r2, r1, r4
 8003a14:	ea20 0002 	bic.w	r0, r0, r2
 8003a18:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003a1c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003a20:	bf08      	it	eq
 8003a22:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003a26:	bd70      	pop	{r4, r5, r6, pc}
 8003a28:	f094 0f00 	teq	r4, #0
 8003a2c:	d10f      	bne.n	8003a4e <main+0x1da>
 8003a2e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8003a32:	0040      	lsls	r0, r0, #1
 8003a34:	eb41 0101 	adc.w	r1, r1, r1
 8003a38:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8003a3c:	bf08      	it	eq
 8003a3e:	3c01      	subeq	r4, #1
 8003a40:	d0f7      	beq.n	8003a32 <main+0x1be>
 8003a42:	ea41 0106 	orr.w	r1, r1, r6
 8003a46:	f095 0f00 	teq	r5, #0
 8003a4a:	bf18      	it	ne
 8003a4c:	4770      	bxne	lr
 8003a4e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8003a52:	0052      	lsls	r2, r2, #1
 8003a54:	eb43 0303 	adc.w	r3, r3, r3
 8003a58:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8003a5c:	bf08      	it	eq
 8003a5e:	3d01      	subeq	r5, #1
 8003a60:	d0f7      	beq.n	8003a52 <main+0x1de>
 8003a62:	ea43 0306 	orr.w	r3, r3, r6
 8003a66:	4770      	bx	lr
 8003a68:	ea94 0f0c 	teq	r4, ip
 8003a6c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8003a70:	bf18      	it	ne
 8003a72:	ea95 0f0c 	teqne	r5, ip
 8003a76:	d00c      	beq.n	8003a92 <main+0x21e>
 8003a78:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003a7c:	bf18      	it	ne
 8003a7e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003a82:	d1d1      	bne.n	8003a28 <main+0x1b4>
 8003a84:	ea81 0103 	eor.w	r1, r1, r3
 8003a88:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003a8c:	f04f 0000 	mov.w	r0, #0
 8003a90:	bd70      	pop	{r4, r5, r6, pc}
 8003a92:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8003a96:	bf06      	itte	eq
 8003a98:	4610      	moveq	r0, r2
 8003a9a:	4619      	moveq	r1, r3
 8003a9c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8003aa0:	d019      	beq.n	8003ad6 <main+0x262>
 8003aa2:	ea94 0f0c 	teq	r4, ip
 8003aa6:	d102      	bne.n	8003aae <main+0x23a>
 8003aa8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8003aac:	d113      	bne.n	8003ad6 <main+0x262>
 8003aae:	ea95 0f0c 	teq	r5, ip
 8003ab2:	d105      	bne.n	8003ac0 <main+0x24c>
 8003ab4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8003ab8:	bf1c      	itt	ne
 8003aba:	4610      	movne	r0, r2
 8003abc:	4619      	movne	r1, r3
 8003abe:	d10a      	bne.n	8003ad6 <main+0x262>
 8003ac0:	ea81 0103 	eor.w	r1, r1, r3
 8003ac4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003ac8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003acc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003ad0:	f04f 0000 	mov.w	r0, #0
 8003ad4:	bd70      	pop	{r4, r5, r6, pc}
 8003ad6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8003ada:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8003ade:	bd70      	pop	{r4, r5, r6, pc}

08003ae0 <__aeabi_drsub>:
 8003ae0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8003ae4:	e002      	b.n	8003aec <__adddf3>
 8003ae6:	bf00      	nop

08003ae8 <__aeabi_dsub>:
 8003ae8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08003aec <__adddf3>:
 8003aec:	b530      	push	{r4, r5, lr}
 8003aee:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8003af2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8003af6:	ea94 0f05 	teq	r4, r5
 8003afa:	bf08      	it	eq
 8003afc:	ea90 0f02 	teqeq	r0, r2
 8003b00:	bf1f      	itttt	ne
 8003b02:	ea54 0c00 	orrsne.w	ip, r4, r0
 8003b06:	ea55 0c02 	orrsne.w	ip, r5, r2
 8003b0a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8003b0e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003b12:	f000 80e2 	beq.w	8003cda <__adddf3+0x1ee>
 8003b16:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8003b1a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8003b1e:	bfb8      	it	lt
 8003b20:	426d      	neglt	r5, r5
 8003b22:	dd0c      	ble.n	8003b3e <__adddf3+0x52>
 8003b24:	442c      	add	r4, r5
 8003b26:	ea80 0202 	eor.w	r2, r0, r2
 8003b2a:	ea81 0303 	eor.w	r3, r1, r3
 8003b2e:	ea82 0000 	eor.w	r0, r2, r0
 8003b32:	ea83 0101 	eor.w	r1, r3, r1
 8003b36:	ea80 0202 	eor.w	r2, r0, r2
 8003b3a:	ea81 0303 	eor.w	r3, r1, r3
 8003b3e:	2d36      	cmp	r5, #54	; 0x36
 8003b40:	bf88      	it	hi
 8003b42:	bd30      	pophi	{r4, r5, pc}
 8003b44:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8003b48:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8003b4c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8003b50:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8003b54:	d002      	beq.n	8003b5c <__adddf3+0x70>
 8003b56:	4240      	negs	r0, r0
 8003b58:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003b5c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8003b60:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8003b64:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8003b68:	d002      	beq.n	8003b70 <__adddf3+0x84>
 8003b6a:	4252      	negs	r2, r2
 8003b6c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8003b70:	ea94 0f05 	teq	r4, r5
 8003b74:	f000 80a7 	beq.w	8003cc6 <__adddf3+0x1da>
 8003b78:	f1a4 0401 	sub.w	r4, r4, #1
 8003b7c:	f1d5 0e20 	rsbs	lr, r5, #32
 8003b80:	db0d      	blt.n	8003b9e <__adddf3+0xb2>
 8003b82:	fa02 fc0e 	lsl.w	ip, r2, lr
 8003b86:	fa22 f205 	lsr.w	r2, r2, r5
 8003b8a:	1880      	adds	r0, r0, r2
 8003b8c:	f141 0100 	adc.w	r1, r1, #0
 8003b90:	fa03 f20e 	lsl.w	r2, r3, lr
 8003b94:	1880      	adds	r0, r0, r2
 8003b96:	fa43 f305 	asr.w	r3, r3, r5
 8003b9a:	4159      	adcs	r1, r3
 8003b9c:	e00e      	b.n	8003bbc <__adddf3+0xd0>
 8003b9e:	f1a5 0520 	sub.w	r5, r5, #32
 8003ba2:	f10e 0e20 	add.w	lr, lr, #32
 8003ba6:	2a01      	cmp	r2, #1
 8003ba8:	fa03 fc0e 	lsl.w	ip, r3, lr
 8003bac:	bf28      	it	cs
 8003bae:	f04c 0c02 	orrcs.w	ip, ip, #2
 8003bb2:	fa43 f305 	asr.w	r3, r3, r5
 8003bb6:	18c0      	adds	r0, r0, r3
 8003bb8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8003bbc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003bc0:	d507      	bpl.n	8003bd2 <__adddf3+0xe6>
 8003bc2:	f04f 0e00 	mov.w	lr, #0
 8003bc6:	f1dc 0c00 	rsbs	ip, ip, #0
 8003bca:	eb7e 0000 	sbcs.w	r0, lr, r0
 8003bce:	eb6e 0101 	sbc.w	r1, lr, r1
 8003bd2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003bd6:	d31b      	bcc.n	8003c10 <__adddf3+0x124>
 8003bd8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8003bdc:	d30c      	bcc.n	8003bf8 <__adddf3+0x10c>
 8003bde:	0849      	lsrs	r1, r1, #1
 8003be0:	ea5f 0030 	movs.w	r0, r0, rrx
 8003be4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8003be8:	f104 0401 	add.w	r4, r4, #1
 8003bec:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8003bf0:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8003bf4:	f080 809a 	bcs.w	8003d2c <__adddf3+0x240>
 8003bf8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8003bfc:	bf08      	it	eq
 8003bfe:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8003c02:	f150 0000 	adcs.w	r0, r0, #0
 8003c06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003c0a:	ea41 0105 	orr.w	r1, r1, r5
 8003c0e:	bd30      	pop	{r4, r5, pc}
 8003c10:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8003c14:	4140      	adcs	r0, r0
 8003c16:	eb41 0101 	adc.w	r1, r1, r1
 8003c1a:	3c01      	subs	r4, #1
 8003c1c:	bf28      	it	cs
 8003c1e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8003c22:	d2e9      	bcs.n	8003bf8 <__adddf3+0x10c>
 8003c24:	f091 0f00 	teq	r1, #0
 8003c28:	bf04      	itt	eq
 8003c2a:	4601      	moveq	r1, r0
 8003c2c:	2000      	moveq	r0, #0
 8003c2e:	fab1 f381 	clz	r3, r1
 8003c32:	bf08      	it	eq
 8003c34:	3320      	addeq	r3, #32
 8003c36:	f1a3 030b 	sub.w	r3, r3, #11
 8003c3a:	f1b3 0220 	subs.w	r2, r3, #32
 8003c3e:	da0c      	bge.n	8003c5a <__adddf3+0x16e>
 8003c40:	320c      	adds	r2, #12
 8003c42:	dd08      	ble.n	8003c56 <__adddf3+0x16a>
 8003c44:	f102 0c14 	add.w	ip, r2, #20
 8003c48:	f1c2 020c 	rsb	r2, r2, #12
 8003c4c:	fa01 f00c 	lsl.w	r0, r1, ip
 8003c50:	fa21 f102 	lsr.w	r1, r1, r2
 8003c54:	e00c      	b.n	8003c70 <__adddf3+0x184>
 8003c56:	f102 0214 	add.w	r2, r2, #20
 8003c5a:	bfd8      	it	le
 8003c5c:	f1c2 0c20 	rsble	ip, r2, #32
 8003c60:	fa01 f102 	lsl.w	r1, r1, r2
 8003c64:	fa20 fc0c 	lsr.w	ip, r0, ip
 8003c68:	bfdc      	itt	le
 8003c6a:	ea41 010c 	orrle.w	r1, r1, ip
 8003c6e:	4090      	lslle	r0, r2
 8003c70:	1ae4      	subs	r4, r4, r3
 8003c72:	bfa2      	ittt	ge
 8003c74:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8003c78:	4329      	orrge	r1, r5
 8003c7a:	bd30      	popge	{r4, r5, pc}
 8003c7c:	ea6f 0404 	mvn.w	r4, r4
 8003c80:	3c1f      	subs	r4, #31
 8003c82:	da1c      	bge.n	8003cbe <__adddf3+0x1d2>
 8003c84:	340c      	adds	r4, #12
 8003c86:	dc0e      	bgt.n	8003ca6 <__adddf3+0x1ba>
 8003c88:	f104 0414 	add.w	r4, r4, #20
 8003c8c:	f1c4 0220 	rsb	r2, r4, #32
 8003c90:	fa20 f004 	lsr.w	r0, r0, r4
 8003c94:	fa01 f302 	lsl.w	r3, r1, r2
 8003c98:	ea40 0003 	orr.w	r0, r0, r3
 8003c9c:	fa21 f304 	lsr.w	r3, r1, r4
 8003ca0:	ea45 0103 	orr.w	r1, r5, r3
 8003ca4:	bd30      	pop	{r4, r5, pc}
 8003ca6:	f1c4 040c 	rsb	r4, r4, #12
 8003caa:	f1c4 0220 	rsb	r2, r4, #32
 8003cae:	fa20 f002 	lsr.w	r0, r0, r2
 8003cb2:	fa01 f304 	lsl.w	r3, r1, r4
 8003cb6:	ea40 0003 	orr.w	r0, r0, r3
 8003cba:	4629      	mov	r1, r5
 8003cbc:	bd30      	pop	{r4, r5, pc}
 8003cbe:	fa21 f004 	lsr.w	r0, r1, r4
 8003cc2:	4629      	mov	r1, r5
 8003cc4:	bd30      	pop	{r4, r5, pc}
 8003cc6:	f094 0f00 	teq	r4, #0
 8003cca:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8003cce:	bf06      	itte	eq
 8003cd0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8003cd4:	3401      	addeq	r4, #1
 8003cd6:	3d01      	subne	r5, #1
 8003cd8:	e74e      	b.n	8003b78 <__adddf3+0x8c>
 8003cda:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003cde:	bf18      	it	ne
 8003ce0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8003ce4:	d029      	beq.n	8003d3a <__adddf3+0x24e>
 8003ce6:	ea94 0f05 	teq	r4, r5
 8003cea:	bf08      	it	eq
 8003cec:	ea90 0f02 	teqeq	r0, r2
 8003cf0:	d005      	beq.n	8003cfe <__adddf3+0x212>
 8003cf2:	ea54 0c00 	orrs.w	ip, r4, r0
 8003cf6:	bf04      	itt	eq
 8003cf8:	4619      	moveq	r1, r3
 8003cfa:	4610      	moveq	r0, r2
 8003cfc:	bd30      	pop	{r4, r5, pc}
 8003cfe:	ea91 0f03 	teq	r1, r3
 8003d02:	bf1e      	ittt	ne
 8003d04:	2100      	movne	r1, #0
 8003d06:	2000      	movne	r0, #0
 8003d08:	bd30      	popne	{r4, r5, pc}
 8003d0a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8003d0e:	d105      	bne.n	8003d1c <__adddf3+0x230>
 8003d10:	0040      	lsls	r0, r0, #1
 8003d12:	4149      	adcs	r1, r1
 8003d14:	bf28      	it	cs
 8003d16:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8003d1a:	bd30      	pop	{r4, r5, pc}
 8003d1c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8003d20:	bf3c      	itt	cc
 8003d22:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8003d26:	bd30      	popcc	{r4, r5, pc}
 8003d28:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003d2c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8003d30:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8003d34:	f04f 0000 	mov.w	r0, #0
 8003d38:	bd30      	pop	{r4, r5, pc}
 8003d3a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8003d3e:	bf1a      	itte	ne
 8003d40:	4619      	movne	r1, r3
 8003d42:	4610      	movne	r0, r2
 8003d44:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8003d48:	bf1c      	itt	ne
 8003d4a:	460b      	movne	r3, r1
 8003d4c:	4602      	movne	r2, r0
 8003d4e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8003d52:	bf06      	itte	eq
 8003d54:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8003d58:	ea91 0f03 	teqeq	r1, r3
 8003d5c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8003d60:	bd30      	pop	{r4, r5, pc}
 8003d62:	bf00      	nop

08003d64 <__aeabi_ui2d>:
 8003d64:	f090 0f00 	teq	r0, #0
 8003d68:	bf04      	itt	eq
 8003d6a:	2100      	moveq	r1, #0
 8003d6c:	4770      	bxeq	lr
 8003d6e:	b530      	push	{r4, r5, lr}
 8003d70:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003d74:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003d78:	f04f 0500 	mov.w	r5, #0
 8003d7c:	f04f 0100 	mov.w	r1, #0
 8003d80:	e750      	b.n	8003c24 <__adddf3+0x138>
 8003d82:	bf00      	nop

08003d84 <__aeabi_i2d>:
 8003d84:	f090 0f00 	teq	r0, #0
 8003d88:	bf04      	itt	eq
 8003d8a:	2100      	moveq	r1, #0
 8003d8c:	4770      	bxeq	lr
 8003d8e:	b530      	push	{r4, r5, lr}
 8003d90:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003d94:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003d98:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8003d9c:	bf48      	it	mi
 8003d9e:	4240      	negmi	r0, r0
 8003da0:	f04f 0100 	mov.w	r1, #0
 8003da4:	e73e      	b.n	8003c24 <__adddf3+0x138>
 8003da6:	bf00      	nop

08003da8 <__aeabi_f2d>:
 8003da8:	0042      	lsls	r2, r0, #1
 8003daa:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8003dae:	ea4f 0131 	mov.w	r1, r1, rrx
 8003db2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8003db6:	bf1f      	itttt	ne
 8003db8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8003dbc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8003dc0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8003dc4:	4770      	bxne	lr
 8003dc6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8003dca:	bf08      	it	eq
 8003dcc:	4770      	bxeq	lr
 8003dce:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8003dd2:	bf04      	itt	eq
 8003dd4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8003dd8:	4770      	bxeq	lr
 8003dda:	b530      	push	{r4, r5, lr}
 8003ddc:	f44f 7460 	mov.w	r4, #896	; 0x380
 8003de0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8003de4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003de8:	e71c      	b.n	8003c24 <__adddf3+0x138>
 8003dea:	bf00      	nop

08003dec <__aeabi_ul2d>:
 8003dec:	ea50 0201 	orrs.w	r2, r0, r1
 8003df0:	bf08      	it	eq
 8003df2:	4770      	bxeq	lr
 8003df4:	b530      	push	{r4, r5, lr}
 8003df6:	f04f 0500 	mov.w	r5, #0
 8003dfa:	e00a      	b.n	8003e12 <__aeabi_l2d+0x16>

08003dfc <__aeabi_l2d>:
 8003dfc:	ea50 0201 	orrs.w	r2, r0, r1
 8003e00:	bf08      	it	eq
 8003e02:	4770      	bxeq	lr
 8003e04:	b530      	push	{r4, r5, lr}
 8003e06:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8003e0a:	d502      	bpl.n	8003e12 <__aeabi_l2d+0x16>
 8003e0c:	4240      	negs	r0, r0
 8003e0e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8003e12:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8003e16:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8003e1a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8003e1e:	f43f aed8 	beq.w	8003bd2 <__adddf3+0xe6>
 8003e22:	f04f 0203 	mov.w	r2, #3
 8003e26:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003e2a:	bf18      	it	ne
 8003e2c:	3203      	addne	r2, #3
 8003e2e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8003e32:	bf18      	it	ne
 8003e34:	3203      	addne	r2, #3
 8003e36:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8003e3a:	f1c2 0320 	rsb	r3, r2, #32
 8003e3e:	fa00 fc03 	lsl.w	ip, r0, r3
 8003e42:	fa20 f002 	lsr.w	r0, r0, r2
 8003e46:	fa01 fe03 	lsl.w	lr, r1, r3
 8003e4a:	ea40 000e 	orr.w	r0, r0, lr
 8003e4e:	fa21 f102 	lsr.w	r1, r1, r2
 8003e52:	4414      	add	r4, r2
 8003e54:	e6bd      	b.n	8003bd2 <__adddf3+0xe6>
 8003e56:	bf00      	nop

08003e58 <__aeabi_dmul>:
 8003e58:	b570      	push	{r4, r5, r6, lr}
 8003e5a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8003e5e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8003e62:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8003e66:	bf1d      	ittte	ne
 8003e68:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8003e6c:	ea94 0f0c 	teqne	r4, ip
 8003e70:	ea95 0f0c 	teqne	r5, ip
 8003e74:	f000 f8de 	bleq	8004034 <__aeabi_dmul+0x1dc>
 8003e78:	442c      	add	r4, r5
 8003e7a:	ea81 0603 	eor.w	r6, r1, r3
 8003e7e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8003e82:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8003e86:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8003e8a:	bf18      	it	ne
 8003e8c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8003e90:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003e94:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003e98:	d038      	beq.n	8003f0c <__aeabi_dmul+0xb4>
 8003e9a:	fba0 ce02 	umull	ip, lr, r0, r2
 8003e9e:	f04f 0500 	mov.w	r5, #0
 8003ea2:	fbe1 e502 	umlal	lr, r5, r1, r2
 8003ea6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8003eaa:	fbe0 e503 	umlal	lr, r5, r0, r3
 8003eae:	f04f 0600 	mov.w	r6, #0
 8003eb2:	fbe1 5603 	umlal	r5, r6, r1, r3
 8003eb6:	f09c 0f00 	teq	ip, #0
 8003eba:	bf18      	it	ne
 8003ebc:	f04e 0e01 	orrne.w	lr, lr, #1
 8003ec0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8003ec4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8003ec8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8003ecc:	d204      	bcs.n	8003ed8 <__aeabi_dmul+0x80>
 8003ece:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8003ed2:	416d      	adcs	r5, r5
 8003ed4:	eb46 0606 	adc.w	r6, r6, r6
 8003ed8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8003edc:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8003ee0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8003ee4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8003ee8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8003eec:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8003ef0:	bf88      	it	hi
 8003ef2:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8003ef6:	d81e      	bhi.n	8003f36 <__aeabi_dmul+0xde>
 8003ef8:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8003efc:	bf08      	it	eq
 8003efe:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8003f02:	f150 0000 	adcs.w	r0, r0, #0
 8003f06:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8003f0a:	bd70      	pop	{r4, r5, r6, pc}
 8003f0c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8003f10:	ea46 0101 	orr.w	r1, r6, r1
 8003f14:	ea40 0002 	orr.w	r0, r0, r2
 8003f18:	ea81 0103 	eor.w	r1, r1, r3
 8003f1c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8003f20:	bfc2      	ittt	gt
 8003f22:	ebd4 050c 	rsbsgt	r5, r4, ip
 8003f26:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8003f2a:	bd70      	popgt	{r4, r5, r6, pc}
 8003f2c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8003f30:	f04f 0e00 	mov.w	lr, #0
 8003f34:	3c01      	subs	r4, #1
 8003f36:	f300 80ab 	bgt.w	8004090 <__aeabi_dmul+0x238>
 8003f3a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8003f3e:	bfde      	ittt	le
 8003f40:	2000      	movle	r0, #0
 8003f42:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8003f46:	bd70      	pople	{r4, r5, r6, pc}
 8003f48:	f1c4 0400 	rsb	r4, r4, #0
 8003f4c:	3c20      	subs	r4, #32
 8003f4e:	da35      	bge.n	8003fbc <__aeabi_dmul+0x164>
 8003f50:	340c      	adds	r4, #12
 8003f52:	dc1b      	bgt.n	8003f8c <__aeabi_dmul+0x134>
 8003f54:	f104 0414 	add.w	r4, r4, #20
 8003f58:	f1c4 0520 	rsb	r5, r4, #32
 8003f5c:	fa00 f305 	lsl.w	r3, r0, r5
 8003f60:	fa20 f004 	lsr.w	r0, r0, r4
 8003f64:	fa01 f205 	lsl.w	r2, r1, r5
 8003f68:	ea40 0002 	orr.w	r0, r0, r2
 8003f6c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8003f70:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8003f74:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003f78:	fa21 f604 	lsr.w	r6, r1, r4
 8003f7c:	eb42 0106 	adc.w	r1, r2, r6
 8003f80:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003f84:	bf08      	it	eq
 8003f86:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003f8a:	bd70      	pop	{r4, r5, r6, pc}
 8003f8c:	f1c4 040c 	rsb	r4, r4, #12
 8003f90:	f1c4 0520 	rsb	r5, r4, #32
 8003f94:	fa00 f304 	lsl.w	r3, r0, r4
 8003f98:	fa20 f005 	lsr.w	r0, r0, r5
 8003f9c:	fa01 f204 	lsl.w	r2, r1, r4
 8003fa0:	ea40 0002 	orr.w	r0, r0, r2
 8003fa4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003fa8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8003fac:	f141 0100 	adc.w	r1, r1, #0
 8003fb0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003fb4:	bf08      	it	eq
 8003fb6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003fba:	bd70      	pop	{r4, r5, r6, pc}
 8003fbc:	f1c4 0520 	rsb	r5, r4, #32
 8003fc0:	fa00 f205 	lsl.w	r2, r0, r5
 8003fc4:	ea4e 0e02 	orr.w	lr, lr, r2
 8003fc8:	fa20 f304 	lsr.w	r3, r0, r4
 8003fcc:	fa01 f205 	lsl.w	r2, r1, r5
 8003fd0:	ea43 0302 	orr.w	r3, r3, r2
 8003fd4:	fa21 f004 	lsr.w	r0, r1, r4
 8003fd8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8003fdc:	fa21 f204 	lsr.w	r2, r1, r4
 8003fe0:	ea20 0002 	bic.w	r0, r0, r2
 8003fe4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8003fe8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8003fec:	bf08      	it	eq
 8003fee:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8003ff2:	bd70      	pop	{r4, r5, r6, pc}
 8003ff4:	f094 0f00 	teq	r4, #0
 8003ff8:	d10f      	bne.n	800401a <__aeabi_dmul+0x1c2>
 8003ffa:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8003ffe:	0040      	lsls	r0, r0, #1
 8004000:	eb41 0101 	adc.w	r1, r1, r1
 8004004:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8004008:	bf08      	it	eq
 800400a:	3c01      	subeq	r4, #1
 800400c:	d0f7      	beq.n	8003ffe <__aeabi_dmul+0x1a6>
 800400e:	ea41 0106 	orr.w	r1, r1, r6
 8004012:	f095 0f00 	teq	r5, #0
 8004016:	bf18      	it	ne
 8004018:	4770      	bxne	lr
 800401a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800401e:	0052      	lsls	r2, r2, #1
 8004020:	eb43 0303 	adc.w	r3, r3, r3
 8004024:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8004028:	bf08      	it	eq
 800402a:	3d01      	subeq	r5, #1
 800402c:	d0f7      	beq.n	800401e <__aeabi_dmul+0x1c6>
 800402e:	ea43 0306 	orr.w	r3, r3, r6
 8004032:	4770      	bx	lr
 8004034:	ea94 0f0c 	teq	r4, ip
 8004038:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800403c:	bf18      	it	ne
 800403e:	ea95 0f0c 	teqne	r5, ip
 8004042:	d00c      	beq.n	800405e <__aeabi_dmul+0x206>
 8004044:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004048:	bf18      	it	ne
 800404a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800404e:	d1d1      	bne.n	8003ff4 <__aeabi_dmul+0x19c>
 8004050:	ea81 0103 	eor.w	r1, r1, r3
 8004054:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004058:	f04f 0000 	mov.w	r0, #0
 800405c:	bd70      	pop	{r4, r5, r6, pc}
 800405e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004062:	bf06      	itte	eq
 8004064:	4610      	moveq	r0, r2
 8004066:	4619      	moveq	r1, r3
 8004068:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800406c:	d019      	beq.n	80040a2 <__aeabi_dmul+0x24a>
 800406e:	ea94 0f0c 	teq	r4, ip
 8004072:	d102      	bne.n	800407a <__aeabi_dmul+0x222>
 8004074:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8004078:	d113      	bne.n	80040a2 <__aeabi_dmul+0x24a>
 800407a:	ea95 0f0c 	teq	r5, ip
 800407e:	d105      	bne.n	800408c <__aeabi_dmul+0x234>
 8004080:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8004084:	bf1c      	itt	ne
 8004086:	4610      	movne	r0, r2
 8004088:	4619      	movne	r1, r3
 800408a:	d10a      	bne.n	80040a2 <__aeabi_dmul+0x24a>
 800408c:	ea81 0103 	eor.w	r1, r1, r3
 8004090:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8004094:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8004098:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800409c:	f04f 0000 	mov.w	r0, #0
 80040a0:	bd70      	pop	{r4, r5, r6, pc}
 80040a2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80040a6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80040aa:	bd70      	pop	{r4, r5, r6, pc}

080040ac <__aeabi_ddiv>:
 80040ac:	b570      	push	{r4, r5, r6, lr}
 80040ae:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80040b2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80040b6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80040ba:	bf1d      	ittte	ne
 80040bc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80040c0:	ea94 0f0c 	teqne	r4, ip
 80040c4:	ea95 0f0c 	teqne	r5, ip
 80040c8:	f000 f8a7 	bleq	800421a <__aeabi_ddiv+0x16e>
 80040cc:	eba4 0405 	sub.w	r4, r4, r5
 80040d0:	ea81 0e03 	eor.w	lr, r1, r3
 80040d4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80040d8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80040dc:	f000 8088 	beq.w	80041f0 <__aeabi_ddiv+0x144>
 80040e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80040e4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80040e8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80040ec:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80040f0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80040f4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80040f8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80040fc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8004100:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8004104:	429d      	cmp	r5, r3
 8004106:	bf08      	it	eq
 8004108:	4296      	cmpeq	r6, r2
 800410a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800410e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8004112:	d202      	bcs.n	800411a <__aeabi_ddiv+0x6e>
 8004114:	085b      	lsrs	r3, r3, #1
 8004116:	ea4f 0232 	mov.w	r2, r2, rrx
 800411a:	1ab6      	subs	r6, r6, r2
 800411c:	eb65 0503 	sbc.w	r5, r5, r3
 8004120:	085b      	lsrs	r3, r3, #1
 8004122:	ea4f 0232 	mov.w	r2, r2, rrx
 8004126:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800412a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800412e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004132:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004136:	bf22      	ittt	cs
 8004138:	1ab6      	subcs	r6, r6, r2
 800413a:	4675      	movcs	r5, lr
 800413c:	ea40 000c 	orrcs.w	r0, r0, ip
 8004140:	085b      	lsrs	r3, r3, #1
 8004142:	ea4f 0232 	mov.w	r2, r2, rrx
 8004146:	ebb6 0e02 	subs.w	lr, r6, r2
 800414a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800414e:	bf22      	ittt	cs
 8004150:	1ab6      	subcs	r6, r6, r2
 8004152:	4675      	movcs	r5, lr
 8004154:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8004158:	085b      	lsrs	r3, r3, #1
 800415a:	ea4f 0232 	mov.w	r2, r2, rrx
 800415e:	ebb6 0e02 	subs.w	lr, r6, r2
 8004162:	eb75 0e03 	sbcs.w	lr, r5, r3
 8004166:	bf22      	ittt	cs
 8004168:	1ab6      	subcs	r6, r6, r2
 800416a:	4675      	movcs	r5, lr
 800416c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8004170:	085b      	lsrs	r3, r3, #1
 8004172:	ea4f 0232 	mov.w	r2, r2, rrx
 8004176:	ebb6 0e02 	subs.w	lr, r6, r2
 800417a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800417e:	bf22      	ittt	cs
 8004180:	1ab6      	subcs	r6, r6, r2
 8004182:	4675      	movcs	r5, lr
 8004184:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8004188:	ea55 0e06 	orrs.w	lr, r5, r6
 800418c:	d018      	beq.n	80041c0 <__aeabi_ddiv+0x114>
 800418e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8004192:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8004196:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800419a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800419e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80041a2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80041a6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80041aa:	d1c0      	bne.n	800412e <__aeabi_ddiv+0x82>
 80041ac:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80041b0:	d10b      	bne.n	80041ca <__aeabi_ddiv+0x11e>
 80041b2:	ea41 0100 	orr.w	r1, r1, r0
 80041b6:	f04f 0000 	mov.w	r0, #0
 80041ba:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80041be:	e7b6      	b.n	800412e <__aeabi_ddiv+0x82>
 80041c0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80041c4:	bf04      	itt	eq
 80041c6:	4301      	orreq	r1, r0
 80041c8:	2000      	moveq	r0, #0
 80041ca:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80041ce:	bf88      	it	hi
 80041d0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80041d4:	f63f aeaf 	bhi.w	8003f36 <__aeabi_dmul+0xde>
 80041d8:	ebb5 0c03 	subs.w	ip, r5, r3
 80041dc:	bf04      	itt	eq
 80041de:	ebb6 0c02 	subseq.w	ip, r6, r2
 80041e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80041e6:	f150 0000 	adcs.w	r0, r0, #0
 80041ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80041ee:	bd70      	pop	{r4, r5, r6, pc}
 80041f0:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80041f4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80041f8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80041fc:	bfc2      	ittt	gt
 80041fe:	ebd4 050c 	rsbsgt	r5, r4, ip
 8004202:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8004206:	bd70      	popgt	{r4, r5, r6, pc}
 8004208:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800420c:	f04f 0e00 	mov.w	lr, #0
 8004210:	3c01      	subs	r4, #1
 8004212:	e690      	b.n	8003f36 <__aeabi_dmul+0xde>
 8004214:	ea45 0e06 	orr.w	lr, r5, r6
 8004218:	e68d      	b.n	8003f36 <__aeabi_dmul+0xde>
 800421a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800421e:	ea94 0f0c 	teq	r4, ip
 8004222:	bf08      	it	eq
 8004224:	ea95 0f0c 	teqeq	r5, ip
 8004228:	f43f af3b 	beq.w	80040a2 <__aeabi_dmul+0x24a>
 800422c:	ea94 0f0c 	teq	r4, ip
 8004230:	d10a      	bne.n	8004248 <__aeabi_ddiv+0x19c>
 8004232:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8004236:	f47f af34 	bne.w	80040a2 <__aeabi_dmul+0x24a>
 800423a:	ea95 0f0c 	teq	r5, ip
 800423e:	f47f af25 	bne.w	800408c <__aeabi_dmul+0x234>
 8004242:	4610      	mov	r0, r2
 8004244:	4619      	mov	r1, r3
 8004246:	e72c      	b.n	80040a2 <__aeabi_dmul+0x24a>
 8004248:	ea95 0f0c 	teq	r5, ip
 800424c:	d106      	bne.n	800425c <__aeabi_ddiv+0x1b0>
 800424e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8004252:	f43f aefd 	beq.w	8004050 <__aeabi_dmul+0x1f8>
 8004256:	4610      	mov	r0, r2
 8004258:	4619      	mov	r1, r3
 800425a:	e722      	b.n	80040a2 <__aeabi_dmul+0x24a>
 800425c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8004260:	bf18      	it	ne
 8004262:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8004266:	f47f aec5 	bne.w	8003ff4 <__aeabi_dmul+0x19c>
 800426a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800426e:	f47f af0d 	bne.w	800408c <__aeabi_dmul+0x234>
 8004272:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8004276:	f47f aeeb 	bne.w	8004050 <__aeabi_dmul+0x1f8>
 800427a:	e712      	b.n	80040a2 <__aeabi_dmul+0x24a>

0800427c <__gedf2>:
 800427c:	f04f 3cff 	mov.w	ip, #4294967295
 8004280:	e006      	b.n	8004290 <__cmpdf2+0x4>
 8004282:	bf00      	nop

08004284 <__ledf2>:
 8004284:	f04f 0c01 	mov.w	ip, #1
 8004288:	e002      	b.n	8004290 <__cmpdf2+0x4>
 800428a:	bf00      	nop

0800428c <__cmpdf2>:
 800428c:	f04f 0c01 	mov.w	ip, #1
 8004290:	f84d cd04 	str.w	ip, [sp, #-4]!
 8004294:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004298:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800429c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80042a0:	bf18      	it	ne
 80042a2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80042a6:	d01b      	beq.n	80042e0 <__cmpdf2+0x54>
 80042a8:	b001      	add	sp, #4
 80042aa:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80042ae:	bf0c      	ite	eq
 80042b0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80042b4:	ea91 0f03 	teqne	r1, r3
 80042b8:	bf02      	ittt	eq
 80042ba:	ea90 0f02 	teqeq	r0, r2
 80042be:	2000      	moveq	r0, #0
 80042c0:	4770      	bxeq	lr
 80042c2:	f110 0f00 	cmn.w	r0, #0
 80042c6:	ea91 0f03 	teq	r1, r3
 80042ca:	bf58      	it	pl
 80042cc:	4299      	cmppl	r1, r3
 80042ce:	bf08      	it	eq
 80042d0:	4290      	cmpeq	r0, r2
 80042d2:	bf2c      	ite	cs
 80042d4:	17d8      	asrcs	r0, r3, #31
 80042d6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80042da:	f040 0001 	orr.w	r0, r0, #1
 80042de:	4770      	bx	lr
 80042e0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80042e4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80042e8:	d102      	bne.n	80042f0 <__cmpdf2+0x64>
 80042ea:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80042ee:	d107      	bne.n	8004300 <__cmpdf2+0x74>
 80042f0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80042f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80042f8:	d1d6      	bne.n	80042a8 <__cmpdf2+0x1c>
 80042fa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80042fe:	d0d3      	beq.n	80042a8 <__cmpdf2+0x1c>
 8004300:	f85d 0b04 	ldr.w	r0, [sp], #4
 8004304:	4770      	bx	lr
 8004306:	bf00      	nop

08004308 <__aeabi_cdrcmple>:
 8004308:	4684      	mov	ip, r0
 800430a:	4610      	mov	r0, r2
 800430c:	4662      	mov	r2, ip
 800430e:	468c      	mov	ip, r1
 8004310:	4619      	mov	r1, r3
 8004312:	4663      	mov	r3, ip
 8004314:	e000      	b.n	8004318 <__aeabi_cdcmpeq>
 8004316:	bf00      	nop

08004318 <__aeabi_cdcmpeq>:
 8004318:	b501      	push	{r0, lr}
 800431a:	f7ff ffb7 	bl	800428c <__cmpdf2>
 800431e:	2800      	cmp	r0, #0
 8004320:	bf48      	it	mi
 8004322:	f110 0f00 	cmnmi.w	r0, #0
 8004326:	bd01      	pop	{r0, pc}

08004328 <__aeabi_dcmpeq>:
 8004328:	f84d ed08 	str.w	lr, [sp, #-8]!
 800432c:	f7ff fff4 	bl	8004318 <__aeabi_cdcmpeq>
 8004330:	bf0c      	ite	eq
 8004332:	2001      	moveq	r0, #1
 8004334:	2000      	movne	r0, #0
 8004336:	f85d fb08 	ldr.w	pc, [sp], #8
 800433a:	bf00      	nop

0800433c <__aeabi_dcmplt>:
 800433c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004340:	f7ff ffea 	bl	8004318 <__aeabi_cdcmpeq>
 8004344:	bf34      	ite	cc
 8004346:	2001      	movcc	r0, #1
 8004348:	2000      	movcs	r0, #0
 800434a:	f85d fb08 	ldr.w	pc, [sp], #8
 800434e:	bf00      	nop

08004350 <__aeabi_dcmple>:
 8004350:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004354:	f7ff ffe0 	bl	8004318 <__aeabi_cdcmpeq>
 8004358:	bf94      	ite	ls
 800435a:	2001      	movls	r0, #1
 800435c:	2000      	movhi	r0, #0
 800435e:	f85d fb08 	ldr.w	pc, [sp], #8
 8004362:	bf00      	nop

08004364 <__aeabi_dcmpge>:
 8004364:	f84d ed08 	str.w	lr, [sp, #-8]!
 8004368:	f7ff ffce 	bl	8004308 <__aeabi_cdrcmple>
 800436c:	bf94      	ite	ls
 800436e:	2001      	movls	r0, #1
 8004370:	2000      	movhi	r0, #0
 8004372:	f85d fb08 	ldr.w	pc, [sp], #8
 8004376:	bf00      	nop

08004378 <__aeabi_dcmpgt>:
 8004378:	f84d ed08 	str.w	lr, [sp, #-8]!
 800437c:	f7ff ffc4 	bl	8004308 <__aeabi_cdrcmple>
 8004380:	bf34      	ite	cc
 8004382:	2001      	movcc	r0, #1
 8004384:	2000      	movcs	r0, #0
 8004386:	f85d fb08 	ldr.w	pc, [sp], #8
 800438a:	bf00      	nop

0800438c <__aeabi_dcmpun>:
 800438c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8004390:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8004394:	d102      	bne.n	800439c <__aeabi_dcmpun+0x10>
 8004396:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800439a:	d10a      	bne.n	80043b2 <__aeabi_dcmpun+0x26>
 800439c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80043a0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80043a4:	d102      	bne.n	80043ac <__aeabi_dcmpun+0x20>
 80043a6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80043aa:	d102      	bne.n	80043b2 <__aeabi_dcmpun+0x26>
 80043ac:	f04f 0000 	mov.w	r0, #0
 80043b0:	4770      	bx	lr
 80043b2:	f04f 0001 	mov.w	r0, #1
 80043b6:	4770      	bx	lr

080043b8 <__aeabi_d2iz>:
 80043b8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80043bc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80043c0:	d215      	bcs.n	80043ee <__aeabi_d2iz+0x36>
 80043c2:	d511      	bpl.n	80043e8 <__aeabi_d2iz+0x30>
 80043c4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80043c8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80043cc:	d912      	bls.n	80043f4 <__aeabi_d2iz+0x3c>
 80043ce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80043d2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80043d6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80043da:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80043de:	fa23 f002 	lsr.w	r0, r3, r2
 80043e2:	bf18      	it	ne
 80043e4:	4240      	negne	r0, r0
 80043e6:	4770      	bx	lr
 80043e8:	f04f 0000 	mov.w	r0, #0
 80043ec:	4770      	bx	lr
 80043ee:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80043f2:	d105      	bne.n	8004400 <__aeabi_d2iz+0x48>
 80043f4:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80043f8:	bf08      	it	eq
 80043fa:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80043fe:	4770      	bx	lr
 8004400:	f04f 0000 	mov.w	r0, #0
 8004404:	4770      	bx	lr
 8004406:	bf00      	nop

08004408 <__aeabi_d2f>:
 8004408:	ea4f 0241 	mov.w	r2, r1, lsl #1
 800440c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8004410:	bf24      	itt	cs
 8004412:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8004416:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 800441a:	d90d      	bls.n	8004438 <__aeabi_d2f+0x30>
 800441c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8004420:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8004424:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8004428:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 800442c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8004430:	bf08      	it	eq
 8004432:	f020 0001 	biceq.w	r0, r0, #1
 8004436:	4770      	bx	lr
 8004438:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 800443c:	d121      	bne.n	8004482 <__aeabi_d2f+0x7a>
 800443e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8004442:	bfbc      	itt	lt
 8004444:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8004448:	4770      	bxlt	lr
 800444a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800444e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8004452:	f1c2 0218 	rsb	r2, r2, #24
 8004456:	f1c2 0c20 	rsb	ip, r2, #32
 800445a:	fa10 f30c 	lsls.w	r3, r0, ip
 800445e:	fa20 f002 	lsr.w	r0, r0, r2
 8004462:	bf18      	it	ne
 8004464:	f040 0001 	orrne.w	r0, r0, #1
 8004468:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 800446c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8004470:	fa03 fc0c 	lsl.w	ip, r3, ip
 8004474:	ea40 000c 	orr.w	r0, r0, ip
 8004478:	fa23 f302 	lsr.w	r3, r3, r2
 800447c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8004480:	e7cc      	b.n	800441c <__aeabi_d2f+0x14>
 8004482:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8004486:	d107      	bne.n	8004498 <__aeabi_d2f+0x90>
 8004488:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 800448c:	bf1e      	ittt	ne
 800448e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8004492:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8004496:	4770      	bxne	lr
 8004498:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 800449c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80044a0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80044a4:	4770      	bx	lr
 80044a6:	bf00      	nop
	...

080044c0 <strlen>:
 80044c0:	f890 f000 	pld	[r0]
 80044c4:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 80044c8:	f020 0107 	bic.w	r1, r0, #7
 80044cc:	f06f 0c00 	mvn.w	ip, #0
 80044d0:	f010 0407 	ands.w	r4, r0, #7
 80044d4:	f891 f020 	pld	[r1, #32]
 80044d8:	f040 8049 	bne.w	800456e <strlen+0xae>
 80044dc:	f04f 0400 	mov.w	r4, #0
 80044e0:	f06f 0007 	mvn.w	r0, #7
 80044e4:	e9d1 2300 	ldrd	r2, r3, [r1]
 80044e8:	f891 f040 	pld	[r1, #64]	; 0x40
 80044ec:	f100 0008 	add.w	r0, r0, #8
 80044f0:	fa82 f24c 	uadd8	r2, r2, ip
 80044f4:	faa4 f28c 	sel	r2, r4, ip
 80044f8:	fa83 f34c 	uadd8	r3, r3, ip
 80044fc:	faa2 f38c 	sel	r3, r2, ip
 8004500:	bb4b      	cbnz	r3, 8004556 <strlen+0x96>
 8004502:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8004506:	fa82 f24c 	uadd8	r2, r2, ip
 800450a:	f100 0008 	add.w	r0, r0, #8
 800450e:	faa4 f28c 	sel	r2, r4, ip
 8004512:	fa83 f34c 	uadd8	r3, r3, ip
 8004516:	faa2 f38c 	sel	r3, r2, ip
 800451a:	b9e3      	cbnz	r3, 8004556 <strlen+0x96>
 800451c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8004520:	fa82 f24c 	uadd8	r2, r2, ip
 8004524:	f100 0008 	add.w	r0, r0, #8
 8004528:	faa4 f28c 	sel	r2, r4, ip
 800452c:	fa83 f34c 	uadd8	r3, r3, ip
 8004530:	faa2 f38c 	sel	r3, r2, ip
 8004534:	b97b      	cbnz	r3, 8004556 <strlen+0x96>
 8004536:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 800453a:	f101 0120 	add.w	r1, r1, #32
 800453e:	fa82 f24c 	uadd8	r2, r2, ip
 8004542:	f100 0008 	add.w	r0, r0, #8
 8004546:	faa4 f28c 	sel	r2, r4, ip
 800454a:	fa83 f34c 	uadd8	r3, r3, ip
 800454e:	faa2 f38c 	sel	r3, r2, ip
 8004552:	2b00      	cmp	r3, #0
 8004554:	d0c6      	beq.n	80044e4 <strlen+0x24>
 8004556:	2a00      	cmp	r2, #0
 8004558:	bf04      	itt	eq
 800455a:	3004      	addeq	r0, #4
 800455c:	461a      	moveq	r2, r3
 800455e:	ba12      	rev	r2, r2
 8004560:	fab2 f282 	clz	r2, r2
 8004564:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8004568:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 800456c:	4770      	bx	lr
 800456e:	e9d1 2300 	ldrd	r2, r3, [r1]
 8004572:	f004 0503 	and.w	r5, r4, #3
 8004576:	f1c4 0000 	rsb	r0, r4, #0
 800457a:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 800457e:	f014 0f04 	tst.w	r4, #4
 8004582:	f891 f040 	pld	[r1, #64]	; 0x40
 8004586:	fa0c f505 	lsl.w	r5, ip, r5
 800458a:	ea62 0205 	orn	r2, r2, r5
 800458e:	bf1c      	itt	ne
 8004590:	ea63 0305 	ornne	r3, r3, r5
 8004594:	4662      	movne	r2, ip
 8004596:	f04f 0400 	mov.w	r4, #0
 800459a:	e7a9      	b.n	80044f0 <strlen+0x30>
 800459c:	0000      	movs	r0, r0
	...

080045a0 <floor>:
 80045a0:	ec51 0b10 	vmov	r0, r1, d0
 80045a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80045a6:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80045aa:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
 80045ae:	2d13      	cmp	r5, #19
 80045b0:	ee10 6a10 	vmov	r6, s0
 80045b4:	460c      	mov	r4, r1
 80045b6:	dc20      	bgt.n	80045fa <floor+0x5a>
 80045b8:	2d00      	cmp	r5, #0
 80045ba:	db3d      	blt.n	8004638 <floor+0x98>
 80045bc:	4f38      	ldr	r7, [pc, #224]	; (80046a0 <floor+0x100>)
 80045be:	412f      	asrs	r7, r5
 80045c0:	ea01 0307 	and.w	r3, r1, r7
 80045c4:	4303      	orrs	r3, r0
 80045c6:	d01d      	beq.n	8004604 <floor+0x64>
 80045c8:	a333      	add	r3, pc, #204	; (adr r3, 8004698 <floor+0xf8>)
 80045ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045ce:	f7ff fa8d 	bl	8003aec <__adddf3>
 80045d2:	2200      	movs	r2, #0
 80045d4:	2300      	movs	r3, #0
 80045d6:	f7ff fecf 	bl	8004378 <__aeabi_dcmpgt>
 80045da:	b148      	cbz	r0, 80045f0 <floor+0x50>
 80045dc:	2c00      	cmp	r4, #0
 80045de:	da04      	bge.n	80045ea <floor+0x4a>
 80045e0:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 80045e4:	fa43 f505 	asr.w	r5, r3, r5
 80045e8:	442c      	add	r4, r5
 80045ea:	ea24 0407 	bic.w	r4, r4, r7
 80045ee:	2600      	movs	r6, #0
 80045f0:	4623      	mov	r3, r4
 80045f2:	4632      	mov	r2, r6
 80045f4:	ec43 2b10 	vmov	d0, r2, r3
 80045f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80045fa:	2d33      	cmp	r5, #51	; 0x33
 80045fc:	dd05      	ble.n	800460a <floor+0x6a>
 80045fe:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8004602:	d029      	beq.n	8004658 <floor+0xb8>
 8004604:	ec41 0b10 	vmov	d0, r0, r1
 8004608:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800460a:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 800460e:	f04f 37ff 	mov.w	r7, #4294967295
 8004612:	40df      	lsrs	r7, r3
 8004614:	4207      	tst	r7, r0
 8004616:	d0f5      	beq.n	8004604 <floor+0x64>
 8004618:	a31f      	add	r3, pc, #124	; (adr r3, 8004698 <floor+0xf8>)
 800461a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800461e:	f7ff fa65 	bl	8003aec <__adddf3>
 8004622:	2200      	movs	r2, #0
 8004624:	2300      	movs	r3, #0
 8004626:	f7ff fea7 	bl	8004378 <__aeabi_dcmpgt>
 800462a:	2800      	cmp	r0, #0
 800462c:	d0e0      	beq.n	80045f0 <floor+0x50>
 800462e:	2c00      	cmp	r4, #0
 8004630:	db23      	blt.n	800467a <floor+0xda>
 8004632:	ea26 0607 	bic.w	r6, r6, r7
 8004636:	e7db      	b.n	80045f0 <floor+0x50>
 8004638:	a317      	add	r3, pc, #92	; (adr r3, 8004698 <floor+0xf8>)
 800463a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800463e:	f7ff fa55 	bl	8003aec <__adddf3>
 8004642:	2200      	movs	r2, #0
 8004644:	2300      	movs	r3, #0
 8004646:	f7ff fe97 	bl	8004378 <__aeabi_dcmpgt>
 800464a:	2800      	cmp	r0, #0
 800464c:	d0d0      	beq.n	80045f0 <floor+0x50>
 800464e:	2c00      	cmp	r4, #0
 8004650:	db0a      	blt.n	8004668 <floor+0xc8>
 8004652:	2600      	movs	r6, #0
 8004654:	4634      	mov	r4, r6
 8004656:	e7cb      	b.n	80045f0 <floor+0x50>
 8004658:	ee10 2a10 	vmov	r2, s0
 800465c:	460b      	mov	r3, r1
 800465e:	f7ff fa45 	bl	8003aec <__adddf3>
 8004662:	ec41 0b10 	vmov	d0, r0, r1
 8004666:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004668:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 800466c:	4a0d      	ldr	r2, [pc, #52]	; (80046a4 <floor+0x104>)
 800466e:	431e      	orrs	r6, r3
 8004670:	2e00      	cmp	r6, #0
 8004672:	bf18      	it	ne
 8004674:	4614      	movne	r4, r2
 8004676:	2600      	movs	r6, #0
 8004678:	e7ba      	b.n	80045f0 <floor+0x50>
 800467a:	2d14      	cmp	r5, #20
 800467c:	d008      	beq.n	8004690 <floor+0xf0>
 800467e:	2301      	movs	r3, #1
 8004680:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 8004684:	fa03 f505 	lsl.w	r5, r3, r5
 8004688:	19ae      	adds	r6, r5, r6
 800468a:	bf28      	it	cs
 800468c:	18e4      	addcs	r4, r4, r3
 800468e:	e7d0      	b.n	8004632 <floor+0x92>
 8004690:	3401      	adds	r4, #1
 8004692:	e7ce      	b.n	8004632 <floor+0x92>
 8004694:	f3af 8000 	nop.w
 8004698:	8800759c 	.word	0x8800759c
 800469c:	7e37e43c 	.word	0x7e37e43c
 80046a0:	000fffff 	.word	0x000fffff
 80046a4:	bff00000 	.word	0xbff00000

080046a8 <log10>:
 80046a8:	b538      	push	{r3, r4, r5, lr}
 80046aa:	ed2d 8b02 	vpush	{d8}
 80046ae:	ec55 4b10 	vmov	r4, r5, d0
 80046b2:	f000 f9b5 	bl	8004a20 <__ieee754_log10>
 80046b6:	4b1e      	ldr	r3, [pc, #120]	; (8004730 <log10+0x88>)
 80046b8:	eeb0 8a40 	vmov.f32	s16, s0
 80046bc:	eef0 8a60 	vmov.f32	s17, s1
 80046c0:	f993 3000 	ldrsb.w	r3, [r3]
 80046c4:	3301      	adds	r3, #1
 80046c6:	d01a      	beq.n	80046fe <log10+0x56>
 80046c8:	4622      	mov	r2, r4
 80046ca:	462b      	mov	r3, r5
 80046cc:	4620      	mov	r0, r4
 80046ce:	4629      	mov	r1, r5
 80046d0:	f7ff fe5c 	bl	800438c <__aeabi_dcmpun>
 80046d4:	b998      	cbnz	r0, 80046fe <log10+0x56>
 80046d6:	2200      	movs	r2, #0
 80046d8:	2300      	movs	r3, #0
 80046da:	4620      	mov	r0, r4
 80046dc:	4629      	mov	r1, r5
 80046de:	f7ff fe37 	bl	8004350 <__aeabi_dcmple>
 80046e2:	b160      	cbz	r0, 80046fe <log10+0x56>
 80046e4:	4620      	mov	r0, r4
 80046e6:	4629      	mov	r1, r5
 80046e8:	2200      	movs	r2, #0
 80046ea:	2300      	movs	r3, #0
 80046ec:	f7ff fe1c 	bl	8004328 <__aeabi_dcmpeq>
 80046f0:	b160      	cbz	r0, 800470c <log10+0x64>
 80046f2:	f002 f80d 	bl	8006710 <__errno>
 80046f6:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8004728 <log10+0x80>
 80046fa:	2322      	movs	r3, #34	; 0x22
 80046fc:	6003      	str	r3, [r0, #0]
 80046fe:	eeb0 0a48 	vmov.f32	s0, s16
 8004702:	eef0 0a68 	vmov.f32	s1, s17
 8004706:	ecbd 8b02 	vpop	{d8}
 800470a:	bd38      	pop	{r3, r4, r5, pc}
 800470c:	f002 f800 	bl	8006710 <__errno>
 8004710:	ecbd 8b02 	vpop	{d8}
 8004714:	2321      	movs	r3, #33	; 0x21
 8004716:	6003      	str	r3, [r0, #0]
 8004718:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800471c:	4805      	ldr	r0, [pc, #20]	; (8004734 <log10+0x8c>)
 800471e:	f001 bbcf 	b.w	8005ec0 <nan>
 8004722:	bf00      	nop
 8004724:	f3af 8000 	nop.w
 8004728:	00000000 	.word	0x00000000
 800472c:	fff00000 	.word	0xfff00000
 8004730:	20000000 	.word	0x20000000
 8004734:	080001b0 	.word	0x080001b0

08004738 <pow>:
 8004738:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800473a:	ed2d 8b02 	vpush	{d8}
 800473e:	ec57 6b10 	vmov	r6, r7, d0
 8004742:	ec55 4b11 	vmov	r4, r5, d1
 8004746:	f000 fa03 	bl	8004b50 <__ieee754_pow>
 800474a:	4b63      	ldr	r3, [pc, #396]	; (80048d8 <pow+0x1a0>)
 800474c:	eeb0 8a40 	vmov.f32	s16, s0
 8004750:	eef0 8a60 	vmov.f32	s17, s1
 8004754:	f993 3000 	ldrsb.w	r3, [r3]
 8004758:	3301      	adds	r3, #1
 800475a:	d02a      	beq.n	80047b2 <pow+0x7a>
 800475c:	4622      	mov	r2, r4
 800475e:	462b      	mov	r3, r5
 8004760:	4620      	mov	r0, r4
 8004762:	4629      	mov	r1, r5
 8004764:	f7ff fe12 	bl	800438c <__aeabi_dcmpun>
 8004768:	bb18      	cbnz	r0, 80047b2 <pow+0x7a>
 800476a:	4632      	mov	r2, r6
 800476c:	463b      	mov	r3, r7
 800476e:	4630      	mov	r0, r6
 8004770:	4639      	mov	r1, r7
 8004772:	f7ff fe0b 	bl	800438c <__aeabi_dcmpun>
 8004776:	2800      	cmp	r0, #0
 8004778:	d144      	bne.n	8004804 <pow+0xcc>
 800477a:	2200      	movs	r2, #0
 800477c:	2300      	movs	r3, #0
 800477e:	4630      	mov	r0, r6
 8004780:	4639      	mov	r1, r7
 8004782:	f7ff fdd1 	bl	8004328 <__aeabi_dcmpeq>
 8004786:	b1d8      	cbz	r0, 80047c0 <pow+0x88>
 8004788:	2200      	movs	r2, #0
 800478a:	2300      	movs	r3, #0
 800478c:	4620      	mov	r0, r4
 800478e:	4629      	mov	r1, r5
 8004790:	f7ff fdca 	bl	8004328 <__aeabi_dcmpeq>
 8004794:	2800      	cmp	r0, #0
 8004796:	d13d      	bne.n	8004814 <pow+0xdc>
 8004798:	ec45 4b10 	vmov	d0, r4, r5
 800479c:	f001 fb84 	bl	8005ea8 <finite>
 80047a0:	b138      	cbz	r0, 80047b2 <pow+0x7a>
 80047a2:	4620      	mov	r0, r4
 80047a4:	4629      	mov	r1, r5
 80047a6:	2200      	movs	r2, #0
 80047a8:	2300      	movs	r3, #0
 80047aa:	f7ff fdc7 	bl	800433c <__aeabi_dcmplt>
 80047ae:	2800      	cmp	r0, #0
 80047b0:	d15c      	bne.n	800486c <pow+0x134>
 80047b2:	eeb0 0a48 	vmov.f32	s0, s16
 80047b6:	eef0 0a68 	vmov.f32	s1, s17
 80047ba:	ecbd 8b02 	vpop	{d8}
 80047be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80047c0:	eeb0 0a48 	vmov.f32	s0, s16
 80047c4:	eef0 0a68 	vmov.f32	s1, s17
 80047c8:	f001 fb6e 	bl	8005ea8 <finite>
 80047cc:	b358      	cbz	r0, 8004826 <pow+0xee>
 80047ce:	ec51 0b18 	vmov	r0, r1, d8
 80047d2:	2200      	movs	r2, #0
 80047d4:	2300      	movs	r3, #0
 80047d6:	f7ff fda7 	bl	8004328 <__aeabi_dcmpeq>
 80047da:	2800      	cmp	r0, #0
 80047dc:	d0e9      	beq.n	80047b2 <pow+0x7a>
 80047de:	ec47 6b10 	vmov	d0, r6, r7
 80047e2:	f001 fb61 	bl	8005ea8 <finite>
 80047e6:	2800      	cmp	r0, #0
 80047e8:	d0e3      	beq.n	80047b2 <pow+0x7a>
 80047ea:	ec45 4b10 	vmov	d0, r4, r5
 80047ee:	f001 fb5b 	bl	8005ea8 <finite>
 80047f2:	2800      	cmp	r0, #0
 80047f4:	d0dd      	beq.n	80047b2 <pow+0x7a>
 80047f6:	f001 ff8b 	bl	8006710 <__errno>
 80047fa:	2322      	movs	r3, #34	; 0x22
 80047fc:	ed9f 8b2e 	vldr	d8, [pc, #184]	; 80048b8 <pow+0x180>
 8004800:	6003      	str	r3, [r0, #0]
 8004802:	e7d6      	b.n	80047b2 <pow+0x7a>
 8004804:	4620      	mov	r0, r4
 8004806:	4629      	mov	r1, r5
 8004808:	2200      	movs	r2, #0
 800480a:	2300      	movs	r3, #0
 800480c:	f7ff fd8c 	bl	8004328 <__aeabi_dcmpeq>
 8004810:	2800      	cmp	r0, #0
 8004812:	d0ce      	beq.n	80047b2 <pow+0x7a>
 8004814:	ed9f 8b2a 	vldr	d8, [pc, #168]	; 80048c0 <pow+0x188>
 8004818:	eeb0 0a48 	vmov.f32	s0, s16
 800481c:	eef0 0a68 	vmov.f32	s1, s17
 8004820:	ecbd 8b02 	vpop	{d8}
 8004824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004826:	ec47 6b10 	vmov	d0, r6, r7
 800482a:	f001 fb3d 	bl	8005ea8 <finite>
 800482e:	2800      	cmp	r0, #0
 8004830:	d0cd      	beq.n	80047ce <pow+0x96>
 8004832:	ec45 4b10 	vmov	d0, r4, r5
 8004836:	f001 fb37 	bl	8005ea8 <finite>
 800483a:	2800      	cmp	r0, #0
 800483c:	d0c7      	beq.n	80047ce <pow+0x96>
 800483e:	ec53 2b18 	vmov	r2, r3, d8
 8004842:	ee18 0a10 	vmov	r0, s16
 8004846:	4619      	mov	r1, r3
 8004848:	f7ff fda0 	bl	800438c <__aeabi_dcmpun>
 800484c:	bb20      	cbnz	r0, 8004898 <pow+0x160>
 800484e:	f001 ff5f 	bl	8006710 <__errno>
 8004852:	4603      	mov	r3, r0
 8004854:	2222      	movs	r2, #34	; 0x22
 8004856:	601a      	str	r2, [r3, #0]
 8004858:	4630      	mov	r0, r6
 800485a:	4639      	mov	r1, r7
 800485c:	2200      	movs	r2, #0
 800485e:	2300      	movs	r3, #0
 8004860:	f7ff fd6c 	bl	800433c <__aeabi_dcmplt>
 8004864:	b948      	cbnz	r0, 800487a <pow+0x142>
 8004866:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80048c8 <pow+0x190>
 800486a:	e7a2      	b.n	80047b2 <pow+0x7a>
 800486c:	f001 ff50 	bl	8006710 <__errno>
 8004870:	2321      	movs	r3, #33	; 0x21
 8004872:	ed9f 8b17 	vldr	d8, [pc, #92]	; 80048d0 <pow+0x198>
 8004876:	6003      	str	r3, [r0, #0]
 8004878:	e79b      	b.n	80047b2 <pow+0x7a>
 800487a:	ec45 4b10 	vmov	d0, r4, r5
 800487e:	f001 fb27 	bl	8005ed0 <rint>
 8004882:	4622      	mov	r2, r4
 8004884:	ec51 0b10 	vmov	r0, r1, d0
 8004888:	462b      	mov	r3, r5
 800488a:	f7ff fd4d 	bl	8004328 <__aeabi_dcmpeq>
 800488e:	2800      	cmp	r0, #0
 8004890:	d1e9      	bne.n	8004866 <pow+0x12e>
 8004892:	ed9f 8b0f 	vldr	d8, [pc, #60]	; 80048d0 <pow+0x198>
 8004896:	e78c      	b.n	80047b2 <pow+0x7a>
 8004898:	f001 ff3a 	bl	8006710 <__errno>
 800489c:	2200      	movs	r2, #0
 800489e:	2300      	movs	r3, #0
 80048a0:	2121      	movs	r1, #33	; 0x21
 80048a2:	6001      	str	r1, [r0, #0]
 80048a4:	4610      	mov	r0, r2
 80048a6:	4619      	mov	r1, r3
 80048a8:	f7ff fc00 	bl	80040ac <__aeabi_ddiv>
 80048ac:	ec41 0b18 	vmov	d8, r0, r1
 80048b0:	e77f      	b.n	80047b2 <pow+0x7a>
 80048b2:	bf00      	nop
 80048b4:	f3af 8000 	nop.w
	...
 80048c4:	3ff00000 	.word	0x3ff00000
 80048c8:	00000000 	.word	0x00000000
 80048cc:	7ff00000 	.word	0x7ff00000
 80048d0:	00000000 	.word	0x00000000
 80048d4:	fff00000 	.word	0xfff00000
 80048d8:	20000000 	.word	0x20000000

080048dc <powf>:
 80048dc:	b508      	push	{r3, lr}
 80048de:	ed2d 8b04 	vpush	{d8-d9}
 80048e2:	eef0 8a40 	vmov.f32	s17, s0
 80048e6:	eeb0 8a60 	vmov.f32	s16, s1
 80048ea:	f000 ffcf 	bl	800588c <__ieee754_powf>
 80048ee:	4b47      	ldr	r3, [pc, #284]	; (8004a0c <powf+0x130>)
 80048f0:	f993 3000 	ldrsb.w	r3, [r3]
 80048f4:	3301      	adds	r3, #1
 80048f6:	eeb0 9a40 	vmov.f32	s18, s0
 80048fa:	d01f      	beq.n	800493c <powf+0x60>
 80048fc:	eeb4 8a48 	vcmp.f32	s16, s16
 8004900:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004904:	d61a      	bvs.n	800493c <powf+0x60>
 8004906:	eef4 8a68 	vcmp.f32	s17, s17
 800490a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800490e:	d659      	bvs.n	80049c4 <powf+0xe8>
 8004910:	eddf 9a3f 	vldr	s19, [pc, #252]	; 8004a10 <powf+0x134>
 8004914:	eef4 8a69 	vcmp.f32	s17, s19
 8004918:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800491c:	d113      	bne.n	8004946 <powf+0x6a>
 800491e:	eeb4 8a69 	vcmp.f32	s16, s19
 8004922:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004926:	d029      	beq.n	800497c <powf+0xa0>
 8004928:	eeb0 0a48 	vmov.f32	s0, s16
 800492c:	f001 fbfe 	bl	800612c <finitef>
 8004930:	b120      	cbz	r0, 800493c <powf+0x60>
 8004932:	eeb4 8ae9 	vcmpe.f32	s16, s19
 8004936:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800493a:	d44d      	bmi.n	80049d8 <powf+0xfc>
 800493c:	eeb0 0a49 	vmov.f32	s0, s18
 8004940:	ecbd 8b04 	vpop	{d8-d9}
 8004944:	bd08      	pop	{r3, pc}
 8004946:	f001 fbf1 	bl	800612c <finitef>
 800494a:	b1f0      	cbz	r0, 800498a <powf+0xae>
 800494c:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8004950:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004954:	d1f2      	bne.n	800493c <powf+0x60>
 8004956:	eeb0 0a68 	vmov.f32	s0, s17
 800495a:	f001 fbe7 	bl	800612c <finitef>
 800495e:	2800      	cmp	r0, #0
 8004960:	d0ec      	beq.n	800493c <powf+0x60>
 8004962:	eeb0 0a48 	vmov.f32	s0, s16
 8004966:	f001 fbe1 	bl	800612c <finitef>
 800496a:	2800      	cmp	r0, #0
 800496c:	d0e6      	beq.n	800493c <powf+0x60>
 800496e:	f001 fecf 	bl	8006710 <__errno>
 8004972:	2322      	movs	r3, #34	; 0x22
 8004974:	ed9f 9a26 	vldr	s18, [pc, #152]	; 8004a10 <powf+0x134>
 8004978:	6003      	str	r3, [r0, #0]
 800497a:	e7df      	b.n	800493c <powf+0x60>
 800497c:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8004980:	eeb0 0a49 	vmov.f32	s0, s18
 8004984:	ecbd 8b04 	vpop	{d8-d9}
 8004988:	bd08      	pop	{r3, pc}
 800498a:	eeb0 0a68 	vmov.f32	s0, s17
 800498e:	f001 fbcd 	bl	800612c <finitef>
 8004992:	2800      	cmp	r0, #0
 8004994:	d0da      	beq.n	800494c <powf+0x70>
 8004996:	eeb0 0a48 	vmov.f32	s0, s16
 800499a:	f001 fbc7 	bl	800612c <finitef>
 800499e:	2800      	cmp	r0, #0
 80049a0:	d0d4      	beq.n	800494c <powf+0x70>
 80049a2:	eeb4 9a49 	vcmp.f32	s18, s18
 80049a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049aa:	d628      	bvs.n	80049fe <powf+0x122>
 80049ac:	f001 feb0 	bl	8006710 <__errno>
 80049b0:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 80049b4:	2322      	movs	r3, #34	; 0x22
 80049b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049ba:	6003      	str	r3, [r0, #0]
 80049bc:	d413      	bmi.n	80049e6 <powf+0x10a>
 80049be:	ed9f 9a15 	vldr	s18, [pc, #84]	; 8004a14 <powf+0x138>
 80049c2:	e7bb      	b.n	800493c <powf+0x60>
 80049c4:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80049c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049cc:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80049d0:	bf08      	it	eq
 80049d2:	eeb0 9a67 	vmoveq.f32	s18, s15
 80049d6:	e7b1      	b.n	800493c <powf+0x60>
 80049d8:	f001 fe9a 	bl	8006710 <__errno>
 80049dc:	2321      	movs	r3, #33	; 0x21
 80049de:	ed9f 9a0e 	vldr	s18, [pc, #56]	; 8004a18 <powf+0x13c>
 80049e2:	6003      	str	r3, [r0, #0]
 80049e4:	e7aa      	b.n	800493c <powf+0x60>
 80049e6:	eeb0 0a48 	vmov.f32	s0, s16
 80049ea:	f001 fbb3 	bl	8006154 <rintf>
 80049ee:	eeb4 0a48 	vcmp.f32	s0, s16
 80049f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049f6:	d0e2      	beq.n	80049be <powf+0xe2>
 80049f8:	ed9f 9a07 	vldr	s18, [pc, #28]	; 8004a18 <powf+0x13c>
 80049fc:	e79e      	b.n	800493c <powf+0x60>
 80049fe:	f001 fe87 	bl	8006710 <__errno>
 8004a02:	2321      	movs	r3, #33	; 0x21
 8004a04:	ee89 9aa9 	vdiv.f32	s18, s19, s19
 8004a08:	6003      	str	r3, [r0, #0]
 8004a0a:	e797      	b.n	800493c <powf+0x60>
 8004a0c:	20000000 	.word	0x20000000
 8004a10:	00000000 	.word	0x00000000
 8004a14:	7f800000 	.word	0x7f800000
 8004a18:	ff800000 	.word	0xff800000
 8004a1c:	00000000 	.word	0x00000000

08004a20 <__ieee754_log10>:
 8004a20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004a24:	ec55 4b10 	vmov	r4, r5, d0
 8004a28:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8004a2c:	462b      	mov	r3, r5
 8004a2e:	da1e      	bge.n	8004a6e <__ieee754_log10+0x4e>
 8004a30:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 8004a34:	4322      	orrs	r2, r4
 8004a36:	d060      	beq.n	8004afa <__ieee754_log10+0xda>
 8004a38:	2d00      	cmp	r5, #0
 8004a3a:	db68      	blt.n	8004b0e <__ieee754_log10+0xee>
 8004a3c:	4b40      	ldr	r3, [pc, #256]	; (8004b40 <__ieee754_log10+0x120>)
 8004a3e:	4629      	mov	r1, r5
 8004a40:	2200      	movs	r2, #0
 8004a42:	ee10 0a10 	vmov	r0, s0
 8004a46:	f7ff fa07 	bl	8003e58 <__aeabi_dmul>
 8004a4a:	4a3e      	ldr	r2, [pc, #248]	; (8004b44 <__ieee754_log10+0x124>)
 8004a4c:	460d      	mov	r5, r1
 8004a4e:	462b      	mov	r3, r5
 8004a50:	4293      	cmp	r3, r2
 8004a52:	4604      	mov	r4, r0
 8004a54:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8004a58:	dd0e      	ble.n	8004a78 <__ieee754_log10+0x58>
 8004a5a:	4622      	mov	r2, r4
 8004a5c:	462b      	mov	r3, r5
 8004a5e:	4620      	mov	r0, r4
 8004a60:	4629      	mov	r1, r5
 8004a62:	f7ff f843 	bl	8003aec <__adddf3>
 8004a66:	ec41 0b10 	vmov	d0, r0, r1
 8004a6a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004a6e:	4a35      	ldr	r2, [pc, #212]	; (8004b44 <__ieee754_log10+0x124>)
 8004a70:	4293      	cmp	r3, r2
 8004a72:	f04f 0100 	mov.w	r1, #0
 8004a76:	dcf0      	bgt.n	8004a5a <__ieee754_log10+0x3a>
 8004a78:	1518      	asrs	r0, r3, #20
 8004a7a:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8004a7e:	4408      	add	r0, r1
 8004a80:	0fc7      	lsrs	r7, r0, #31
 8004a82:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 8004a86:	f3c3 0613 	ubfx	r6, r3, #0, #20
 8004a8a:	f7ff f97b 	bl	8003d84 <__aeabi_i2d>
 8004a8e:	f5c7 737f 	rsb	r3, r7, #1020	; 0x3fc
 8004a92:	3303      	adds	r3, #3
 8004a94:	ea46 5503 	orr.w	r5, r6, r3, lsl #20
 8004a98:	ec45 4b10 	vmov	d0, r4, r5
 8004a9c:	4606      	mov	r6, r0
 8004a9e:	460f      	mov	r7, r1
 8004aa0:	f001 fc2a 	bl	80062f8 <__ieee754_log>
 8004aa4:	a320      	add	r3, pc, #128	; (adr r3, 8004b28 <__ieee754_log10+0x108>)
 8004aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004aaa:	4630      	mov	r0, r6
 8004aac:	4639      	mov	r1, r7
 8004aae:	ec59 8b10 	vmov	r8, r9, d0
 8004ab2:	f7ff f9d1 	bl	8003e58 <__aeabi_dmul>
 8004ab6:	a31e      	add	r3, pc, #120	; (adr r3, 8004b30 <__ieee754_log10+0x110>)
 8004ab8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004abc:	4604      	mov	r4, r0
 8004abe:	460d      	mov	r5, r1
 8004ac0:	4640      	mov	r0, r8
 8004ac2:	4649      	mov	r1, r9
 8004ac4:	f7ff f9c8 	bl	8003e58 <__aeabi_dmul>
 8004ac8:	4602      	mov	r2, r0
 8004aca:	460b      	mov	r3, r1
 8004acc:	4620      	mov	r0, r4
 8004ace:	4629      	mov	r1, r5
 8004ad0:	f7ff f80c 	bl	8003aec <__adddf3>
 8004ad4:	a318      	add	r3, pc, #96	; (adr r3, 8004b38 <__ieee754_log10+0x118>)
 8004ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ada:	4604      	mov	r4, r0
 8004adc:	460d      	mov	r5, r1
 8004ade:	4630      	mov	r0, r6
 8004ae0:	4639      	mov	r1, r7
 8004ae2:	f7ff f9b9 	bl	8003e58 <__aeabi_dmul>
 8004ae6:	4602      	mov	r2, r0
 8004ae8:	460b      	mov	r3, r1
 8004aea:	4620      	mov	r0, r4
 8004aec:	4629      	mov	r1, r5
 8004aee:	f7fe fffd 	bl	8003aec <__adddf3>
 8004af2:	ec41 0b10 	vmov	d0, r0, r1
 8004af6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004afa:	2200      	movs	r2, #0
 8004afc:	2300      	movs	r3, #0
 8004afe:	4912      	ldr	r1, [pc, #72]	; (8004b48 <__ieee754_log10+0x128>)
 8004b00:	2000      	movs	r0, #0
 8004b02:	f7ff fad3 	bl	80040ac <__aeabi_ddiv>
 8004b06:	ec41 0b10 	vmov	d0, r0, r1
 8004b0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b0e:	ee10 2a10 	vmov	r2, s0
 8004b12:	4620      	mov	r0, r4
 8004b14:	4629      	mov	r1, r5
 8004b16:	f7fe ffe7 	bl	8003ae8 <__aeabi_dsub>
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	2300      	movs	r3, #0
 8004b1e:	f7ff fac5 	bl	80040ac <__aeabi_ddiv>
 8004b22:	ec41 0b10 	vmov	d0, r0, r1
 8004b26:	e7a0      	b.n	8004a6a <__ieee754_log10+0x4a>
 8004b28:	11f12b36 	.word	0x11f12b36
 8004b2c:	3d59fef3 	.word	0x3d59fef3
 8004b30:	1526e50e 	.word	0x1526e50e
 8004b34:	3fdbcb7b 	.word	0x3fdbcb7b
 8004b38:	509f6000 	.word	0x509f6000
 8004b3c:	3fd34413 	.word	0x3fd34413
 8004b40:	43500000 	.word	0x43500000
 8004b44:	7fefffff 	.word	0x7fefffff
 8004b48:	c3500000 	.word	0xc3500000
 8004b4c:	00000000 	.word	0x00000000

08004b50 <__ieee754_pow>:
 8004b50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004b54:	ec57 6b11 	vmov	r6, r7, d1
 8004b58:	ed2d 8b0a 	vpush	{d8-d12}
 8004b5c:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
 8004b60:	ea5a 0206 	orrs.w	r2, sl, r6
 8004b64:	b089      	sub	sp, #36	; 0x24
 8004b66:	d03d      	beq.n	8004be4 <__ieee754_pow+0x94>
 8004b68:	ec55 4b10 	vmov	r4, r5, d0
 8004b6c:	4976      	ldr	r1, [pc, #472]	; (8004d48 <__ieee754_pow+0x1f8>)
 8004b6e:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 8004b72:	4588      	cmp	r8, r1
 8004b74:	ee10 2a10 	vmov	r2, s0
 8004b78:	46a9      	mov	r9, r5
 8004b7a:	dc2c      	bgt.n	8004bd6 <__ieee754_pow+0x86>
 8004b7c:	ee11 3a10 	vmov	r3, s2
 8004b80:	46bb      	mov	fp, r7
 8004b82:	d03a      	beq.n	8004bfa <__ieee754_pow+0xaa>
 8004b84:	458a      	cmp	sl, r1
 8004b86:	dc26      	bgt.n	8004bd6 <__ieee754_pow+0x86>
 8004b88:	496f      	ldr	r1, [pc, #444]	; (8004d48 <__ieee754_pow+0x1f8>)
 8004b8a:	458a      	cmp	sl, r1
 8004b8c:	d021      	beq.n	8004bd2 <__ieee754_pow+0x82>
 8004b8e:	f1b9 0f00 	cmp.w	r9, #0
 8004b92:	db3d      	blt.n	8004c10 <__ieee754_pow+0xc0>
 8004b94:	2100      	movs	r1, #0
 8004b96:	9103      	str	r1, [sp, #12]
 8004b98:	2b00      	cmp	r3, #0
 8004b9a:	d155      	bne.n	8004c48 <__ieee754_pow+0xf8>
 8004b9c:	4b6a      	ldr	r3, [pc, #424]	; (8004d48 <__ieee754_pow+0x1f8>)
 8004b9e:	459a      	cmp	sl, r3
 8004ba0:	f000 80a8 	beq.w	8004cf4 <__ieee754_pow+0x1a4>
 8004ba4:	4b69      	ldr	r3, [pc, #420]	; (8004d4c <__ieee754_pow+0x1fc>)
 8004ba6:	459a      	cmp	sl, r3
 8004ba8:	f000 80b6 	beq.w	8004d18 <__ieee754_pow+0x1c8>
 8004bac:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
 8004bb0:	f000 8501 	beq.w	80055b6 <__ieee754_pow+0xa66>
 8004bb4:	4b66      	ldr	r3, [pc, #408]	; (8004d50 <__ieee754_pow+0x200>)
 8004bb6:	459b      	cmp	fp, r3
 8004bb8:	d146      	bne.n	8004c48 <__ieee754_pow+0xf8>
 8004bba:	f1b9 0f00 	cmp.w	r9, #0
 8004bbe:	db43      	blt.n	8004c48 <__ieee754_pow+0xf8>
 8004bc0:	ec45 4b10 	vmov	d0, r4, r5
 8004bc4:	b009      	add	sp, #36	; 0x24
 8004bc6:	ecbd 8b0a 	vpop	{d8-d12}
 8004bca:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004bce:	f000 bd99 	b.w	8005704 <__ieee754_sqrt>
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d0db      	beq.n	8004b8e <__ieee754_pow+0x3e>
 8004bd6:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8004bda:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8004bde:	ea58 0302 	orrs.w	r3, r8, r2
 8004be2:	d10d      	bne.n	8004c00 <__ieee754_pow+0xb0>
 8004be4:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8004d38 <__ieee754_pow+0x1e8>
 8004be8:	ed8d 7b00 	vstr	d7, [sp]
 8004bec:	ed9d 0b00 	vldr	d0, [sp]
 8004bf0:	b009      	add	sp, #36	; 0x24
 8004bf2:	ecbd 8b0a 	vpop	{d8-d12}
 8004bf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004bfa:	b90c      	cbnz	r4, 8004c00 <__ieee754_pow+0xb0>
 8004bfc:	45c2      	cmp	sl, r8
 8004bfe:	ddc3      	ble.n	8004b88 <__ieee754_pow+0x38>
 8004c00:	4854      	ldr	r0, [pc, #336]	; (8004d54 <__ieee754_pow+0x204>)
 8004c02:	b009      	add	sp, #36	; 0x24
 8004c04:	ecbd 8b0a 	vpop	{d8-d12}
 8004c08:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c0c:	f001 b958 	b.w	8005ec0 <nan>
 8004c10:	4951      	ldr	r1, [pc, #324]	; (8004d58 <__ieee754_pow+0x208>)
 8004c12:	458a      	cmp	sl, r1
 8004c14:	f300 8087 	bgt.w	8004d26 <__ieee754_pow+0x1d6>
 8004c18:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8004c1c:	458a      	cmp	sl, r1
 8004c1e:	dd0f      	ble.n	8004c40 <__ieee754_pow+0xf0>
 8004c20:	ea4f 512a 	mov.w	r1, sl, asr #20
 8004c24:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8004c28:	2914      	cmp	r1, #20
 8004c2a:	f340 84ce 	ble.w	80055ca <__ieee754_pow+0xa7a>
 8004c2e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8004c32:	fa23 f001 	lsr.w	r0, r3, r1
 8004c36:	fa00 f101 	lsl.w	r1, r0, r1
 8004c3a:	4299      	cmp	r1, r3
 8004c3c:	f000 8520 	beq.w	8005680 <__ieee754_pow+0xb30>
 8004c40:	2100      	movs	r1, #0
 8004c42:	9103      	str	r1, [sp, #12]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d0ad      	beq.n	8004ba4 <__ieee754_pow+0x54>
 8004c48:	ec45 4b10 	vmov	d0, r4, r5
 8004c4c:	9206      	str	r2, [sp, #24]
 8004c4e:	f001 f921 	bl	8005e94 <fabs>
 8004c52:	9a06      	ldr	r2, [sp, #24]
 8004c54:	ed8d 0b00 	vstr	d0, [sp]
 8004c58:	bb5a      	cbnz	r2, 8004cb2 <__ieee754_pow+0x162>
 8004c5a:	f1b8 0f00 	cmp.w	r8, #0
 8004c5e:	d004      	beq.n	8004c6a <__ieee754_pow+0x11a>
 8004c60:	4b3a      	ldr	r3, [pc, #232]	; (8004d4c <__ieee754_pow+0x1fc>)
 8004c62:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 8004c66:	429a      	cmp	r2, r3
 8004c68:	d123      	bne.n	8004cb2 <__ieee754_pow+0x162>
 8004c6a:	f1bb 0f00 	cmp.w	fp, #0
 8004c6e:	da07      	bge.n	8004c80 <__ieee754_pow+0x130>
 8004c70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c74:	4935      	ldr	r1, [pc, #212]	; (8004d4c <__ieee754_pow+0x1fc>)
 8004c76:	2000      	movs	r0, #0
 8004c78:	f7ff fa18 	bl	80040ac <__aeabi_ddiv>
 8004c7c:	e9cd 0100 	strd	r0, r1, [sp]
 8004c80:	f1b9 0f00 	cmp.w	r9, #0
 8004c84:	dab2      	bge.n	8004bec <__ieee754_pow+0x9c>
 8004c86:	9b03      	ldr	r3, [sp, #12]
 8004c88:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8004c8c:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8004c90:	ea58 0303 	orrs.w	r3, r8, r3
 8004c94:	f040 84be 	bne.w	8005614 <__ieee754_pow+0xac4>
 8004c98:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c9c:	4610      	mov	r0, r2
 8004c9e:	4619      	mov	r1, r3
 8004ca0:	f7fe ff22 	bl	8003ae8 <__aeabi_dsub>
 8004ca4:	4602      	mov	r2, r0
 8004ca6:	460b      	mov	r3, r1
 8004ca8:	f7ff fa00 	bl	80040ac <__aeabi_ddiv>
 8004cac:	e9cd 0100 	strd	r0, r1, [sp]
 8004cb0:	e79c      	b.n	8004bec <__ieee754_pow+0x9c>
 8004cb2:	9a03      	ldr	r2, [sp, #12]
 8004cb4:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8004cb8:	3b01      	subs	r3, #1
 8004cba:	9306      	str	r3, [sp, #24]
 8004cbc:	4313      	orrs	r3, r2
 8004cbe:	d035      	beq.n	8004d2c <__ieee754_pow+0x1dc>
 8004cc0:	4b26      	ldr	r3, [pc, #152]	; (8004d5c <__ieee754_pow+0x20c>)
 8004cc2:	459a      	cmp	sl, r3
 8004cc4:	dd4e      	ble.n	8004d64 <__ieee754_pow+0x214>
 8004cc6:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8004cca:	459a      	cmp	sl, r3
 8004ccc:	4b24      	ldr	r3, [pc, #144]	; (8004d60 <__ieee754_pow+0x210>)
 8004cce:	f340 83ed 	ble.w	80054ac <__ieee754_pow+0x95c>
 8004cd2:	4598      	cmp	r8, r3
 8004cd4:	f340 836b 	ble.w	80053ae <__ieee754_pow+0x85e>
 8004cd8:	f1bb 0f00 	cmp.w	fp, #0
 8004cdc:	f340 836b 	ble.w	80053b6 <__ieee754_pow+0x866>
 8004ce0:	a317      	add	r3, pc, #92	; (adr r3, 8004d40 <__ieee754_pow+0x1f0>)
 8004ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce6:	4610      	mov	r0, r2
 8004ce8:	4619      	mov	r1, r3
 8004cea:	f7ff f8b5 	bl	8003e58 <__aeabi_dmul>
 8004cee:	e9cd 0100 	strd	r0, r1, [sp]
 8004cf2:	e77b      	b.n	8004bec <__ieee754_pow+0x9c>
 8004cf4:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
 8004cf8:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	f43f af71 	beq.w	8004be4 <__ieee754_pow+0x94>
 8004d02:	4b17      	ldr	r3, [pc, #92]	; (8004d60 <__ieee754_pow+0x210>)
 8004d04:	4598      	cmp	r8, r3
 8004d06:	f340 8388 	ble.w	800541a <__ieee754_pow+0x8ca>
 8004d0a:	f1bb 0f00 	cmp.w	fp, #0
 8004d0e:	f2c0 8352 	blt.w	80053b6 <__ieee754_pow+0x866>
 8004d12:	e9cd 6700 	strd	r6, r7, [sp]
 8004d16:	e769      	b.n	8004bec <__ieee754_pow+0x9c>
 8004d18:	f1bb 0f00 	cmp.w	fp, #0
 8004d1c:	f2c0 8441 	blt.w	80055a2 <__ieee754_pow+0xa52>
 8004d20:	e9cd 4500 	strd	r4, r5, [sp]
 8004d24:	e762      	b.n	8004bec <__ieee754_pow+0x9c>
 8004d26:	2102      	movs	r1, #2
 8004d28:	9103      	str	r1, [sp, #12]
 8004d2a:	e735      	b.n	8004b98 <__ieee754_pow+0x48>
 8004d2c:	4622      	mov	r2, r4
 8004d2e:	462b      	mov	r3, r5
 8004d30:	e7b4      	b.n	8004c9c <__ieee754_pow+0x14c>
 8004d32:	bf00      	nop
 8004d34:	f3af 8000 	nop.w
 8004d38:	00000000 	.word	0x00000000
 8004d3c:	3ff00000 	.word	0x3ff00000
 8004d40:	8800759c 	.word	0x8800759c
 8004d44:	7e37e43c 	.word	0x7e37e43c
 8004d48:	7ff00000 	.word	0x7ff00000
 8004d4c:	3ff00000 	.word	0x3ff00000
 8004d50:	3fe00000 	.word	0x3fe00000
 8004d54:	080001b4 	.word	0x080001b4
 8004d58:	433fffff 	.word	0x433fffff
 8004d5c:	41e00000 	.word	0x41e00000
 8004d60:	3fefffff 	.word	0x3fefffff
 8004d64:	4be4      	ldr	r3, [pc, #912]	; (80050f8 <__ieee754_pow+0x5a8>)
 8004d66:	ea09 0303 	and.w	r3, r9, r3
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	f040 8416 	bne.w	800559c <__ieee754_pow+0xa4c>
 8004d70:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004d74:	4be1      	ldr	r3, [pc, #900]	; (80050fc <__ieee754_pow+0x5ac>)
 8004d76:	2200      	movs	r2, #0
 8004d78:	f7ff f86e 	bl	8003e58 <__aeabi_dmul>
 8004d7c:	e9cd 0100 	strd	r0, r1, [sp]
 8004d80:	f8dd 8004 	ldr.w	r8, [sp, #4]
 8004d84:	f06f 0034 	mvn.w	r0, #52	; 0x34
 8004d88:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004d8c:	49dc      	ldr	r1, [pc, #880]	; (8005100 <__ieee754_pow+0x5b0>)
 8004d8e:	f3c8 0213 	ubfx	r2, r8, #0, #20
 8004d92:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8004d96:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
 8004d9a:	1818      	adds	r0, r3, r0
 8004d9c:	428a      	cmp	r2, r1
 8004d9e:	9007      	str	r0, [sp, #28]
 8004da0:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
 8004da4:	f340 83e9 	ble.w	800557a <__ieee754_pow+0xa2a>
 8004da8:	4bd6      	ldr	r3, [pc, #856]	; (8005104 <__ieee754_pow+0x5b4>)
 8004daa:	429a      	cmp	r2, r3
 8004dac:	f340 843e 	ble.w	800562c <__ieee754_pow+0xadc>
 8004db0:	ed9f 7bbb 	vldr	d7, [pc, #748]	; 80050a0 <__ieee754_pow+0x550>
 8004db4:	eeb0 ba47 	vmov.f32	s22, s14
 8004db8:	eef0 ba67 	vmov.f32	s23, s15
 8004dbc:	eeb0 ca47 	vmov.f32	s24, s14
 8004dc0:	eef0 ca67 	vmov.f32	s25, s15
 8004dc4:	ed9f 7bb8 	vldr	d7, [pc, #736]	; 80050a8 <__ieee754_pow+0x558>
 8004dc8:	3001      	adds	r0, #1
 8004dca:	ec54 3b17 	vmov	r3, r4, d7
 8004dce:	9007      	str	r0, [sp, #28]
 8004dd0:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
 8004dd4:	f04f 0900 	mov.w	r9, #0
 8004dd8:	e9dd ab00 	ldrd	sl, fp, [sp]
 8004ddc:	ec44 3b18 	vmov	d8, r3, r4
 8004de0:	461a      	mov	r2, r3
 8004de2:	4650      	mov	r0, sl
 8004de4:	4623      	mov	r3, r4
 8004de6:	4641      	mov	r1, r8
 8004de8:	f7fe fe7e 	bl	8003ae8 <__aeabi_dsub>
 8004dec:	ec53 2b18 	vmov	r2, r3, d8
 8004df0:	4604      	mov	r4, r0
 8004df2:	460d      	mov	r5, r1
 8004df4:	4650      	mov	r0, sl
 8004df6:	4641      	mov	r1, r8
 8004df8:	f7fe fe78 	bl	8003aec <__adddf3>
 8004dfc:	4602      	mov	r2, r0
 8004dfe:	460b      	mov	r3, r1
 8004e00:	2000      	movs	r0, #0
 8004e02:	49c1      	ldr	r1, [pc, #772]	; (8005108 <__ieee754_pow+0x5b8>)
 8004e04:	f7ff f952 	bl	80040ac <__aeabi_ddiv>
 8004e08:	ec45 4b1a 	vmov	d10, r4, r5
 8004e0c:	ec41 0b19 	vmov	d9, r0, r1
 8004e10:	ec51 0b1a 	vmov	r0, r1, d10
 8004e14:	ec53 2b19 	vmov	r2, r3, d9
 8004e18:	f7ff f81e 	bl	8003e58 <__aeabi_dmul>
 8004e1c:	46c3      	mov	fp, r8
 8004e1e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8004e22:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
 8004e26:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
 8004e2a:	eb03 0509 	add.w	r5, r3, r9
 8004e2e:	460a      	mov	r2, r1
 8004e30:	2300      	movs	r3, #0
 8004e32:	4601      	mov	r1, r0
 8004e34:	e9cd 1200 	strd	r1, r2, [sp]
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	e9dd 8900 	ldrd	r8, r9, [sp]
 8004e3e:	2400      	movs	r4, #0
 8004e40:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8004e44:	462b      	mov	r3, r5
 8004e46:	4622      	mov	r2, r4
 8004e48:	4640      	mov	r0, r8
 8004e4a:	4649      	mov	r1, r9
 8004e4c:	f7ff f804 	bl	8003e58 <__aeabi_dmul>
 8004e50:	4602      	mov	r2, r0
 8004e52:	460b      	mov	r3, r1
 8004e54:	ec51 0b1a 	vmov	r0, r1, d10
 8004e58:	f7fe fe46 	bl	8003ae8 <__aeabi_dsub>
 8004e5c:	ec41 0b17 	vmov	d7, r0, r1
 8004e60:	ec53 2b18 	vmov	r2, r3, d8
 8004e64:	4620      	mov	r0, r4
 8004e66:	4629      	mov	r1, r5
 8004e68:	ec55 4b17 	vmov	r4, r5, d7
 8004e6c:	f7fe fe3c 	bl	8003ae8 <__aeabi_dsub>
 8004e70:	4602      	mov	r2, r0
 8004e72:	460b      	mov	r3, r1
 8004e74:	4650      	mov	r0, sl
 8004e76:	4659      	mov	r1, fp
 8004e78:	f7fe fe36 	bl	8003ae8 <__aeabi_dsub>
 8004e7c:	4642      	mov	r2, r8
 8004e7e:	464b      	mov	r3, r9
 8004e80:	f7fe ffea 	bl	8003e58 <__aeabi_dmul>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4620      	mov	r0, r4
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	f7fe fe2c 	bl	8003ae8 <__aeabi_dsub>
 8004e90:	ec53 2b19 	vmov	r2, r3, d9
 8004e94:	f7fe ffe0 	bl	8003e58 <__aeabi_dmul>
 8004e98:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8004e9c:	4604      	mov	r4, r0
 8004e9e:	460d      	mov	r5, r1
 8004ea0:	4652      	mov	r2, sl
 8004ea2:	465b      	mov	r3, fp
 8004ea4:	4650      	mov	r0, sl
 8004ea6:	4659      	mov	r1, fp
 8004ea8:	f7fe ffd6 	bl	8003e58 <__aeabi_dmul>
 8004eac:	a380      	add	r3, pc, #512	; (adr r3, 80050b0 <__ieee754_pow+0x560>)
 8004eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb2:	ec45 4b1a 	vmov	d10, r4, r5
 8004eb6:	4604      	mov	r4, r0
 8004eb8:	460d      	mov	r5, r1
 8004eba:	f7fe ffcd 	bl	8003e58 <__aeabi_dmul>
 8004ebe:	a37e      	add	r3, pc, #504	; (adr r3, 80050b8 <__ieee754_pow+0x568>)
 8004ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec4:	f7fe fe12 	bl	8003aec <__adddf3>
 8004ec8:	4622      	mov	r2, r4
 8004eca:	462b      	mov	r3, r5
 8004ecc:	f7fe ffc4 	bl	8003e58 <__aeabi_dmul>
 8004ed0:	a37b      	add	r3, pc, #492	; (adr r3, 80050c0 <__ieee754_pow+0x570>)
 8004ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed6:	f7fe fe09 	bl	8003aec <__adddf3>
 8004eda:	4622      	mov	r2, r4
 8004edc:	462b      	mov	r3, r5
 8004ede:	f7fe ffbb 	bl	8003e58 <__aeabi_dmul>
 8004ee2:	a379      	add	r3, pc, #484	; (adr r3, 80050c8 <__ieee754_pow+0x578>)
 8004ee4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee8:	f7fe fe00 	bl	8003aec <__adddf3>
 8004eec:	4622      	mov	r2, r4
 8004eee:	462b      	mov	r3, r5
 8004ef0:	f7fe ffb2 	bl	8003e58 <__aeabi_dmul>
 8004ef4:	a376      	add	r3, pc, #472	; (adr r3, 80050d0 <__ieee754_pow+0x580>)
 8004ef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004efa:	f7fe fdf7 	bl	8003aec <__adddf3>
 8004efe:	4622      	mov	r2, r4
 8004f00:	462b      	mov	r3, r5
 8004f02:	f7fe ffa9 	bl	8003e58 <__aeabi_dmul>
 8004f06:	a374      	add	r3, pc, #464	; (adr r3, 80050d8 <__ieee754_pow+0x588>)
 8004f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0c:	f7fe fdee 	bl	8003aec <__adddf3>
 8004f10:	4622      	mov	r2, r4
 8004f12:	462b      	mov	r3, r5
 8004f14:	4604      	mov	r4, r0
 8004f16:	460d      	mov	r5, r1
 8004f18:	4610      	mov	r0, r2
 8004f1a:	4619      	mov	r1, r3
 8004f1c:	f7fe ff9c 	bl	8003e58 <__aeabi_dmul>
 8004f20:	4602      	mov	r2, r0
 8004f22:	460b      	mov	r3, r1
 8004f24:	4620      	mov	r0, r4
 8004f26:	4629      	mov	r1, r5
 8004f28:	f7fe ff96 	bl	8003e58 <__aeabi_dmul>
 8004f2c:	4642      	mov	r2, r8
 8004f2e:	4604      	mov	r4, r0
 8004f30:	460d      	mov	r5, r1
 8004f32:	464b      	mov	r3, r9
 8004f34:	4650      	mov	r0, sl
 8004f36:	4659      	mov	r1, fp
 8004f38:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8004f3c:	f7fe fdd6 	bl	8003aec <__adddf3>
 8004f40:	ec53 2b1a 	vmov	r2, r3, d10
 8004f44:	f7fe ff88 	bl	8003e58 <__aeabi_dmul>
 8004f48:	4622      	mov	r2, r4
 8004f4a:	462b      	mov	r3, r5
 8004f4c:	f7fe fdce 	bl	8003aec <__adddf3>
 8004f50:	4642      	mov	r2, r8
 8004f52:	4604      	mov	r4, r0
 8004f54:	460d      	mov	r5, r1
 8004f56:	464b      	mov	r3, r9
 8004f58:	4640      	mov	r0, r8
 8004f5a:	4649      	mov	r1, r9
 8004f5c:	f7fe ff7c 	bl	8003e58 <__aeabi_dmul>
 8004f60:	ec45 4b19 	vmov	d9, r4, r5
 8004f64:	4b69      	ldr	r3, [pc, #420]	; (800510c <__ieee754_pow+0x5bc>)
 8004f66:	2200      	movs	r2, #0
 8004f68:	4682      	mov	sl, r0
 8004f6a:	468b      	mov	fp, r1
 8004f6c:	f7fe fdbe 	bl	8003aec <__adddf3>
 8004f70:	ec53 2b19 	vmov	r2, r3, d9
 8004f74:	f7fe fdba 	bl	8003aec <__adddf3>
 8004f78:	9c00      	ldr	r4, [sp, #0]
 8004f7a:	460d      	mov	r5, r1
 8004f7c:	4622      	mov	r2, r4
 8004f7e:	462b      	mov	r3, r5
 8004f80:	4640      	mov	r0, r8
 8004f82:	4649      	mov	r1, r9
 8004f84:	f7fe ff68 	bl	8003e58 <__aeabi_dmul>
 8004f88:	4b60      	ldr	r3, [pc, #384]	; (800510c <__ieee754_pow+0x5bc>)
 8004f8a:	4680      	mov	r8, r0
 8004f8c:	4689      	mov	r9, r1
 8004f8e:	2200      	movs	r2, #0
 8004f90:	4620      	mov	r0, r4
 8004f92:	4629      	mov	r1, r5
 8004f94:	f7fe fda8 	bl	8003ae8 <__aeabi_dsub>
 8004f98:	4652      	mov	r2, sl
 8004f9a:	465b      	mov	r3, fp
 8004f9c:	f7fe fda4 	bl	8003ae8 <__aeabi_dsub>
 8004fa0:	4602      	mov	r2, r0
 8004fa2:	460b      	mov	r3, r1
 8004fa4:	ec51 0b19 	vmov	r0, r1, d9
 8004fa8:	f7fe fd9e 	bl	8003ae8 <__aeabi_dsub>
 8004fac:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004fb0:	f7fe ff52 	bl	8003e58 <__aeabi_dmul>
 8004fb4:	ec49 8b18 	vmov	d8, r8, r9
 8004fb8:	4622      	mov	r2, r4
 8004fba:	4680      	mov	r8, r0
 8004fbc:	4689      	mov	r9, r1
 8004fbe:	462b      	mov	r3, r5
 8004fc0:	ec51 0b1a 	vmov	r0, r1, d10
 8004fc4:	f7fe ff48 	bl	8003e58 <__aeabi_dmul>
 8004fc8:	4602      	mov	r2, r0
 8004fca:	460b      	mov	r3, r1
 8004fcc:	4640      	mov	r0, r8
 8004fce:	4649      	mov	r1, r9
 8004fd0:	f7fe fd8c 	bl	8003aec <__adddf3>
 8004fd4:	4682      	mov	sl, r0
 8004fd6:	468b      	mov	fp, r1
 8004fd8:	4652      	mov	r2, sl
 8004fda:	465b      	mov	r3, fp
 8004fdc:	ec51 0b18 	vmov	r0, r1, d8
 8004fe0:	f7fe fd84 	bl	8003aec <__adddf3>
 8004fe4:	9c00      	ldr	r4, [sp, #0]
 8004fe6:	a33e      	add	r3, pc, #248	; (adr r3, 80050e0 <__ieee754_pow+0x590>)
 8004fe8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fec:	4620      	mov	r0, r4
 8004fee:	460d      	mov	r5, r1
 8004ff0:	f7fe ff32 	bl	8003e58 <__aeabi_dmul>
 8004ff4:	ec53 2b18 	vmov	r2, r3, d8
 8004ff8:	4680      	mov	r8, r0
 8004ffa:	4689      	mov	r9, r1
 8004ffc:	4620      	mov	r0, r4
 8004ffe:	4629      	mov	r1, r5
 8005000:	f7fe fd72 	bl	8003ae8 <__aeabi_dsub>
 8005004:	4602      	mov	r2, r0
 8005006:	460b      	mov	r3, r1
 8005008:	4650      	mov	r0, sl
 800500a:	4659      	mov	r1, fp
 800500c:	f7fe fd6c 	bl	8003ae8 <__aeabi_dsub>
 8005010:	a335      	add	r3, pc, #212	; (adr r3, 80050e8 <__ieee754_pow+0x598>)
 8005012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005016:	f7fe ff1f 	bl	8003e58 <__aeabi_dmul>
 800501a:	ec49 8b19 	vmov	d9, r8, r9
 800501e:	a334      	add	r3, pc, #208	; (adr r3, 80050f0 <__ieee754_pow+0x5a0>)
 8005020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005024:	4680      	mov	r8, r0
 8005026:	4689      	mov	r9, r1
 8005028:	4620      	mov	r0, r4
 800502a:	4629      	mov	r1, r5
 800502c:	f7fe ff14 	bl	8003e58 <__aeabi_dmul>
 8005030:	4602      	mov	r2, r0
 8005032:	460b      	mov	r3, r1
 8005034:	4640      	mov	r0, r8
 8005036:	4649      	mov	r1, r9
 8005038:	f7fe fd58 	bl	8003aec <__adddf3>
 800503c:	ec53 2b1c 	vmov	r2, r3, d12
 8005040:	f7fe fd54 	bl	8003aec <__adddf3>
 8005044:	4682      	mov	sl, r0
 8005046:	9807      	ldr	r0, [sp, #28]
 8005048:	468b      	mov	fp, r1
 800504a:	f7fe fe9b 	bl	8003d84 <__aeabi_i2d>
 800504e:	4652      	mov	r2, sl
 8005050:	4680      	mov	r8, r0
 8005052:	4689      	mov	r9, r1
 8005054:	465b      	mov	r3, fp
 8005056:	ec51 0b19 	vmov	r0, r1, d9
 800505a:	f7fe fd47 	bl	8003aec <__adddf3>
 800505e:	ec53 2b1b 	vmov	r2, r3, d11
 8005062:	f7fe fd43 	bl	8003aec <__adddf3>
 8005066:	4642      	mov	r2, r8
 8005068:	464b      	mov	r3, r9
 800506a:	f7fe fd3f 	bl	8003aec <__adddf3>
 800506e:	9c00      	ldr	r4, [sp, #0]
 8005070:	4642      	mov	r2, r8
 8005072:	464b      	mov	r3, r9
 8005074:	4620      	mov	r0, r4
 8005076:	460d      	mov	r5, r1
 8005078:	f7fe fd36 	bl	8003ae8 <__aeabi_dsub>
 800507c:	ec53 2b1b 	vmov	r2, r3, d11
 8005080:	f7fe fd32 	bl	8003ae8 <__aeabi_dsub>
 8005084:	ec53 2b19 	vmov	r2, r3, d9
 8005088:	f7fe fd2e 	bl	8003ae8 <__aeabi_dsub>
 800508c:	4602      	mov	r2, r0
 800508e:	460b      	mov	r3, r1
 8005090:	4650      	mov	r0, sl
 8005092:	4659      	mov	r1, fp
 8005094:	f7fe fd28 	bl	8003ae8 <__aeabi_dsub>
 8005098:	4682      	mov	sl, r0
 800509a:	468b      	mov	fp, r1
 800509c:	e038      	b.n	8005110 <__ieee754_pow+0x5c0>
 800509e:	bf00      	nop
	...
 80050ac:	3ff00000 	.word	0x3ff00000
 80050b0:	4a454eef 	.word	0x4a454eef
 80050b4:	3fca7e28 	.word	0x3fca7e28
 80050b8:	93c9db65 	.word	0x93c9db65
 80050bc:	3fcd864a 	.word	0x3fcd864a
 80050c0:	a91d4101 	.word	0xa91d4101
 80050c4:	3fd17460 	.word	0x3fd17460
 80050c8:	518f264d 	.word	0x518f264d
 80050cc:	3fd55555 	.word	0x3fd55555
 80050d0:	db6fabff 	.word	0xdb6fabff
 80050d4:	3fdb6db6 	.word	0x3fdb6db6
 80050d8:	33333303 	.word	0x33333303
 80050dc:	3fe33333 	.word	0x3fe33333
 80050e0:	e0000000 	.word	0xe0000000
 80050e4:	3feec709 	.word	0x3feec709
 80050e8:	dc3a03fd 	.word	0xdc3a03fd
 80050ec:	3feec709 	.word	0x3feec709
 80050f0:	145b01f5 	.word	0x145b01f5
 80050f4:	be3e2fe0 	.word	0xbe3e2fe0
 80050f8:	7ff00000 	.word	0x7ff00000
 80050fc:	43400000 	.word	0x43400000
 8005100:	0003988e 	.word	0x0003988e
 8005104:	000bb679 	.word	0x000bb679
 8005108:	3ff00000 	.word	0x3ff00000
 800510c:	40080000 	.word	0x40080000
 8005110:	9b03      	ldr	r3, [sp, #12]
 8005112:	9a06      	ldr	r2, [sp, #24]
 8005114:	3b01      	subs	r3, #1
 8005116:	4313      	orrs	r3, r2
 8005118:	f040 8178 	bne.w	800540c <__ieee754_pow+0x8bc>
 800511c:	ed9f 7bc4 	vldr	d7, [pc, #784]	; 8005430 <__ieee754_pow+0x8e0>
 8005120:	eeb0 9a47 	vmov.f32	s18, s14
 8005124:	eef0 9a67 	vmov.f32	s19, s15
 8005128:	2300      	movs	r3, #0
 800512a:	e9cd 6700 	strd	r6, r7, [sp]
 800512e:	9300      	str	r3, [sp, #0]
 8005130:	e9dd 8900 	ldrd	r8, r9, [sp]
 8005134:	4630      	mov	r0, r6
 8005136:	4642      	mov	r2, r8
 8005138:	4639      	mov	r1, r7
 800513a:	464b      	mov	r3, r9
 800513c:	f7fe fcd4 	bl	8003ae8 <__aeabi_dsub>
 8005140:	4622      	mov	r2, r4
 8005142:	462b      	mov	r3, r5
 8005144:	f7fe fe88 	bl	8003e58 <__aeabi_dmul>
 8005148:	4632      	mov	r2, r6
 800514a:	463b      	mov	r3, r7
 800514c:	4606      	mov	r6, r0
 800514e:	460f      	mov	r7, r1
 8005150:	4650      	mov	r0, sl
 8005152:	4659      	mov	r1, fp
 8005154:	f7fe fe80 	bl	8003e58 <__aeabi_dmul>
 8005158:	4602      	mov	r2, r0
 800515a:	460b      	mov	r3, r1
 800515c:	4630      	mov	r0, r6
 800515e:	4639      	mov	r1, r7
 8005160:	f7fe fcc4 	bl	8003aec <__adddf3>
 8005164:	4642      	mov	r2, r8
 8005166:	4682      	mov	sl, r0
 8005168:	468b      	mov	fp, r1
 800516a:	464b      	mov	r3, r9
 800516c:	4620      	mov	r0, r4
 800516e:	4629      	mov	r1, r5
 8005170:	f7fe fe72 	bl	8003e58 <__aeabi_dmul>
 8005174:	4606      	mov	r6, r0
 8005176:	460f      	mov	r7, r1
 8005178:	463b      	mov	r3, r7
 800517a:	4650      	mov	r0, sl
 800517c:	4659      	mov	r1, fp
 800517e:	4632      	mov	r2, r6
 8005180:	f7fe fcb4 	bl	8003aec <__adddf3>
 8005184:	4bc4      	ldr	r3, [pc, #784]	; (8005498 <__ieee754_pow+0x948>)
 8005186:	4299      	cmp	r1, r3
 8005188:	4604      	mov	r4, r0
 800518a:	460d      	mov	r5, r1
 800518c:	4688      	mov	r8, r1
 800518e:	f340 8117 	ble.w	80053c0 <__ieee754_pow+0x870>
 8005192:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8005196:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800519a:	4303      	orrs	r3, r0
 800519c:	f040 822a 	bne.w	80055f4 <__ieee754_pow+0xaa4>
 80051a0:	a3a5      	add	r3, pc, #660	; (adr r3, 8005438 <__ieee754_pow+0x8e8>)
 80051a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051a6:	4650      	mov	r0, sl
 80051a8:	4659      	mov	r1, fp
 80051aa:	f7fe fc9f 	bl	8003aec <__adddf3>
 80051ae:	4632      	mov	r2, r6
 80051b0:	ec41 0b18 	vmov	d8, r0, r1
 80051b4:	463b      	mov	r3, r7
 80051b6:	4620      	mov	r0, r4
 80051b8:	4629      	mov	r1, r5
 80051ba:	f7fe fc95 	bl	8003ae8 <__aeabi_dsub>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	ec51 0b18 	vmov	r0, r1, d8
 80051c6:	f7ff f8d7 	bl	8004378 <__aeabi_dcmpgt>
 80051ca:	2800      	cmp	r0, #0
 80051cc:	f040 8212 	bne.w	80055f4 <__ieee754_pow+0xaa4>
 80051d0:	f3c8 530a 	ubfx	r3, r8, #20, #11
 80051d4:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80051d8:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80051dc:	fa42 f303 	asr.w	r3, r2, r3
 80051e0:	4443      	add	r3, r8
 80051e2:	49ae      	ldr	r1, [pc, #696]	; (800549c <__ieee754_pow+0x94c>)
 80051e4:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80051e8:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80051ec:	fa41 fc02 	asr.w	ip, r1, r2
 80051f0:	f3c3 0513 	ubfx	r5, r3, #0, #20
 80051f4:	ea23 010c 	bic.w	r1, r3, ip
 80051f8:	f1c2 0414 	rsb	r4, r2, #20
 80051fc:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 8005200:	f1b8 0f00 	cmp.w	r8, #0
 8005204:	460b      	mov	r3, r1
 8005206:	fa45 f104 	asr.w	r1, r5, r4
 800520a:	9103      	str	r1, [sp, #12]
 800520c:	f04f 0000 	mov.w	r0, #0
 8005210:	bfb8      	it	lt
 8005212:	4249      	neglt	r1, r1
 8005214:	4602      	mov	r2, r0
 8005216:	bfb8      	it	lt
 8005218:	9103      	strlt	r1, [sp, #12]
 800521a:	4630      	mov	r0, r6
 800521c:	4639      	mov	r1, r7
 800521e:	f7fe fc63 	bl	8003ae8 <__aeabi_dsub>
 8005222:	4606      	mov	r6, r0
 8005224:	460f      	mov	r7, r1
 8005226:	463b      	mov	r3, r7
 8005228:	4650      	mov	r0, sl
 800522a:	4659      	mov	r1, fp
 800522c:	4632      	mov	r2, r6
 800522e:	f7fe fc5d 	bl	8003aec <__adddf3>
 8005232:	9b03      	ldr	r3, [sp, #12]
 8005234:	051b      	lsls	r3, r3, #20
 8005236:	9300      	str	r3, [sp, #0]
 8005238:	460d      	mov	r5, r1
 800523a:	2400      	movs	r4, #0
 800523c:	a380      	add	r3, pc, #512	; (adr r3, 8005440 <__ieee754_pow+0x8f0>)
 800523e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005242:	4620      	mov	r0, r4
 8005244:	4629      	mov	r1, r5
 8005246:	f7fe fe07 	bl	8003e58 <__aeabi_dmul>
 800524a:	4632      	mov	r2, r6
 800524c:	4680      	mov	r8, r0
 800524e:	4689      	mov	r9, r1
 8005250:	463b      	mov	r3, r7
 8005252:	4620      	mov	r0, r4
 8005254:	4629      	mov	r1, r5
 8005256:	f7fe fc47 	bl	8003ae8 <__aeabi_dsub>
 800525a:	4602      	mov	r2, r0
 800525c:	460b      	mov	r3, r1
 800525e:	4650      	mov	r0, sl
 8005260:	4659      	mov	r1, fp
 8005262:	f7fe fc41 	bl	8003ae8 <__aeabi_dsub>
 8005266:	a378      	add	r3, pc, #480	; (adr r3, 8005448 <__ieee754_pow+0x8f8>)
 8005268:	e9d3 2300 	ldrd	r2, r3, [r3]
 800526c:	f7fe fdf4 	bl	8003e58 <__aeabi_dmul>
 8005270:	a377      	add	r3, pc, #476	; (adr r3, 8005450 <__ieee754_pow+0x900>)
 8005272:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005276:	4606      	mov	r6, r0
 8005278:	460f      	mov	r7, r1
 800527a:	4620      	mov	r0, r4
 800527c:	4629      	mov	r1, r5
 800527e:	f7fe fdeb 	bl	8003e58 <__aeabi_dmul>
 8005282:	4602      	mov	r2, r0
 8005284:	460b      	mov	r3, r1
 8005286:	4630      	mov	r0, r6
 8005288:	4639      	mov	r1, r7
 800528a:	f7fe fc2f 	bl	8003aec <__adddf3>
 800528e:	4606      	mov	r6, r0
 8005290:	460f      	mov	r7, r1
 8005292:	4632      	mov	r2, r6
 8005294:	463b      	mov	r3, r7
 8005296:	4640      	mov	r0, r8
 8005298:	4649      	mov	r1, r9
 800529a:	f7fe fc27 	bl	8003aec <__adddf3>
 800529e:	4642      	mov	r2, r8
 80052a0:	464b      	mov	r3, r9
 80052a2:	4604      	mov	r4, r0
 80052a4:	460d      	mov	r5, r1
 80052a6:	f7fe fc1f 	bl	8003ae8 <__aeabi_dsub>
 80052aa:	4602      	mov	r2, r0
 80052ac:	460b      	mov	r3, r1
 80052ae:	4630      	mov	r0, r6
 80052b0:	4639      	mov	r1, r7
 80052b2:	f7fe fc19 	bl	8003ae8 <__aeabi_dsub>
 80052b6:	4622      	mov	r2, r4
 80052b8:	4682      	mov	sl, r0
 80052ba:	468b      	mov	fp, r1
 80052bc:	462b      	mov	r3, r5
 80052be:	4620      	mov	r0, r4
 80052c0:	4629      	mov	r1, r5
 80052c2:	f7fe fdc9 	bl	8003e58 <__aeabi_dmul>
 80052c6:	a364      	add	r3, pc, #400	; (adr r3, 8005458 <__ieee754_pow+0x908>)
 80052c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052cc:	4606      	mov	r6, r0
 80052ce:	460f      	mov	r7, r1
 80052d0:	f7fe fdc2 	bl	8003e58 <__aeabi_dmul>
 80052d4:	a362      	add	r3, pc, #392	; (adr r3, 8005460 <__ieee754_pow+0x910>)
 80052d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052da:	f7fe fc05 	bl	8003ae8 <__aeabi_dsub>
 80052de:	4632      	mov	r2, r6
 80052e0:	463b      	mov	r3, r7
 80052e2:	f7fe fdb9 	bl	8003e58 <__aeabi_dmul>
 80052e6:	a360      	add	r3, pc, #384	; (adr r3, 8005468 <__ieee754_pow+0x918>)
 80052e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052ec:	f7fe fbfe 	bl	8003aec <__adddf3>
 80052f0:	4632      	mov	r2, r6
 80052f2:	463b      	mov	r3, r7
 80052f4:	f7fe fdb0 	bl	8003e58 <__aeabi_dmul>
 80052f8:	a35d      	add	r3, pc, #372	; (adr r3, 8005470 <__ieee754_pow+0x920>)
 80052fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80052fe:	f7fe fbf3 	bl	8003ae8 <__aeabi_dsub>
 8005302:	4632      	mov	r2, r6
 8005304:	463b      	mov	r3, r7
 8005306:	f7fe fda7 	bl	8003e58 <__aeabi_dmul>
 800530a:	a35b      	add	r3, pc, #364	; (adr r3, 8005478 <__ieee754_pow+0x928>)
 800530c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005310:	f7fe fbec 	bl	8003aec <__adddf3>
 8005314:	4632      	mov	r2, r6
 8005316:	463b      	mov	r3, r7
 8005318:	f7fe fd9e 	bl	8003e58 <__aeabi_dmul>
 800531c:	4602      	mov	r2, r0
 800531e:	460b      	mov	r3, r1
 8005320:	4620      	mov	r0, r4
 8005322:	4629      	mov	r1, r5
 8005324:	f7fe fbe0 	bl	8003ae8 <__aeabi_dsub>
 8005328:	4606      	mov	r6, r0
 800532a:	460f      	mov	r7, r1
 800532c:	4632      	mov	r2, r6
 800532e:	463b      	mov	r3, r7
 8005330:	4620      	mov	r0, r4
 8005332:	4629      	mov	r1, r5
 8005334:	f7fe fd90 	bl	8003e58 <__aeabi_dmul>
 8005338:	2200      	movs	r2, #0
 800533a:	4680      	mov	r8, r0
 800533c:	4689      	mov	r9, r1
 800533e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005342:	4630      	mov	r0, r6
 8005344:	4639      	mov	r1, r7
 8005346:	f7fe fbcf 	bl	8003ae8 <__aeabi_dsub>
 800534a:	4602      	mov	r2, r0
 800534c:	460b      	mov	r3, r1
 800534e:	4640      	mov	r0, r8
 8005350:	4649      	mov	r1, r9
 8005352:	f7fe feab 	bl	80040ac <__aeabi_ddiv>
 8005356:	4652      	mov	r2, sl
 8005358:	4606      	mov	r6, r0
 800535a:	460f      	mov	r7, r1
 800535c:	465b      	mov	r3, fp
 800535e:	4620      	mov	r0, r4
 8005360:	4629      	mov	r1, r5
 8005362:	f7fe fd79 	bl	8003e58 <__aeabi_dmul>
 8005366:	4652      	mov	r2, sl
 8005368:	465b      	mov	r3, fp
 800536a:	f7fe fbbf 	bl	8003aec <__adddf3>
 800536e:	4602      	mov	r2, r0
 8005370:	460b      	mov	r3, r1
 8005372:	4630      	mov	r0, r6
 8005374:	4639      	mov	r1, r7
 8005376:	f7fe fbb7 	bl	8003ae8 <__aeabi_dsub>
 800537a:	4622      	mov	r2, r4
 800537c:	462b      	mov	r3, r5
 800537e:	f7fe fbb3 	bl	8003ae8 <__aeabi_dsub>
 8005382:	4602      	mov	r2, r0
 8005384:	460b      	mov	r3, r1
 8005386:	2000      	movs	r0, #0
 8005388:	4945      	ldr	r1, [pc, #276]	; (80054a0 <__ieee754_pow+0x950>)
 800538a:	f7fe fbad 	bl	8003ae8 <__aeabi_dsub>
 800538e:	460b      	mov	r3, r1
 8005390:	9900      	ldr	r1, [sp, #0]
 8005392:	4419      	add	r1, r3
 8005394:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8005398:	4602      	mov	r2, r0
 800539a:	f2c0 8169 	blt.w	8005670 <__ieee754_pow+0xb20>
 800539e:	4610      	mov	r0, r2
 80053a0:	ec53 2b19 	vmov	r2, r3, d9
 80053a4:	f7fe fd58 	bl	8003e58 <__aeabi_dmul>
 80053a8:	e9cd 0100 	strd	r0, r1, [sp]
 80053ac:	e41e      	b.n	8004bec <__ieee754_pow+0x9c>
 80053ae:	f1bb 0f00 	cmp.w	fp, #0
 80053b2:	f6ff ac95 	blt.w	8004ce0 <__ieee754_pow+0x190>
 80053b6:	ed9f 7b32 	vldr	d7, [pc, #200]	; 8005480 <__ieee754_pow+0x930>
 80053ba:	ed8d 7b00 	vstr	d7, [sp]
 80053be:	e415      	b.n	8004bec <__ieee754_pow+0x9c>
 80053c0:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80054a8 <__ieee754_pow+0x958>
 80053c4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80053c8:	4563      	cmp	r3, ip
 80053ca:	f340 810b 	ble.w	80055e4 <__ieee754_pow+0xa94>
 80053ce:	4b35      	ldr	r3, [pc, #212]	; (80054a4 <__ieee754_pow+0x954>)
 80053d0:	440b      	add	r3, r1
 80053d2:	4303      	orrs	r3, r0
 80053d4:	d10a      	bne.n	80053ec <__ieee754_pow+0x89c>
 80053d6:	4632      	mov	r2, r6
 80053d8:	463b      	mov	r3, r7
 80053da:	f7fe fb85 	bl	8003ae8 <__aeabi_dsub>
 80053de:	4652      	mov	r2, sl
 80053e0:	465b      	mov	r3, fp
 80053e2:	f7fe ffbf 	bl	8004364 <__aeabi_dcmpge>
 80053e6:	2800      	cmp	r0, #0
 80053e8:	f43f aef2 	beq.w	80051d0 <__ieee754_pow+0x680>
 80053ec:	a326      	add	r3, pc, #152	; (adr r3, 8005488 <__ieee754_pow+0x938>)
 80053ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f2:	ec51 0b19 	vmov	r0, r1, d9
 80053f6:	f7fe fd2f 	bl	8003e58 <__aeabi_dmul>
 80053fa:	a323      	add	r3, pc, #140	; (adr r3, 8005488 <__ieee754_pow+0x938>)
 80053fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005400:	f7fe fd2a 	bl	8003e58 <__aeabi_dmul>
 8005404:	e9cd 0100 	strd	r0, r1, [sp]
 8005408:	f7ff bbf0 	b.w	8004bec <__ieee754_pow+0x9c>
 800540c:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8005490 <__ieee754_pow+0x940>
 8005410:	eeb0 9a47 	vmov.f32	s18, s14
 8005414:	eef0 9a67 	vmov.f32	s19, s15
 8005418:	e686      	b.n	8005128 <__ieee754_pow+0x5d8>
 800541a:	f1bb 0f00 	cmp.w	fp, #0
 800541e:	daca      	bge.n	80053b6 <__ieee754_pow+0x866>
 8005420:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8005424:	9600      	str	r6, [sp, #0]
 8005426:	9301      	str	r3, [sp, #4]
 8005428:	f7ff bbe0 	b.w	8004bec <__ieee754_pow+0x9c>
 800542c:	f3af 8000 	nop.w
 8005430:	00000000 	.word	0x00000000
 8005434:	bff00000 	.word	0xbff00000
 8005438:	652b82fe 	.word	0x652b82fe
 800543c:	3c971547 	.word	0x3c971547
 8005440:	00000000 	.word	0x00000000
 8005444:	3fe62e43 	.word	0x3fe62e43
 8005448:	fefa39ef 	.word	0xfefa39ef
 800544c:	3fe62e42 	.word	0x3fe62e42
 8005450:	0ca86c39 	.word	0x0ca86c39
 8005454:	be205c61 	.word	0xbe205c61
 8005458:	72bea4d0 	.word	0x72bea4d0
 800545c:	3e663769 	.word	0x3e663769
 8005460:	c5d26bf1 	.word	0xc5d26bf1
 8005464:	3ebbbd41 	.word	0x3ebbbd41
 8005468:	af25de2c 	.word	0xaf25de2c
 800546c:	3f11566a 	.word	0x3f11566a
 8005470:	16bebd93 	.word	0x16bebd93
 8005474:	3f66c16c 	.word	0x3f66c16c
 8005478:	5555553e 	.word	0x5555553e
 800547c:	3fc55555 	.word	0x3fc55555
	...
 8005488:	c2f8f359 	.word	0xc2f8f359
 800548c:	01a56e1f 	.word	0x01a56e1f
 8005490:	00000000 	.word	0x00000000
 8005494:	3ff00000 	.word	0x3ff00000
 8005498:	408fffff 	.word	0x408fffff
 800549c:	000fffff 	.word	0x000fffff
 80054a0:	3ff00000 	.word	0x3ff00000
 80054a4:	3f6f3400 	.word	0x3f6f3400
 80054a8:	4090cbff 	.word	0x4090cbff
 80054ac:	4598      	cmp	r8, r3
 80054ae:	f6ff af7e 	blt.w	80053ae <__ieee754_pow+0x85e>
 80054b2:	4b91      	ldr	r3, [pc, #580]	; (80056f8 <__ieee754_pow+0xba8>)
 80054b4:	4598      	cmp	r8, r3
 80054b6:	f73f ac0f 	bgt.w	8004cd8 <__ieee754_pow+0x188>
 80054ba:	4b8f      	ldr	r3, [pc, #572]	; (80056f8 <__ieee754_pow+0xba8>)
 80054bc:	2200      	movs	r2, #0
 80054be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80054c2:	f7fe fb11 	bl	8003ae8 <__aeabi_dsub>
 80054c6:	a378      	add	r3, pc, #480	; (adr r3, 80056a8 <__ieee754_pow+0xb58>)
 80054c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054cc:	4604      	mov	r4, r0
 80054ce:	460d      	mov	r5, r1
 80054d0:	f7fe fcc2 	bl	8003e58 <__aeabi_dmul>
 80054d4:	a376      	add	r3, pc, #472	; (adr r3, 80056b0 <__ieee754_pow+0xb60>)
 80054d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054da:	4682      	mov	sl, r0
 80054dc:	468b      	mov	fp, r1
 80054de:	4620      	mov	r0, r4
 80054e0:	4629      	mov	r1, r5
 80054e2:	f7fe fcb9 	bl	8003e58 <__aeabi_dmul>
 80054e6:	4b85      	ldr	r3, [pc, #532]	; (80056fc <__ieee754_pow+0xbac>)
 80054e8:	4680      	mov	r8, r0
 80054ea:	4689      	mov	r9, r1
 80054ec:	2200      	movs	r2, #0
 80054ee:	4620      	mov	r0, r4
 80054f0:	4629      	mov	r1, r5
 80054f2:	f7fe fcb1 	bl	8003e58 <__aeabi_dmul>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	a16f      	add	r1, pc, #444	; (adr r1, 80056b8 <__ieee754_pow+0xb68>)
 80054fc:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005500:	f7fe faf2 	bl	8003ae8 <__aeabi_dsub>
 8005504:	4622      	mov	r2, r4
 8005506:	462b      	mov	r3, r5
 8005508:	f7fe fca6 	bl	8003e58 <__aeabi_dmul>
 800550c:	4602      	mov	r2, r0
 800550e:	460b      	mov	r3, r1
 8005510:	2000      	movs	r0, #0
 8005512:	497b      	ldr	r1, [pc, #492]	; (8005700 <__ieee754_pow+0xbb0>)
 8005514:	f7fe fae8 	bl	8003ae8 <__aeabi_dsub>
 8005518:	4622      	mov	r2, r4
 800551a:	462b      	mov	r3, r5
 800551c:	4604      	mov	r4, r0
 800551e:	460d      	mov	r5, r1
 8005520:	4610      	mov	r0, r2
 8005522:	4619      	mov	r1, r3
 8005524:	f7fe fc98 	bl	8003e58 <__aeabi_dmul>
 8005528:	4602      	mov	r2, r0
 800552a:	460b      	mov	r3, r1
 800552c:	4620      	mov	r0, r4
 800552e:	4629      	mov	r1, r5
 8005530:	f7fe fc92 	bl	8003e58 <__aeabi_dmul>
 8005534:	a362      	add	r3, pc, #392	; (adr r3, 80056c0 <__ieee754_pow+0xb70>)
 8005536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800553a:	f7fe fc8d 	bl	8003e58 <__aeabi_dmul>
 800553e:	4602      	mov	r2, r0
 8005540:	460b      	mov	r3, r1
 8005542:	4640      	mov	r0, r8
 8005544:	4649      	mov	r1, r9
 8005546:	f7fe facf 	bl	8003ae8 <__aeabi_dsub>
 800554a:	4680      	mov	r8, r0
 800554c:	4689      	mov	r9, r1
 800554e:	4650      	mov	r0, sl
 8005550:	4659      	mov	r1, fp
 8005552:	4642      	mov	r2, r8
 8005554:	464b      	mov	r3, r9
 8005556:	f7fe fac9 	bl	8003aec <__adddf3>
 800555a:	2400      	movs	r4, #0
 800555c:	4652      	mov	r2, sl
 800555e:	465b      	mov	r3, fp
 8005560:	4620      	mov	r0, r4
 8005562:	460d      	mov	r5, r1
 8005564:	f7fe fac0 	bl	8003ae8 <__aeabi_dsub>
 8005568:	4602      	mov	r2, r0
 800556a:	460b      	mov	r3, r1
 800556c:	4640      	mov	r0, r8
 800556e:	4649      	mov	r1, r9
 8005570:	f7fe faba 	bl	8003ae8 <__aeabi_dsub>
 8005574:	4682      	mov	sl, r0
 8005576:	468b      	mov	fp, r1
 8005578:	e5ca      	b.n	8005110 <__ieee754_pow+0x5c0>
 800557a:	ed9f 7b53 	vldr	d7, [pc, #332]	; 80056c8 <__ieee754_pow+0xb78>
 800557e:	eeb0 ba47 	vmov.f32	s22, s14
 8005582:	eef0 ba67 	vmov.f32	s23, s15
 8005586:	eeb0 ca47 	vmov.f32	s24, s14
 800558a:	eef0 ca67 	vmov.f32	s25, s15
 800558e:	ed9f 7b50 	vldr	d7, [pc, #320]	; 80056d0 <__ieee754_pow+0xb80>
 8005592:	f04f 0900 	mov.w	r9, #0
 8005596:	ec54 3b17 	vmov	r3, r4, d7
 800559a:	e41d      	b.n	8004dd8 <__ieee754_pow+0x288>
 800559c:	2000      	movs	r0, #0
 800559e:	f7ff bbf3 	b.w	8004d88 <__ieee754_pow+0x238>
 80055a2:	4955      	ldr	r1, [pc, #340]	; (80056f8 <__ieee754_pow+0xba8>)
 80055a4:	4622      	mov	r2, r4
 80055a6:	462b      	mov	r3, r5
 80055a8:	2000      	movs	r0, #0
 80055aa:	f7fe fd7f 	bl	80040ac <__aeabi_ddiv>
 80055ae:	e9cd 0100 	strd	r0, r1, [sp]
 80055b2:	f7ff bb1b 	b.w	8004bec <__ieee754_pow+0x9c>
 80055b6:	4622      	mov	r2, r4
 80055b8:	462b      	mov	r3, r5
 80055ba:	4620      	mov	r0, r4
 80055bc:	4629      	mov	r1, r5
 80055be:	f7fe fc4b 	bl	8003e58 <__aeabi_dmul>
 80055c2:	e9cd 0100 	strd	r0, r1, [sp]
 80055c6:	f7ff bb11 	b.w	8004bec <__ieee754_pow+0x9c>
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d142      	bne.n	8005654 <__ieee754_pow+0xb04>
 80055ce:	f1c1 0114 	rsb	r1, r1, #20
 80055d2:	fa4a f001 	asr.w	r0, sl, r1
 80055d6:	fa00 f101 	lsl.w	r1, r0, r1
 80055da:	4551      	cmp	r1, sl
 80055dc:	d05a      	beq.n	8005694 <__ieee754_pow+0xb44>
 80055de:	9303      	str	r3, [sp, #12]
 80055e0:	f7ff bae0 	b.w	8004ba4 <__ieee754_pow+0x54>
 80055e4:	4a46      	ldr	r2, [pc, #280]	; (8005700 <__ieee754_pow+0xbb0>)
 80055e6:	4293      	cmp	r3, r2
 80055e8:	dc5b      	bgt.n	80056a2 <__ieee754_pow+0xb52>
 80055ea:	e9dd 1200 	ldrd	r1, r2, [sp]
 80055ee:	9100      	str	r1, [sp, #0]
 80055f0:	9103      	str	r1, [sp, #12]
 80055f2:	e622      	b.n	800523a <__ieee754_pow+0x6ea>
 80055f4:	a338      	add	r3, pc, #224	; (adr r3, 80056d8 <__ieee754_pow+0xb88>)
 80055f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fa:	ec51 0b19 	vmov	r0, r1, d9
 80055fe:	f7fe fc2b 	bl	8003e58 <__aeabi_dmul>
 8005602:	a335      	add	r3, pc, #212	; (adr r3, 80056d8 <__ieee754_pow+0xb88>)
 8005604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005608:	f7fe fc26 	bl	8003e58 <__aeabi_dmul>
 800560c:	e9cd 0100 	strd	r0, r1, [sp]
 8005610:	f7ff baec 	b.w	8004bec <__ieee754_pow+0x9c>
 8005614:	9b03      	ldr	r3, [sp, #12]
 8005616:	2b01      	cmp	r3, #1
 8005618:	f47f aae8 	bne.w	8004bec <__ieee754_pow+0x9c>
 800561c:	e9dd 2100 	ldrd	r2, r1, [sp]
 8005620:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005624:	e9cd 2300 	strd	r2, r3, [sp]
 8005628:	f7ff bae0 	b.w	8004bec <__ieee754_pow+0x9c>
 800562c:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 80056e0 <__ieee754_pow+0xb90>
 8005630:	eeb0 ba47 	vmov.f32	s22, s14
 8005634:	eef0 ba67 	vmov.f32	s23, s15
 8005638:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 80056e8 <__ieee754_pow+0xb98>
 800563c:	eeb0 ca47 	vmov.f32	s24, s14
 8005640:	eef0 ca67 	vmov.f32	s25, s15
 8005644:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 80056f0 <__ieee754_pow+0xba0>
 8005648:	f44f 2980 	mov.w	r9, #262144	; 0x40000
 800564c:	ec54 3b17 	vmov	r3, r4, d7
 8005650:	f7ff bbc2 	b.w	8004dd8 <__ieee754_pow+0x288>
 8005654:	ec45 4b10 	vmov	d0, r4, r5
 8005658:	9203      	str	r2, [sp, #12]
 800565a:	f000 fc1b 	bl	8005e94 <fabs>
 800565e:	9a03      	ldr	r2, [sp, #12]
 8005660:	ed8d 0b00 	vstr	d0, [sp]
 8005664:	2a00      	cmp	r2, #0
 8005666:	f47f ab61 	bne.w	8004d2c <__ieee754_pow+0x1dc>
 800566a:	9203      	str	r2, [sp, #12]
 800566c:	f7ff baf5 	b.w	8004c5a <__ieee754_pow+0x10a>
 8005670:	9803      	ldr	r0, [sp, #12]
 8005672:	ec43 2b10 	vmov	d0, r2, r3
 8005676:	f000 fcbf 	bl	8005ff8 <scalbn>
 800567a:	ec51 0b10 	vmov	r0, r1, d0
 800567e:	e68f      	b.n	80053a0 <__ieee754_pow+0x850>
 8005680:	f000 0001 	and.w	r0, r0, #1
 8005684:	f1c0 0102 	rsb	r1, r0, #2
 8005688:	9103      	str	r1, [sp, #12]
 800568a:	2b00      	cmp	r3, #0
 800568c:	f43f aa8a 	beq.w	8004ba4 <__ieee754_pow+0x54>
 8005690:	f7ff bada 	b.w	8004c48 <__ieee754_pow+0xf8>
 8005694:	f000 0001 	and.w	r0, r0, #1
 8005698:	f1c0 0302 	rsb	r3, r0, #2
 800569c:	9303      	str	r3, [sp, #12]
 800569e:	f7ff ba81 	b.w	8004ba4 <__ieee754_pow+0x54>
 80056a2:	151b      	asrs	r3, r3, #20
 80056a4:	e596      	b.n	80051d4 <__ieee754_pow+0x684>
 80056a6:	bf00      	nop
 80056a8:	60000000 	.word	0x60000000
 80056ac:	3ff71547 	.word	0x3ff71547
 80056b0:	f85ddf44 	.word	0xf85ddf44
 80056b4:	3e54ae0b 	.word	0x3e54ae0b
 80056b8:	55555555 	.word	0x55555555
 80056bc:	3fd55555 	.word	0x3fd55555
 80056c0:	652b82fe 	.word	0x652b82fe
 80056c4:	3ff71547 	.word	0x3ff71547
	...
 80056d4:	3ff00000 	.word	0x3ff00000
 80056d8:	8800759c 	.word	0x8800759c
 80056dc:	7e37e43c 	.word	0x7e37e43c
 80056e0:	40000000 	.word	0x40000000
 80056e4:	3fe2b803 	.word	0x3fe2b803
 80056e8:	43cfd006 	.word	0x43cfd006
 80056ec:	3e4cfdeb 	.word	0x3e4cfdeb
 80056f0:	00000000 	.word	0x00000000
 80056f4:	3ff80000 	.word	0x3ff80000
 80056f8:	3ff00000 	.word	0x3ff00000
 80056fc:	3fd00000 	.word	0x3fd00000
 8005700:	3fe00000 	.word	0x3fe00000

08005704 <__ieee754_sqrt>:
 8005704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005708:	4a5f      	ldr	r2, [pc, #380]	; (8005888 <__ieee754_sqrt+0x184>)
 800570a:	ec57 6b10 	vmov	r6, r7, d0
 800570e:	43ba      	bics	r2, r7
 8005710:	f000 8098 	beq.w	8005844 <__ieee754_sqrt+0x140>
 8005714:	2f00      	cmp	r7, #0
 8005716:	ee10 4a10 	vmov	r4, s0
 800571a:	463b      	mov	r3, r7
 800571c:	dd4e      	ble.n	80057bc <__ieee754_sqrt+0xb8>
 800571e:	1539      	asrs	r1, r7, #20
 8005720:	d05b      	beq.n	80057da <__ieee754_sqrt+0xd6>
 8005722:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005726:	07ca      	lsls	r2, r1, #31
 8005728:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800572c:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
 8005730:	d403      	bmi.n	800573a <__ieee754_sqrt+0x36>
 8005732:	005b      	lsls	r3, r3, #1
 8005734:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005738:	0064      	lsls	r4, r4, #1
 800573a:	0fe2      	lsrs	r2, r4, #31
 800573c:	f04f 0c00 	mov.w	ip, #0
 8005740:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 8005744:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 8005748:	0064      	lsls	r4, r4, #1
 800574a:	4666      	mov	r6, ip
 800574c:	2516      	movs	r5, #22
 800574e:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8005752:	18b1      	adds	r1, r6, r2
 8005754:	4299      	cmp	r1, r3
 8005756:	dc02      	bgt.n	800575e <__ieee754_sqrt+0x5a>
 8005758:	1a5b      	subs	r3, r3, r1
 800575a:	188e      	adds	r6, r1, r2
 800575c:	4494      	add	ip, r2
 800575e:	005b      	lsls	r3, r3, #1
 8005760:	3d01      	subs	r5, #1
 8005762:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8005766:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800576a:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800576e:	d1f0      	bne.n	8005752 <__ieee754_sqrt+0x4e>
 8005770:	462f      	mov	r7, r5
 8005772:	2020      	movs	r0, #32
 8005774:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005778:	e009      	b.n	800578e <__ieee754_sqrt+0x8a>
 800577a:	d03e      	beq.n	80057fa <__ieee754_sqrt+0xf6>
 800577c:	0fe1      	lsrs	r1, r4, #31
 800577e:	3801      	subs	r0, #1
 8005780:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8005784:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8005788:	ea4f 0444 	mov.w	r4, r4, lsl #1
 800578c:	d03e      	beq.n	800580c <__ieee754_sqrt+0x108>
 800578e:	42b3      	cmp	r3, r6
 8005790:	eb02 0105 	add.w	r1, r2, r5
 8005794:	ddf1      	ble.n	800577a <__ieee754_sqrt+0x76>
 8005796:	2900      	cmp	r1, #0
 8005798:	eb01 0502 	add.w	r5, r1, r2
 800579c:	db09      	blt.n	80057b2 <__ieee754_sqrt+0xae>
 800579e:	46b0      	mov	r8, r6
 80057a0:	1b9b      	subs	r3, r3, r6
 80057a2:	42a1      	cmp	r1, r4
 80057a4:	bf88      	it	hi
 80057a6:	f103 33ff 	addhi.w	r3, r3, #4294967295
 80057aa:	1a64      	subs	r4, r4, r1
 80057ac:	4417      	add	r7, r2
 80057ae:	4646      	mov	r6, r8
 80057b0:	e7e4      	b.n	800577c <__ieee754_sqrt+0x78>
 80057b2:	2d00      	cmp	r5, #0
 80057b4:	dbf3      	blt.n	800579e <__ieee754_sqrt+0x9a>
 80057b6:	f106 0801 	add.w	r8, r6, #1
 80057ba:	e7f1      	b.n	80057a0 <__ieee754_sqrt+0x9c>
 80057bc:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 80057c0:	4332      	orrs	r2, r6
 80057c2:	d036      	beq.n	8005832 <__ieee754_sqrt+0x12e>
 80057c4:	2f00      	cmp	r7, #0
 80057c6:	d14d      	bne.n	8005864 <__ieee754_sqrt+0x160>
 80057c8:	4639      	mov	r1, r7
 80057ca:	0ae2      	lsrs	r2, r4, #11
 80057cc:	3915      	subs	r1, #21
 80057ce:	0564      	lsls	r4, r4, #21
 80057d0:	4613      	mov	r3, r2
 80057d2:	2a00      	cmp	r2, #0
 80057d4:	d0f9      	beq.n	80057ca <__ieee754_sqrt+0xc6>
 80057d6:	02d7      	lsls	r7, r2, #11
 80057d8:	d451      	bmi.n	800587e <__ieee754_sqrt+0x17a>
 80057da:	2000      	movs	r0, #0
 80057dc:	005b      	lsls	r3, r3, #1
 80057de:	02de      	lsls	r6, r3, #11
 80057e0:	4605      	mov	r5, r0
 80057e2:	f100 0001 	add.w	r0, r0, #1
 80057e6:	d5f9      	bpl.n	80057dc <__ieee754_sqrt+0xd8>
 80057e8:	461a      	mov	r2, r3
 80057ea:	4623      	mov	r3, r4
 80057ec:	4084      	lsls	r4, r0
 80057ee:	f1c0 0020 	rsb	r0, r0, #32
 80057f2:	40c3      	lsrs	r3, r0
 80057f4:	4313      	orrs	r3, r2
 80057f6:	1b49      	subs	r1, r1, r5
 80057f8:	e793      	b.n	8005722 <__ieee754_sqrt+0x1e>
 80057fa:	42a1      	cmp	r1, r4
 80057fc:	d8be      	bhi.n	800577c <__ieee754_sqrt+0x78>
 80057fe:	2900      	cmp	r1, #0
 8005800:	eb01 0502 	add.w	r5, r1, r2
 8005804:	dbd5      	blt.n	80057b2 <__ieee754_sqrt+0xae>
 8005806:	4698      	mov	r8, r3
 8005808:	2300      	movs	r3, #0
 800580a:	e7ce      	b.n	80057aa <__ieee754_sqrt+0xa6>
 800580c:	4323      	orrs	r3, r4
 800580e:	d112      	bne.n	8005836 <__ieee754_sqrt+0x132>
 8005810:	0878      	lsrs	r0, r7, #1
 8005812:	ea4f 016c 	mov.w	r1, ip, asr #1
 8005816:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
 800581a:	f01c 0f01 	tst.w	ip, #1
 800581e:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 8005822:	bf18      	it	ne
 8005824:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
 8005828:	eb01 530e 	add.w	r3, r1, lr, lsl #20
 800582c:	4602      	mov	r2, r0
 800582e:	ec43 2b10 	vmov	d0, r2, r3
 8005832:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005836:	1c7b      	adds	r3, r7, #1
 8005838:	bf16      	itet	ne
 800583a:	1c78      	addne	r0, r7, #1
 800583c:	f10c 0c01 	addeq.w	ip, ip, #1
 8005840:	0840      	lsrne	r0, r0, #1
 8005842:	e7e6      	b.n	8005812 <__ieee754_sqrt+0x10e>
 8005844:	ee10 2a10 	vmov	r2, s0
 8005848:	ee10 0a10 	vmov	r0, s0
 800584c:	463b      	mov	r3, r7
 800584e:	4639      	mov	r1, r7
 8005850:	f7fe fb02 	bl	8003e58 <__aeabi_dmul>
 8005854:	4632      	mov	r2, r6
 8005856:	463b      	mov	r3, r7
 8005858:	f7fe f948 	bl	8003aec <__adddf3>
 800585c:	ec41 0b10 	vmov	d0, r0, r1
 8005860:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005864:	ee10 2a10 	vmov	r2, s0
 8005868:	4630      	mov	r0, r6
 800586a:	4639      	mov	r1, r7
 800586c:	f7fe f93c 	bl	8003ae8 <__aeabi_dsub>
 8005870:	4602      	mov	r2, r0
 8005872:	460b      	mov	r3, r1
 8005874:	f7fe fc1a 	bl	80040ac <__aeabi_ddiv>
 8005878:	ec41 0b10 	vmov	d0, r0, r1
 800587c:	e7d9      	b.n	8005832 <__ieee754_sqrt+0x12e>
 800587e:	4623      	mov	r3, r4
 8005880:	2020      	movs	r0, #32
 8005882:	f04f 35ff 	mov.w	r5, #4294967295
 8005886:	e7b4      	b.n	80057f2 <__ieee754_sqrt+0xee>
 8005888:	7ff00000 	.word	0x7ff00000

0800588c <__ieee754_powf>:
 800588c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005890:	ee10 4a90 	vmov	r4, s1
 8005894:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8005898:	ed2d 8b02 	vpush	{d8}
 800589c:	d015      	beq.n	80058ca <__ieee754_powf+0x3e>
 800589e:	ee10 5a10 	vmov	r5, s0
 80058a2:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 80058a6:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80058aa:	ee10 9a10 	vmov	r9, s0
 80058ae:	dd06      	ble.n	80058be <__ieee754_powf+0x32>
 80058b0:	ecbd 8b02 	vpop	{d8}
 80058b4:	48ba      	ldr	r0, [pc, #744]	; (8005ba0 <__ieee754_powf+0x314>)
 80058b6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058ba:	f000 bc45 	b.w	8006148 <nanf>
 80058be:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80058c2:	dd08      	ble.n	80058d6 <__ieee754_powf+0x4a>
 80058c4:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80058c8:	d1f2      	bne.n	80058b0 <__ieee754_powf+0x24>
 80058ca:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80058ce:	ecbd 8b02 	vpop	{d8}
 80058d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80058d6:	2d00      	cmp	r5, #0
 80058d8:	ee10 6a90 	vmov	r6, s1
 80058dc:	f2c0 80f6 	blt.w	8005acc <__ieee754_powf+0x240>
 80058e0:	f04f 0a00 	mov.w	sl, #0
 80058e4:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80058e8:	f000 8104 	beq.w	8005af4 <__ieee754_powf+0x268>
 80058ec:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80058f0:	f000 812a 	beq.w	8005b48 <__ieee754_powf+0x2bc>
 80058f4:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80058f8:	f000 813f 	beq.w	8005b7a <__ieee754_powf+0x2ee>
 80058fc:	f1b6 5f7c 	cmp.w	r6, #1056964608	; 0x3f000000
 8005900:	ee00 5a10 	vmov	s0, r5
 8005904:	f040 8103 	bne.w	8005b0e <__ieee754_powf+0x282>
 8005908:	f1b9 0f00 	cmp.w	r9, #0
 800590c:	f280 813a 	bge.w	8005b84 <__ieee754_powf+0x2f8>
 8005910:	f000 fc04 	bl	800611c <fabsf>
 8005914:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8005918:	f000 810b 	beq.w	8005b32 <__ieee754_powf+0x2a6>
 800591c:	2f00      	cmp	r7, #0
 800591e:	f000 8104 	beq.w	8005b2a <__ieee754_powf+0x29e>
 8005922:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8005926:	f000 80fa 	beq.w	8005b1e <__ieee754_powf+0x292>
 800592a:	ea4f 72d9 	mov.w	r2, r9, lsr #31
 800592e:	3a01      	subs	r2, #1
 8005930:	ea5a 0302 	orrs.w	r3, sl, r2
 8005934:	f000 812c 	beq.w	8005b90 <__ieee754_powf+0x304>
 8005938:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 800593c:	f340 8152 	ble.w	8005be4 <__ieee754_powf+0x358>
 8005940:	4b98      	ldr	r3, [pc, #608]	; (8005ba4 <__ieee754_powf+0x318>)
 8005942:	429f      	cmp	r7, r3
 8005944:	f340 825f 	ble.w	8005e06 <__ieee754_powf+0x57a>
 8005948:	4b97      	ldr	r3, [pc, #604]	; (8005ba8 <__ieee754_powf+0x31c>)
 800594a:	429f      	cmp	r7, r3
 800594c:	f300 8101 	bgt.w	8005b52 <__ieee754_powf+0x2c6>
 8005950:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005954:	ee30 0a67 	vsub.f32	s0, s0, s15
 8005958:	eddf 6a94 	vldr	s13, [pc, #592]	; 8005bac <__ieee754_powf+0x320>
 800595c:	eddf 7a94 	vldr	s15, [pc, #592]	; 8005bb0 <__ieee754_powf+0x324>
 8005960:	eddf 5a94 	vldr	s11, [pc, #592]	; 8005bb4 <__ieee754_powf+0x328>
 8005964:	ed9f 6a94 	vldr	s12, [pc, #592]	; 8005bb8 <__ieee754_powf+0x32c>
 8005968:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 800596c:	eee0 6a47 	vfms.f32	s13, s0, s14
 8005970:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8005974:	eea6 7ac0 	vfms.f32	s14, s13, s0
 8005978:	eef0 6a47 	vmov.f32	s13, s14
 800597c:	ee20 7a00 	vmul.f32	s14, s0, s0
 8005980:	ee27 7a26 	vmul.f32	s14, s14, s13
 8005984:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8005988:	eee0 7a25 	vfma.f32	s15, s0, s11
 800598c:	eef0 6a67 	vmov.f32	s13, s15
 8005990:	eee0 6a06 	vfma.f32	s13, s0, s12
 8005994:	ee16 3a90 	vmov	r3, s13
 8005998:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 800599c:	f023 030f 	bic.w	r3, r3, #15
 80059a0:	ee07 3a10 	vmov	s14, r3
 80059a4:	eea0 7a46 	vfms.f32	s14, s0, s12
 80059a8:	ee06 3a90 	vmov	s13, r3
 80059ac:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80059b0:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
 80059b4:	f026 060f 	bic.w	r6, r6, #15
 80059b8:	ee07 4a10 	vmov	s14, r4
 80059bc:	ee06 6a10 	vmov	s12, r6
 80059c0:	ee67 7a87 	vmul.f32	s15, s15, s14
 80059c4:	ee37 6a46 	vsub.f32	s12, s14, s12
 80059c8:	ee07 6a10 	vmov	s14, r6
 80059cc:	eee6 7a26 	vfma.f32	s15, s12, s13
 80059d0:	f10a 3aff 	add.w	sl, sl, #4294967295
 80059d4:	ea5a 0302 	orrs.w	r3, sl, r2
 80059d8:	ee26 7a87 	vmul.f32	s14, s13, s14
 80059dc:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80059e0:	ee77 6a87 	vadd.f32	s13, s15, s14
 80059e4:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 80059e8:	ee16 3a90 	vmov	r3, s13
 80059ec:	bf0c      	ite	eq
 80059ee:	eeb0 8a46 	vmoveq.f32	s16, s12
 80059f2:	eeb0 8a40 	vmovne.f32	s16, s0
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80059fc:	f340 81b9 	ble.w	8005d72 <__ieee754_powf+0x4e6>
 8005a00:	f1b2 4f86 	cmp.w	r2, #1124073472	; 0x43000000
 8005a04:	f300 81f8 	bgt.w	8005df8 <__ieee754_powf+0x56c>
 8005a08:	f000 81eb 	beq.w	8005de2 <__ieee754_powf+0x556>
 8005a0c:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 8005a10:	f300 81bb 	bgt.w	8005d8a <__ieee754_powf+0x4fe>
 8005a14:	2200      	movs	r2, #0
 8005a16:	4610      	mov	r0, r2
 8005a18:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8005a1c:	f023 030f 	bic.w	r3, r3, #15
 8005a20:	ee06 3a10 	vmov	s12, r3
 8005a24:	eddf 6a65 	vldr	s13, [pc, #404]	; 8005bbc <__ieee754_powf+0x330>
 8005a28:	eddf 5a65 	vldr	s11, [pc, #404]	; 8005bc0 <__ieee754_powf+0x334>
 8005a2c:	ed9f 3a65 	vldr	s6, [pc, #404]	; 8005bc4 <__ieee754_powf+0x338>
 8005a30:	eddf 3a65 	vldr	s7, [pc, #404]	; 8005bc8 <__ieee754_powf+0x33c>
 8005a34:	ed9f 2a65 	vldr	s4, [pc, #404]	; 8005bcc <__ieee754_powf+0x340>
 8005a38:	ed9f 4a65 	vldr	s8, [pc, #404]	; 8005bd0 <__ieee754_powf+0x344>
 8005a3c:	eddf 4a65 	vldr	s9, [pc, #404]	; 8005bd4 <__ieee754_powf+0x348>
 8005a40:	ed9f 5a65 	vldr	s10, [pc, #404]	; 8005bd8 <__ieee754_powf+0x34c>
 8005a44:	ee36 7a47 	vsub.f32	s14, s12, s14
 8005a48:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
 8005a4c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005a50:	ee26 7a26 	vmul.f32	s14, s12, s13
 8005a54:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8005a58:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8005a5c:	eef0 7a47 	vmov.f32	s15, s14
 8005a60:	eea6 7a03 	vfma.f32	s14, s12, s6
 8005a64:	ee67 6a07 	vmul.f32	s13, s14, s14
 8005a68:	eef0 1a47 	vmov.f32	s3, s14
 8005a6c:	eee6 1a43 	vfms.f32	s3, s12, s6
 8005a70:	eeb0 6a63 	vmov.f32	s12, s7
 8005a74:	eea6 6a82 	vfma.f32	s12, s13, s4
 8005a78:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8005a7c:	eea6 4a26 	vfma.f32	s8, s12, s13
 8005a80:	eee7 7a27 	vfma.f32	s15, s14, s15
 8005a84:	eee4 4a26 	vfma.f32	s9, s8, s13
 8005a88:	eea4 5aa6 	vfma.f32	s10, s9, s13
 8005a8c:	eeb0 6a45 	vmov.f32	s12, s10
 8005a90:	eeb0 5a47 	vmov.f32	s10, s14
 8005a94:	eea6 5a66 	vfms.f32	s10, s12, s13
 8005a98:	eef0 6a45 	vmov.f32	s13, s10
 8005a9c:	ee36 6ae2 	vsub.f32	s12, s13, s5
 8005aa0:	ee27 5a05 	vmul.f32	s10, s14, s10
 8005aa4:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8005aa8:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8005aac:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8005ab0:	ee35 0ac7 	vsub.f32	s0, s11, s14
 8005ab4:	ee10 3a10 	vmov	r3, s0
 8005ab8:	4413      	add	r3, r2
 8005aba:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005abe:	f2c0 81ba 	blt.w	8005e36 <__ieee754_powf+0x5aa>
 8005ac2:	ee00 3a10 	vmov	s0, r3
 8005ac6:	ee20 0a08 	vmul.f32	s0, s0, s16
 8005aca:	e700      	b.n	80058ce <__ieee754_powf+0x42>
 8005acc:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 8005ad0:	da1a      	bge.n	8005b08 <__ieee754_powf+0x27c>
 8005ad2:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 8005ad6:	db0a      	blt.n	8005aee <__ieee754_powf+0x262>
 8005ad8:	ea4f 53e8 	mov.w	r3, r8, asr #23
 8005adc:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 8005ae0:	fa48 f203 	asr.w	r2, r8, r3
 8005ae4:	fa02 f303 	lsl.w	r3, r2, r3
 8005ae8:	4543      	cmp	r3, r8
 8005aea:	f000 813d 	beq.w	8005d68 <__ieee754_powf+0x4dc>
 8005aee:	f04f 0a00 	mov.w	sl, #0
 8005af2:	e6fb      	b.n	80058ec <__ieee754_powf+0x60>
 8005af4:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 8005af8:	f43f aee7 	beq.w	80058ca <__ieee754_powf+0x3e>
 8005afc:	dd2f      	ble.n	8005b5e <__ieee754_powf+0x2d2>
 8005afe:	2e00      	cmp	r6, #0
 8005b00:	db2a      	blt.n	8005b58 <__ieee754_powf+0x2cc>
 8005b02:	ee00 4a10 	vmov	s0, r4
 8005b06:	e6e2      	b.n	80058ce <__ieee754_powf+0x42>
 8005b08:	f04f 0a02 	mov.w	sl, #2
 8005b0c:	e6ea      	b.n	80058e4 <__ieee754_powf+0x58>
 8005b0e:	f000 fb05 	bl	800611c <fabsf>
 8005b12:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8005b16:	d002      	beq.n	8005b1e <__ieee754_powf+0x292>
 8005b18:	2f00      	cmp	r7, #0
 8005b1a:	f47f af02 	bne.w	8005922 <__ieee754_powf+0x96>
 8005b1e:	2e00      	cmp	r6, #0
 8005b20:	bfbc      	itt	lt
 8005b22:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 8005b26:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8005b2a:	f1b9 0f00 	cmp.w	r9, #0
 8005b2e:	f6bf aece 	bge.w	80058ce <__ieee754_powf+0x42>
 8005b32:	f1a7 577e 	sub.w	r7, r7, #1065353216	; 0x3f800000
 8005b36:	ea57 030a 	orrs.w	r3, r7, sl
 8005b3a:	f040 810e 	bne.w	8005d5a <__ieee754_powf+0x4ce>
 8005b3e:	ee70 7a40 	vsub.f32	s15, s0, s0
 8005b42:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8005b46:	e6c2      	b.n	80058ce <__ieee754_powf+0x42>
 8005b48:	2e00      	cmp	r6, #0
 8005b4a:	db0f      	blt.n	8005b6c <__ieee754_powf+0x2e0>
 8005b4c:	ee00 5a10 	vmov	s0, r5
 8005b50:	e6bd      	b.n	80058ce <__ieee754_powf+0x42>
 8005b52:	2e00      	cmp	r6, #0
 8005b54:	f300 815a 	bgt.w	8005e0c <__ieee754_powf+0x580>
 8005b58:	ed9f 0a20 	vldr	s0, [pc, #128]	; 8005bdc <__ieee754_powf+0x350>
 8005b5c:	e6b7      	b.n	80058ce <__ieee754_powf+0x42>
 8005b5e:	2e00      	cmp	r6, #0
 8005b60:	dafa      	bge.n	8005b58 <__ieee754_powf+0x2cc>
 8005b62:	ee07 4a90 	vmov	s15, r4
 8005b66:	eeb1 0a67 	vneg.f32	s0, s15
 8005b6a:	e6b0      	b.n	80058ce <__ieee754_powf+0x42>
 8005b6c:	ee07 5a10 	vmov	s14, r5
 8005b70:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8005b74:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8005b78:	e6a9      	b.n	80058ce <__ieee754_powf+0x42>
 8005b7a:	ee07 5a90 	vmov	s15, r5
 8005b7e:	ee27 0aa7 	vmul.f32	s0, s15, s15
 8005b82:	e6a4      	b.n	80058ce <__ieee754_powf+0x42>
 8005b84:	ecbd 8b02 	vpop	{d8}
 8005b88:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005b8c:	f000 b97e 	b.w	8005e8c <__ieee754_sqrtf>
 8005b90:	ee07 5a90 	vmov	s15, r5
 8005b94:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8005b98:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8005b9c:	e697      	b.n	80058ce <__ieee754_powf+0x42>
 8005b9e:	bf00      	nop
 8005ba0:	080001b8 	.word	0x080001b8
 8005ba4:	3f7ffff7 	.word	0x3f7ffff7
 8005ba8:	3f800007 	.word	0x3f800007
 8005bac:	3eaaaaab 	.word	0x3eaaaaab
 8005bb0:	3fb8aa3b 	.word	0x3fb8aa3b
 8005bb4:	36eca570 	.word	0x36eca570
 8005bb8:	3fb8aa00 	.word	0x3fb8aa00
 8005bbc:	35bfbe8c 	.word	0x35bfbe8c
 8005bc0:	3f317218 	.word	0x3f317218
 8005bc4:	3f317200 	.word	0x3f317200
 8005bc8:	b5ddea0e 	.word	0xb5ddea0e
 8005bcc:	3331bb4c 	.word	0x3331bb4c
 8005bd0:	388ab355 	.word	0x388ab355
 8005bd4:	bb360b61 	.word	0xbb360b61
 8005bd8:	3e2aaaab 	.word	0x3e2aaaab
 8005bdc:	00000000 	.word	0x00000000
 8005be0:	4b800000 	.word	0x4b800000
 8005be4:	f019 4fff 	tst.w	r9, #2139095040	; 0x7f800000
 8005be8:	f040 80f9 	bne.w	8005dde <__ieee754_powf+0x552>
 8005bec:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 8005be0 <__ieee754_powf+0x354>
 8005bf0:	ee60 7a27 	vmul.f32	s15, s0, s15
 8005bf4:	f06f 0117 	mvn.w	r1, #23
 8005bf8:	ee17 7a90 	vmov	r7, s15
 8005bfc:	488f      	ldr	r0, [pc, #572]	; (8005e3c <__ieee754_powf+0x5b0>)
 8005bfe:	15fb      	asrs	r3, r7, #23
 8005c00:	f3c7 0716 	ubfx	r7, r7, #0, #23
 8005c04:	3b7f      	subs	r3, #127	; 0x7f
 8005c06:	4287      	cmp	r7, r0
 8005c08:	440b      	add	r3, r1
 8005c0a:	f047 517e 	orr.w	r1, r7, #1065353216	; 0x3f800000
 8005c0e:	f340 80de 	ble.w	8005dce <__ieee754_powf+0x542>
 8005c12:	488b      	ldr	r0, [pc, #556]	; (8005e40 <__ieee754_powf+0x5b4>)
 8005c14:	4287      	cmp	r7, r0
 8005c16:	f340 80fe 	ble.w	8005e16 <__ieee754_powf+0x58a>
 8005c1a:	eddf 4a8a 	vldr	s9, [pc, #552]	; 8005e44 <__ieee754_powf+0x5b8>
 8005c1e:	3301      	adds	r3, #1
 8005c20:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 8005c24:	eef0 3a64 	vmov.f32	s7, s9
 8005c28:	2000      	movs	r0, #0
 8005c2a:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005c2e:	ee06 1a90 	vmov	s13, r1
 8005c32:	ee76 7a86 	vadd.f32	s15, s13, s12
 8005c36:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005c3a:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8005c3e:	1049      	asrs	r1, r1, #1
 8005c40:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 8005c44:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8005c48:	4401      	add	r1, r0
 8005c4a:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8005c4e:	ee07 1a90 	vmov	s15, r1
 8005c52:	ee27 2a08 	vmul.f32	s4, s14, s16
 8005c56:	ee77 5ac6 	vsub.f32	s11, s15, s12
 8005c5a:	ed9f 4a7b 	vldr	s8, [pc, #492]	; 8005e48 <__ieee754_powf+0x5bc>
 8005c5e:	497b      	ldr	r1, [pc, #492]	; (8005e4c <__ieee754_powf+0x5c0>)
 8005c60:	eddf 8a7b 	vldr	s17, [pc, #492]	; 8005e50 <__ieee754_powf+0x5c4>
 8005c64:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 8005e54 <__ieee754_powf+0x5c8>
 8005c68:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8005e58 <__ieee754_powf+0x5cc>
 8005c6c:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 8005e5c <__ieee754_powf+0x5d0>
 8005c70:	eddf 1a7b 	vldr	s3, [pc, #492]	; 8005e60 <__ieee754_powf+0x5d4>
 8005c74:	eddf 2a7b 	vldr	s5, [pc, #492]	; 8005e64 <__ieee754_powf+0x5d8>
 8005c78:	ed9f 3a7b 	vldr	s6, [pc, #492]	; 8005e68 <__ieee754_powf+0x5dc>
 8005c7c:	ed9f 5a7b 	vldr	s10, [pc, #492]	; 8005e6c <__ieee754_powf+0x5e0>
 8005c80:	ee22 6a02 	vmul.f32	s12, s4, s4
 8005c84:	ee12 0a10 	vmov	r0, s4
 8005c88:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8005c8c:	eef0 5a44 	vmov.f32	s11, s8
 8005c90:	eee6 5a28 	vfma.f32	s11, s12, s17
 8005c94:	4008      	ands	r0, r1
 8005c96:	ee04 0a10 	vmov	s8, r0
 8005c9a:	eea4 7a67 	vfms.f32	s14, s8, s15
 8005c9e:	eef0 7a40 	vmov.f32	s15, s0
 8005ca2:	eee5 7a86 	vfma.f32	s15, s11, s12
 8005ca6:	eea4 7a66 	vfms.f32	s14, s8, s13
 8005caa:	eee7 0a86 	vfma.f32	s1, s15, s12
 8005cae:	ee67 6a08 	vmul.f32	s13, s14, s16
 8005cb2:	eeb0 7a41 	vmov.f32	s14, s2
 8005cb6:	eea0 7a86 	vfma.f32	s14, s1, s12
 8005cba:	ee72 7a04 	vadd.f32	s15, s4, s8
 8005cbe:	eee7 1a06 	vfma.f32	s3, s14, s12
 8005cc2:	ee67 7aa6 	vmul.f32	s15, s15, s13
 8005cc6:	ee26 6a06 	vmul.f32	s12, s12, s12
 8005cca:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 8005cce:	eee6 7a21 	vfma.f32	s15, s12, s3
 8005cd2:	eeb0 6a65 	vmov.f32	s12, s11
 8005cd6:	eea4 6a04 	vfma.f32	s12, s8, s8
 8005cda:	ee07 3a10 	vmov	s14, r3
 8005cde:	ee36 6a27 	vadd.f32	s12, s12, s15
 8005ce2:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8005ce6:	ee16 3a10 	vmov	r3, s12
 8005cea:	400b      	ands	r3, r1
 8005cec:	ee06 3a10 	vmov	s12, r3
 8005cf0:	ee76 5a65 	vsub.f32	s11, s12, s11
 8005cf4:	eee4 5a44 	vfms.f32	s11, s8, s8
 8005cf8:	ee77 7ae5 	vsub.f32	s15, s15, s11
 8005cfc:	ee67 7a82 	vmul.f32	s15, s15, s4
 8005d00:	eee6 7a86 	vfma.f32	s15, s13, s12
 8005d04:	eef0 5a67 	vmov.f32	s11, s15
 8005d08:	eee4 5a06 	vfma.f32	s11, s8, s12
 8005d0c:	ee15 3a90 	vmov	r3, s11
 8005d10:	400b      	ands	r3, r1
 8005d12:	ee06 3a90 	vmov	s13, r3
 8005d16:	eee4 6a46 	vfms.f32	s13, s8, s12
 8005d1a:	ee05 3a90 	vmov	s11, r3
 8005d1e:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8005d22:	ee67 7aa2 	vmul.f32	s15, s15, s5
 8005d26:	eee5 7a83 	vfma.f32	s15, s11, s6
 8005d2a:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8005d2e:	eef0 6a67 	vmov.f32	s13, s15
 8005d32:	eee5 6a85 	vfma.f32	s13, s11, s10
 8005d36:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8005d3a:	ee76 6a87 	vadd.f32	s13, s13, s14
 8005d3e:	ee16 3a90 	vmov	r3, s13
 8005d42:	400b      	ands	r3, r1
 8005d44:	ee06 3a90 	vmov	s13, r3
 8005d48:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8005d4c:	ee37 7a64 	vsub.f32	s14, s14, s9
 8005d50:	eea5 7ac5 	vfms.f32	s14, s11, s10
 8005d54:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8005d58:	e62a      	b.n	80059b0 <__ieee754_powf+0x124>
 8005d5a:	f1ba 0f01 	cmp.w	sl, #1
 8005d5e:	f47f adb6 	bne.w	80058ce <__ieee754_powf+0x42>
 8005d62:	eeb1 0a40 	vneg.f32	s0, s0
 8005d66:	e5b2      	b.n	80058ce <__ieee754_powf+0x42>
 8005d68:	f002 0201 	and.w	r2, r2, #1
 8005d6c:	f1c2 0a02 	rsb	sl, r2, #2
 8005d70:	e5bc      	b.n	80058ec <__ieee754_powf+0x60>
 8005d72:	493f      	ldr	r1, [pc, #252]	; (8005e70 <__ieee754_powf+0x5e4>)
 8005d74:	428a      	cmp	r2, r1
 8005d76:	dc57      	bgt.n	8005e28 <__ieee754_powf+0x59c>
 8005d78:	f47f ae48 	bne.w	8005a0c <__ieee754_powf+0x180>
 8005d7c:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8005d80:	eef4 6ae7 	vcmpe.f32	s13, s15
 8005d84:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005d88:	da4e      	bge.n	8005e28 <__ieee754_powf+0x59c>
 8005d8a:	15d2      	asrs	r2, r2, #23
 8005d8c:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8005d90:	3a7e      	subs	r2, #126	; 0x7e
 8005d92:	fa41 f202 	asr.w	r2, r1, r2
 8005d96:	441a      	add	r2, r3
 8005d98:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8005d9c:	4c35      	ldr	r4, [pc, #212]	; (8005e74 <__ieee754_powf+0x5e8>)
 8005d9e:	397f      	subs	r1, #127	; 0x7f
 8005da0:	410c      	asrs	r4, r1
 8005da2:	f3c2 0016 	ubfx	r0, r2, #0, #23
 8005da6:	ea22 0204 	bic.w	r2, r2, r4
 8005daa:	ee06 2a90 	vmov	s13, r2
 8005dae:	ee37 7a66 	vsub.f32	s14, s14, s13
 8005db2:	f1c1 0117 	rsb	r1, r1, #23
 8005db6:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8005dba:	4108      	asrs	r0, r1
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	ee77 6a87 	vadd.f32	s13, s15, s14
 8005dc2:	bfb8      	it	lt
 8005dc4:	4240      	neglt	r0, r0
 8005dc6:	ee16 3a90 	vmov	r3, s13
 8005dca:	05c2      	lsls	r2, r0, #23
 8005dcc:	e624      	b.n	8005a18 <__ieee754_powf+0x18c>
 8005dce:	eddf 4a1d 	vldr	s9, [pc, #116]	; 8005e44 <__ieee754_powf+0x5b8>
 8005dd2:	2000      	movs	r0, #0
 8005dd4:	eef0 3a64 	vmov.f32	s7, s9
 8005dd8:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8005ddc:	e727      	b.n	8005c2e <__ieee754_powf+0x3a2>
 8005dde:	2100      	movs	r1, #0
 8005de0:	e70c      	b.n	8005bfc <__ieee754_powf+0x370>
 8005de2:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8005e78 <__ieee754_powf+0x5ec>
 8005de6:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8005dea:	ee37 6a86 	vadd.f32	s12, s15, s12
 8005dee:	eeb4 6ae6 	vcmpe.f32	s12, s13
 8005df2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005df6:	ddc8      	ble.n	8005d8a <__ieee754_powf+0x4fe>
 8005df8:	eddf 7a20 	vldr	s15, [pc, #128]	; 8005e7c <__ieee754_powf+0x5f0>
 8005dfc:	ee28 0a27 	vmul.f32	s0, s16, s15
 8005e00:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005e04:	e563      	b.n	80058ce <__ieee754_powf+0x42>
 8005e06:	2e00      	cmp	r6, #0
 8005e08:	f6bf aea6 	bge.w	8005b58 <__ieee754_powf+0x2cc>
 8005e0c:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8005e7c <__ieee754_powf+0x5f0>
 8005e10:	ee20 0a00 	vmul.f32	s0, s0, s0
 8005e14:	e55b      	b.n	80058ce <__ieee754_powf+0x42>
 8005e16:	eddf 4a1a 	vldr	s9, [pc, #104]	; 8005e80 <__ieee754_powf+0x5f4>
 8005e1a:	eddf 3a1a 	vldr	s7, [pc, #104]	; 8005e84 <__ieee754_powf+0x5f8>
 8005e1e:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 8005e22:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 8005e26:	e702      	b.n	8005c2e <__ieee754_powf+0x3a2>
 8005e28:	eddf 7a17 	vldr	s15, [pc, #92]	; 8005e88 <__ieee754_powf+0x5fc>
 8005e2c:	ee28 0a27 	vmul.f32	s0, s16, s15
 8005e30:	ee20 0a27 	vmul.f32	s0, s0, s15
 8005e34:	e54b      	b.n	80058ce <__ieee754_powf+0x42>
 8005e36:	f000 f9eb 	bl	8006210 <scalbnf>
 8005e3a:	e644      	b.n	8005ac6 <__ieee754_powf+0x23a>
 8005e3c:	001cc471 	.word	0x001cc471
 8005e40:	005db3d6 	.word	0x005db3d6
 8005e44:	00000000 	.word	0x00000000
 8005e48:	3e6c3255 	.word	0x3e6c3255
 8005e4c:	fffff000 	.word	0xfffff000
 8005e50:	3e53f142 	.word	0x3e53f142
 8005e54:	3e8ba305 	.word	0x3e8ba305
 8005e58:	3eaaaaab 	.word	0x3eaaaaab
 8005e5c:	3edb6db7 	.word	0x3edb6db7
 8005e60:	3f19999a 	.word	0x3f19999a
 8005e64:	3f76384f 	.word	0x3f76384f
 8005e68:	369dc3a0 	.word	0x369dc3a0
 8005e6c:	3f763800 	.word	0x3f763800
 8005e70:	43160000 	.word	0x43160000
 8005e74:	007fffff 	.word	0x007fffff
 8005e78:	3338aa3c 	.word	0x3338aa3c
 8005e7c:	7149f2ca 	.word	0x7149f2ca
 8005e80:	3f15c000 	.word	0x3f15c000
 8005e84:	35d1cfdc 	.word	0x35d1cfdc
 8005e88:	0da24260 	.word	0x0da24260

08005e8c <__ieee754_sqrtf>:
 8005e8c:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8005e90:	4770      	bx	lr
 8005e92:	bf00      	nop

08005e94 <fabs>:
 8005e94:	ec51 0b10 	vmov	r0, r1, d0
 8005e98:	ee10 2a10 	vmov	r2, s0
 8005e9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005ea0:	ec43 2b10 	vmov	d0, r2, r3
 8005ea4:	4770      	bx	lr
 8005ea6:	bf00      	nop

08005ea8 <finite>:
 8005ea8:	b082      	sub	sp, #8
 8005eaa:	ed8d 0b00 	vstr	d0, [sp]
 8005eae:	9801      	ldr	r0, [sp, #4]
 8005eb0:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005eb4:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005eb8:	0fc0      	lsrs	r0, r0, #31
 8005eba:	b002      	add	sp, #8
 8005ebc:	4770      	bx	lr
 8005ebe:	bf00      	nop

08005ec0 <nan>:
 8005ec0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005ec8 <nan+0x8>
 8005ec4:	4770      	bx	lr
 8005ec6:	bf00      	nop
 8005ec8:	00000000 	.word	0x00000000
 8005ecc:	7ff80000 	.word	0x7ff80000

08005ed0 <rint>:
 8005ed0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005ed2:	ec53 2b10 	vmov	r2, r3, d0
 8005ed6:	f3c3 560a 	ubfx	r6, r3, #20, #11
 8005eda:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
 8005ede:	2813      	cmp	r0, #19
 8005ee0:	ee10 5a10 	vmov	r5, s0
 8005ee4:	b083      	sub	sp, #12
 8005ee6:	4619      	mov	r1, r3
 8005ee8:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 8005eec:	dc31      	bgt.n	8005f52 <rint+0x82>
 8005eee:	2800      	cmp	r0, #0
 8005ef0:	db4c      	blt.n	8005f8c <rint+0xbc>
 8005ef2:	4e3e      	ldr	r6, [pc, #248]	; (8005fec <rint+0x11c>)
 8005ef4:	4106      	asrs	r6, r0
 8005ef6:	ea03 0706 	and.w	r7, r3, r6
 8005efa:	4317      	orrs	r7, r2
 8005efc:	d02e      	beq.n	8005f5c <rint+0x8c>
 8005efe:	ea03 0356 	and.w	r3, r3, r6, lsr #1
 8005f02:	431d      	orrs	r5, r3
 8005f04:	ea4f 0656 	mov.w	r6, r6, lsr #1
 8005f08:	d00c      	beq.n	8005f24 <rint+0x54>
 8005f0a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005f0e:	2813      	cmp	r0, #19
 8005f10:	ea21 0606 	bic.w	r6, r1, r6
 8005f14:	fa43 f100 	asr.w	r1, r3, r0
 8005f18:	ea41 0106 	orr.w	r1, r1, r6
 8005f1c:	bf0c      	ite	eq
 8005f1e:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 8005f22:	2500      	movne	r5, #0
 8005f24:	4832      	ldr	r0, [pc, #200]	; (8005ff0 <rint+0x120>)
 8005f26:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8005f2a:	462a      	mov	r2, r5
 8005f2c:	e9d4 4500 	ldrd	r4, r5, [r4]
 8005f30:	460b      	mov	r3, r1
 8005f32:	4620      	mov	r0, r4
 8005f34:	4629      	mov	r1, r5
 8005f36:	f7fd fdd9 	bl	8003aec <__adddf3>
 8005f3a:	e9cd 0100 	strd	r0, r1, [sp]
 8005f3e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005f42:	4622      	mov	r2, r4
 8005f44:	462b      	mov	r3, r5
 8005f46:	f7fd fdcf 	bl	8003ae8 <__aeabi_dsub>
 8005f4a:	ec41 0b10 	vmov	d0, r0, r1
 8005f4e:	b003      	add	sp, #12
 8005f50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f52:	2833      	cmp	r0, #51	; 0x33
 8005f54:	dd06      	ble.n	8005f64 <rint+0x94>
 8005f56:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8005f5a:	d040      	beq.n	8005fde <rint+0x10e>
 8005f5c:	ec43 2b10 	vmov	d0, r2, r3
 8005f60:	b003      	add	sp, #12
 8005f62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005f64:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
 8005f68:	f04f 30ff 	mov.w	r0, #4294967295
 8005f6c:	40f0      	lsrs	r0, r6
 8005f6e:	4202      	tst	r2, r0
 8005f70:	d0f4      	beq.n	8005f5c <rint+0x8c>
 8005f72:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
 8005f76:	ea4f 0350 	mov.w	r3, r0, lsr #1
 8005f7a:	d0d3      	beq.n	8005f24 <rint+0x54>
 8005f7c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005f80:	ea25 0503 	bic.w	r5, r5, r3
 8005f84:	fa42 f606 	asr.w	r6, r2, r6
 8005f88:	4335      	orrs	r5, r6
 8005f8a:	e7cb      	b.n	8005f24 <rint+0x54>
 8005f8c:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8005f90:	4310      	orrs	r0, r2
 8005f92:	d0e3      	beq.n	8005f5c <rint+0x8c>
 8005f94:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8005f98:	4310      	orrs	r0, r2
 8005f9a:	4245      	negs	r5, r0
 8005f9c:	4305      	orrs	r5, r0
 8005f9e:	4814      	ldr	r0, [pc, #80]	; (8005ff0 <rint+0x120>)
 8005fa0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 8005fa4:	e9d0 6700 	ldrd	r6, r7, [r0]
 8005fa8:	0c59      	lsrs	r1, r3, #17
 8005faa:	0b2d      	lsrs	r5, r5, #12
 8005fac:	0449      	lsls	r1, r1, #17
 8005fae:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 8005fb2:	ea45 0301 	orr.w	r3, r5, r1
 8005fb6:	4630      	mov	r0, r6
 8005fb8:	4639      	mov	r1, r7
 8005fba:	f7fd fd97 	bl	8003aec <__adddf3>
 8005fbe:	e9cd 0100 	strd	r0, r1, [sp]
 8005fc2:	463b      	mov	r3, r7
 8005fc4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005fc8:	4632      	mov	r2, r6
 8005fca:	f7fd fd8d 	bl	8003ae8 <__aeabi_dsub>
 8005fce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005fd2:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 8005fd6:	ec41 0b10 	vmov	d0, r0, r1
 8005fda:	b003      	add	sp, #12
 8005fdc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005fde:	ee10 0a10 	vmov	r0, s0
 8005fe2:	f7fd fd83 	bl	8003aec <__adddf3>
 8005fe6:	ec41 0b10 	vmov	d0, r0, r1
 8005fea:	e7b9      	b.n	8005f60 <rint+0x90>
 8005fec:	000fffff 	.word	0x000fffff
 8005ff0:	080001c0 	.word	0x080001c0
 8005ff4:	00000000 	.word	0x00000000

08005ff8 <scalbn>:
 8005ff8:	b538      	push	{r3, r4, r5, lr}
 8005ffa:	ec53 2b10 	vmov	r2, r3, d0
 8005ffe:	f3c3 510a 	ubfx	r1, r3, #20, #11
 8006002:	461c      	mov	r4, r3
 8006004:	4605      	mov	r5, r0
 8006006:	bb81      	cbnz	r1, 800606a <scalbn+0x72>
 8006008:	ee10 1a10 	vmov	r1, s0
 800600c:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006010:	4321      	orrs	r1, r4
 8006012:	d029      	beq.n	8006068 <scalbn+0x70>
 8006014:	4619      	mov	r1, r3
 8006016:	2200      	movs	r2, #0
 8006018:	4b3d      	ldr	r3, [pc, #244]	; (8006110 <scalbn+0x118>)
 800601a:	4c3e      	ldr	r4, [pc, #248]	; (8006114 <scalbn+0x11c>)
 800601c:	ee10 0a10 	vmov	r0, s0
 8006020:	f7fd ff1a 	bl	8003e58 <__aeabi_dmul>
 8006024:	42a5      	cmp	r5, r4
 8006026:	4602      	mov	r2, r0
 8006028:	460b      	mov	r3, r1
 800602a:	db16      	blt.n	800605a <scalbn+0x62>
 800602c:	460c      	mov	r4, r1
 800602e:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8006032:	3936      	subs	r1, #54	; 0x36
 8006034:	4429      	add	r1, r5
 8006036:	f240 70fe 	movw	r0, #2046	; 0x7fe
 800603a:	4281      	cmp	r1, r0
 800603c:	dc21      	bgt.n	8006082 <scalbn+0x8a>
 800603e:	2900      	cmp	r1, #0
 8006040:	dc47      	bgt.n	80060d2 <scalbn+0xda>
 8006042:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8006046:	da34      	bge.n	80060b2 <scalbn+0xba>
 8006048:	f24c 3150 	movw	r1, #50000	; 0xc350
 800604c:	428d      	cmp	r5, r1
 800604e:	dc18      	bgt.n	8006082 <scalbn+0x8a>
 8006050:	2b00      	cmp	r3, #0
 8006052:	a127      	add	r1, pc, #156	; (adr r1, 80060f0 <scalbn+0xf8>)
 8006054:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006058:	db44      	blt.n	80060e4 <scalbn+0xec>
 800605a:	a325      	add	r3, pc, #148	; (adr r3, 80060f0 <scalbn+0xf8>)
 800605c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006060:	f7fd fefa 	bl	8003e58 <__aeabi_dmul>
 8006064:	ec41 0b10 	vmov	d0, r0, r1
 8006068:	bd38      	pop	{r3, r4, r5, pc}
 800606a:	f240 70ff 	movw	r0, #2047	; 0x7ff
 800606e:	4281      	cmp	r1, r0
 8006070:	d1e0      	bne.n	8006034 <scalbn+0x3c>
 8006072:	ee10 0a10 	vmov	r0, s0
 8006076:	4619      	mov	r1, r3
 8006078:	f7fd fd38 	bl	8003aec <__adddf3>
 800607c:	ec41 0b10 	vmov	d0, r0, r1
 8006080:	bd38      	pop	{r3, r4, r5, pc}
 8006082:	2b00      	cmp	r3, #0
 8006084:	a11c      	add	r1, pc, #112	; (adr r1, 80060f8 <scalbn+0x100>)
 8006086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800608a:	db07      	blt.n	800609c <scalbn+0xa4>
 800608c:	a31a      	add	r3, pc, #104	; (adr r3, 80060f8 <scalbn+0x100>)
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	f7fd fee1 	bl	8003e58 <__aeabi_dmul>
 8006096:	ec41 0b10 	vmov	d0, r0, r1
 800609a:	bd38      	pop	{r3, r4, r5, pc}
 800609c:	a118      	add	r1, pc, #96	; (adr r1, 8006100 <scalbn+0x108>)
 800609e:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060a2:	a315      	add	r3, pc, #84	; (adr r3, 80060f8 <scalbn+0x100>)
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	f7fd fed6 	bl	8003e58 <__aeabi_dmul>
 80060ac:	ec41 0b10 	vmov	d0, r0, r1
 80060b0:	e7f3      	b.n	800609a <scalbn+0xa2>
 80060b2:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 80060b6:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
 80060ba:	3136      	adds	r1, #54	; 0x36
 80060bc:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
 80060c0:	4610      	mov	r0, r2
 80060c2:	4619      	mov	r1, r3
 80060c4:	2200      	movs	r2, #0
 80060c6:	4b14      	ldr	r3, [pc, #80]	; (8006118 <scalbn+0x120>)
 80060c8:	f7fd fec6 	bl	8003e58 <__aeabi_dmul>
 80060cc:	ec41 0b10 	vmov	d0, r0, r1
 80060d0:	bd38      	pop	{r3, r4, r5, pc}
 80060d2:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 80060d6:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
 80060da:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
 80060de:	ec43 2b10 	vmov	d0, r2, r3
 80060e2:	bd38      	pop	{r3, r4, r5, pc}
 80060e4:	a108      	add	r1, pc, #32	; (adr r1, 8006108 <scalbn+0x110>)
 80060e6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80060ea:	e7b6      	b.n	800605a <scalbn+0x62>
 80060ec:	f3af 8000 	nop.w
 80060f0:	c2f8f359 	.word	0xc2f8f359
 80060f4:	01a56e1f 	.word	0x01a56e1f
 80060f8:	8800759c 	.word	0x8800759c
 80060fc:	7e37e43c 	.word	0x7e37e43c
 8006100:	8800759c 	.word	0x8800759c
 8006104:	fe37e43c 	.word	0xfe37e43c
 8006108:	c2f8f359 	.word	0xc2f8f359
 800610c:	81a56e1f 	.word	0x81a56e1f
 8006110:	43500000 	.word	0x43500000
 8006114:	ffff3cb0 	.word	0xffff3cb0
 8006118:	3c900000 	.word	0x3c900000

0800611c <fabsf>:
 800611c:	ee10 3a10 	vmov	r3, s0
 8006120:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8006124:	ee00 3a10 	vmov	s0, r3
 8006128:	4770      	bx	lr
 800612a:	bf00      	nop

0800612c <finitef>:
 800612c:	b082      	sub	sp, #8
 800612e:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006132:	9801      	ldr	r0, [sp, #4]
 8006134:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8006138:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 800613c:	bfac      	ite	ge
 800613e:	2000      	movge	r0, #0
 8006140:	2001      	movlt	r0, #1
 8006142:	b002      	add	sp, #8
 8006144:	4770      	bx	lr
 8006146:	bf00      	nop

08006148 <nanf>:
 8006148:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8006150 <nanf+0x8>
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	7fc00000 	.word	0x7fc00000

08006154 <rintf>:
 8006154:	ee10 1a10 	vmov	r1, s0
 8006158:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 800615c:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8006160:	2a16      	cmp	r2, #22
 8006162:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006166:	dc28      	bgt.n	80061ba <rintf+0x66>
 8006168:	b333      	cbz	r3, 80061b8 <rintf+0x64>
 800616a:	b410      	push	{r4}
 800616c:	2a00      	cmp	r2, #0
 800616e:	b083      	sub	sp, #12
 8006170:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8006174:	db27      	blt.n	80061c6 <rintf+0x72>
 8006176:	4b24      	ldr	r3, [pc, #144]	; (8006208 <rintf+0xb4>)
 8006178:	4113      	asrs	r3, r2
 800617a:	4219      	tst	r1, r3
 800617c:	d018      	beq.n	80061b0 <rintf+0x5c>
 800617e:	085c      	lsrs	r4, r3, #1
 8006180:	ea11 0353 	ands.w	r3, r1, r3, lsr #1
 8006184:	d007      	beq.n	8006196 <rintf+0x42>
 8006186:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 800618a:	ea21 0104 	bic.w	r1, r1, r4
 800618e:	4113      	asrs	r3, r2
 8006190:	430b      	orrs	r3, r1
 8006192:	ee00 3a10 	vmov	s0, r3
 8006196:	4b1d      	ldr	r3, [pc, #116]	; (800620c <rintf+0xb8>)
 8006198:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800619c:	edd0 7a00 	vldr	s15, [r0]
 80061a0:	ee37 0a80 	vadd.f32	s0, s15, s0
 80061a4:	ed8d 0a01 	vstr	s0, [sp, #4]
 80061a8:	ed9d 0a01 	vldr	s0, [sp, #4]
 80061ac:	ee30 0a67 	vsub.f32	s0, s0, s15
 80061b0:	b003      	add	sp, #12
 80061b2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80061b6:	4770      	bx	lr
 80061b8:	4770      	bx	lr
 80061ba:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 80061be:	d3fb      	bcc.n	80061b8 <rintf+0x64>
 80061c0:	ee30 0a00 	vadd.f32	s0, s0, s0
 80061c4:	4770      	bx	lr
 80061c6:	f3c1 0316 	ubfx	r3, r1, #0, #23
 80061ca:	425b      	negs	r3, r3
 80061cc:	4a0f      	ldr	r2, [pc, #60]	; (800620c <rintf+0xb8>)
 80061ce:	0a5b      	lsrs	r3, r3, #9
 80061d0:	0d09      	lsrs	r1, r1, #20
 80061d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80061d6:	0509      	lsls	r1, r1, #20
 80061d8:	4319      	orrs	r1, r3
 80061da:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 80061de:	edd2 6a00 	vldr	s13, [r2]
 80061e2:	ee07 1a90 	vmov	s15, r1
 80061e6:	ee36 7aa7 	vadd.f32	s14, s13, s15
 80061ea:	ed8d 7a01 	vstr	s14, [sp, #4]
 80061ee:	eddd 7a01 	vldr	s15, [sp, #4]
 80061f2:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80061f6:	ee17 3a90 	vmov	r3, s15
 80061fa:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 80061fe:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8006202:	ee00 3a10 	vmov	s0, r3
 8006206:	e7d3      	b.n	80061b0 <rintf+0x5c>
 8006208:	007fffff 	.word	0x007fffff
 800620c:	080001d0 	.word	0x080001d0

08006210 <scalbnf>:
 8006210:	b082      	sub	sp, #8
 8006212:	ed8d 0a01 	vstr	s0, [sp, #4]
 8006216:	9b01      	ldr	r3, [sp, #4]
 8006218:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 800621c:	d02a      	beq.n	8006274 <scalbnf+0x64>
 800621e:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8006222:	d223      	bcs.n	800626c <scalbnf+0x5c>
 8006224:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8006228:	d128      	bne.n	800627c <scalbnf+0x6c>
 800622a:	ed9d 7a01 	vldr	s14, [sp, #4]
 800622e:	eddf 7a2a 	vldr	s15, [pc, #168]	; 80062d8 <scalbnf+0xc8>
 8006232:	4b2a      	ldr	r3, [pc, #168]	; (80062dc <scalbnf+0xcc>)
 8006234:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006238:	4298      	cmp	r0, r3
 800623a:	edcd 7a01 	vstr	s15, [sp, #4]
 800623e:	db37      	blt.n	80062b0 <scalbnf+0xa0>
 8006240:	9b01      	ldr	r3, [sp, #4]
 8006242:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8006246:	3a19      	subs	r2, #25
 8006248:	4402      	add	r2, r0
 800624a:	2afe      	cmp	r2, #254	; 0xfe
 800624c:	dd1a      	ble.n	8006284 <scalbnf+0x74>
 800624e:	ed9f 0a24 	vldr	s0, [pc, #144]	; 80062e0 <scalbnf+0xd0>
 8006252:	ed9f 7a24 	vldr	s14, [pc, #144]	; 80062e4 <scalbnf+0xd4>
 8006256:	9b01      	ldr	r3, [sp, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	eef0 7a40 	vmov.f32	s15, s0
 800625e:	bfb8      	it	lt
 8006260:	eeb0 0a47 	vmovlt.f32	s0, s14
 8006264:	ee20 0a27 	vmul.f32	s0, s0, s15
 8006268:	b002      	add	sp, #8
 800626a:	4770      	bx	lr
 800626c:	ee30 0a00 	vadd.f32	s0, s0, s0
 8006270:	b002      	add	sp, #8
 8006272:	4770      	bx	lr
 8006274:	ed9d 0a01 	vldr	s0, [sp, #4]
 8006278:	b002      	add	sp, #8
 800627a:	4770      	bx	lr
 800627c:	0dd2      	lsrs	r2, r2, #23
 800627e:	4402      	add	r2, r0
 8006280:	2afe      	cmp	r2, #254	; 0xfe
 8006282:	dce4      	bgt.n	800624e <scalbnf+0x3e>
 8006284:	2a00      	cmp	r2, #0
 8006286:	dc0b      	bgt.n	80062a0 <scalbnf+0x90>
 8006288:	f112 0f16 	cmn.w	r2, #22
 800628c:	da17      	bge.n	80062be <scalbnf+0xae>
 800628e:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006292:	4298      	cmp	r0, r3
 8006294:	dcdb      	bgt.n	800624e <scalbnf+0x3e>
 8006296:	ed9f 0a14 	vldr	s0, [pc, #80]	; 80062e8 <scalbnf+0xd8>
 800629a:	ed9f 7a14 	vldr	s14, [pc, #80]	; 80062ec <scalbnf+0xdc>
 800629e:	e7da      	b.n	8006256 <scalbnf+0x46>
 80062a0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80062a4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80062a8:	ee00 3a10 	vmov	s0, r3
 80062ac:	b002      	add	sp, #8
 80062ae:	4770      	bx	lr
 80062b0:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 80062e8 <scalbnf+0xd8>
 80062b4:	eddd 7a01 	vldr	s15, [sp, #4]
 80062b8:	ee27 0a80 	vmul.f32	s0, s15, s0
 80062bc:	e7d8      	b.n	8006270 <scalbnf+0x60>
 80062be:	3219      	adds	r2, #25
 80062c0:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80062c4:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 80062c8:	eddf 7a09 	vldr	s15, [pc, #36]	; 80062f0 <scalbnf+0xe0>
 80062cc:	ee07 3a10 	vmov	s14, r3
 80062d0:	ee27 0a27 	vmul.f32	s0, s14, s15
 80062d4:	e7cc      	b.n	8006270 <scalbnf+0x60>
 80062d6:	bf00      	nop
 80062d8:	4c000000 	.word	0x4c000000
 80062dc:	ffff3cb0 	.word	0xffff3cb0
 80062e0:	7149f2ca 	.word	0x7149f2ca
 80062e4:	f149f2ca 	.word	0xf149f2ca
 80062e8:	0da24260 	.word	0x0da24260
 80062ec:	8da24260 	.word	0x8da24260
 80062f0:	33000000 	.word	0x33000000
 80062f4:	00000000 	.word	0x00000000

080062f8 <__ieee754_log>:
 80062f8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062fc:	ec51 0b10 	vmov	r0, r1, d0
 8006300:	ed2d 8b02 	vpush	{d8}
 8006304:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8006308:	b083      	sub	sp, #12
 800630a:	460b      	mov	r3, r1
 800630c:	da57      	bge.n	80063be <__ieee754_log+0xc6>
 800630e:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8006312:	4302      	orrs	r2, r0
 8006314:	f000 80fe 	beq.w	8006514 <__ieee754_log+0x21c>
 8006318:	2900      	cmp	r1, #0
 800631a:	f2c0 813e 	blt.w	800659a <__ieee754_log+0x2a2>
 800631e:	4be4      	ldr	r3, [pc, #912]	; (80066b0 <__ieee754_log+0x3b8>)
 8006320:	2200      	movs	r2, #0
 8006322:	f7fd fd99 	bl	8003e58 <__aeabi_dmul>
 8006326:	4ae3      	ldr	r2, [pc, #908]	; (80066b4 <__ieee754_log+0x3bc>)
 8006328:	460b      	mov	r3, r1
 800632a:	4293      	cmp	r3, r2
 800632c:	f06f 0735 	mvn.w	r7, #53	; 0x35
 8006330:	dc4a      	bgt.n	80063c8 <__ieee754_log+0xd0>
 8006332:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8006336:	f505 2615 	add.w	r6, r5, #610304	; 0x95000
 800633a:	f606 7664 	addw	r6, r6, #3940	; 0xf64
 800633e:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 8006342:	f086 527f 	eor.w	r2, r6, #1069547520	; 0x3fc00000
 8006346:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 800634a:	ea42 0105 	orr.w	r1, r2, r5
 800634e:	151c      	asrs	r4, r3, #20
 8006350:	2200      	movs	r2, #0
 8006352:	4bd9      	ldr	r3, [pc, #868]	; (80066b8 <__ieee754_log+0x3c0>)
 8006354:	f7fd fbc8 	bl	8003ae8 <__aeabi_dsub>
 8006358:	1cab      	adds	r3, r5, #2
 800635a:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 800635e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006362:	443c      	add	r4, r7
 8006364:	2b02      	cmp	r3, #2
 8006366:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 800636a:	4682      	mov	sl, r0
 800636c:	468b      	mov	fp, r1
 800636e:	f04f 0200 	mov.w	r2, #0
 8006372:	dc34      	bgt.n	80063de <__ieee754_log+0xe6>
 8006374:	2300      	movs	r3, #0
 8006376:	f7fd ffd7 	bl	8004328 <__aeabi_dcmpeq>
 800637a:	2800      	cmp	r0, #0
 800637c:	f000 80d7 	beq.w	800652e <__ieee754_log+0x236>
 8006380:	2c00      	cmp	r4, #0
 8006382:	f000 8166 	beq.w	8006652 <__ieee754_log+0x35a>
 8006386:	4620      	mov	r0, r4
 8006388:	f7fd fcfc 	bl	8003d84 <__aeabi_i2d>
 800638c:	a3b2      	add	r3, pc, #712	; (adr r3, 8006658 <__ieee754_log+0x360>)
 800638e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006392:	4606      	mov	r6, r0
 8006394:	460f      	mov	r7, r1
 8006396:	f7fd fd5f 	bl	8003e58 <__aeabi_dmul>
 800639a:	a3b1      	add	r3, pc, #708	; (adr r3, 8006660 <__ieee754_log+0x368>)
 800639c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80063a0:	4604      	mov	r4, r0
 80063a2:	460d      	mov	r5, r1
 80063a4:	4630      	mov	r0, r6
 80063a6:	4639      	mov	r1, r7
 80063a8:	f7fd fd56 	bl	8003e58 <__aeabi_dmul>
 80063ac:	4602      	mov	r2, r0
 80063ae:	460b      	mov	r3, r1
 80063b0:	4620      	mov	r0, r4
 80063b2:	4629      	mov	r1, r5
 80063b4:	f7fd fb9a 	bl	8003aec <__adddf3>
 80063b8:	ec41 0b10 	vmov	d0, r0, r1
 80063bc:	e00a      	b.n	80063d4 <__ieee754_log+0xdc>
 80063be:	4abd      	ldr	r2, [pc, #756]	; (80066b4 <__ieee754_log+0x3bc>)
 80063c0:	4293      	cmp	r3, r2
 80063c2:	f04f 0700 	mov.w	r7, #0
 80063c6:	ddb4      	ble.n	8006332 <__ieee754_log+0x3a>
 80063c8:	4602      	mov	r2, r0
 80063ca:	460b      	mov	r3, r1
 80063cc:	f7fd fb8e 	bl	8003aec <__adddf3>
 80063d0:	ec41 0b10 	vmov	d0, r0, r1
 80063d4:	b003      	add	sp, #12
 80063d6:	ecbd 8b02 	vpop	{d8}
 80063da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80063de:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80063e2:	f7fd fb83 	bl	8003aec <__adddf3>
 80063e6:	4602      	mov	r2, r0
 80063e8:	460b      	mov	r3, r1
 80063ea:	4650      	mov	r0, sl
 80063ec:	4659      	mov	r1, fp
 80063ee:	f7fd fe5d 	bl	80040ac <__aeabi_ddiv>
 80063f2:	4602      	mov	r2, r0
 80063f4:	460b      	mov	r3, r1
 80063f6:	4620      	mov	r0, r4
 80063f8:	ec43 2b18 	vmov	d8, r2, r3
 80063fc:	f7fd fcc2 	bl	8003d84 <__aeabi_i2d>
 8006400:	ec53 2b18 	vmov	r2, r3, d8
 8006404:	4606      	mov	r6, r0
 8006406:	460f      	mov	r7, r1
 8006408:	ec51 0b18 	vmov	r0, r1, d8
 800640c:	e9cd 6700 	strd	r6, r7, [sp]
 8006410:	f7fd fd22 	bl	8003e58 <__aeabi_dmul>
 8006414:	4602      	mov	r2, r0
 8006416:	460b      	mov	r3, r1
 8006418:	4680      	mov	r8, r0
 800641a:	4689      	mov	r9, r1
 800641c:	f7fd fd1c 	bl	8003e58 <__aeabi_dmul>
 8006420:	a391      	add	r3, pc, #580	; (adr r3, 8006668 <__ieee754_log+0x370>)
 8006422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006426:	4606      	mov	r6, r0
 8006428:	460f      	mov	r7, r1
 800642a:	f7fd fd15 	bl	8003e58 <__aeabi_dmul>
 800642e:	a390      	add	r3, pc, #576	; (adr r3, 8006670 <__ieee754_log+0x378>)
 8006430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006434:	f7fd fb5a 	bl	8003aec <__adddf3>
 8006438:	4632      	mov	r2, r6
 800643a:	463b      	mov	r3, r7
 800643c:	f7fd fd0c 	bl	8003e58 <__aeabi_dmul>
 8006440:	a38d      	add	r3, pc, #564	; (adr r3, 8006678 <__ieee754_log+0x380>)
 8006442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006446:	f7fd fb51 	bl	8003aec <__adddf3>
 800644a:	4632      	mov	r2, r6
 800644c:	463b      	mov	r3, r7
 800644e:	f7fd fd03 	bl	8003e58 <__aeabi_dmul>
 8006452:	a38b      	add	r3, pc, #556	; (adr r3, 8006680 <__ieee754_log+0x388>)
 8006454:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006458:	f7fd fb48 	bl	8003aec <__adddf3>
 800645c:	4642      	mov	r2, r8
 800645e:	464b      	mov	r3, r9
 8006460:	f7fd fcfa 	bl	8003e58 <__aeabi_dmul>
 8006464:	a388      	add	r3, pc, #544	; (adr r3, 8006688 <__ieee754_log+0x390>)
 8006466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800646a:	4680      	mov	r8, r0
 800646c:	4689      	mov	r9, r1
 800646e:	4630      	mov	r0, r6
 8006470:	4639      	mov	r1, r7
 8006472:	f7fd fcf1 	bl	8003e58 <__aeabi_dmul>
 8006476:	a386      	add	r3, pc, #536	; (adr r3, 8006690 <__ieee754_log+0x398>)
 8006478:	e9d3 2300 	ldrd	r2, r3, [r3]
 800647c:	f7fd fb36 	bl	8003aec <__adddf3>
 8006480:	4632      	mov	r2, r6
 8006482:	463b      	mov	r3, r7
 8006484:	f7fd fce8 	bl	8003e58 <__aeabi_dmul>
 8006488:	a383      	add	r3, pc, #524	; (adr r3, 8006698 <__ieee754_log+0x3a0>)
 800648a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800648e:	f7fd fb2d 	bl	8003aec <__adddf3>
 8006492:	4632      	mov	r2, r6
 8006494:	463b      	mov	r3, r7
 8006496:	f7fd fcdf 	bl	8003e58 <__aeabi_dmul>
 800649a:	460b      	mov	r3, r1
 800649c:	4602      	mov	r2, r0
 800649e:	4649      	mov	r1, r9
 80064a0:	4640      	mov	r0, r8
 80064a2:	f7fd fb23 	bl	8003aec <__adddf3>
 80064a6:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 80064aa:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 80064ae:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 80064b2:	3551      	adds	r5, #81	; 0x51
 80064b4:	431d      	orrs	r5, r3
 80064b6:	2d00      	cmp	r5, #0
 80064b8:	4606      	mov	r6, r0
 80064ba:	460f      	mov	r7, r1
 80064bc:	dd5f      	ble.n	800657e <__ieee754_log+0x286>
 80064be:	4b7f      	ldr	r3, [pc, #508]	; (80066bc <__ieee754_log+0x3c4>)
 80064c0:	2200      	movs	r2, #0
 80064c2:	4650      	mov	r0, sl
 80064c4:	4659      	mov	r1, fp
 80064c6:	f7fd fcc7 	bl	8003e58 <__aeabi_dmul>
 80064ca:	4652      	mov	r2, sl
 80064cc:	465b      	mov	r3, fp
 80064ce:	f7fd fcc3 	bl	8003e58 <__aeabi_dmul>
 80064d2:	4680      	mov	r8, r0
 80064d4:	4689      	mov	r9, r1
 80064d6:	2c00      	cmp	r4, #0
 80064d8:	d16a      	bne.n	80065b0 <__ieee754_log+0x2b8>
 80064da:	4642      	mov	r2, r8
 80064dc:	464b      	mov	r3, r9
 80064de:	4630      	mov	r0, r6
 80064e0:	4639      	mov	r1, r7
 80064e2:	f7fd fb03 	bl	8003aec <__adddf3>
 80064e6:	ec53 2b18 	vmov	r2, r3, d8
 80064ea:	f7fd fcb5 	bl	8003e58 <__aeabi_dmul>
 80064ee:	4602      	mov	r2, r0
 80064f0:	460b      	mov	r3, r1
 80064f2:	4640      	mov	r0, r8
 80064f4:	4649      	mov	r1, r9
 80064f6:	f7fd faf7 	bl	8003ae8 <__aeabi_dsub>
 80064fa:	4602      	mov	r2, r0
 80064fc:	460b      	mov	r3, r1
 80064fe:	4650      	mov	r0, sl
 8006500:	4659      	mov	r1, fp
 8006502:	f7fd faf1 	bl	8003ae8 <__aeabi_dsub>
 8006506:	ec41 0b10 	vmov	d0, r0, r1
 800650a:	b003      	add	sp, #12
 800650c:	ecbd 8b02 	vpop	{d8}
 8006510:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006514:	2200      	movs	r2, #0
 8006516:	2300      	movs	r3, #0
 8006518:	4969      	ldr	r1, [pc, #420]	; (80066c0 <__ieee754_log+0x3c8>)
 800651a:	2000      	movs	r0, #0
 800651c:	f7fd fdc6 	bl	80040ac <__aeabi_ddiv>
 8006520:	ec41 0b10 	vmov	d0, r0, r1
 8006524:	b003      	add	sp, #12
 8006526:	ecbd 8b02 	vpop	{d8}
 800652a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800652e:	a35c      	add	r3, pc, #368	; (adr r3, 80066a0 <__ieee754_log+0x3a8>)
 8006530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006534:	4650      	mov	r0, sl
 8006536:	4659      	mov	r1, fp
 8006538:	f7fd fc8e 	bl	8003e58 <__aeabi_dmul>
 800653c:	4602      	mov	r2, r0
 800653e:	460b      	mov	r3, r1
 8006540:	2000      	movs	r0, #0
 8006542:	495e      	ldr	r1, [pc, #376]	; (80066bc <__ieee754_log+0x3c4>)
 8006544:	f7fd fad0 	bl	8003ae8 <__aeabi_dsub>
 8006548:	4652      	mov	r2, sl
 800654a:	4606      	mov	r6, r0
 800654c:	460f      	mov	r7, r1
 800654e:	465b      	mov	r3, fp
 8006550:	4650      	mov	r0, sl
 8006552:	4659      	mov	r1, fp
 8006554:	f7fd fc80 	bl	8003e58 <__aeabi_dmul>
 8006558:	4602      	mov	r2, r0
 800655a:	460b      	mov	r3, r1
 800655c:	4630      	mov	r0, r6
 800655e:	4639      	mov	r1, r7
 8006560:	f7fd fc7a 	bl	8003e58 <__aeabi_dmul>
 8006564:	4606      	mov	r6, r0
 8006566:	460f      	mov	r7, r1
 8006568:	2c00      	cmp	r4, #0
 800656a:	d15a      	bne.n	8006622 <__ieee754_log+0x32a>
 800656c:	4602      	mov	r2, r0
 800656e:	460b      	mov	r3, r1
 8006570:	4650      	mov	r0, sl
 8006572:	4659      	mov	r1, fp
 8006574:	f7fd fab8 	bl	8003ae8 <__aeabi_dsub>
 8006578:	ec41 0b10 	vmov	d0, r0, r1
 800657c:	e72a      	b.n	80063d4 <__ieee754_log+0xdc>
 800657e:	2c00      	cmp	r4, #0
 8006580:	f040 80a0 	bne.w	80066c4 <__ieee754_log+0x3cc>
 8006584:	4602      	mov	r2, r0
 8006586:	460b      	mov	r3, r1
 8006588:	4650      	mov	r0, sl
 800658a:	4659      	mov	r1, fp
 800658c:	f7fd faac 	bl	8003ae8 <__aeabi_dsub>
 8006590:	ec53 2b18 	vmov	r2, r3, d8
 8006594:	f7fd fc60 	bl	8003e58 <__aeabi_dmul>
 8006598:	e7af      	b.n	80064fa <__ieee754_log+0x202>
 800659a:	ee10 2a10 	vmov	r2, s0
 800659e:	f7fd faa3 	bl	8003ae8 <__aeabi_dsub>
 80065a2:	2200      	movs	r2, #0
 80065a4:	2300      	movs	r3, #0
 80065a6:	f7fd fd81 	bl	80040ac <__aeabi_ddiv>
 80065aa:	ec41 0b10 	vmov	d0, r0, r1
 80065ae:	e711      	b.n	80063d4 <__ieee754_log+0xdc>
 80065b0:	a329      	add	r3, pc, #164	; (adr r3, 8006658 <__ieee754_log+0x360>)
 80065b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065b6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065ba:	f7fd fc4d 	bl	8003e58 <__aeabi_dmul>
 80065be:	4642      	mov	r2, r8
 80065c0:	464b      	mov	r3, r9
 80065c2:	4604      	mov	r4, r0
 80065c4:	460d      	mov	r5, r1
 80065c6:	4630      	mov	r0, r6
 80065c8:	4639      	mov	r1, r7
 80065ca:	f7fd fa8f 	bl	8003aec <__adddf3>
 80065ce:	ec53 2b18 	vmov	r2, r3, d8
 80065d2:	f7fd fc41 	bl	8003e58 <__aeabi_dmul>
 80065d6:	a322      	add	r3, pc, #136	; (adr r3, 8006660 <__ieee754_log+0x368>)
 80065d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80065dc:	4606      	mov	r6, r0
 80065de:	460f      	mov	r7, r1
 80065e0:	e9dd 0100 	ldrd	r0, r1, [sp]
 80065e4:	f7fd fc38 	bl	8003e58 <__aeabi_dmul>
 80065e8:	4602      	mov	r2, r0
 80065ea:	460b      	mov	r3, r1
 80065ec:	4630      	mov	r0, r6
 80065ee:	4639      	mov	r1, r7
 80065f0:	f7fd fa7c 	bl	8003aec <__adddf3>
 80065f4:	4602      	mov	r2, r0
 80065f6:	460b      	mov	r3, r1
 80065f8:	4640      	mov	r0, r8
 80065fa:	4649      	mov	r1, r9
 80065fc:	f7fd fa74 	bl	8003ae8 <__aeabi_dsub>
 8006600:	4652      	mov	r2, sl
 8006602:	465b      	mov	r3, fp
 8006604:	f7fd fa70 	bl	8003ae8 <__aeabi_dsub>
 8006608:	4602      	mov	r2, r0
 800660a:	460b      	mov	r3, r1
 800660c:	4620      	mov	r0, r4
 800660e:	4629      	mov	r1, r5
 8006610:	f7fd fa6a 	bl	8003ae8 <__aeabi_dsub>
 8006614:	ec41 0b10 	vmov	d0, r0, r1
 8006618:	b003      	add	sp, #12
 800661a:	ecbd 8b02 	vpop	{d8}
 800661e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006622:	4620      	mov	r0, r4
 8006624:	f7fd fbae 	bl	8003d84 <__aeabi_i2d>
 8006628:	a30b      	add	r3, pc, #44	; (adr r3, 8006658 <__ieee754_log+0x360>)
 800662a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800662e:	4680      	mov	r8, r0
 8006630:	4689      	mov	r9, r1
 8006632:	f7fd fc11 	bl	8003e58 <__aeabi_dmul>
 8006636:	a30a      	add	r3, pc, #40	; (adr r3, 8006660 <__ieee754_log+0x368>)
 8006638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800663c:	4604      	mov	r4, r0
 800663e:	460d      	mov	r5, r1
 8006640:	4640      	mov	r0, r8
 8006642:	4649      	mov	r1, r9
 8006644:	f7fd fc08 	bl	8003e58 <__aeabi_dmul>
 8006648:	4602      	mov	r2, r0
 800664a:	460b      	mov	r3, r1
 800664c:	4630      	mov	r0, r6
 800664e:	4639      	mov	r1, r7
 8006650:	e7d4      	b.n	80065fc <__ieee754_log+0x304>
 8006652:	ed9f 0b15 	vldr	d0, [pc, #84]	; 80066a8 <__ieee754_log+0x3b0>
 8006656:	e6bd      	b.n	80063d4 <__ieee754_log+0xdc>
 8006658:	fee00000 	.word	0xfee00000
 800665c:	3fe62e42 	.word	0x3fe62e42
 8006660:	35793c76 	.word	0x35793c76
 8006664:	3dea39ef 	.word	0x3dea39ef
 8006668:	df3e5244 	.word	0xdf3e5244
 800666c:	3fc2f112 	.word	0x3fc2f112
 8006670:	96cb03de 	.word	0x96cb03de
 8006674:	3fc74664 	.word	0x3fc74664
 8006678:	94229359 	.word	0x94229359
 800667c:	3fd24924 	.word	0x3fd24924
 8006680:	55555593 	.word	0x55555593
 8006684:	3fe55555 	.word	0x3fe55555
 8006688:	d078c69f 	.word	0xd078c69f
 800668c:	3fc39a09 	.word	0x3fc39a09
 8006690:	1d8e78af 	.word	0x1d8e78af
 8006694:	3fcc71c5 	.word	0x3fcc71c5
 8006698:	9997fa04 	.word	0x9997fa04
 800669c:	3fd99999 	.word	0x3fd99999
 80066a0:	55555555 	.word	0x55555555
 80066a4:	3fd55555 	.word	0x3fd55555
	...
 80066b0:	43500000 	.word	0x43500000
 80066b4:	7fefffff 	.word	0x7fefffff
 80066b8:	3ff00000 	.word	0x3ff00000
 80066bc:	3fe00000 	.word	0x3fe00000
 80066c0:	c3500000 	.word	0xc3500000
 80066c4:	e9dd 8900 	ldrd	r8, r9, [sp]
 80066c8:	a30d      	add	r3, pc, #52	; (adr r3, 8006700 <__ieee754_log+0x408>)
 80066ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066ce:	4640      	mov	r0, r8
 80066d0:	4649      	mov	r1, r9
 80066d2:	f7fd fbc1 	bl	8003e58 <__aeabi_dmul>
 80066d6:	4632      	mov	r2, r6
 80066d8:	463b      	mov	r3, r7
 80066da:	4604      	mov	r4, r0
 80066dc:	460d      	mov	r5, r1
 80066de:	4650      	mov	r0, sl
 80066e0:	4659      	mov	r1, fp
 80066e2:	f7fd fa01 	bl	8003ae8 <__aeabi_dsub>
 80066e6:	ec53 2b18 	vmov	r2, r3, d8
 80066ea:	f7fd fbb5 	bl	8003e58 <__aeabi_dmul>
 80066ee:	a306      	add	r3, pc, #24	; (adr r3, 8006708 <__ieee754_log+0x410>)
 80066f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f4:	4606      	mov	r6, r0
 80066f6:	460f      	mov	r7, r1
 80066f8:	e7a2      	b.n	8006640 <__ieee754_log+0x348>
 80066fa:	bf00      	nop
 80066fc:	f3af 8000 	nop.w
 8006700:	fee00000 	.word	0xfee00000
 8006704:	3fe62e42 	.word	0x3fe62e42
 8006708:	35793c76 	.word	0x35793c76
 800670c:	3dea39ef 	.word	0x3dea39ef

08006710 <__errno>:
 8006710:	4b01      	ldr	r3, [pc, #4]	; (8006718 <__errno+0x8>)
 8006712:	6818      	ldr	r0, [r3, #0]
 8006714:	4770      	bx	lr
 8006716:	bf00      	nop
 8006718:	20000004 	.word	0x20000004
 800671c:	4e614e23 	.word	0x4e614e23
 8006720:	00000000 	.word	0x00000000
 8006724:	666e4923 	.word	0x666e4923
 8006728:	00000000 	.word	0x00000000
 800672c:	00302e30 	.word	0x00302e30

08006730 <ubInterruptConfigs>:
 8006730:	0f0f0f0f 0f0f0f0f 0f0f0f0f 0f0f0f0f     ................
 8006740:	0f0f0f0f 0f0f0f0f 0f0f0f0f 0f0f0f0f     ................
 8006750:	0f0f0f0f 0f0f0f0f 0f0f0f0f 0f0f0f0f     ................
 8006760:	0f0f0f0f 0f0f0f0f 0f0f0f0f 0f0f0f0f     ................
 8006770:	0f0f0f0f 0f0f0f0f 0f0f0f0f 0f0f0f0f     ................
 8006780:	0f0f0f0f 0f0f0f0f 0f0f0f0f 0f0f0f0f     ................
 8006790:	0f0f0f0f                                ....
