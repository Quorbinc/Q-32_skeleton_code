
PROJECT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000400  08000000  08000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .rodata.str1.1 0000000e  08000400  08000400  00010400  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .rodata.log10.str1.4 00000001  08000410  08000410  00010410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .rodata.__ieee754_pow.str1.4 00000001  08000414  08000414  00010414  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .rodata.__ieee754_powf.str1.4 00000001  08000418  08000418  00010418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .rodata.TWO52 00000010  08000420  08000420  00010420  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  6 .rodata.TWO23 00000008  08000430  08000430  00010430  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .rodata._global_impure_ptr 00000004  08000438  08000438  00010438  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .text         00004e70  08000440  08000440  00010440  2**6
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  9 .data         00000008  20000000  080052b0  00020000  2**1
                  CONTENTS, ALLOC, LOAD, DATA
 10 .data.__fdlib_version 00000001  20000008  080052b8  00020008  2**0
                  CONTENTS, ALLOC, LOAD, DATA
 11 .data._impure_ptr 00000004  2000000c  080052bc  0002000c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .data.impure_data 00000428  20000010  080052c0  00020010  2**3
                  CONTENTS, ALLOC, LOAD, DATA
 13 .bss          000017c0  20000438  080056e8  00020438  2**3
                  ALLOC
 14 .debug_info   0000c273  00000000  00000000  00020438  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001cf0  00000000  00000000  0002c6ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_loc    000022eb  00000000  00000000  0002e39b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00000120  00000000  00000000  00030686  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00002d58  00000000  00000000  000307a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00001462  00000000  00000000  000334fe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      0000004c  00000000  00000000  00034960  2**0
                  CONTENTS, READONLY
 21 .ARM.attributes 00000032  00000000  00000000  000349ac  2**0
                  CONTENTS, READONLY
 22 .debug_frame  0000143c  00000000  00000000  000349e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000068  00000000  00000000  00035e1c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000440 <fnReset_IRQ>:

//---------------------------------------------------------------------------------------------
//      This is the Reset Code Entry Point from the RESET Pin
//---------------------------------------------------------------------------------------------
void  fnReset_IRQ (void)                          //--- Reset Handler                0x00000004
{
 8000440:	b570      	push	{r4, r5, r6, lr}
  u32 *pulDest;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  //--- Zero fill the bss segment
  //    This flushes all junk from RAM
  for(pulDest = &_sbss; pulDest < &_ebss; )
 8000442:	4b5c      	ldr	r3, [pc, #368]	; (80005b4 <fnReset_IRQ+0x174>)
 8000444:	4a5c      	ldr	r2, [pc, #368]	; (80005b8 <fnReset_IRQ+0x178>)
  {
    *(pulDest++) = 0x00000000;
 8000446:	2100      	movs	r1, #0
  for(pulDest = &_sbss; pulDest < &_ebss; )
 8000448:	4293      	cmp	r3, r2
 800044a:	d355      	bcc.n	80004f8 <fnReset_IRQ+0xb8>
 800044c:	4b5b      	ldr	r3, [pc, #364]	; (80005bc <fnReset_IRQ+0x17c>)
  }

  //--- Copy the data segment initializers from flash to SRAM
  pulSrc = &_sidata;
 800044e:	4a5c      	ldr	r2, [pc, #368]	; (80005c0 <fnReset_IRQ+0x180>)

  for(pulDest = &_sdata; pulDest < &_edata; )
 8000450:	495c      	ldr	r1, [pc, #368]	; (80005c4 <fnReset_IRQ+0x184>)
 8000452:	428b      	cmp	r3, r1
 8000454:	d353      	bcc.n	80004fe <fnReset_IRQ+0xbe>
  {
    *(pulDest++) = *(pulSrc++);
  }

  //--- Set Priviledged Mode to Enable
  SET_PRIVLEGED_MODE;
 8000456:	df00      	svc	0
  //      0000 0000 0000 0000 0000 0111 0000 0100
  //    FLASH = 4 Wait States
  //    Instruction Cache Enabled
  //    Prefetch Enabled
  //    4 Wait States for Flash to run @ 72Mhz Clock
  FLASH_ACR = 0x00000704;
 8000458:	4b5b      	ldr	r3, [pc, #364]	; (80005c8 <fnReset_IRQ+0x188>)
 800045a:	f240 7204 	movw	r2, #1796	; 0x704
 800045e:	601a      	str	r2, [r3, #0]
  nop4;
 8000460:	bf00      	nop
 8000462:	bf00      	nop
 8000464:	bf00      	nop
 8000466:	bf00      	nop

  //-------------------------------------------------------------------------------------------
  //    Clear Clocks & RCC Registers
  //-------------------------------------------------------------------------------------------
  //--- No Clock Interrupts for now
  RCC_CIER = 0x00000000;                          //--- No Clock Interrupts Allowed
 8000468:	4a58      	ldr	r2, [pc, #352]	; (80005cc <fnReset_IRQ+0x18c>)
 800046a:	2300      	movs	r3, #0
  RCC_CICR = 0x0000077F;                          //--- Clear Clock Interrupts
 800046c:	f240 717f 	movw	r1, #1919	; 0x77f
  RCC_CIER = 0x00000000;                          //--- No Clock Interrupts Allowed
 8000470:	6013      	str	r3, [r2, #0]
  RCC_CICR = 0x0000077F;                          //--- Clear Clock Interrupts
 8000472:	6091      	str	r1, [r2, #8]

  //--- AP & AH Peripherial Resets
  RCC_APB1RSTR1 = 0xFFFFFFFF;                     //--- Reset All Peripherials
 8000474:	4956      	ldr	r1, [pc, #344]	; (80005d0 <fnReset_IRQ+0x190>)
 8000476:	f04f 32ff 	mov.w	r2, #4294967295
 800047a:	600a      	str	r2, [r1, #0]
  RCC_APB1RSTR1 = 0x00000000;                     //--- Clear All Peripherial Resets
 800047c:	600b      	str	r3, [r1, #0]

  RCC_APB1RSTR2 = 0xFFFFFFFF;                     //--- Reset All Peripherials
 800047e:	604a      	str	r2, [r1, #4]
  RCC_APB1RSTR2 = 0x00000000;                     //--- Clear All Peripherial Resets
 8000480:	604b      	str	r3, [r1, #4]

  RCC_APB2RSTR = 0xFFFFFFFF;                      //--- Reset All Peripherials
 8000482:	608a      	str	r2, [r1, #8]
  RCC_APB2RSTR = 0x00000000;                      //--- Clear All Peripherial Resets
 8000484:	608b      	str	r3, [r1, #8]

  RCC_AHB1RSTR = 0xFFFFFFFF;                      //--- Reset All Peripherials
 8000486:	f841 2c10 	str.w	r2, [r1, #-16]
  RCC_AHB1RSTR = 0x00000000;                      //--- Clear All Peripherial Resets
 800048a:	f841 3c10 	str.w	r3, [r1, #-16]

  RCC_AHB2RSTR = 0xFFFFFFFF;                      //--- Reset All Peripherials
 800048e:	f841 2c0c 	str.w	r2, [r1, #-12]
  RCC_AHB2RSTR = 0x00000000;                      //--- Clear All Peripherial Resets
 8000492:	f841 3c0c 	str.w	r3, [r1, #-12]

  RCC_AHB3RSTR = 0xFFFFFFFF;                      //--- Reset All Peripherials
 8000496:	f841 2c08 	str.w	r2, [r1, #-8]
  RCC_AHB3RSTR = 0x00000000;                      //--- Clear All Peripherial Resets
 800049a:	f841 3c08 	str.w	r3, [r1, #-8]

  nop8;                                           //--- Waste a little time
 800049e:	bf00      	nop
 80004a0:	bf00      	nop
 80004a2:	bf00      	nop
 80004a4:	bf00      	nop
 80004a6:	bf00      	nop
 80004a8:	bf00      	nop
 80004aa:	bf00      	nop
 80004ac:	bf00      	nop
  //      -------------    ----   ---
  //      RTCAPB            10    Hi              //--- Enable RTC Clock
  //      PWREN             28    Hi              //--- Enable Access to Power Registers
  //      All Others              Lo
  //
  RCC_APB1ENR1 = 0x10000400;
 80004ae:	4d49      	ldr	r5, [pc, #292]	; (80005d4 <fnReset_IRQ+0x194>)
  RCC_APB1SMENR1 = 0x10000400;
 80004b0:	4849      	ldr	r0, [pc, #292]	; (80005d8 <fnReset_IRQ+0x198>)
  RCC_APB1ENR1 = 0x10000400;
 80004b2:	4b4a      	ldr	r3, [pc, #296]	; (80005dc <fnReset_IRQ+0x19c>)
 80004b4:	602b      	str	r3, [r5, #0]
  RCC_APB1SMENR1 = 0x10000400;
 80004b6:	6003      	str	r3, [r0, #0]

  nop4;                                          //--- Waste a little time
 80004b8:	bf00      	nop
 80004ba:	bf00      	nop
 80004bc:	bf00      	nop
 80004be:	bf00      	nop
  //      VOS-0             09    Hi
  //      VOS-1             10    Lo
  //      LPR               14    Lo
  //      All Others              Lo
  //
  PWR_CR1 |= 0x00000300;                            //--- Enable BDCR Write
 80004c0:	4a47      	ldr	r2, [pc, #284]	; (80005e0 <fnReset_IRQ+0x1a0>)
 80004c2:	6813      	ldr	r3, [r2, #0]
 80004c4:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80004c8:	6013      	str	r3, [r2, #0]

  nop4;
 80004ca:	bf00      	nop
 80004cc:	bf00      	nop
 80004ce:	bf00      	nop
 80004d0:	bf00      	nop
  //      RTC Select 0      08    Hi  = LSE Clock
  //      RTC Select 1      09    Lo  = LSE Clock
  //      RTC_Enabled       15    Hi  = Enabled
  //      LSCO = Disabled   24    Lo
  //      LSCO = LSE        25    Hi
  RCC_BDCR = 0x0200811D;                          //--- Turn Off LSE Test Output
 80004d2:	f502 32d0 	add.w	r2, r2, #106496	; 0x1a000
 80004d6:	3290      	adds	r2, #144	; 0x90
 80004d8:	4b42      	ldr	r3, [pc, #264]	; (80005e4 <fnReset_IRQ+0x1a4>)
 80004da:	6013      	str	r3, [r2, #0]

  //--- Wait for LSE Clock to settle for up To 100,000 Loops
  ulT = 100000;
 80004dc:	4b42      	ldr	r3, [pc, #264]	; (80005e8 <fnReset_IRQ+0x1a8>)
 80004de:	4943      	ldr	r1, [pc, #268]	; (80005ec <fnReset_IRQ+0x1ac>)
 80004e0:	6019      	str	r1, [r3, #0]

  //--- Test if LSE is Ready and running
  while (!(RCC_BDCR & 0x00000002) && (ulT > 0))
 80004e2:	4611      	mov	r1, r2
 80004e4:	680c      	ldr	r4, [r1, #0]
 80004e6:	681a      	ldr	r2, [r3, #0]
 80004e8:	07a4      	lsls	r4, r4, #30
 80004ea:	d414      	bmi.n	8000516 <fnReset_IRQ+0xd6>
 80004ec:	b962      	cbnz	r2, 8000508 <fnReset_IRQ+0xc8>
  {
    ulSystemFlags |= 0x00000001;                  //--- Success = Hi Bit (0)
  }
  else
  {
    ulSystemFlags &= 0xFFFFFFFE;                  //--- Failure = Lo Bit (0)
 80004ee:	4940      	ldr	r1, [pc, #256]	; (80005f0 <fnReset_IRQ+0x1b0>)
 80004f0:	680a      	ldr	r2, [r1, #0]
 80004f2:	f022 0201 	bic.w	r2, r2, #1
 80004f6:	e014      	b.n	8000522 <fnReset_IRQ+0xe2>
    *(pulDest++) = 0x00000000;
 80004f8:	f843 1b04 	str.w	r1, [r3], #4
 80004fc:	e7a4      	b.n	8000448 <fnReset_IRQ+0x8>
    *(pulDest++) = *(pulSrc++);
 80004fe:	f852 0b04 	ldr.w	r0, [r2], #4
 8000502:	f843 0b04 	str.w	r0, [r3], #4
 8000506:	e7a4      	b.n	8000452 <fnReset_IRQ+0x12>
    ulT--;                                        //--- Decrement Period Counter
 8000508:	3a01      	subs	r2, #1
 800050a:	601a      	str	r2, [r3, #0]
    nop4;
 800050c:	bf00      	nop
 800050e:	bf00      	nop
 8000510:	bf00      	nop
 8000512:	bf00      	nop
 8000514:	e7e6      	b.n	80004e4 <fnReset_IRQ+0xa4>
  if (ulT > 0)
 8000516:	2a00      	cmp	r2, #0
 8000518:	d0e9      	beq.n	80004ee <fnReset_IRQ+0xae>
    ulSystemFlags |= 0x00000001;                  //--- Success = Hi Bit (0)
 800051a:	4935      	ldr	r1, [pc, #212]	; (80005f0 <fnReset_IRQ+0x1b0>)
 800051c:	680a      	ldr	r2, [r1, #0]
 800051e:	f042 0201 	orr.w	r2, r2, #1
    ulSystemFlags &= 0xFFFFFFFE;                  //--- Failure = Lo Bit (0)
 8000522:	600a      	str	r2, [r1, #0]
  //    HSE_ON           16         Off
  //    HSE_BYP          18         Off
  //    CSS_ON           19         Off
  //    Main System PLL  24         Off
  //    PLLSAI1_ON       26         Off
  RCC_CR = 0x00000069;
 8000524:	4a33      	ldr	r2, [pc, #204]	; (80005f4 <fnReset_IRQ+0x1b4>)
 8000526:	2169      	movs	r1, #105	; 0x69
 8000528:	6011      	str	r1, [r2, #0]

  //--- Wait for MSI Clock to settle
  ulT = 100000;
 800052a:	4930      	ldr	r1, [pc, #192]	; (80005ec <fnReset_IRQ+0x1ac>)
 800052c:	6019      	str	r1, [r3, #0]

  while (((RCC_CR & 0x00000002) != 0x00000002) && (ulT > 0))
 800052e:	6814      	ldr	r4, [r2, #0]
 8000530:	6819      	ldr	r1, [r3, #0]
 8000532:	07a6      	lsls	r6, r4, #30
 8000534:	d414      	bmi.n	8000560 <fnReset_IRQ+0x120>
 8000536:	b921      	cbnz	r1, 8000542 <fnReset_IRQ+0x102>
  {
    ulSystemFlags |= 0x00000002;                  //--- Success = Hi
  }
  else
  {
    ulSystemFlags &= 0xFFFFFFFD;                  //--- Failure = Lo
 8000538:	4c2d      	ldr	r4, [pc, #180]	; (80005f0 <fnReset_IRQ+0x1b0>)
 800053a:	6821      	ldr	r1, [r4, #0]
 800053c:	f021 0102 	bic.w	r1, r1, #2
 8000540:	e014      	b.n	800056c <fnReset_IRQ+0x12c>
    ulT--;                                        //--- Decrement Period Counter
 8000542:	3901      	subs	r1, #1
 8000544:	6019      	str	r1, [r3, #0]
    nop12;
 8000546:	bf00      	nop
 8000548:	bf00      	nop
 800054a:	bf00      	nop
 800054c:	bf00      	nop
 800054e:	bf00      	nop
 8000550:	bf00      	nop
 8000552:	bf00      	nop
 8000554:	bf00      	nop
 8000556:	bf00      	nop
 8000558:	bf00      	nop
 800055a:	bf00      	nop
 800055c:	bf00      	nop
 800055e:	e7e6      	b.n	800052e <fnReset_IRQ+0xee>
  if (ulT > 0)
 8000560:	2900      	cmp	r1, #0
 8000562:	d0e9      	beq.n	8000538 <fnReset_IRQ+0xf8>
    ulSystemFlags |= 0x00000002;                  //--- Success = Hi
 8000564:	4c22      	ldr	r4, [pc, #136]	; (80005f0 <fnReset_IRQ+0x1b0>)
 8000566:	6821      	ldr	r1, [r4, #0]
 8000568:	f041 0102 	orr.w	r1, r1, #2
    ulSystemFlags &= 0xFFFFFFFD;                  //--- Failure = Lo
 800056c:	6021      	str	r1, [r4, #0]
  //    HSE_ON           16         Off
  //    HSE_BYP          18         Off
  //    CSS_ON           19         Off
  //    Main System PLL  24         Off
  //    PLLSAI1_ON       26         Off
  RCC_CR |= 0x0000006D;
 800056e:	6811      	ldr	r1, [r2, #0]
 8000570:	f041 016d 	orr.w	r1, r1, #109	; 0x6d
 8000574:	6011      	str	r1, [r2, #0]
  nop4;
 8000576:	bf00      	nop
 8000578:	bf00      	nop
 800057a:	bf00      	nop
 800057c:	bf00      	nop

  //--- Wait for MSI Clock PLL to settle
  ulT = 100000;
 800057e:	491b      	ldr	r1, [pc, #108]	; (80005ec <fnReset_IRQ+0x1ac>)
 8000580:	6019      	str	r1, [r3, #0]

  while (((RCC_CR & 0x00000002) != 0x00000002) && (ulT > 0))
 8000582:	6814      	ldr	r4, [r2, #0]
 8000584:	6819      	ldr	r1, [r3, #0]
 8000586:	07a4      	lsls	r4, r4, #30
 8000588:	d436      	bmi.n	80005f8 <fnReset_IRQ+0x1b8>
 800058a:	b921      	cbnz	r1, 8000596 <fnReset_IRQ+0x156>
  {
    ulSystemFlags |= 0x00000004;                  //--- Success = Hi
  }
  else
  {
    ulSystemFlags &= 0xFFFFFFFB;                  //--- Failure = Lo
 800058c:	4c18      	ldr	r4, [pc, #96]	; (80005f0 <fnReset_IRQ+0x1b0>)
 800058e:	6821      	ldr	r1, [r4, #0]
 8000590:	f021 0104 	bic.w	r1, r1, #4
 8000594:	e036      	b.n	8000604 <fnReset_IRQ+0x1c4>
    ulT--;                                        //--- Decrement Period Counter
 8000596:	3901      	subs	r1, #1
 8000598:	6019      	str	r1, [r3, #0]
    nop12;
 800059a:	bf00      	nop
 800059c:	bf00      	nop
 800059e:	bf00      	nop
 80005a0:	bf00      	nop
 80005a2:	bf00      	nop
 80005a4:	bf00      	nop
 80005a6:	bf00      	nop
 80005a8:	bf00      	nop
 80005aa:	bf00      	nop
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	bf00      	nop
 80005b2:	e7e6      	b.n	8000582 <fnReset_IRQ+0x142>
 80005b4:	20000438 	.word	0x20000438
 80005b8:	20001bf8 	.word	0x20001bf8
 80005bc:	20000000 	.word	0x20000000
 80005c0:	080052b0 	.word	0x080052b0
 80005c4:	20000008 	.word	0x20000008
 80005c8:	40022000 	.word	0x40022000
 80005cc:	40021018 	.word	0x40021018
 80005d0:	40021038 	.word	0x40021038
 80005d4:	40021058 	.word	0x40021058
 80005d8:	40021078 	.word	0x40021078
 80005dc:	10000400 	.word	0x10000400
 80005e0:	40007000 	.word	0x40007000
 80005e4:	0200811d 	.word	0x0200811d
 80005e8:	20000438 	.word	0x20000438
 80005ec:	000186a0 	.word	0x000186a0
 80005f0:	20001bcc 	.word	0x20001bcc
 80005f4:	40021000 	.word	0x40021000
  if (ulT > 0)
 80005f8:	2900      	cmp	r1, #0
 80005fa:	d0c7      	beq.n	800058c <fnReset_IRQ+0x14c>
    ulSystemFlags |= 0x00000004;                  //--- Success = Hi
 80005fc:	4c59      	ldr	r4, [pc, #356]	; (8000764 <fnReset_IRQ+0x324>)
 80005fe:	6821      	ldr	r1, [r4, #0]
 8000600:	f041 0104 	orr.w	r1, r1, #4
    ulSystemFlags &= 0xFFFFFFFB;                  //--- Failure = Lo
 8000604:	6021      	str	r1, [r4, #0]
  //    PLLR = /4   (288 / 4) = 72 MHz + Enable       .... 0011
  //    PLLP = OFF                                    0000
  //
  //    PLLVCO INPUT = ((4000000 / 1) * 72) = 288 MHz
  //    PLLCLK = VCO / 4 = 72 MHz
  RCC_PLLCFGR = 0x03504801;
 8000606:	4958      	ldr	r1, [pc, #352]	; (8000768 <fnReset_IRQ+0x328>)
 8000608:	4c58      	ldr	r4, [pc, #352]	; (800076c <fnReset_IRQ+0x32c>)
 800060a:	600c      	str	r4, [r1, #0]
  nop48;
 800060c:	bf00      	nop
 800060e:	bf00      	nop
 8000610:	bf00      	nop
 8000612:	bf00      	nop
 8000614:	bf00      	nop
 8000616:	bf00      	nop
 8000618:	bf00      	nop
 800061a:	bf00      	nop
 800061c:	bf00      	nop
 800061e:	bf00      	nop
 8000620:	bf00      	nop
 8000622:	bf00      	nop
 8000624:	bf00      	nop
 8000626:	bf00      	nop
 8000628:	bf00      	nop
 800062a:	bf00      	nop
 800062c:	bf00      	nop
 800062e:	bf00      	nop
 8000630:	bf00      	nop
 8000632:	bf00      	nop
 8000634:	bf00      	nop
 8000636:	bf00      	nop
 8000638:	bf00      	nop
 800063a:	bf00      	nop
 800063c:	bf00      	nop
 800063e:	bf00      	nop
 8000640:	bf00      	nop
 8000642:	bf00      	nop
 8000644:	bf00      	nop
 8000646:	bf00      	nop
 8000648:	bf00      	nop
 800064a:	bf00      	nop
 800064c:	bf00      	nop
 800064e:	bf00      	nop
 8000650:	bf00      	nop
 8000652:	bf00      	nop
 8000654:	bf00      	nop
 8000656:	bf00      	nop
 8000658:	bf00      	nop
 800065a:	bf00      	nop
 800065c:	bf00      	nop
 800065e:	bf00      	nop
 8000660:	bf00      	nop
 8000662:	bf00      	nop
 8000664:	bf00      	nop
 8000666:	bf00      	nop
 8000668:	bf00      	nop
 800066a:	bf00      	nop
  //    HSE_ON           16         Off
  //    HSE_BYP          18         Off
  //    CSS_ON           19         Off
  //    Main System PLL  24         On
  //    PLLSAI1_ON       26         Off
  RCC_CR |= 0x0100006D;
 800066c:	6811      	ldr	r1, [r2, #0]
 800066e:	f041 7180 	orr.w	r1, r1, #16777216	; 0x1000000
 8000672:	f041 016d 	orr.w	r1, r1, #109	; 0x6d
 8000676:	6011      	str	r1, [r2, #0]
  nop48;
 8000678:	bf00      	nop
 800067a:	bf00      	nop
 800067c:	bf00      	nop
 800067e:	bf00      	nop
 8000680:	bf00      	nop
 8000682:	bf00      	nop
 8000684:	bf00      	nop
 8000686:	bf00      	nop
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	bf00      	nop
 800068e:	bf00      	nop
 8000690:	bf00      	nop
 8000692:	bf00      	nop
 8000694:	bf00      	nop
 8000696:	bf00      	nop
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	bf00      	nop
 800069e:	bf00      	nop
 80006a0:	bf00      	nop
 80006a2:	bf00      	nop
 80006a4:	bf00      	nop
 80006a6:	bf00      	nop
 80006a8:	bf00      	nop
 80006aa:	bf00      	nop
 80006ac:	bf00      	nop
 80006ae:	bf00      	nop
 80006b0:	bf00      	nop
 80006b2:	bf00      	nop
 80006b4:	bf00      	nop
 80006b6:	bf00      	nop
 80006b8:	bf00      	nop
 80006ba:	bf00      	nop
 80006bc:	bf00      	nop
 80006be:	bf00      	nop
 80006c0:	bf00      	nop
 80006c2:	bf00      	nop
 80006c4:	bf00      	nop
 80006c6:	bf00      	nop
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	bf00      	nop
 80006ce:	bf00      	nop
 80006d0:	bf00      	nop
 80006d2:	bf00      	nop
 80006d4:	bf00      	nop
 80006d6:	bf00      	nop

  //--- Wait for PLL & MSI clocks to show "Ready"
  ulT = 100000;  //    Wait for upto 100K Loops
 80006d8:	4925      	ldr	r1, [pc, #148]	; (8000770 <fnReset_IRQ+0x330>)

  while (((RCC_CR & 0x02000002) != 0x02000002) && ulT)
 80006da:	4c26      	ldr	r4, [pc, #152]	; (8000774 <fnReset_IRQ+0x334>)
  ulT = 100000;  //    Wait for upto 100K Loops
 80006dc:	6019      	str	r1, [r3, #0]
  while (((RCC_CR & 0x02000002) != 0x02000002) && ulT)
 80006de:	6816      	ldr	r6, [r2, #0]
 80006e0:	6819      	ldr	r1, [r3, #0]
 80006e2:	ea34 0606 	bics.w	r6, r4, r6
 80006e6:	d014      	beq.n	8000712 <fnReset_IRQ+0x2d2>
 80006e8:	b921      	cbnz	r1, 80006f4 <fnReset_IRQ+0x2b4>
  {
    ulSystemFlags |= 0x00000008;                  //--- Success = Hi
  }
  else
  {
    ulSystemFlags &= 0xFFFFFFF7;                  //--- Failure = Lo
 80006ea:	491e      	ldr	r1, [pc, #120]	; (8000764 <fnReset_IRQ+0x324>)
 80006ec:	680a      	ldr	r2, [r1, #0]
 80006ee:	f022 0208 	bic.w	r2, r2, #8
 80006f2:	e014      	b.n	800071e <fnReset_IRQ+0x2de>
    ulT--;                                        //--- Decrement Period Counter
 80006f4:	3901      	subs	r1, #1
 80006f6:	6019      	str	r1, [r3, #0]
    nop12;
 80006f8:	bf00      	nop
 80006fa:	bf00      	nop
 80006fc:	bf00      	nop
 80006fe:	bf00      	nop
 8000700:	bf00      	nop
 8000702:	bf00      	nop
 8000704:	bf00      	nop
 8000706:	bf00      	nop
 8000708:	bf00      	nop
 800070a:	bf00      	nop
 800070c:	bf00      	nop
 800070e:	bf00      	nop
 8000710:	e7e5      	b.n	80006de <fnReset_IRQ+0x29e>
  if (ulT > 0)
 8000712:	2900      	cmp	r1, #0
 8000714:	d0e9      	beq.n	80006ea <fnReset_IRQ+0x2aa>
    ulSystemFlags |= 0x00000008;                  //--- Success = Hi
 8000716:	4913      	ldr	r1, [pc, #76]	; (8000764 <fnReset_IRQ+0x324>)
 8000718:	680a      	ldr	r2, [r1, #0]
 800071a:	f042 0208 	orr.w	r2, r2, #8
    ulSystemFlags &= 0xFFFFFFF7;                  //--- Failure = Lo
 800071e:	600a      	str	r2, [r1, #0]
  //      APB1 Prescale = /1
  //      APB2 Prescale = /1
  //      Wake Up = MSI
  //      MCO Output on PA08 SysClk/8
  //###################################
  RCC_CFGR = 0x31000003;
 8000720:	4a15      	ldr	r2, [pc, #84]	; (8000778 <fnReset_IRQ+0x338>)
 8000722:	4916      	ldr	r1, [pc, #88]	; (800077c <fnReset_IRQ+0x33c>)
 8000724:	6011      	str	r1, [r2, #0]

  //--- Wait for System to show PLL as Sys Clock
  ulT = 1000;  //    Wait for upto 100K Loops
 8000726:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800072a:	6019      	str	r1, [r3, #0]

  while (((RCC_CFGR & 0x0000000C) != 0x0000000C) && ulT)
 800072c:	4611      	mov	r1, r2
 800072e:	680c      	ldr	r4, [r1, #0]
 8000730:	681a      	ldr	r2, [r3, #0]
 8000732:	f004 040c 	and.w	r4, r4, #12
 8000736:	2c0c      	cmp	r4, #12
 8000738:	d022      	beq.n	8000780 <fnReset_IRQ+0x340>
 800073a:	b922      	cbnz	r2, 8000746 <fnReset_IRQ+0x306>
  {
    ulSystemFlags |= 0x00000010;                  //--- Success = Hi
  }
  else
  {
    ulSystemFlags &= 0xFFFFFFEF;                  //--- Failure = Lo
 800073c:	4a09      	ldr	r2, [pc, #36]	; (8000764 <fnReset_IRQ+0x324>)
 800073e:	6813      	ldr	r3, [r2, #0]
 8000740:	f023 0310 	bic.w	r3, r3, #16
 8000744:	e022      	b.n	800078c <fnReset_IRQ+0x34c>
    ulT--;                                        //--- Decrement Period Counter
 8000746:	3a01      	subs	r2, #1
 8000748:	601a      	str	r2, [r3, #0]
    nop12;
 800074a:	bf00      	nop
 800074c:	bf00      	nop
 800074e:	bf00      	nop
 8000750:	bf00      	nop
 8000752:	bf00      	nop
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	bf00      	nop
 800075a:	bf00      	nop
 800075c:	bf00      	nop
 800075e:	bf00      	nop
 8000760:	bf00      	nop
 8000762:	e7e4      	b.n	800072e <fnReset_IRQ+0x2ee>
 8000764:	20001bcc 	.word	0x20001bcc
 8000768:	4002100c 	.word	0x4002100c
 800076c:	03504801 	.word	0x03504801
 8000770:	000186a0 	.word	0x000186a0
 8000774:	02000002 	.word	0x02000002
 8000778:	40021008 	.word	0x40021008
 800077c:	31000003 	.word	0x31000003
  if (ulT > 0)
 8000780:	2a00      	cmp	r2, #0
 8000782:	d0db      	beq.n	800073c <fnReset_IRQ+0x2fc>
    ulSystemFlags |= 0x00000010;                  //--- Success = Hi
 8000784:	4a5b      	ldr	r2, [pc, #364]	; (80008f4 <fnReset_IRQ+0x4b4>)
 8000786:	6813      	ldr	r3, [r2, #0]
 8000788:	f043 0310 	orr.w	r3, r3, #16
    ulSystemFlags &= 0xFFFFFFEF;                  //--- Failure = Lo
 800078c:	6013      	str	r3, [r2, #0]
  //      UNUSED           25,24    0,0   Not Used
  //      USB CLK          27,26    0,0   48MHZ CLK
  //      ADC              29,28    1,1   SYSTEM CLK
  //      SWPMI1           30       0     APB1
  //      UNUSED           31       0     UNUSED
  RCC_CCIPR = 0x3002A8AA;
 800078e:	4b5a      	ldr	r3, [pc, #360]	; (80008f8 <fnReset_IRQ+0x4b8>)
 8000790:	4a5a      	ldr	r2, [pc, #360]	; (80008fc <fnReset_IRQ+0x4bc>)
 8000792:	601a      	str	r2, [r3, #0]
  //      DMA 1             0     Off
  //      DMA 2             1     Off
  //      Flash Memory      8     On
  //      CRC Generator Off 12    Off
  //      Touch Sensor Off  16    Off
  RCC_AHB1ENR = 0x00000100;
 8000794:	4a5a      	ldr	r2, [pc, #360]	; (8000900 <fnReset_IRQ+0x4c0>)
 8000796:	f44f 7380 	mov.w	r3, #256	; 0x100
 800079a:	6013      	str	r3, [r2, #0]
  RCC_AHB1SMENR = 0x00000100;
 800079c:	6213      	str	r3, [r2, #32]
  //      ADC Enable        13    On
  //!!!!!!ADC Enable        13    Off
  //      AESEN Encoder     16    Off
  //      Random Number     18    On
  //!!!!!!Random Number     18    Off
  RCC_AHB2ENR = 0x00042007;
 800079e:	4b59      	ldr	r3, [pc, #356]	; (8000904 <fnReset_IRQ+0x4c4>)
 80007a0:	6053      	str	r3, [r2, #4]
  RCC_AHB2SMENR = 0x00042007;
 80007a2:	6253      	str	r3, [r2, #36]	; 0x24
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... ...w .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  //      QPSI Off
  RCC_AHB3ENR = 0x00000000;
 80007a4:	4b58      	ldr	r3, [pc, #352]	; (8000908 <fnReset_IRQ+0x4c8>)
 80007a6:	2400      	movs	r4, #0
 80007a8:	601c      	str	r4, [r3, #0]
  RCC_AHB3SMENR = 0x00000000;
 80007aa:	621c      	str	r4, [r3, #32]
  //      PWREN             28    On          Default Enabled
  //      DAC 1             29    Off
  //      OPAMP             30    Off
  //      LPTIM 1           31    Off
  //
  RCC_APB1ENR1 = 0x10220000;
 80007ac:	4b57      	ldr	r3, [pc, #348]	; (800090c <fnReset_IRQ+0x4cc>)
 80007ae:	602b      	str	r3, [r5, #0]
  RCC_APB1SMENR1 = 0x10200000;
 80007b0:	f04f 5381 	mov.w	r3, #270532608	; 0x10200000
 80007b4:	6003      	str	r3, [r0, #0]
  //      -------------    ----   ---
  //      LPUART 1 Ena      0     Off
  //      I2C4 Ena          1     Off
  //      Single Wire Ena   2     Off
  //      LPTimer 2 Ena     5     Off
  RCC_APB1ENR2 = 0x00000000;
 80007b6:	4b56      	ldr	r3, [pc, #344]	; (8000910 <fnReset_IRQ+0x4d0>)
 80007b8:	601c      	str	r4, [r3, #0]
  RCC_APB1SMENR2 = 0x00000000;
 80007ba:	621c      	str	r4, [r3, #32]
  //      USART1 ENA        14     OFF        Default
  //      TIM15 ENA         16     OFF
  //      TIM16 ENA         17     OFF
  //      SAI1 ENA          21     OFF
  //      DFSDM1 ENA        24     OFF
  RCC_APB2ENR = 0x00000001;
 80007bc:	2301      	movs	r3, #1
 80007be:	6193      	str	r3, [r2, #24]
  RCC_APB2SMENR = 0x00000001;
 80007c0:	6393      	str	r3, [r2, #56]	; 0x38

  //--- Wait to settle down
  nop12;
 80007c2:	bf00      	nop
 80007c4:	bf00      	nop
 80007c6:	bf00      	nop
 80007c8:	bf00      	nop
 80007ca:	bf00      	nop
 80007cc:	bf00      	nop
 80007ce:	bf00      	nop
 80007d0:	bf00      	nop
 80007d2:	bf00      	nop
 80007d4:	bf00      	nop
 80007d6:	bf00      	nop
 80007d8:	bf00      	nop

  //--- Initialize NVIC Table of Vectors
  fnInitNVIC();
 80007da:	f001 f94c 	bl	8001a76 <fnInitNVIC>
  //  GPIOA_MODER = 0x55555555;                   //--- Set Port Pin I/O Types to output
  //---------------------------------------

  //----- Test Configuration --------------
  //      Change to match application
  GPIOA_MODER = 0x55565555;                       //--- Set Port Pin I/O Type A08 = MOC Out For Testing
 80007de:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80007e2:	4a4c      	ldr	r2, [pc, #304]	; (8000914 <fnReset_IRQ+0x4d4>)
 80007e4:	601a      	str	r2, [r3, #0]
  //      33 22 22 22 22 22 11 11 11 11 11 00 00 00 00 00
  //      10 98 76 54 32 10 98 76 54 32 10 98 76 54 32 10
  //      .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
  //      11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11
  //      FS FS FS FS FS FS FS FS FS FS FS FS FS FS FS FS
  GPIOA_OSPEEDR = 0xFFFFFFFF;                     //--- Every One is High Speed
 80007e6:	4a4c      	ldr	r2, [pc, #304]	; (8000918 <fnReset_IRQ+0x4d8>)
  GPIOA_OTYPER = 0x00000000;                      //--- All Outputs are Push/Pull
 80007e8:	605c      	str	r4, [r3, #4]
  GPIOA_OSPEEDR = 0xFFFFFFFF;                     //--- Every One is High Speed
 80007ea:	f04f 33ff 	mov.w	r3, #4294967295
 80007ee:	6013      	str	r3, [r2, #0]
  //      GPIO LCKR
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOA_LCKR = 0x00000000;                        //--- All Ports are unlocked
 80007f0:	494a      	ldr	r1, [pc, #296]	; (800091c <fnReset_IRQ+0x4dc>)
  GPIOA_PUPDR = 0x00000000;                       //--- Set All As No Pull Up or Down
 80007f2:	6054      	str	r4, [r2, #4]
  GPIOA_ODR = 0x00000000;                         //--- Start with all 0's out
 80007f4:	60d4      	str	r4, [r2, #12]
  GPIOA_BSRR = 0x00000000;                        //--- Nothing to BSRR
 80007f6:	6114      	str	r4, [r2, #16]
  //      GPIO AFRH
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOA_AFRH = 0x00000000;                        //--- Set AFRH to 0
 80007f8:	3108      	adds	r1, #8
  GPIOA_LCKR = 0x00000000;                        //--- All Ports are unlocked
 80007fa:	f841 4c08 	str.w	r4, [r1, #-8]
  GPIOA_BSRR = 0x00000000;                        //--- Nothing to BSRR
 80007fe:	3210      	adds	r2, #16
  GPIOA_AFRL = 0x00000000;                        //--- Set AFRL to 0
 8000800:	f841 4c04 	str.w	r4, [r1, #-4]
  GPIOA_AFRH = 0x00000000;                        //--- Set AFRH to 0
 8000804:	600c      	str	r4, [r1, #0]

  //--- Waste a little Time for things to settle down
  nop12;
 8000806:	bf00      	nop
 8000808:	bf00      	nop
 800080a:	bf00      	nop
 800080c:	bf00      	nop
 800080e:	bf00      	nop
 8000810:	bf00      	nop
 8000812:	bf00      	nop
 8000814:	bf00      	nop
 8000816:	bf00      	nop
 8000818:	bf00      	nop
 800081a:	bf00      	nop
 800081c:	bf00      	nop
  //      .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
  //      00 00 00 00 00 00 00 00 00 00 00 00 00 00 01 01
  //      IN IN.IN IN.IN IN.IN IN.IN IN.IN IN.IN IN.OT OT
  //
  //      Set GPIOB 0-5 = Output   GPIOB 6&7 = Alternate Function
  GPIOB_MODER = 0x0000A555;
 800081e:	f24a 5055 	movw	r0, #42325	; 0xa555
 8000822:	f8c1 03dc 	str.w	r0, [r1, #988]	; 0x3dc
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 1100 0000
  //
  //      Set GPIOB 0-5 as PushPull  GPIOB 6&7 as Open Drain
  //      B6 & B7 = I2C1 AF
  GPIOB_OTYPER = 0x000000C0;
 8000826:	483e      	ldr	r0, [pc, #248]	; (8000920 <fnReset_IRQ+0x4e0>)
 8000828:	21c0      	movs	r1, #192	; 0xc0
  //      .. ..|.. ..|.. ..|.. ..|.. ..|.. ..|.. ..|.. ..
  //      01 01 00 00 00 00 00 00 01 01 00 01 00 00 00 00
  //      NP NP NP NP NP NP NP NP PU PU NP PU NP NP NP NP
  //
  //      Set GPIOB_4, 6, 7 As Oped Drain Pull Up
  GPIOB_PUPDR = 0x00005100;
 800082a:	f44f 45a2 	mov.w	r5, #20736	; 0x5100
  GPIOB_OTYPER = 0x000000C0;
 800082e:	6001      	str	r1, [r0, #0]
  GPIOB_OSPEEDR = 0xFFFFFFFF;
 8000830:	6043      	str	r3, [r0, #4]
  GPIOB_PUPDR = 0x00005100;
 8000832:	6085      	str	r5, [r0, #8]
  //      GPIO ODR
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOB_ODR = 0x00000000;
 8000834:	6104      	str	r4, [r0, #16]
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... 11.. ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  //      Set GPIOB 6 & 7 ti High to Start
  GPIOB_BSRR = 0x000000C0;
 8000836:	6141      	str	r1, [r0, #20]
  //      GPIO LCKR
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOB_LCKR = 0x00000000;
 8000838:	493a      	ldr	r1, [pc, #232]	; (8000924 <fnReset_IRQ+0x4e4>)
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0100 0100 0000 0000 0000 0000 0000 0000
  //
  //      Set GPIOB 6 & 7 for I2C1
  GPIOB_AFRL = 0x44000000;
 800083a:	f04f 4088 	mov.w	r0, #1140850688	; 0x44000000
  GPIOB_LCKR = 0x00000000;
 800083e:	600c      	str	r4, [r1, #0]
  GPIOB_AFRL = 0x44000000;
 8000840:	6048      	str	r0, [r1, #4]
  //      GPIO AFRH
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOB_AFRH = 0x00000000;
 8000842:	608c      	str	r4, [r1, #8]
 8000844:	3108      	adds	r1, #8

  //--- Waste a little Time for things to settle down
  nop12;
 8000846:	bf00      	nop
 8000848:	bf00      	nop
 800084a:	bf00      	nop
 800084c:	bf00      	nop
 800084e:	bf00      	nop
 8000850:	bf00      	nop
 8000852:	bf00      	nop
 8000854:	bf00      	nop
 8000856:	bf00      	nop
 8000858:	bf00      	nop
 800085a:	bf00      	nop
 800085c:	bf00      	nop
  //      33 22 22 22 22 22 11 11 11 11 11 00 00 00 00 00
  //      10 98 76 54 32 10 98 76 54 32 10 98 76 54 32 10
  //      .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
  //      01 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  //      OT IN.IN IN.IN IN.IN IN.IN IN.IN IN.IN IN.IN IN
  GPIOC_MODER = 0x40000000;
 800085e:	f04f 4080 	mov.w	r0, #1073741824	; 0x40000000
 8000862:	f8c1 03dc 	str.w	r0, [r1, #988]	; 0x3dc
  //      GPIO OTYPE
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOC_OTYPER = 0x00000000;
 8000866:	f8c1 43e0 	str.w	r4, [r1, #992]	; 0x3e0
  //      33 22 22 22 22 22 11 11 11 11 11 00 00 00 00 00
  //      10 98 76 54 32 10 98 76 54 32 10 98 76 54 32 10
  //      .. .. .. .. .. .. .. .. .. .. .. .. .. .. .. ..
  //      11 11 11 11 11 11 11 11 11 11 11 11 11 11 11 11
  //      FS FS FS FS FS FS FS FS FS FS FS FS FS FS FS FS
  GPIOC_OSPEEDR = 0xFFFFFFFF;
 800086a:	f8c1 33e4 	str.w	r3, [r1, #996]	; 0x3e4
  //      33 22 22 22 22 22 11 11 11 11 11 00 00 00 00 00
  //      10 98 76 54 32 10 98 76 54 32 10 98 76 54 32 10
  //      .. ..|.. ..|.. ..|.. ..|.. ..|.. ..|.. ..|.. ..
  //      00 00 00 00 00 00 00 00 00 00 00 00 00 00 00 00
  //      NP NP NP NP NP NP NP NP NP NP NP NP NP NP NP NP
  GPIOC_PUPDR = 0x00000000;
 800086e:	4b2e      	ldr	r3, [pc, #184]	; (8000928 <fnReset_IRQ+0x4e8>)
 8000870:	601c      	str	r4, [r3, #0]
  //      GPIO ODR
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOC_ODR = 0x00000000;
 8000872:	609c      	str	r4, [r3, #8]
  //      GPIOBSRR
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOC_BSRR = 0x00000000;
 8000874:	60dc      	str	r4, [r3, #12]
  //      GPIO LCKR
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOC_LCKR = 0x00000000;
 8000876:	611c      	str	r4, [r3, #16]
  //      GPIO AFRL
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0100 0100 0000 0000 0000 0000 0000 0000
  GPIOC_AFRL = 0x00000000;
 8000878:	615c      	str	r4, [r3, #20]
  //      GPIO AFRH
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0000
  GPIOC_AFRH = 0x00000000;
 800087a:	619c      	str	r4, [r3, #24]
 800087c:	3318      	adds	r3, #24

  //--- Waste a little Time for things to settle down
  nop12;
 800087e:	bf00      	nop
 8000880:	bf00      	nop
 8000882:	bf00      	nop
 8000884:	bf00      	nop
 8000886:	bf00      	nop
 8000888:	bf00      	nop
 800088a:	bf00      	nop
 800088c:	bf00      	nop
 800088e:	bf00      	nop
 8000890:	bf00      	nop
 8000892:	bf00      	nop
 8000894:	bf00      	nop

  //--- Always Enable FPU in STM32L432
  FPU_ENA;
 8000896:	f8df 009c 	ldr.w	r0, [pc, #156]	; 8000934 <fnReset_IRQ+0x4f4>
 800089a:	6801      	ldr	r1, [r0, #0]
 800089c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008a0:	6001      	str	r1, [r0, #0]
 80008a2:	f3bf 8f4f 	dsb	sy
 80008a6:	f3bf 8f6f 	isb	sy
  //      VREFBUF
  //      3322 2222 2222 1111 1111 1100 0000 0000
  //      1098 7654 3210 9876 5432 1098 7654 3210
  //      .... .... .... .... .... .... .... ....
  //      0000 0000 0000 0000 0000 0000 0000 0101
  VREFBUF_CSR = 0x00000005;                       //--- VREF = 2.500V Internal Ref
 80008aa:	f103 23f8 	add.w	r3, r3, #4160813056	; 0xf800f800
 80008ae:	330c      	adds	r3, #12
 80008b0:	2105      	movs	r1, #5
 80008b2:	6019      	str	r1, [r3, #0]

  //  VREFBUF_CSR = 0x00000001;                     //--- VREF = 2.048V Internal Ref
  //  VREFBUF_CSR = 0x00000000;                     //--- VREF = External Reference

  //--- Set Start Up Flag
  SET_PA04;
 80008b4:	2310      	movs	r3, #16
 80008b6:	6013      	str	r3, [r2, #0]

  //-------------------------------------------------------------------------------------------
  //  Start Up SysTick Timer As Pacer Set for 10 KHz  100uSec base frequency
  //-------------------------------------------------------------------------------------------

  SET_PRIVLEGED_MODE;
 80008b8:	df00      	svc	0

  fnInitSysTick ();
 80008ba:	f000 fe89 	bl	80015d0 <fnInitSysTick>
  fnStringOut_2 ("I'm Alive, Mu Ah Ah Ah! \r\n Ready --> ");

  */

  //--- Show that Init Complete
  ulSystemFlags |= 0xC0000000;                    //--- Start-Up Success = Hi
 80008be:	4a0d      	ldr	r2, [pc, #52]	; (80008f4 <fnReset_IRQ+0x4b4>)
 80008c0:	6813      	ldr	r3, [r2, #0]
 80008c2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 80008c6:	6013      	str	r3, [r2, #0]

  nop4;                                           //--- A Brief Pause
 80008c8:	bf00      	nop
 80008ca:	bf00      	nop
 80008cc:	bf00      	nop
 80008ce:	bf00      	nop
  GIE;                                            //--- Enable All Other Interrupts
 80008d0:	b662      	cpsie	i

  //--- Call the Main Function after basic boot complete
  main();
 80008d2:	f002 fb23 	bl	8002f1c <main>

  //--- If we return from the MAIN function then something has gone Terribly Wrong!!!!
  GID;                                            //--- Kill All Interrupts
 80008d6:	b672      	cpsid	i
  nop8;                                           //--- Short Pause to let NVIC Catch Up
 80008d8:	bf00      	nop
 80008da:	bf00      	nop
 80008dc:	bf00      	nop
 80008de:	bf00      	nop
 80008e0:	bf00      	nop
 80008e2:	bf00      	nop
 80008e4:	bf00      	nop
 80008e6:	bf00      	nop

  SET_PRIVLEGED_MODE;
 80008e8:	df00      	svc	0
  SCB_AIRCR = 0x05FA0004;                         //--- Emergency Call RESET
 80008ea:	4b10      	ldr	r3, [pc, #64]	; (800092c <fnReset_IRQ+0x4ec>)
 80008ec:	4a10      	ldr	r2, [pc, #64]	; (8000930 <fnReset_IRQ+0x4f0>)
 80008ee:	601a      	str	r2, [r3, #0]
}
 80008f0:	bd70      	pop	{r4, r5, r6, pc}
 80008f2:	bf00      	nop
 80008f4:	20001bcc 	.word	0x20001bcc
 80008f8:	40021088 	.word	0x40021088
 80008fc:	3002a8aa 	.word	0x3002a8aa
 8000900:	40021048 	.word	0x40021048
 8000904:	00042007 	.word	0x00042007
 8000908:	40021050 	.word	0x40021050
 800090c:	10220000 	.word	0x10220000
 8000910:	4002105c 	.word	0x4002105c
 8000914:	55565555 	.word	0x55565555
 8000918:	48000008 	.word	0x48000008
 800091c:	4800001c 	.word	0x4800001c
 8000920:	48000404 	.word	0x48000404
 8000924:	4800041c 	.word	0x4800041c
 8000928:	4800080c 	.word	0x4800080c
 800092c:	e000ed0c 	.word	0xe000ed0c
 8000930:	05fa0004 	.word	0x05fa0004
 8000934:	e000ed88 	.word	0xe000ed88

08000938 <fnTickDelay>:
//---------------------------------------------------------------------------------------------
//                    Crude time delay downcounter in 100 uSec Ticks
//                        Then wait in loop and call new tasks
//---------------------------------------------------------------------------------------------
void  fnTickDelay (u32 ulDelay)
{
 8000938:	b538      	push	{r3, r4, r5, lr}
 800093a:	4b0d      	ldr	r3, [pc, #52]	; (8000970 <fnTickDelay+0x38>)
 800093c:	2400      	movs	r4, #0
 800093e:	461d      	mov	r5, r3

  //--- Search for unused FastDelay Timer;
  for (uwDelayNum = 0; uwDelayNum < 4; uwDelayNum++)
  {
    //--- If Fast Delay Counter == 0 then use it
    if (!ulFastTimeCount[uwDelayNum])
 8000940:	f853 2b04 	ldr.w	r2, [r3], #4
 8000944:	b982      	cbnz	r2, 8000968 <fnTickDelay+0x30>
    {
      ulFastTimeCount[uwDelayNum] = ulDelay;      //--- Start the delay timer
 8000946:	f845 0024 	str.w	r0, [r5, r4, lsl #2]

      //--- Loop until Fast Count == 0
      while (ulFastTimeCount[uwDelayNum])
 800094a:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
 800094e:	b903      	cbnz	r3, 8000952 <fnTickDelay+0x1a>
        nop4;
      }
      return;
    }
  }
}
 8000950:	bd38      	pop	{r3, r4, r5, pc}
        nop4;
 8000952:	bf00      	nop
 8000954:	bf00      	nop
 8000956:	bf00      	nop
 8000958:	bf00      	nop
        fnDispatcher();                           //--- Call the next Task while waiting
 800095a:	f000 fbb5 	bl	80010c8 <fnDispatcher>
        nop4;
 800095e:	bf00      	nop
 8000960:	bf00      	nop
 8000962:	bf00      	nop
 8000964:	bf00      	nop
 8000966:	e7f0      	b.n	800094a <fnTickDelay+0x12>
  for (uwDelayNum = 0; uwDelayNum < 4; uwDelayNum++)
 8000968:	3401      	adds	r4, #1
 800096a:	2c04      	cmp	r4, #4
 800096c:	d1e8      	bne.n	8000940 <fnTickDelay+0x8>
 800096e:	e7ef      	b.n	8000950 <fnTickDelay+0x18>
 8000970:	20001ab0 	.word	0x20001ab0

08000974 <fnZeroString>:
{
  u16 uwP;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  if ((uwLen <1) || (uwLen > 128)) return;        //--- Exit if bad length
 8000974:	1e4b      	subs	r3, r1, #1
 8000976:	2b7f      	cmp	r3, #127	; 0x7f
{
 8000978:	b510      	push	{r4, lr}
  if ((uwLen <1) || (uwLen > 128)) return;        //--- Exit if bad length
 800097a:	d806      	bhi.n	800098a <fnZeroString+0x16>
 800097c:	2300      	movs	r3, #0

  for (uwP = 0; uwP < uwLen; uwP++)
  {
    ubS[uwP] = 0;
 800097e:	461c      	mov	r4, r3
 8000980:	54c4      	strb	r4, [r0, r3]
  for (uwP = 0; uwP < uwLen; uwP++)
 8000982:	3301      	adds	r3, #1
 8000984:	b29a      	uxth	r2, r3
 8000986:	428a      	cmp	r2, r1
 8000988:	d3fa      	bcc.n	8000980 <fnZeroString+0xc>
  }
}
 800098a:	bd10      	pop	{r4, pc}

0800098c <fnMergString>:

//---------------------------------------------------------------------------------------------
//                          Place a string within another string
//---------------------------------------------------------------------------------------------
u32   fnMergString (u08 ubDst[], u08 ubSrc[], u16 uwPos, u16 uwLen)
{
 800098c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8000990:	461c      	mov	r4, r3
 8000992:	4606      	mov	r6, r0
 8000994:	460d      	mov	r5, r1
 8000996:	4690      	mov	r8, r2
  u16 uwP;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  uwLS = strlen(ubSrc);
  uwLD = strlen(ubDst);
 8000998:	f002 fa52 	bl	8002e40 <strlen>
 800099c:	fa1f f980 	uxth.w	r9, r0

  //--- Test that all the lengths are within range

  if (uwLen > uwLD) return FALSE;                 //--- Destination too small
 80009a0:	45a1      	cmp	r9, r4
 80009a2:	d31c      	bcc.n	80009de <fnMergString+0x52>
  uwLS = strlen(ubSrc);
 80009a4:	4628      	mov	r0, r5
 80009a6:	f002 fa4b 	bl	8002e40 <strlen>
 80009aa:	b280      	uxth	r0, r0
  if (uwLen > uwLS) return FALSE;                 //--- Source too small
 80009ac:	42a0      	cmp	r0, r4
 80009ae:	d316      	bcc.n	80009de <fnMergString+0x52>
  if ((!uwLS) || (!uwLD) || (!uwLen)) return FALSE; //--- Zero length strings
 80009b0:	b198      	cbz	r0, 80009da <fnMergString+0x4e>
 80009b2:	f1b9 0f00 	cmp.w	r9, #0
 80009b6:	d012      	beq.n	80009de <fnMergString+0x52>
 80009b8:	b18c      	cbz	r4, 80009de <fnMergString+0x52>
  if ((uwPos + uwLen) > uwLD) return FALSE;       //--- Result won't fit
 80009ba:	eb08 0304 	add.w	r3, r8, r4
 80009be:	454b      	cmp	r3, r9
 80009c0:	dc0d      	bgt.n	80009de <fnMergString+0x52>
 80009c2:	3d01      	subs	r5, #1
 80009c4:	4446      	add	r6, r8

  //--- Copy characters from Src to Dst

  for (uwP = 0; uwP < uwLen; uwP++)
 80009c6:	2300      	movs	r3, #0
 80009c8:	3301      	adds	r3, #1
 80009ca:	b29b      	uxth	r3, r3
  {
    ubDst[uwPos + uwP] = ubSrc[uwP];
 80009cc:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 80009d0:	f806 2b01 	strb.w	r2, [r6], #1
  for (uwP = 0; uwP < uwLen; uwP++)
 80009d4:	429c      	cmp	r4, r3
 80009d6:	d1f7      	bne.n	80009c8 <fnMergString+0x3c>
  }

  return TRUE;
 80009d8:	2001      	movs	r0, #1
}
 80009da:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
  if (uwLen > uwLD) return FALSE;                 //--- Destination too small
 80009de:	2000      	movs	r0, #0
 80009e0:	e7fb      	b.n	80009da <fnMergString+0x4e>

080009e2 <fnGrabArrayBytes>:

//---------------------------------------------------------------------------------------------
//                          Extract Part of A Character Array
//---------------------------------------------------------------------------------------------
void  fnGrabArrayBytes (u08 ubDstArray[], u08 ubSrcArray[], u16 uwPtr, u16 uwCount)
{
 80009e2:	b570      	push	{r4, r5, r6, lr}
  u16 uwC;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  for (uwC = 0; uwC < uwCount; uwC++)
 80009e4:	2400      	movs	r4, #0
 80009e6:	b2a5      	uxth	r5, r4
 80009e8:	fa12 f684 	uxtah	r6, r2, r4
 80009ec:	42ab      	cmp	r3, r5
 80009ee:	b2b6      	uxth	r6, r6
 80009f0:	d800      	bhi.n	80009f4 <fnGrabArrayBytes+0x12>
  {
    ubDstArray[uwC] = ubSrcArray[uwPtr];
    uwPtr++;
  }
}
 80009f2:	bd70      	pop	{r4, r5, r6, pc}
    ubDstArray[uwC] = ubSrcArray[uwPtr];
 80009f4:	5d8d      	ldrb	r5, [r1, r6]
 80009f6:	5505      	strb	r5, [r0, r4]
  for (uwC = 0; uwC < uwCount; uwC++)
 80009f8:	3401      	adds	r4, #1
 80009fa:	e7f4      	b.n	80009e6 <fnGrabArrayBytes+0x4>

080009fc <fnLTRIM>:

//---------------------------------------------------------------------------------------------
//                         Remove Left Most Tabs and Spaces from String
//---------------------------------------------------------------------------------------------
u32  fnLTRIM (u08  ubSrc[])
{
 80009fc:	b510      	push	{r4, lr}
 80009fe:	4604      	mov	r4, r0
  u32 ulP;
  u32 ulL;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  ulL = strlen (ubSrc);
 8000a00:	f002 fa1e 	bl	8002e40 <strlen>

  if (!ulL) return ulL;
 8000a04:	4603      	mov	r3, r0
 8000a06:	b1b0      	cbz	r0, 8000a36 <fnLTRIM+0x3a>
 8000a08:	4423      	add	r3, r4
  {
    for (ulP = 0; ulP < (ulL - 1); ulP++)
    {
      ubSrc[ulP] = ubSrc[ulP + 1];
    }
    ubSrc[ulP] = 0;
 8000a0a:	2100      	movs	r1, #0
  while ((ubSrc[0] == 0x20) || (ubSrc[0] == 0x09))
 8000a0c:	7822      	ldrb	r2, [r4, #0]
 8000a0e:	2a20      	cmp	r2, #32
 8000a10:	d001      	beq.n	8000a16 <fnLTRIM+0x1a>
 8000a12:	2a09      	cmp	r2, #9
 8000a14:	d10a      	bne.n	8000a2c <fnLTRIM+0x30>
 8000a16:	1c62      	adds	r2, r4, #1
 8000a18:	e003      	b.n	8000a22 <fnLTRIM+0x26>
      ubSrc[ulP] = ubSrc[ulP + 1];
 8000a1a:	f812 0b01 	ldrb.w	r0, [r2], #1
 8000a1e:	f802 0c02 	strb.w	r0, [r2, #-2]
    for (ulP = 0; ulP < (ulL - 1); ulP++)
 8000a22:	429a      	cmp	r2, r3
 8000a24:	d1f9      	bne.n	8000a1a <fnLTRIM+0x1e>
    ubSrc[ulP] = 0;
 8000a26:	f803 1d01 	strb.w	r1, [r3, #-1]!
    ulL--;
 8000a2a:	e7ef      	b.n	8000a0c <fnLTRIM+0x10>
  }

  ulL = strlen (ubSrc);
 8000a2c:	4620      	mov	r0, r4
  return ulL;
}
 8000a2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ulL = strlen (ubSrc);
 8000a32:	f002 ba05 	b.w	8002e40 <strlen>
}
 8000a36:	bd10      	pop	{r4, pc}

08000a38 <fnRTRIM>:

//---------------------------------------------------------------------------------------------
//                        Remove Right Most Tabs and Spaces from String
//---------------------------------------------------------------------------------------------
u32  fnRTRIM (u08  ubSrc[])
{
 8000a38:	b510      	push	{r4, lr}
 8000a3a:	4604      	mov	r4, r0
  u32 ulP;
  u32 ulL;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  ulL = strlen (ubSrc);
 8000a3c:	f002 fa00 	bl	8002e40 <strlen>

  if (!ulL) return ulL;
 8000a40:	4603      	mov	r3, r0
 8000a42:	b198      	cbz	r0, 8000a6c <fnRTRIM+0x34>
  ulP = ulL - 1;

  //--- Test for Space or TAB as First Character

  while (((ubSrc[ulP] == 0x20) || (ubSrc[ulP] == 0x09)) && (ulL > 0))
 8000a44:	4423      	add	r3, r4
  {
    ubSrc[ulP] = 0x00;
 8000a46:	2000      	movs	r0, #0
  while (((ubSrc[ulP] == 0x20) || (ubSrc[ulP] == 0x09)) && (ulL > 0))
 8000a48:	f813 1c01 	ldrb.w	r1, [r3, #-1]
 8000a4c:	2920      	cmp	r1, #32
 8000a4e:	f103 32ff 	add.w	r2, r3, #4294967295
 8000a52:	d001      	beq.n	8000a58 <fnRTRIM+0x20>
 8000a54:	2909      	cmp	r1, #9
 8000a56:	d101      	bne.n	8000a5c <fnRTRIM+0x24>
 8000a58:	42a3      	cmp	r3, r4
 8000a5a:	d104      	bne.n	8000a66 <fnRTRIM+0x2e>
    ulL--;
    ulP--;
  }

  ulL = strlen (ubSrc);
 8000a5c:	4620      	mov	r0, r4
  return ulL;
}
 8000a5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  ulL = strlen (ubSrc);
 8000a62:	f002 b9ed 	b.w	8002e40 <strlen>
    ubSrc[ulP] = 0x00;
 8000a66:	7010      	strb	r0, [r2, #0]
 8000a68:	4613      	mov	r3, r2
 8000a6a:	e7ed      	b.n	8000a48 <fnRTRIM+0x10>
}
 8000a6c:	bd10      	pop	{r4, pc}

08000a6e <fnLoByte>:
//---------------------------------------------------------------------------------------------

u08   fnLoByte (u16 uwWord)
{
  return  (u08)(uwWord & 0x00FF);
}
 8000a6e:	b2c0      	uxtb	r0, r0
 8000a70:	4770      	bx	lr

08000a72 <fnHiByte>:

u08   fnHiByte (u16 uwWord)
{
  return  (u08)((uwWord / 0x100) & 0x00FF);
}
 8000a72:	0a00      	lsrs	r0, r0, #8
 8000a74:	4770      	bx	lr

08000a76 <fnBytesToWord>:

  uwWork = (u16) ubHiByte;
  uwWork = uwWork << 8;
  uwWork |= (u16) ubLoByte;
  return uwWork;
}
 8000a76:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
 8000a7a:	4770      	bx	lr

08000a7c <fnBCD2Bin>:
{
  u08 ubWork;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  ubWork = ((ubBCD >> 4) & 0x0F) * 10;
 8000a7c:	0903      	lsrs	r3, r0, #4
 8000a7e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
  ubWork += ubBCD & 0x0F;
 8000a82:	f000 000f 	and.w	r0, r0, #15
 8000a86:	eb00 0043 	add.w	r0, r0, r3, lsl #1
  return ubWork;
}
 8000a8a:	b2c0      	uxtb	r0, r0
 8000a8c:	4770      	bx	lr

08000a8e <fnBin2BCD>:
{
  u08 ubWork;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  ubWork = ((ubBin / 10) << 4) & 0xF0;
 8000a8e:	230a      	movs	r3, #10
 8000a90:	fbb0 f2f3 	udiv	r2, r0, r3
  ubWork |= ((ubBin % 10) & 0x0F);
 8000a94:	fb03 0012 	mls	r0, r3, r2, r0
 8000a98:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
  return ubWork;
}
 8000a9c:	b2c0      	uxtb	r0, r0
 8000a9e:	4770      	bx	lr

08000aa0 <fnByte2Chr>:
{
  u08 ubWork = 0;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  ubByte &= 0x0F;
 8000aa0:	f000 000f 	and.w	r0, r0, #15

  switch (ubByte)     //---!!! switch case function laid out in an unusual way.  Possible syntax fix needed.
 8000aa4:	f1a0 030a 	sub.w	r3, r0, #10
 8000aa8:	2b05      	cmp	r3, #5
  {
    case 0: case 1: case 2: case 3: case 4:
    case 5: case 6: case 7: case 8: case 9:
      ubWork = 0x30 + ubByte;
 8000aaa:	bf8c      	ite	hi
 8000aac:	3030      	addhi	r0, #48	; 0x30
      break;

    case 10: case 11: case 12: case 13: case 14: case 15:
      ubWork = ubByte + 0x37;
 8000aae:	3037      	addls	r0, #55	; 0x37
      break;
  }

  return ubWork;
}
 8000ab0:	4770      	bx	lr

08000ab2 <fnByte2Hex>:
{
 8000ab2:	4602      	mov	r2, r0
 8000ab4:	b508      	push	{r3, lr}
  ubOut[0] = fnByte2Chr (ubWork);
 8000ab6:	0900      	lsrs	r0, r0, #4
 8000ab8:	f7ff fff2 	bl	8000aa0 <fnByte2Chr>
 8000abc:	7008      	strb	r0, [r1, #0]
  ubOut[1] = fnByte2Chr (ubWork);
 8000abe:	f002 000f 	and.w	r0, r2, #15
 8000ac2:	f7ff ffed 	bl	8000aa0 <fnByte2Chr>
 8000ac6:	7048      	strb	r0, [r1, #1]
}
 8000ac8:	bd08      	pop	{r3, pc}

08000aca <fnWord2Hex>:
{
 8000aca:	4602      	mov	r2, r0
 8000acc:	b510      	push	{r4, lr}
  ubWork = (uwWord & 0xF000) / 0x1000;
 8000ace:	f400 4470 	and.w	r4, r0, #61440	; 0xf000
  ubOut[0] = fnByte2Chr (ubWork);
 8000ad2:	0b00      	lsrs	r0, r0, #12
 8000ad4:	f7ff ffe4 	bl	8000aa0 <fnByte2Chr>
 8000ad8:	7008      	strb	r0, [r1, #0]
  ubOut[1] = fnByte2Chr (ubWork);
 8000ada:	0a20      	lsrs	r0, r4, #8
 8000adc:	f7ff ffe0 	bl	8000aa0 <fnByte2Chr>
 8000ae0:	7048      	strb	r0, [r1, #1]
  ubOut[2] = fnByte2Chr (ubWork);
 8000ae2:	f3c2 1003 	ubfx	r0, r2, #4, #4
 8000ae6:	f7ff ffdb 	bl	8000aa0 <fnByte2Chr>
 8000aea:	7088      	strb	r0, [r1, #2]
  ubOut[3] = fnByte2Chr (ubWork);
 8000aec:	f002 000f 	and.w	r0, r2, #15
 8000af0:	f7ff ffd6 	bl	8000aa0 <fnByte2Chr>
 8000af4:	70c8      	strb	r0, [r1, #3]
}
 8000af6:	bd10      	pop	{r4, pc}

08000af8 <fnLong2Hex>:
{
 8000af8:	4602      	mov	r2, r0
 8000afa:	b508      	push	{r3, lr}
  ubOut[0] = fnByte2Chr (ubWork);
 8000afc:	f3c0 6003 	ubfx	r0, r0, #24, #4
 8000b00:	f7ff ffce 	bl	8000aa0 <fnByte2Chr>
 8000b04:	7008      	strb	r0, [r1, #0]
  ubOut[1] = fnByte2Chr (ubWork);
 8000b06:	f3c2 5003 	ubfx	r0, r2, #20, #4
 8000b0a:	f7ff ffc9 	bl	8000aa0 <fnByte2Chr>
 8000b0e:	7048      	strb	r0, [r1, #1]
  ubOut[3] = fnByte2Chr (ubWork);
 8000b10:	f3c2 4003 	ubfx	r0, r2, #16, #4
 8000b14:	f7ff ffc4 	bl	8000aa0 <fnByte2Chr>
 8000b18:	70c8      	strb	r0, [r1, #3]
  ubOut[4] = fnByte2Chr (ubWork);
 8000b1a:	f3c2 3003 	ubfx	r0, r2, #12, #4
 8000b1e:	f7ff ffbf 	bl	8000aa0 <fnByte2Chr>
 8000b22:	7108      	strb	r0, [r1, #4]
  ubOut[5] = fnByte2Chr (ubWork);
 8000b24:	f3c2 2003 	ubfx	r0, r2, #8, #4
 8000b28:	f7ff ffba 	bl	8000aa0 <fnByte2Chr>
 8000b2c:	7148      	strb	r0, [r1, #5]
  ubOut[6] = fnByte2Chr (ubWork);
 8000b2e:	f3c2 1003 	ubfx	r0, r2, #4, #4
 8000b32:	f7ff ffb5 	bl	8000aa0 <fnByte2Chr>
 8000b36:	7188      	strb	r0, [r1, #6]
  ubOut[7] = fnByte2Chr (ubWork);
 8000b38:	f002 000f 	and.w	r0, r2, #15
 8000b3c:	f7ff ffb0 	bl	8000aa0 <fnByte2Chr>
 8000b40:	71c8      	strb	r0, [r1, #7]
}
 8000b42:	bd08      	pop	{r3, pc}

08000b44 <fnBig2Hex>:
{
 8000b44:	b510      	push	{r4, lr}
 8000b46:	4604      	mov	r4, r0
  ubOut[0] = fnByte2Chr (ubWork);
 8000b48:	f3c1 6003 	ubfx	r0, r1, #24, #4
 8000b4c:	f7ff ffa8 	bl	8000aa0 <fnByte2Chr>
 8000b50:	7010      	strb	r0, [r2, #0]
  ubOut[1] = fnByte2Chr (ubWork);
 8000b52:	f3c1 5003 	ubfx	r0, r1, #20, #4
 8000b56:	f7ff ffa3 	bl	8000aa0 <fnByte2Chr>
 8000b5a:	7050      	strb	r0, [r2, #1]
  ubOut[3] = fnByte2Chr (ubWork);
 8000b5c:	f3c1 4003 	ubfx	r0, r1, #16, #4
 8000b60:	f7ff ff9e 	bl	8000aa0 <fnByte2Chr>
 8000b64:	70d0      	strb	r0, [r2, #3]
  ubOut[4] = fnByte2Chr (ubWork);
 8000b66:	f3c1 3003 	ubfx	r0, r1, #12, #4
 8000b6a:	f7ff ff99 	bl	8000aa0 <fnByte2Chr>
 8000b6e:	7110      	strb	r0, [r2, #4]
  ubOut[5] = fnByte2Chr (ubWork);
 8000b70:	f3c1 2003 	ubfx	r0, r1, #8, #4
 8000b74:	f7ff ff94 	bl	8000aa0 <fnByte2Chr>
 8000b78:	7150      	strb	r0, [r2, #5]
  ubOut[6] = fnByte2Chr (ubWork);
 8000b7a:	f3c1 1003 	ubfx	r0, r1, #4, #4
 8000b7e:	f7ff ff8f 	bl	8000aa0 <fnByte2Chr>
 8000b82:	7190      	strb	r0, [r2, #6]
  ubOut[7] = fnByte2Chr (ubWork);
 8000b84:	f001 000f 	and.w	r0, r1, #15
 8000b88:	f7ff ff8a 	bl	8000aa0 <fnByte2Chr>
 8000b8c:	71d0      	strb	r0, [r2, #7]
  ubOut[8] = fnByte2Chr (ubWork);
 8000b8e:	0f20      	lsrs	r0, r4, #28
 8000b90:	f7ff ff86 	bl	8000aa0 <fnByte2Chr>
 8000b94:	7210      	strb	r0, [r2, #8]
  ubOut[9] = fnByte2Chr (ubWork);
 8000b96:	f3c4 6003 	ubfx	r0, r4, #24, #4
 8000b9a:	f7ff ff81 	bl	8000aa0 <fnByte2Chr>
 8000b9e:	7250      	strb	r0, [r2, #9]
  ubOut[10] = fnByte2Chr (ubWork);
 8000ba0:	f3c4 5003 	ubfx	r0, r4, #20, #4
 8000ba4:	f7ff ff7c 	bl	8000aa0 <fnByte2Chr>
 8000ba8:	7290      	strb	r0, [r2, #10]
  ubOut[11] = fnByte2Chr (ubWork);
 8000baa:	f3c4 4003 	ubfx	r0, r4, #16, #4
 8000bae:	f7ff ff77 	bl	8000aa0 <fnByte2Chr>
 8000bb2:	72d0      	strb	r0, [r2, #11]
  ubOut[12] = fnByte2Chr (ubWork);
 8000bb4:	f3c4 3003 	ubfx	r0, r4, #12, #4
 8000bb8:	f7ff ff72 	bl	8000aa0 <fnByte2Chr>
 8000bbc:	7310      	strb	r0, [r2, #12]
  ubOut[13] = fnByte2Chr (ubWork);
 8000bbe:	f3c4 2003 	ubfx	r0, r4, #8, #4
 8000bc2:	f7ff ff6d 	bl	8000aa0 <fnByte2Chr>
 8000bc6:	7350      	strb	r0, [r2, #13]
  ubOut[14] = fnByte2Chr (ubWork);
 8000bc8:	f3c4 1003 	ubfx	r0, r4, #4, #4
 8000bcc:	f7ff ff68 	bl	8000aa0 <fnByte2Chr>
 8000bd0:	7390      	strb	r0, [r2, #14]
  ubOut[15] = fnByte2Chr (ubWork);
 8000bd2:	f004 000f 	and.w	r0, r4, #15
 8000bd6:	f7ff ff63 	bl	8000aa0 <fnByte2Chr>
 8000bda:	73d0      	strb	r0, [r2, #15]
}
 8000bdc:	bd10      	pop	{r4, pc}

08000bde <fnStrCpy>:

//---------------------------------------------------------------------------------------------
//                        Function to simply copy 1 string to another
//---------------------------------------------------------------------------------------------
void  fnStrCpy (u08 ubDst[], u08 ubSrc[])
{
 8000bde:	b530      	push	{r4, r5, lr}
  u16 uwPtr = 0;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  while (ubSrc[uwPtr])
 8000be0:	2200      	movs	r2, #0
 8000be2:	b294      	uxth	r4, r2
 8000be4:	1905      	adds	r5, r0, r4
 8000be6:	5d0b      	ldrb	r3, [r1, r4]
 8000be8:	3201      	adds	r2, #1
 8000bea:	b90b      	cbnz	r3, 8000bf0 <fnStrCpy+0x12>
  {
    ubDst[uwPtr] = ubSrc[uwPtr];
    uwPtr++;
  }

  ubDst[uwPtr] = 0;
 8000bec:	702b      	strb	r3, [r5, #0]
}
 8000bee:	bd30      	pop	{r4, r5, pc}
    ubDst[uwPtr] = ubSrc[uwPtr];
 8000bf0:	5503      	strb	r3, [r0, r4]
    uwPtr++;
 8000bf2:	e7f6      	b.n	8000be2 <fnStrCpy+0x4>

08000bf4 <fnStrLen>:

//---------------------------------------------------------------------------------------------
//                      Function to simply measure the length of a string
//---------------------------------------------------------------------------------------------
u16   fnStrLen (u08 ubSrc[])
{
 8000bf4:	4602      	mov	r2, r0
  u16 uwLen = 0;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  while (ubSrc[uwLen])
 8000bf6:	2300      	movs	r3, #0
 8000bf8:	b298      	uxth	r0, r3
 8000bfa:	3301      	adds	r3, #1
 8000bfc:	5c11      	ldrb	r1, [r2, r0]
 8000bfe:	2900      	cmp	r1, #0
 8000c00:	d1fa      	bne.n	8000bf8 <fnStrLen+0x4>
  {
    uwLen++;
  }
  return uwLen;
}
 8000c02:	4770      	bx	lr

08000c04 <fnFindSinS>:
{
 8000c04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000c06:	460e      	mov	r6, r1
 8000c08:	4605      	mov	r5, r0
  uwLF = fnStrLen (ubFind);
 8000c0a:	f7ff fff3 	bl	8000bf4 <fnStrLen>
 8000c0e:	4604      	mov	r4, r0
  uwLS = fnStrLen (ubSrc);
 8000c10:	4630      	mov	r0, r6
 8000c12:	f7ff ffef 	bl	8000bf4 <fnStrLen>
  for (uwA = 0; uwA < (uwLS - uwLF); uwA++)
 8000c16:	2300      	movs	r3, #0
 8000c18:	1b00      	subs	r0, r0, r4
 8000c1a:	442c      	add	r4, r5
 8000c1c:	b29a      	uxth	r2, r3
 8000c1e:	4282      	cmp	r2, r0
 8000c20:	da0c      	bge.n	8000c3c <fnFindSinS+0x38>
 8000c22:	4432      	add	r2, r6
 8000c24:	4629      	mov	r1, r5
 8000c26:	e005      	b.n	8000c34 <fnFindSinS+0x30>
      if (ubSrc[uwA+uwB] != ubFind[uwB])          //--- Check each Src byte for match in Find
 8000c28:	f812 cb01 	ldrb.w	ip, [r2], #1
 8000c2c:	f811 7b01 	ldrb.w	r7, [r1], #1
 8000c30:	45bc      	cmp	ip, r7
 8000c32:	d106      	bne.n	8000c42 <fnFindSinS+0x3e>
    for (uwB = 0; uwB < uwLF; uwB++)
 8000c34:	42a1      	cmp	r1, r4
 8000c36:	d1f7      	bne.n	8000c28 <fnFindSinS+0x24>
      return uwA;
 8000c38:	b218      	sxth	r0, r3
 8000c3a:	e001      	b.n	8000c40 <fnFindSinS+0x3c>
  return -1;                                      //--- -1 is failed to find
 8000c3c:	f04f 30ff 	mov.w	r0, #4294967295
}
 8000c40:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  for (uwA = 0; uwA < (uwLS - uwLF); uwA++)
 8000c42:	3301      	adds	r3, #1
 8000c44:	e7ea      	b.n	8000c1c <fnFindSinS+0x18>

08000c46 <fnCINTF>:

//---------------------------------------------------------------------------------------------
//                      Convert Single Precision Value to Closest Integer
//---------------------------------------------------------------------------------------------
s64 fnCINTF (flt sfFloat)
{
 8000c46:	b538      	push	{r3, r4, r5, lr}
  flt sfDelta;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  //--- Extract Integer and Fractional Parts
  sxWork = (s64)sfFloat;                          //--- Extract Integer Part
 8000c48:	ee10 0a10 	vmov	r0, s0
{
 8000c4c:	ed2d 8b02 	vpush	{d8}
 8000c50:	eeb0 8a40 	vmov.f32	s16, s0
  sxWork = (s64)sfFloat;                          //--- Extract Integer Part
 8000c54:	f002 f862 	bl	8002d1c <__aeabi_f2lz>
 8000c58:	4604      	mov	r4, r0
 8000c5a:	460d      	mov	r5, r1
  sfDelta = sfFloat - (flt)sxWork;                //--- Extract Fractional Part
 8000c5c:	f002 f820 	bl	8002ca0 <__aeabi_l2f>
 8000c60:	ee07 0a90 	vmov	s15, r0
 8000c64:	ee38 0a67 	vsub.f32	s0, s16, s15

  //--- Test if rounding is necessary
  if (fabsf(sfFloat - (flt)sfDelta) > 0.5)        //--- If Delta > 0.5 then round up/down
 8000c68:	eef6 7a00 	vmov.f32	s15, #96	; 0x3f000000  0.5
 8000c6c:	ee38 8a40 	vsub.f32	s16, s16, s0
 8000c70:	eeb0 8ac8 	vabs.f32	s16, s16
 8000c74:	eeb4 8ae7 	vcmpe.f32	s16, s15
 8000c78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000c7c:	dd06      	ble.n	8000c8c <fnCINTF+0x46>
  {
    //--- Test if we round up or down
    if (sxWork > 0)
 8000c7e:	2c01      	cmp	r4, #1
 8000c80:	f175 0300 	sbcs.w	r3, r5, #0
 8000c84:	db07      	blt.n	8000c96 <fnCINTF+0x50>
      sxWork = sxWork + 1;                        //--- Round Up
 8000c86:	3401      	adds	r4, #1
 8000c88:	f145 0500 	adc.w	r5, r5, #0
    else
      sxWork = sxWork - 1;                        //--- Round Down
  }

  return sxWork;                                  //--- Return Rounded Integer Value
}
 8000c8c:	ecbd 8b02 	vpop	{d8}
 8000c90:	4620      	mov	r0, r4
 8000c92:	4629      	mov	r1, r5
 8000c94:	bd38      	pop	{r3, r4, r5, pc}
      sxWork = sxWork - 1;                        //--- Round Down
 8000c96:	f114 34ff 	adds.w	r4, r4, #4294967295
 8000c9a:	f145 35ff 	adc.w	r5, r5, #4294967295
  return sxWork;                                  //--- Return Rounded Integer Value
 8000c9e:	e7f5      	b.n	8000c8c <fnCINTF+0x46>

08000ca0 <fnCINTD>:

//---------------------------------------------------------------------------------------------
//                   Convert Float Double Precision Value to Closest integer
//---------------------------------------------------------------------------------------------
s64 fnCINTD (dbl dfFloat)
{
 8000ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8000ca2:	ec57 6b10 	vmov	r6, r7, d0
  dbl dfDelta;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  //--- Extract Integer and Fractional Parts
  sxWork = (s64)dfFloat;                          //--- Extract Integer Part
 8000ca6:	ee10 0a10 	vmov	r0, s0
 8000caa:	4639      	mov	r1, r7
 8000cac:	f002 f84a 	bl	8002d44 <__aeabi_d2lz>
 8000cb0:	4604      	mov	r4, r0
 8000cb2:	460d      	mov	r5, r1
  dfDelta = dfFloat - (dbl)sxWork;                //--- Extract Fractional Part
 8000cb4:	f001 fbce 	bl	8002454 <__aeabi_l2d>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	460b      	mov	r3, r1
 8000cbc:	4630      	mov	r0, r6
 8000cbe:	4639      	mov	r1, r7
 8000cc0:	f001 fa3e 	bl	8002140 <__aeabi_dsub>
 8000cc4:	4602      	mov	r2, r0
 8000cc6:	460b      	mov	r3, r1

  //--- Test if rounding is necessary
  if (fabsf(dfFloat - (dbl)dfDelta) > 0.5)        //--- If Delta > 0.5 then round up/down
 8000cc8:	4630      	mov	r0, r6
 8000cca:	4639      	mov	r1, r7
 8000ccc:	f001 fa38 	bl	8002140 <__aeabi_dsub>
 8000cd0:	f001 fec6 	bl	8002a60 <__aeabi_d2f>
 8000cd4:	ee07 0a90 	vmov	s15, r0
 8000cd8:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 8000cdc:	eef0 7ae7 	vabs.f32	s15, s15
 8000ce0:	eef4 7ac7 	vcmpe.f32	s15, s14
 8000ce4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000ce8:	dd06      	ble.n	8000cf8 <fnCINTD+0x58>
  {
    //--- Test if we round up or down
    if (sxWork > 0)
 8000cea:	2c01      	cmp	r4, #1
 8000cec:	f175 0300 	sbcs.w	r3, r5, #0
 8000cf0:	db05      	blt.n	8000cfe <fnCINTD+0x5e>
      sxWork = sxWork + 1;                        //--- Round Up
 8000cf2:	3401      	adds	r4, #1
 8000cf4:	f145 0500 	adc.w	r5, r5, #0
    else
      sxWork = sxWork - 1;                        //--- Round Down
  }

  return sxWork;                                  //--- Return Rounded Integer Value
}
 8000cf8:	4620      	mov	r0, r4
 8000cfa:	4629      	mov	r1, r5
 8000cfc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
      sxWork = sxWork - 1;                        //--- Round Down
 8000cfe:	f114 34ff 	adds.w	r4, r4, #4294967295
 8000d02:	f145 35ff 	adc.w	r5, r5, #4294967295
  return sxWork;                                  //--- Return Rounded Integer Value
 8000d06:	e7f7      	b.n	8000cf8 <fnCINTD+0x58>

08000d08 <fnLc2Uc>:
//---------------------------------------------------------------------------------------------
//                       Convert a lower case (a-z) to Upper Case (A-Z)
//---------------------------------------------------------------------------------------------
u08 fnLc2Uc (u08  ubChar)
{
  if ((ubChar > 0x60) && (ubChar < 0x7B))
 8000d08:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8000d0c:	2b19      	cmp	r3, #25
  {
    ubChar -= 0x20;
 8000d0e:	bf9c      	itt	ls
 8000d10:	3820      	subls	r0, #32
 8000d12:	b2c0      	uxtbls	r0, r0
  }

  return ubChar;
}
 8000d14:	4770      	bx	lr

08000d16 <fnUc2Lc>:


//--- Convert an Upper case (A-Z) to Lower Case (a-z)
u08 fnUc2Lc (u08  ubChar)
{
  if ((ubChar > 0x20) && (ubChar < 0x3B))
 8000d16:	f1a0 0321 	sub.w	r3, r0, #33	; 0x21
 8000d1a:	2b19      	cmp	r3, #25
  {
    ubChar += 0x20;
 8000d1c:	bf9c      	itt	ls
 8000d1e:	3020      	addls	r0, #32
 8000d20:	b2c0      	uxtbls	r0, r0
  }

  return ubChar;
}
 8000d22:	4770      	bx	lr

08000d24 <fnFtoA>:

//---------------------------------------------------------------------------------------------
//               Converts a Single Precision Floating-Point number to a String
//---------------------------------------------------------------------------------------------
void fnFtoA(flt sfIn, u08 sOut[])
{
 8000d24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
  uwPtr = 0;                                      //--- Reset output character pointer
  sOut[uwPtr] = 0;

  //--- Handle special cases
  uwFlag = isnan(sfIn);
  if (uwFlag)                                     //--- Not a Number
 8000d28:	eeb4 0a40 	vcmp.f32	s0, s0
  sOut[uwPtr] = 0;
 8000d2c:	2400      	movs	r4, #0
  if (uwFlag)                                     //--- Not a Number
 8000d2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
{
 8000d32:	ed2d 8b06 	vpush	{d8-d10}
 8000d36:	4606      	mov	r6, r0
 8000d38:	eeb0 8a40 	vmov.f32	s16, s0
  sOut[uwPtr] = 0;
 8000d3c:	7004      	strb	r4, [r0, #0]
  if (uwFlag)                                     //--- Not a Number
 8000d3e:	d706      	bvc.n	8000d4e <fnFtoA+0x2a>
  {
    strcpy(sOut, "#NaN");                         //--- Copy Notation and Exit
 8000d40:	4983      	ldr	r1, [pc, #524]	; (8000f50 <fnFtoA+0x22c>)
    uwPtr += swM0;                                //--- Point to end of string
  }

  sOut[uwPtr] = 0;                                //--- Terminate output string
  return;
}
 8000d42:	ecbd 8b06 	vpop	{d8-d10}
 8000d46:	e8bd 43f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    strcpy(sOut, "0.0");                          //--- Copy Notation and Exit
 8000d4a:	f004 b9d3 	b.w	80050f4 <strcpy>
  uwFlag = isinf(sfIn);                           //--- Infinite
 8000d4e:	ed9f 7a81 	vldr	s14, [pc, #516]	; 8000f54 <fnFtoA+0x230>
 8000d52:	eef0 7ac0 	vabs.f32	s15, s0
 8000d56:	eef4 7a47 	vcmp.f32	s15, s14
 8000d5a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d5e:	eef0 9a47 	vmov.f32	s19, s14
 8000d62:	dc06      	bgt.n	8000d72 <fnFtoA+0x4e>
  if (sfIn == 0.0)
 8000d64:	eeb5 0a40 	vcmp.f32	s0, #0.0
 8000d68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000d6c:	d103      	bne.n	8000d76 <fnFtoA+0x52>
    strcpy(sOut, "0.0");                          //--- Copy Notation and Exit
 8000d6e:	497a      	ldr	r1, [pc, #488]	; (8000f58 <fnFtoA+0x234>)
 8000d70:	e7e7      	b.n	8000d42 <fnFtoA+0x1e>
    strcpy(sOut, "#Inf");                         //--- Copy Notation and Exit
 8000d72:	497a      	ldr	r1, [pc, #488]	; (8000f5c <fnFtoA+0x238>)
 8000d74:	e7e5      	b.n	8000d42 <fnFtoA+0x1e>
  if (sfIn < 0)
 8000d76:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    sfIn = -sfIn;                                 //--- Reverse sign of number
 8000d7e:	bf42      	ittt	mi
 8000d80:	eeb1 8a40 	vnegmi.f32	s16, s0
    sOut[uwPtr] = '-';                            //--- Add Negative sign to output string
 8000d84:	232d      	movmi	r3, #45	; 0x2d
 8000d86:	7003      	strbmi	r3, [r0, #0]
  sfMag = log10(sfIn);
 8000d88:	ee18 0a10 	vmov	r0, s16
    uwPtr++;
 8000d8c:	bf48      	it	mi
 8000d8e:	2401      	movmi	r4, #1
  sfMag = log10(sfIn);
 8000d90:	f001 fb36 	bl	8002400 <__aeabi_f2d>
 8000d94:	4680      	mov	r8, r0
 8000d96:	4689      	mov	r9, r1
 8000d98:	ec49 8b10 	vmov	d0, r8, r9
 8000d9c:	f002 f970 	bl	8003080 <log10>
 8000da0:	ec51 0b10 	vmov	r0, r1, d0
 8000da4:	f001 fe5c 	bl	8002a60 <__aeabi_d2f>
 8000da8:	ee09 0a10 	vmov	s18, r0
  if ((sfMag > 6.0) || (sfMag < -6.0) || (ubNflag && (sfMag > 6.0)))
 8000dac:	eef1 7a08 	vmov.f32	s15, #24	; 0x40c00000  6.0
 8000db0:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8000db4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000db8:	dc06      	bgt.n	8000dc8 <fnFtoA+0xa4>
 8000dba:	eef9 7a08 	vmov.f32	s15, #152	; 0xc0c00000 -6.0
 8000dbe:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8000dc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dc6:	d523      	bpl.n	8000e10 <fnFtoA+0xec>
    if (sfMag < 0.0) sfMag -= 1.0;
 8000dc8:	eeb5 9ac0 	vcmpe.f32	s18, #0.0
 8000dcc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000dd0:	bf44      	itt	mi
 8000dd2:	eef7 7a00 	vmovmi.f32	s15, #112	; 0x3f800000  1.0
 8000dd6:	ee39 9a67 	vsubmi.f32	s18, s18, s15
    sfIn = sfIn / pow(10.0, sfMag);
 8000dda:	ee19 0a10 	vmov	r0, s18
 8000dde:	f001 fb0f 	bl	8002400 <__aeabi_f2d>
 8000de2:	ed9f 0b59 	vldr	d0, [pc, #356]	; 8000f48 <fnFtoA+0x224>
 8000de6:	ec41 0b11 	vmov	d1, r0, r1
 8000dea:	f002 f991 	bl	8003110 <pow>
 8000dee:	4640      	mov	r0, r8
 8000df0:	ec53 2b10 	vmov	r2, r3, d0
 8000df4:	4649      	mov	r1, r9
 8000df6:	f001 fc85 	bl	8002704 <__aeabi_ddiv>
 8000dfa:	f001 fe31 	bl	8002a60 <__aeabi_d2f>
 8000dfe:	ee08 0a10 	vmov	s16, r0
    sfM1 = sfMag;
 8000e02:	eef0 8a49 	vmov.f32	s17, s18
    ubEflag = True;
 8000e06:	f04f 0801 	mov.w	r8, #1
  if (sfMag < 1.0) sfMag = 0;
 8000e0a:	ed9f 9a55 	vldr	s18, [pc, #340]	; 8000f60 <fnFtoA+0x23c>
 8000e0e:	e008      	b.n	8000e22 <fnFtoA+0xfe>
 8000e10:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 8000e14:	eeb4 9ae7 	vcmpe.f32	s18, s15
 8000e18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  u08   ubEflag = False;                          //--- Use Exponent Flag
 8000e1c:	f04f 0800 	mov.w	r8, #0
  if (sfMag < 1.0) sfMag = 0;
 8000e20:	d4f3      	bmi.n	8000e0a <fnFtoA+0xe6>
  swM0 = (s16)sfMag;                              //--- Save integer magnititude
 8000e22:	eebd 9ac9 	vcvt.s32.f32	s18, s18
  while ((sfIn > 0.0000001f) || swM0 >= 0)
 8000e26:	ed9f aa4f 	vldr	s20, [pc, #316]	; 8000f64 <fnFtoA+0x240>
  swM0 = (s16)sfMag;                              //--- Save integer magnititude
 8000e2a:	ee19 3a10 	vmov	r3, s18
      sOut[uwPtr] = '.';
 8000e2e:	272e      	movs	r7, #46	; 0x2e
  swM0 = (s16)sfMag;                              //--- Save integer magnititude
 8000e30:	b21d      	sxth	r5, r3
  while ((sfIn > 0.0000001f) || swM0 >= 0)
 8000e32:	eeb4 8aca 	vcmpe.f32	s16, s20
 8000e36:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000e3a:	dc33      	bgt.n	8000ea4 <fnFtoA+0x180>
 8000e3c:	2d00      	cmp	r5, #0
 8000e3e:	da31      	bge.n	8000ea4 <fnFtoA+0x180>
  if (ubEflag)
 8000e40:	f1b8 0f00 	cmp.w	r8, #0
 8000e44:	d028      	beq.n	8000e98 <fnFtoA+0x174>
    if (sfM1 > 0)                                 //--- Add exponent sign to string
 8000e46:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 8000e4a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    sOut[uwPtr] = 'E';                            //--- Add exponent character to string
 8000e4e:	f04f 0345 	mov.w	r3, #69	; 0x45
 8000e52:	5533      	strb	r3, [r6, r4]
      sfM1 = -sfM1;
 8000e54:	bfd8      	it	le
 8000e56:	eef1 8a68 	vnegle.f32	s17, s17
    uwPtr++;                                      //--- Bump Pointer
 8000e5a:	f104 0301 	add.w	r3, r4, #1
 8000e5e:	b29b      	uxth	r3, r3
    swM1 = (s16)sfM1;
 8000e60:	eefd 8ae8 	vcvt.s32.f32	s17, s17
      sOut[uwPtr] = '+';                          //--- Add exponent + sign to string
 8000e64:	bfcb      	itete	gt
 8000e66:	222b      	movgt	r2, #43	; 0x2b
      sOut[uwPtr] = '-';                          //--- Add exponent - sign to string
 8000e68:	222d      	movle	r2, #45	; 0x2d
      sOut[uwPtr] = '+';                          //--- Add exponent + sign to string
 8000e6a:	54f2      	strbgt	r2, [r6, r3]
      sOut[uwPtr] = '-';                          //--- Add exponent - sign to string
 8000e6c:	54f2      	strble	r2, [r6, r3]
    swM1 = (s16)sfM1;
 8000e6e:	ee18 3a90 	vmov	r3, s17
 8000e72:	3402      	adds	r4, #2
 8000e74:	b2a4      	uxth	r4, r4
 8000e76:	b21b      	sxth	r3, r3
    swM0 = 0;
 8000e78:	2200      	movs	r2, #0
      sOut[uwPtr] = '0' + (swM1 % 10);            //--- Place Numeric Character in String
 8000e7a:	250a      	movs	r5, #10
 8000e7c:	b290      	uxth	r0, r2
    while (swM1 > 0)
 8000e7e:	2b00      	cmp	r3, #0
 8000e80:	fa14 f282 	uxtah	r2, r4, r2
 8000e84:	b291      	uxth	r1, r2
 8000e86:	dc46      	bgt.n	8000f16 <fnFtoA+0x1f2>
    for (swI = 0, swJ = swM0 - 1; swI < swJ; swI++, swJ--)
 8000e88:	1e43      	subs	r3, r0, #1
 8000e8a:	b21b      	sxth	r3, r3
 8000e8c:	2500      	movs	r5, #0
 8000e8e:	b22c      	sxth	r4, r5
 8000e90:	42a3      	cmp	r3, r4
 8000e92:	dc4a      	bgt.n	8000f2a <fnFtoA+0x206>
    uwPtr += swM0;                                //--- Point to end of string
 8000e94:	180c      	adds	r4, r1, r0
 8000e96:	b2a4      	uxth	r4, r4
}
 8000e98:	ecbd 8b06 	vpop	{d8-d10}
  sOut[uwPtr] = 0;                                //--- Terminate output string
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	5533      	strb	r3, [r6, r4]
}
 8000ea0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
    sfWeight = powf(10.0, swM0);
 8000ea4:	ee07 5a90 	vmov	s15, r5
 8000ea8:	eeb2 0a04 	vmov.f32	s0, #36	; 0x41200000  10.0
 8000eac:	eef8 0ae7 	vcvt.f32.s32	s1, s15
 8000eb0:	f002 fa00 	bl	80032b4 <powf>
    if ((sfWeight > 0) && (!isinf(sfWeight)))
 8000eb4:	eeb5 0ac0 	vcmpe.f32	s0, #0.0
 8000eb8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    sfWeight = powf(10.0, swM0);
 8000ebc:	eeb0 9a40 	vmov.f32	s18, s0
    if ((sfWeight > 0) && (!isinf(sfWeight)))
 8000ec0:	dd1d      	ble.n	8000efe <fnFtoA+0x1da>
 8000ec2:	eeb4 0a69 	vcmp.f32	s0, s19
 8000ec6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8000eca:	dc18      	bgt.n	8000efe <fnFtoA+0x1da>
      swDigit = floor(sfIn / sfWeight);           //--- Calculate the Exponent Digits
 8000ecc:	eec8 7a00 	vdiv.f32	s15, s16, s0
 8000ed0:	ee17 0a90 	vmov	r0, s15
 8000ed4:	f001 fa94 	bl	8002400 <__aeabi_f2d>
 8000ed8:	ec41 0b10 	vmov	d0, r0, r1
 8000edc:	f002 f84c 	bl	8002f78 <floor>
 8000ee0:	ec51 0b10 	vmov	r0, r1, d0
 8000ee4:	f001 fd94 	bl	8002a10 <__aeabi_d2iz>
 8000ee8:	b200      	sxth	r0, r0
      sfIn -= ((float)swDigit * sfWeight);
 8000eea:	ee07 0a90 	vmov	s15, r0
 8000eee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
      sOut[uwPtr] = 0x30 + swDigit;               //--- Add Digit to output string
 8000ef2:	3030      	adds	r0, #48	; 0x30
      sfIn -= ((float)swDigit * sfWeight);
 8000ef4:	eea7 8ac9 	vfms.f32	s16, s15, s18
      sOut[uwPtr] = 0x30 + swDigit;               //--- Add Digit to output string
 8000ef8:	5530      	strb	r0, [r6, r4]
      uwPtr++;
 8000efa:	3401      	adds	r4, #1
 8000efc:	b2a4      	uxth	r4, r4
    if ((swM0 == 0) && (sfIn > 0))
 8000efe:	b93d      	cbnz	r5, 8000f10 <fnFtoA+0x1ec>
 8000f00:	eeb5 8ac0 	vcmpe.f32	s16, #0.0
 8000f04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
      sOut[uwPtr] = '.';
 8000f08:	bfc2      	ittt	gt
 8000f0a:	5537      	strbgt	r7, [r6, r4]
      uwPtr++;
 8000f0c:	3401      	addgt	r4, #1
 8000f0e:	b2a4      	uxthgt	r4, r4
    swM0 -= 1;
 8000f10:	3d01      	subs	r5, #1
 8000f12:	b22d      	sxth	r5, r5
 8000f14:	e78d      	b.n	8000e32 <fnFtoA+0x10e>
      sOut[uwPtr] = '0' + (swM1 % 10);            //--- Place Numeric Character in String
 8000f16:	fb93 f2f5 	sdiv	r2, r3, r5
 8000f1a:	fb05 3312 	mls	r3, r5, r2, r3
 8000f1e:	3330      	adds	r3, #48	; 0x30
 8000f20:	5473      	strb	r3, [r6, r1]
      swM1 /= 10;                                 //=== Divide by 10
 8000f22:	b213      	sxth	r3, r2
      swM0++;                                     //--- Increment Magnitude
 8000f24:	1c42      	adds	r2, r0, #1
 8000f26:	b212      	sxth	r2, r2
 8000f28:	e7a8      	b.n	8000e7c <fnFtoA+0x158>
      sOut[swI] ^= sOut[swJ];
 8000f2a:	5cf7      	ldrb	r7, [r6, r3]
 8000f2c:	5d32      	ldrb	r2, [r6, r4]
 8000f2e:	407a      	eors	r2, r7
 8000f30:	5532      	strb	r2, [r6, r4]
      sOut[swJ] ^= sOut[swI];
 8000f32:	5cf7      	ldrb	r7, [r6, r3]
 8000f34:	407a      	eors	r2, r7
 8000f36:	54f2      	strb	r2, [r6, r3]
      sOut[swI] ^= sOut[swJ];
 8000f38:	5d37      	ldrb	r7, [r6, r4]
 8000f3a:	3b01      	subs	r3, #1
 8000f3c:	407a      	eors	r2, r7
 8000f3e:	5532      	strb	r2, [r6, r4]
    for (swI = 0, swJ = swM0 - 1; swI < swJ; swI++, swJ--)
 8000f40:	b21b      	sxth	r3, r3
 8000f42:	3501      	adds	r5, #1
 8000f44:	e7a3      	b.n	8000e8e <fnFtoA+0x16a>
 8000f46:	bf00      	nop
 8000f48:	00000000 	.word	0x00000000
 8000f4c:	40240000 	.word	0x40240000
 8000f50:	08000400 	.word	0x08000400
 8000f54:	7f7fffff 	.word	0x7f7fffff
 8000f58:	0800040a 	.word	0x0800040a
 8000f5c:	08000405 	.word	0x08000405
 8000f60:	00000000 	.word	0x00000000
 8000f64:	33d6bf95 	.word	0x33d6bf95

08000f68 <_sbrk>:
caddr_t _sbrk (int increment)
{
  caddr_t prevHeap;
  caddr_t nextHeap;

  if (heap == NULL)
 8000f68:	4a0a      	ldr	r2, [pc, #40]	; (8000f94 <_sbrk+0x2c>)
 8000f6a:	490b      	ldr	r1, [pc, #44]	; (8000f98 <_sbrk+0x30>)
{
 8000f6c:	4603      	mov	r3, r0
  if (heap == NULL)
 8000f6e:	6810      	ldr	r0, [r2, #0]
 8000f70:	b900      	cbnz	r0, 8000f74 <_sbrk+0xc>
  {
    // first allocation
    heap = (caddr_t)&_HEAP_START;
 8000f72:	6011      	str	r1, [r2, #0]
  }

  prevHeap = heap;
 8000f74:	6810      	ldr	r0, [r2, #0]

  // Always return data aligned on a 8 byte boundary
  nextHeap = (caddr_t)(((s16)(heap + increment) + 7) & ~7);
 8000f76:	4403      	add	r3, r0
 8000f78:	b21b      	sxth	r3, r3
 8000f7a:	3307      	adds	r3, #7
 8000f7c:	f023 0307 	bic.w	r3, r3, #7
  // Check enough space and there is no collision with stack coming the other way
  // if stack is above start of heap

//  if ((((caddr_t)&_HEAP_START < stackPtr) && (nextHeap > stackPtr)) || (nextHeap >= (caddr_t)&_HEAP_END))

  if (((nextHeap < (caddr_t)&_HEAP_START)) || (nextHeap >= (caddr_t)&_HEAP_END))
 8000f80:	428b      	cmp	r3, r1
 8000f82:	d304      	bcc.n	8000f8e <_sbrk+0x26>
 8000f84:	4905      	ldr	r1, [pc, #20]	; (8000f9c <_sbrk+0x34>)
 8000f86:	428b      	cmp	r3, r1
 8000f88:	d201      	bcs.n	8000f8e <_sbrk+0x26>
  {
    return NULL; // error - no more memory
  }
  else
  {
    heap = nextHeap;
 8000f8a:	6013      	str	r3, [r2, #0]
    return (caddr_t) prevHeap;
 8000f8c:	4770      	bx	lr
    return NULL; // error - no more memory
 8000f8e:	2000      	movs	r0, #0
  }
}
 8000f90:	4770      	bx	lr
 8000f92:	bf00      	nop
 8000f94:	2000043c 	.word	0x2000043c
 8000f98:	20001bf8 	.word	0x20001bf8
 8000f9c:	2000fff8 	.word	0x2000fff8

08000fa0 <fnNullTask>:

//---------------------------------------------------------------------------------------------
//                                  Null or Do Nothing Task
//---------------------------------------------------------------------------------------------
void  fnNullTask (union DFLWB unEmptyData)
{
 8000fa0:	b082      	sub	sp, #8
 8000fa2:	ab02      	add	r3, sp, #8
 8000fa4:	e903 0003 	stmdb	r3, {r0, r1}
  GIE;                                            //--- Enable Interrupts on Exit
 8000fa8:	b662      	cpsie	i
}
 8000faa:	b002      	add	sp, #8
 8000fac:	4770      	bx	lr

08000fae <fnScheduleTask>:
{
 8000fae:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8000fb2:	b085      	sub	sp, #20
 8000fb4:	466c      	mov	r4, sp
 8000fb6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8000fba:	f8bd 7000 	ldrh.w	r7, [sp]
  GID;                                            //--- Kill All Interrutps
 8000fbe:	b672      	cpsid	i
    SET_PA11;
 8000fc0:	4b38      	ldr	r3, [pc, #224]	; (80010a4 <fnScheduleTask+0xf6>)
 8000fc2:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000fc6:	601a      	str	r2, [r3, #0]
  STK_CTRL &= 0x00000005;                         //--- Keep SysTick Enabled - Ignore New Int
 8000fc8:	4b37      	ldr	r3, [pc, #220]	; (80010a8 <fnScheduleTask+0xfa>)
 8000fca:	681a      	ldr	r2, [r3, #0]
 8000fcc:	6813      	ldr	r3, [r2, #0]
 8000fce:	f003 0305 	and.w	r3, r3, #5
 8000fd2:	6013      	str	r3, [r2, #0]
  if (stInTask.uwTimer > 0)
 8000fd4:	2f00      	cmp	r7, #0
 8000fd6:	d03c      	beq.n	8001052 <fnScheduleTask+0xa4>
      if (!(stTimerQueue[ulC].uwTimer))           //--- Test if timer type is requested
 8000fd8:	f8df 80e8 	ldr.w	r8, [pc, #232]	; 80010c4 <fnScheduleTask+0x116>
    for (ulC = 0; ulC < TIMER_QUEUE_SIZE; ulC++)
 8000fdc:	2600      	movs	r6, #0
        stTimerQueue[ulC] = stInTask;             //--- Save Task to TimerQueue
 8000fde:	f10d 0910 	add.w	r9, sp, #16
      if (!(stTimerQueue[ulC].uwTimer))           //--- Test if timer type is requested
 8000fe2:	eb08 1306 	add.w	r3, r8, r6, lsl #4
 8000fe6:	881d      	ldrh	r5, [r3, #0]
 8000fe8:	bb65      	cbnz	r5, 8001044 <fnScheduleTask+0x96>
        stTimerQueue[ulC] = stInTask;             //--- Save Task to TimerQueue
 8000fea:	f8ad 7000 	strh.w	r7, [sp]
 8000fee:	46a4      	mov	ip, r4
 8000ff0:	4662      	mov	r2, ip
 8000ff2:	ca03      	ldmia	r2!, {r0, r1}
 8000ff4:	454a      	cmp	r2, r9
 8000ff6:	6018      	str	r0, [r3, #0]
 8000ff8:	6059      	str	r1, [r3, #4]
 8000ffa:	4694      	mov	ip, r2
 8000ffc:	f103 0308 	add.w	r3, r3, #8
 8001000:	d1f6      	bne.n	8000ff0 <fnScheduleTask+0x42>
    for (ulC = 0; ulC < TIMER_QUEUE_SIZE; ulC++)
 8001002:	3601      	adds	r6, #1
 8001004:	2e0a      	cmp	r6, #10
 8001006:	d1ec      	bne.n	8000fe2 <fnScheduleTask+0x34>
  if (!(NVIC_IABR0 || NVIC_IABR1 || NVIC_IABR2))
 8001008:	4b28      	ldr	r3, [pc, #160]	; (80010ac <fnScheduleTask+0xfe>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	b933      	cbnz	r3, 800101c <fnScheduleTask+0x6e>
 800100e:	4b28      	ldr	r3, [pc, #160]	; (80010b0 <fnScheduleTask+0x102>)
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	b91b      	cbnz	r3, 800101c <fnScheduleTask+0x6e>
 8001014:	4b27      	ldr	r3, [pc, #156]	; (80010b4 <fnScheduleTask+0x106>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	b903      	cbnz	r3, 800101c <fnScheduleTask+0x6e>
    GIE;                                          //--- Enable On Exit
 800101a:	b662      	cpsie	i
  if (STK_CTRL & 0x00010000)                      //--- Test if SysTick under flow occured
 800101c:	4c22      	ldr	r4, [pc, #136]	; (80010a8 <fnScheduleTask+0xfa>)
 800101e:	6822      	ldr	r2, [r4, #0]
 8001020:	6812      	ldr	r2, [r2, #0]
 8001022:	03d3      	lsls	r3, r2, #15
 8001024:	d501      	bpl.n	800102a <fnScheduleTask+0x7c>
    fnSysTick_IRQ();                              //--- Execute the SysTick function
 8001026:	f000 fafc 	bl	8001622 <fnSysTick_IRQ>
  STK_CTRL |= 0x00000007;                         //--- Re Enable SysTick Interrupt
 800102a:	6822      	ldr	r2, [r4, #0]
 800102c:	6813      	ldr	r3, [r2, #0]
 800102e:	f043 0307 	orr.w	r3, r3, #7
 8001032:	6013      	str	r3, [r2, #0]
    CLR_PA11;
 8001034:	4b1b      	ldr	r3, [pc, #108]	; (80010a4 <fnScheduleTask+0xf6>)
 8001036:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
}
 800103a:	4628      	mov	r0, r5
    CLR_PA11;
 800103c:	601a      	str	r2, [r3, #0]
}
 800103e:	b005      	add	sp, #20
 8001040:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        fnError (uwError);                        //--- Call the error handler
 8001044:	f24f 0002 	movw	r0, #61442	; 0xf002
 8001048:	f000 ff02 	bl	8001e50 <fnError>
        uwError = ERR_RTOS_SCHED_NO_TIMER;        //--- Error for no timers available
 800104c:	f24f 0502 	movw	r5, #61442	; 0xf002
 8001050:	e7d7      	b.n	8001002 <fnScheduleTask+0x54>
    if (uwTaskCntr < (TASK_QUEUE_SIZE - 1))       //--- Is there Room in the QUEUE?
 8001052:	4d19      	ldr	r5, [pc, #100]	; (80010b8 <fnScheduleTask+0x10a>)
 8001054:	882b      	ldrh	r3, [r5, #0]
 8001056:	b29b      	uxth	r3, r3
 8001058:	2b0e      	cmp	r3, #14
 800105a:	d81f      	bhi.n	800109c <fnScheduleTask+0xee>
      stTaskQueue[uwTaskIptr] = stInTask;         //--- Save Task to TaskQueue
 800105c:	4b17      	ldr	r3, [pc, #92]	; (80010bc <fnScheduleTask+0x10e>)
 800105e:	f8ad 7000 	strh.w	r7, [sp]
 8001062:	881a      	ldrh	r2, [r3, #0]
 8001064:	b291      	uxth	r1, r2
 8001066:	4a16      	ldr	r2, [pc, #88]	; (80010c0 <fnScheduleTask+0x112>)
 8001068:	af04      	add	r7, sp, #16
 800106a:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 800106e:	4626      	mov	r6, r4
 8001070:	ce03      	ldmia	r6!, {r0, r1}
 8001072:	42be      	cmp	r6, r7
 8001074:	6010      	str	r0, [r2, #0]
 8001076:	6051      	str	r1, [r2, #4]
 8001078:	4634      	mov	r4, r6
 800107a:	f102 0208 	add.w	r2, r2, #8
 800107e:	d1f6      	bne.n	800106e <fnScheduleTask+0xc0>
      uwTaskIptr++;                               //--- Bumb the Input Pointer
 8001080:	881a      	ldrh	r2, [r3, #0]
 8001082:	3201      	adds	r2, #1
 8001084:	b292      	uxth	r2, r2
 8001086:	801a      	strh	r2, [r3, #0]
      uwTaskIptr %= TASK_QUEUE_SIZE;              //--- Roll it over
 8001088:	881a      	ldrh	r2, [r3, #0]
 800108a:	f002 020f 	and.w	r2, r2, #15
 800108e:	801a      	strh	r2, [r3, #0]
      uwTaskCntr++;                               //--- Bump task counter +1
 8001090:	882b      	ldrh	r3, [r5, #0]
 8001092:	3301      	adds	r3, #1
 8001094:	b29b      	uxth	r3, r3
 8001096:	802b      	strh	r3, [r5, #0]
      uwError = NO_ERROR;                         //--- Exit with success
 8001098:	2500      	movs	r5, #0
 800109a:	e7b5      	b.n	8001008 <fnScheduleTask+0x5a>
      uwError = ERR_RTOS_SCHED_QUEUE_FULL;        //--- Set Error No QUEUE Room
 800109c:	f24f 0501 	movw	r5, #61441	; 0xf001
 80010a0:	e7b2      	b.n	8001008 <fnScheduleTask+0x5a>
 80010a2:	bf00      	nop
 80010a4:	48000018 	.word	0x48000018
 80010a8:	e000e010 	.word	0xe000e010
 80010ac:	e000e300 	.word	0xe000e300
 80010b0:	e000e304 	.word	0xe000e304
 80010b4:	e000e308 	.word	0xe000e308
 80010b8:	20000606 	.word	0x20000606
 80010bc:	20000504 	.word	0x20000504
 80010c0:	20000506 	.word	0x20000506
 80010c4:	20000464 	.word	0x20000464

080010c8 <fnDispatcher>:
{
 80010c8:	b537      	push	{r0, r1, r2, r4, r5, lr}
  GID;                                            //--- Kill Interrupts on Entry
 80010ca:	b672      	cpsid	i
    SET_PA05;                                     //--- Dispatcher Test Pulse Hi on PA10
 80010cc:	4b1f      	ldr	r3, [pc, #124]	; (800114c <fnDispatcher+0x84>)
 80010ce:	2220      	movs	r2, #32
 80010d0:	601a      	str	r2, [r3, #0]
  if (uwTaskCntr > 0)
 80010d2:	4a1f      	ldr	r2, [pc, #124]	; (8001150 <fnDispatcher+0x88>)
 80010d4:	8813      	ldrh	r3, [r2, #0]
 80010d6:	b29b      	uxth	r3, r3
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d034      	beq.n	8001146 <fnDispatcher+0x7e>
    uwTaskCntr--;                                 //--- Bump counter -1
 80010dc:	8813      	ldrh	r3, [r2, #0]
 80010de:	3b01      	subs	r3, #1
 80010e0:	b29b      	uxth	r3, r3
 80010e2:	8013      	strh	r3, [r2, #0]
    ptrTask = (void (*)) stTaskQueue[uwTaskOptr].ptrTask;
 80010e4:	4b1b      	ldr	r3, [pc, #108]	; (8001154 <fnDispatcher+0x8c>)
 80010e6:	4a1c      	ldr	r2, [pc, #112]	; (8001158 <fnDispatcher+0x90>)
 80010e8:	8819      	ldrh	r1, [r3, #0]
 80010ea:	b289      	uxth	r1, r1
 80010ec:	eb02 1101 	add.w	r1, r2, r1, lsl #4
    unTaskData = stTaskQueue[uwTaskOptr].unTaskData;   //--- Copy Data Structure
 80010f0:	466c      	mov	r4, sp
    ptrTask = (void (*)) stTaskQueue[uwTaskOptr].ptrTask;
 80010f2:	684d      	ldr	r5, [r1, #4]
    unTaskData = stTaskQueue[uwTaskOptr].unTaskData;   //--- Copy Data Structure
 80010f4:	8819      	ldrh	r1, [r3, #0]
 80010f6:	b289      	uxth	r1, r1
 80010f8:	eb02 1201 	add.w	r2, r2, r1, lsl #4
 80010fc:	f852 0f08 	ldr.w	r0, [r2, #8]!
 8001100:	6851      	ldr	r1, [r2, #4]
    uwTaskOptr++;                                 //--- Bump the Out Pointer
 8001102:	881a      	ldrh	r2, [r3, #0]
 8001104:	3201      	adds	r2, #1
 8001106:	b292      	uxth	r2, r2
 8001108:	801a      	strh	r2, [r3, #0]
    uwTaskOptr %= TASK_QUEUE_SIZE;                //--- Roll the Out Pointer Over
 800110a:	881a      	ldrh	r2, [r3, #0]
 800110c:	f002 020f 	and.w	r2, r2, #15
 8001110:	801a      	strh	r2, [r3, #0]
    uwLTP = uwTaskOptr;                           //--- Save the FIFO Position for Next Task
 8001112:	881a      	ldrh	r2, [r3, #0]
 8001114:	4b11      	ldr	r3, [pc, #68]	; (800115c <fnDispatcher+0x94>)
    unTaskData = stTaskQueue[uwTaskOptr].unTaskData;   //--- Copy Data Structure
 8001116:	c403      	stmia	r4!, {r0, r1}
    uwLTP = uwTaskOptr;                           //--- Save the FIFO Position for Next Task
 8001118:	801a      	strh	r2, [r3, #0]
    GIE;                                          //--- Enable Interrupts On befor call
 800111a:	b662      	cpsie	i
    ulTaskRet = (u32)(*ptrTask)(unTaskData);      //--- Call Task With Data & Get Return Code
 800111c:	e954 0102 	ldrd	r0, r1, [r4, #-8]
 8001120:	47a8      	blx	r5
    if (ulTaskRet)                                //--- If an error return code then process it
 8001122:	b110      	cbz	r0, 800112a <fnDispatcher+0x62>
      GIE;                                        //--- Enable General Interrupt Flag
 8001124:	b662      	cpsie	i
      fnError (ulTaskRet);                        //--- Process Error
 8001126:	f000 fe93 	bl	8001e50 <fnError>
  nop8;
 800112a:	bf00      	nop
 800112c:	bf00      	nop
 800112e:	bf00      	nop
 8001130:	bf00      	nop
 8001132:	bf00      	nop
 8001134:	bf00      	nop
 8001136:	bf00      	nop
 8001138:	bf00      	nop
    CLR_PA05;                                     //--- Dispatcher Test Pulse Lo on PA10
 800113a:	4b04      	ldr	r3, [pc, #16]	; (800114c <fnDispatcher+0x84>)
 800113c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8001140:	601a      	str	r2, [r3, #0]
}
 8001142:	b003      	add	sp, #12
 8001144:	bd30      	pop	{r4, r5, pc}
    GIE;                                          //--- Enable Interrupts & Exit
 8001146:	b662      	cpsie	i
 8001148:	e7ef      	b.n	800112a <fnDispatcher+0x62>
 800114a:	bf00      	nop
 800114c:	48000018 	.word	0x48000018
 8001150:	20000606 	.word	0x20000606
 8001154:	2000045e 	.word	0x2000045e
 8001158:	20000506 	.word	0x20000506
 800115c:	20000462 	.word	0x20000462

08001160 <fnPurgeTask>:
{
 8001160:	b5f0      	push	{r4, r5, r6, r7, lr}
  GID;                                            //--- Kill interrupts whine doing this
 8001162:	b672      	cpsid	i
  if (uwTaskCntr)
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <fnPurgeTask+0x4c>)
 8001166:	881b      	ldrh	r3, [r3, #0]
 8001168:	b29b      	uxth	r3, r3
 800116a:	b15b      	cbz	r3, 8001184 <fnPurgeTask+0x24>
      if (stTaskQueue [ulTp].ptrTask == ptrTask)
 800116c:	4910      	ldr	r1, [pc, #64]	; (80011b0 <fnPurgeTask+0x50>)
        stTaskQueue[ulTp].ptrTask = (void *)&fnNullTask;
 800116e:	4c11      	ldr	r4, [pc, #68]	; (80011b4 <fnPurgeTask+0x54>)
    for (ulTp = 0; ulTp < TASK_QUEUE_SIZE; ulTp++)
 8001170:	2300      	movs	r3, #0
      if (stTaskQueue [ulTp].ptrTask == ptrTask)
 8001172:	eb01 1203 	add.w	r2, r1, r3, lsl #4
    for (ulTp = 0; ulTp < TASK_QUEUE_SIZE; ulTp++)
 8001176:	3301      	adds	r3, #1
      if (stTaskQueue [ulTp].ptrTask == ptrTask)
 8001178:	6855      	ldr	r5, [r2, #4]
 800117a:	42a8      	cmp	r0, r5
        stTaskQueue[ulTp].ptrTask = (void *)&fnNullTask;
 800117c:	bf08      	it	eq
 800117e:	6054      	streq	r4, [r2, #4]
    for (ulTp = 0; ulTp < TASK_QUEUE_SIZE; ulTp++)
 8001180:	2b10      	cmp	r3, #16
 8001182:	d1f6      	bne.n	8001172 <fnPurgeTask+0x12>
 8001184:	2300      	movs	r3, #0
    if (stTimerQueue[ulTp].uwTimer)               //--- Test if timer active
 8001186:	490c      	ldr	r1, [pc, #48]	; (80011b8 <fnPurgeTask+0x58>)
        stTimerQueue[ulTp].ptrTask = (void *)&fnNullTask;
 8001188:	4d0a      	ldr	r5, [pc, #40]	; (80011b4 <fnPurgeTask+0x54>)
        stTimerQueue[ulTp].uwTimer = 0;
 800118a:	461c      	mov	r4, r3
    if (stTimerQueue[ulTp].uwTimer)               //--- Test if timer active
 800118c:	eb01 1203 	add.w	r2, r1, r3, lsl #4
 8001190:	011e      	lsls	r6, r3, #4
 8001192:	8817      	ldrh	r7, [r2, #0]
 8001194:	b12f      	cbz	r7, 80011a2 <fnPurgeTask+0x42>
      if (stTimerQueue[ulTp].ptrTask == ptrTask)
 8001196:	6857      	ldr	r7, [r2, #4]
 8001198:	42b8      	cmp	r0, r7
        stTimerQueue[ulTp].uwTimer = 0;
 800119a:	bf02      	ittt	eq
 800119c:	558c      	strbeq	r4, [r1, r6]
        stTimerQueue[ulTp].ptrTask = (void *)&fnNullTask;
 800119e:	6055      	streq	r5, [r2, #4]
        stTimerQueue[ulTp].uwTimer = 0;
 80011a0:	7054      	strbeq	r4, [r2, #1]
  for (ulTp = 0; ulTp < TIMER_QUEUE_SIZE; ulTp++)
 80011a2:	3301      	adds	r3, #1
 80011a4:	2b0a      	cmp	r3, #10
 80011a6:	d1f1      	bne.n	800118c <fnPurgeTask+0x2c>
  GIE;
 80011a8:	b662      	cpsie	i
}
 80011aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011ac:	20000606 	.word	0x20000606
 80011b0:	20000506 	.word	0x20000506
 80011b4:	08000fa1 	.word	0x08000fa1
 80011b8:	20000464 	.word	0x20000464

080011bc <fnEmptyData>:

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  //--- Zero Task Data Structure
  stEmptyData.uxBig = (u64) 0;         //--- Return Empty Data Fields
  return stEmptyData;
 80011bc:	2200      	movs	r2, #0
 80011be:	7002      	strb	r2, [r0, #0]
 80011c0:	7042      	strb	r2, [r0, #1]
 80011c2:	7082      	strb	r2, [r0, #2]
 80011c4:	70c2      	strb	r2, [r0, #3]
 80011c6:	7102      	strb	r2, [r0, #4]
 80011c8:	7142      	strb	r2, [r0, #5]
 80011ca:	7182      	strb	r2, [r0, #6]
 80011cc:	71c2      	strb	r2, [r0, #7]
}
 80011ce:	4770      	bx	lr

080011d0 <fnInitUSART1>:
  //-------------------------------------------------------------------------------------------
  //               Initialize USART1 for Transmit and receive @ UP TO 115200
  //-------------------------------------------------------------------------------------------
  void  fnInitUSART1 (u32 ulBaud)                   //--- Initialize USART1 Communications
  {
    uwUSART1TxCntr = 0;                             //--- Reset the FIFO's
 80011d0:	4b35      	ldr	r3, [pc, #212]	; (80012a8 <fnInitUSART1+0xd8>)
  {
 80011d2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uwUSART1TxCntr = 0;                             //--- Reset the FIFO's
 80011d6:	2400      	movs	r4, #0
 80011d8:	801c      	strh	r4, [r3, #0]
    uwUSART1TxIptr = 0;
 80011da:	4b34      	ldr	r3, [pc, #208]	; (80012ac <fnInitUSART1+0xdc>)

    uwUSART1RxCntr = 0;
    uwUSART1RxIptr = 0;
    uwUSART1RxOptr = 0;

    USART1_CR1 = 0x0000;                            //--- Kill the UART
 80011dc:	4e34      	ldr	r6, [pc, #208]	; (80012b0 <fnInitUSART1+0xe0>)
    uwUSART1TxIptr = 0;
 80011de:	801c      	strh	r4, [r3, #0]
    uwUSART1TxOptr = 0;
 80011e0:	4b34      	ldr	r3, [pc, #208]	; (80012b4 <fnInitUSART1+0xe4>)
    USART1_CR2 = 0x0000;
 80011e2:	4f35      	ldr	r7, [pc, #212]	; (80012b8 <fnInitUSART1+0xe8>)
    uwUSART1TxOptr = 0;
 80011e4:	801c      	strh	r4, [r3, #0]
    uwUSART1RxCntr = 0;
 80011e6:	4b35      	ldr	r3, [pc, #212]	; (80012bc <fnInitUSART1+0xec>)
    USART1_CR3 = 0x0000;
 80011e8:	f8df 80f0 	ldr.w	r8, [pc, #240]	; 80012dc <fnInitUSART1+0x10c>
    uwUSART1RxCntr = 0;
 80011ec:	801c      	strh	r4, [r3, #0]
    uwUSART1RxIptr = 0;
 80011ee:	4b34      	ldr	r3, [pc, #208]	; (80012c0 <fnInitUSART1+0xf0>)
 80011f0:	801c      	strh	r4, [r3, #0]
    uwUSART1RxOptr = 0;
 80011f2:	4b34      	ldr	r3, [pc, #208]	; (80012c4 <fnInitUSART1+0xf4>)
  {
 80011f4:	4605      	mov	r5, r0
    uwUSART1RxOptr = 0;
 80011f6:	801c      	strh	r4, [r3, #0]

    fnClrIntPend (USART1_IRQn);                     //--- Clear ANY interrupt
 80011f8:	2025      	movs	r0, #37	; 0x25
    USART1_CR1 = 0x0000;                            //--- Kill the UART
 80011fa:	6034      	str	r4, [r6, #0]
    USART1_CR2 = 0x0000;
 80011fc:	603c      	str	r4, [r7, #0]
    USART1_CR3 = 0x0000;
 80011fe:	f8c8 4000 	str.w	r4, [r8]
    fnClrIntPend (USART1_IRQn);                     //--- Clear ANY interrupt
 8001202:	f000 fc75 	bl	8001af0 <fnClrIntPend>

    //--- Calculate Baud Rate
    //    NOTE: BAUD rates lower than 1000 are not possible with this USART
    //    OverSampling by 16 used  Base Clock = System Clock = 72 MHz
    USART1_BRR = SYSCLK / ulBaud;                   //--- Set Baud Rate to integer part
 8001206:	4a30      	ldr	r2, [pc, #192]	; (80012c8 <fnInitUSART1+0xf8>)
 8001208:	4b30      	ldr	r3, [pc, #192]	; (80012cc <fnInitUSART1+0xfc>)
 800120a:	fbb3 f3f5 	udiv	r3, r3, r5
 800120e:	6013      	str	r3, [r2, #0]
    USART1_CR3 = 0x0000;                            //--- All Synchronous Stuff Off
    USART1_CR2 = 0x0000;

    //--- Modify this depending on USART Set_Up Parameters See Reference Manual under USARTS
    USART1_CR1 = 0x202C;                            //--- N81, Rx Int, Enable
 8001210:	f242 032c 	movw	r3, #8236	; 0x202c
    USART1_CR3 = 0x0000;                            //--- All Synchronous Stuff Off
 8001214:	f8c8 4000 	str.w	r4, [r8]
    USART1_CR2 = 0x0000;
 8001218:	603c      	str	r4, [r7, #0]
    USART1_CR1 = 0x202C;                            //--- N81, Rx Int, Enable
 800121a:	6033      	str	r3, [r6, #0]

    nop48;                                          //--- Waste a little time
 800121c:	bf00      	nop
 800121e:	bf00      	nop
 8001220:	bf00      	nop
 8001222:	bf00      	nop
 8001224:	bf00      	nop
 8001226:	bf00      	nop
 8001228:	bf00      	nop
 800122a:	bf00      	nop
 800122c:	bf00      	nop
 800122e:	bf00      	nop
 8001230:	bf00      	nop
 8001232:	bf00      	nop
 8001234:	bf00      	nop
 8001236:	bf00      	nop
 8001238:	bf00      	nop
 800123a:	bf00      	nop
 800123c:	bf00      	nop
 800123e:	bf00      	nop
 8001240:	bf00      	nop
 8001242:	bf00      	nop
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	bf00      	nop
 800124a:	bf00      	nop
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	bf00      	nop
 8001252:	bf00      	nop
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	bf00      	nop
 800125a:	bf00      	nop
 800125c:	bf00      	nop
 800125e:	bf00      	nop
 8001260:	bf00      	nop
 8001262:	bf00      	nop
 8001264:	bf00      	nop
 8001266:	bf00      	nop
 8001268:	bf00      	nop
 800126a:	bf00      	nop
 800126c:	bf00      	nop
 800126e:	bf00      	nop
 8001270:	bf00      	nop
 8001272:	bf00      	nop
 8001274:	bf00      	nop
 8001276:	bf00      	nop
 8001278:	bf00      	nop
 800127a:	bf00      	nop

    fnClrIntPend (USART1_IRQn);                     //--- Clear ANY Pending Interrupt
 800127c:	2025      	movs	r0, #37	; 0x25
 800127e:	f000 fc37 	bl	8001af0 <fnClrIntPend>
    fnEnaInt (USART1_IRQn);                         //--- Enable the interrupt
 8001282:	2025      	movs	r0, #37	; 0x25
 8001284:	f000 fc14 	bl	8001ab0 <fnEnaInt>

    //--- Calculate the PACER Ticks required between BYTE Transmissions
    //    SysTickFreq / (ulBaud / 10)
    uwXmit_1_Delay = (u16) (SYS_TICK_FREQ / (ulBaud / 10));
 8001288:	f242 7310 	movw	r3, #10000	; 0x2710
 800128c:	200a      	movs	r0, #10
 800128e:	fbb5 f5f0 	udiv	r5, r5, r0
 8001292:	fbb3 f5f5 	udiv	r5, r3, r5
 8001296:	4b0e      	ldr	r3, [pc, #56]	; (80012d0 <fnInitUSART1+0x100>)
 8001298:	801d      	strh	r5, [r3, #0]
    uwXmit_1_Count = uwXmit_1_Delay;                //--- Reset the Count
 800129a:	4b0e      	ldr	r3, [pc, #56]	; (80012d4 <fnInitUSART1+0x104>)
 800129c:	801d      	strh	r5, [r3, #0]

    USART1_DR = ZERO;                               //--- Send a Zero
 800129e:	4b0e      	ldr	r3, [pc, #56]	; (80012d8 <fnInitUSART1+0x108>)
 80012a0:	601c      	str	r4, [r3, #0]
  }
 80012a2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80012a6:	bf00      	nop
 80012a8:	20000e12 	.word	0x20000e12
 80012ac:	20000e14 	.word	0x20000e14
 80012b0:	4001380c 	.word	0x4001380c
 80012b4:	20000608 	.word	0x20000608
 80012b8:	40013810 	.word	0x40013810
 80012bc:	20000e16 	.word	0x20000e16
 80012c0:	2000129c 	.word	0x2000129c
 80012c4:	2000121a 	.word	0x2000121a
 80012c8:	40013808 	.word	0x40013808
 80012cc:	044aa200 	.word	0x044aa200
 80012d0:	2000169e 	.word	0x2000169e
 80012d4:	200016a8 	.word	0x200016a8
 80012d8:	40013804 	.word	0x40013804
 80012dc:	40013814 	.word	0x40013814

080012e0 <fnGetNextUSART1>:
  //    This function checks for a current RX Character or Characters in the USART RX FIFO
  //    If a character or Byte is available from the USART then the return integer contains
  //    the character ( data ) in the low Lo Byte  and the High Byte contains a non zero value
  //-------------------------------------------------------------------------------------------
  u16   fnGetNextUSART1 (void)
  {
 80012e0:	b510      	push	{r4, lr}
    u16 uwRxData = 0;                               //--- Zero Data on Entry

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    GID;                                            //--- Kill Interrupts
 80012e2:	b672      	cpsid	i

    if (uwUSART1RxCntr)                             //--- Get FIFO Counter
 80012e4:	4908      	ldr	r1, [pc, #32]	; (8001308 <fnGetNextUSART1+0x28>)
 80012e6:	8808      	ldrh	r0, [r1, #0]
 80012e8:	b158      	cbz	r0, 8001302 <fnGetNextUSART1+0x22>
    {
      //--- Extract the Data Byte
      uwRxData = (u16) ubUSART1RxFIFO[uwUSART1RxOptr];
 80012ea:	4a08      	ldr	r2, [pc, #32]	; (800130c <fnGetNextUSART1+0x2c>)
 80012ec:	4c08      	ldr	r4, [pc, #32]	; (8001310 <fnGetNextUSART1+0x30>)
 80012ee:	8813      	ldrh	r3, [r2, #0]
 80012f0:	5ce4      	ldrb	r4, [r4, r3]
      uwRxData |= 0x8000;                           //--- Set the valid data flag
      uwUSART1RxCntr --;                            //--- Bump the counter
      uwUSART1RxOptr ++;                            //--- Bump the input pointer
 80012f2:	3301      	adds	r3, #1
      uwUSART1RxCntr --;                            //--- Bump the counter
 80012f4:	3801      	subs	r0, #1
      uwUSART1RxOptr %= USART1_RX_SIZE;             //--- Modulo Count Rx FIFO Size
 80012f6:	f3c3 0309 	ubfx	r3, r3, #0, #10
      uwUSART1RxCntr --;                            //--- Bump the counter
 80012fa:	8008      	strh	r0, [r1, #0]
      uwUSART1RxOptr %= USART1_RX_SIZE;             //--- Modulo Count Rx FIFO Size
 80012fc:	8013      	strh	r3, [r2, #0]
      uwRxData |= 0x8000;                           //--- Set the valid data flag
 80012fe:	f444 4000 	orr.w	r0, r4, #32768	; 0x8000
    else
    {
      uwRxData = 0x0000;                            //--- No Data Available
    }

    GIE;
 8001302:	b662      	cpsie	i
    return uwRxData;                                //--- Return the data
  }
 8001304:	bd10      	pop	{r4, pc}
 8001306:	bf00      	nop
 8001308:	20000e16 	.word	0x20000e16
 800130c:	2000121a 	.word	0x2000121a
 8001310:	2000060a 	.word	0x2000060a

08001314 <fnUSART1_IRQ>:
  //
  //  After initialization, any data sent to USART1 is captured and stored in a FIFO buffer
  //  The FIFO Pointers, Counters and Status flags are automatically handled by the Interrupt
  //-------------------------------------------------------------------------------------------
  void  fnUSART1_IRQ(void)     // 37 - USART1 General Interrupt              0x000000D4
  {
 8001314:	b570      	push	{r4, r5, r6, lr}
    u08 ubRxData;

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    GID;                                            //--- Kill Interrupts
 8001316:	b672      	cpsid	i
    fnClrIntPend (USART1_IRQn);                     //--- Clear the interrupt
 8001318:	2025      	movs	r0, #37	; 0x25
 800131a:	f000 fbe9 	bl	8001af0 <fnClrIntPend>

    if (USART1_SR & 0x0008)                         //--- Is overrun error triggered?
 800131e:	4b0d      	ldr	r3, [pc, #52]	; (8001354 <fnUSART1_IRQ+0x40>)
 8001320:	490d      	ldr	r1, [pc, #52]	; (8001358 <fnUSART1_IRQ+0x44>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f013 0f08 	tst.w	r3, #8
 8001328:	d002      	beq.n	8001330 <fnUSART1_IRQ+0x1c>
      uwUSART1RxCntr++;                             //--- Bump the RX Counter
      uwUSART1RxIptr++;                             //--- Bump the In Pointer
      uwUSART1RxIptr %= USART1_RX_SIZE;             //--- Roll Over the FIFO
    }

    ubRxData = (u08)USART1_DR;                      //--- Read in the data byte from USART
 800132a:	680b      	ldr	r3, [r1, #0]
    GIE;                                            //--- Enable Interrupts before Exit
 800132c:	b662      	cpsie	i
  }
 800132e:	bd70      	pop	{r4, r5, r6, pc}
    if (uwUSART1RxCntr < (USART1_RX_SIZE - 2))      //--- Test if there is room in the RX FIFO
 8001330:	4c0a      	ldr	r4, [pc, #40]	; (800135c <fnUSART1_IRQ+0x48>)
    ubRxData = (u08)USART1_DR;                      //--- Read in the data byte from USART
 8001332:	680e      	ldr	r6, [r1, #0]
    if (uwUSART1RxCntr < (USART1_RX_SIZE - 2))      //--- Test if there is room in the RX FIFO
 8001334:	8822      	ldrh	r2, [r4, #0]
 8001336:	f240 33fd 	movw	r3, #1021	; 0x3fd
 800133a:	429a      	cmp	r2, r3
 800133c:	d8f5      	bhi.n	800132a <fnUSART1_IRQ+0x16>
      ubUSART1RxFIFO[uwUSART1RxIptr] = ubRxData;
 800133e:	4808      	ldr	r0, [pc, #32]	; (8001360 <fnUSART1_IRQ+0x4c>)
 8001340:	4d08      	ldr	r5, [pc, #32]	; (8001364 <fnUSART1_IRQ+0x50>)
 8001342:	8803      	ldrh	r3, [r0, #0]
    ubRxData = (u08)USART1_DR;                      //--- Read in the data byte from USART
 8001344:	54ee      	strb	r6, [r5, r3]
      uwUSART1RxIptr++;                             //--- Bump the In Pointer
 8001346:	3301      	adds	r3, #1
      uwUSART1RxCntr++;                             //--- Bump the RX Counter
 8001348:	3201      	adds	r2, #1
      uwUSART1RxIptr %= USART1_RX_SIZE;             //--- Roll Over the FIFO
 800134a:	f3c3 0309 	ubfx	r3, r3, #0, #10
      uwUSART1RxCntr++;                             //--- Bump the RX Counter
 800134e:	8022      	strh	r2, [r4, #0]
      uwUSART1RxIptr %= USART1_RX_SIZE;             //--- Roll Over the FIFO
 8001350:	8003      	strh	r3, [r0, #0]
 8001352:	e7ea      	b.n	800132a <fnUSART1_IRQ+0x16>
 8001354:	40013800 	.word	0x40013800
 8001358:	40013804 	.word	0x40013804
 800135c:	20000e16 	.word	0x20000e16
 8001360:	2000129c 	.word	0x2000129c
 8001364:	2000060a 	.word	0x2000060a

08001368 <fnXmitSvc_1>:
  //                       Extract and Transmit 1 Byte from TX FIFO
  //                       ----------------------------------------
  //                        This function is called from the Pacer
  //-------------------------------------------------------------------------------------------
  void  fnXmitSvc_1 (void)
  {
 8001368:	b530      	push	{r4, r5, lr}
    GID;                                            //--- Kill All Interrupts
 800136a:	b672      	cpsid	i

    //--- Service USART #1 Transmit
    if (uwUSART1TxCntr > 0)                         //--- Test if Character Waiting
 800136c:	4808      	ldr	r0, [pc, #32]	; (8001390 <fnXmitSvc_1+0x28>)
 800136e:	8802      	ldrh	r2, [r0, #0]
 8001370:	b15a      	cbz	r2, 800138a <fnXmitSvc_1+0x22>
    {
      USART1_DR = ubUSART1TxFIFO[uwUSART1TxOptr];   //--- Xmit the data
 8001372:	4908      	ldr	r1, [pc, #32]	; (8001394 <fnXmitSvc_1+0x2c>)
 8001374:	4c08      	ldr	r4, [pc, #32]	; (8001398 <fnXmitSvc_1+0x30>)
 8001376:	880b      	ldrh	r3, [r1, #0]
 8001378:	5ce5      	ldrb	r5, [r4, r3]
 800137a:	4c08      	ldr	r4, [pc, #32]	; (800139c <fnXmitSvc_1+0x34>)
      uwUSART1TxCntr--;                             //--- Bump the Counter -1
      uwUSART1TxOptr++;                             //--- Bump pointer
 800137c:	3301      	adds	r3, #1
      uwUSART1TxCntr--;                             //--- Bump the Counter -1
 800137e:	3a01      	subs	r2, #1
      uwUSART1TxOptr %= USART1_TX_SIZE;             //--- Rollover mask
 8001380:	f3c3 0309 	ubfx	r3, r3, #0, #10
      USART1_DR = ubUSART1TxFIFO[uwUSART1TxOptr];   //--- Xmit the data
 8001384:	6025      	str	r5, [r4, #0]
      uwUSART1TxCntr--;                             //--- Bump the Counter -1
 8001386:	8002      	strh	r2, [r0, #0]
      uwUSART1TxOptr %= USART1_TX_SIZE;             //--- Rollover mask
 8001388:	800b      	strh	r3, [r1, #0]
    }

    GIE;                                            //--- Restore All Interrupts
 800138a:	b662      	cpsie	i
  }
 800138c:	bd30      	pop	{r4, r5, pc}
 800138e:	bf00      	nop
 8001390:	20000e12 	.word	0x20000e12
 8001394:	20000608 	.word	0x20000608
 8001398:	200016ae 	.word	0x200016ae
 800139c:	40013804 	.word	0x40013804

080013a0 <fnByteToFIFO_1>:

  //-------------------------------------------------------------------------------------------
  //                         Send a single character to TX FIFO
  //-------------------------------------------------------------------------------------------
  void  fnByteToFIFO_1 (u08 ubByte)
  {
 80013a0:	b530      	push	{r4, r5, lr}
    GID;                                            //--- Kill All Interrupts
 80013a2:	b672      	cpsid	i
    //--- Place Character in FIFO
    if (uwUSART1TxCntr < (USART1_TX_SIZE - 2))
 80013a4:	4908      	ldr	r1, [pc, #32]	; (80013c8 <fnByteToFIFO_1+0x28>)
 80013a6:	880a      	ldrh	r2, [r1, #0]
 80013a8:	f240 33fd 	movw	r3, #1021	; 0x3fd
 80013ac:	429a      	cmp	r2, r3
 80013ae:	d809      	bhi.n	80013c4 <fnByteToFIFO_1+0x24>
    {
      ubUSART1TxFIFO[uwUSART1TxIptr] = ubByte;      //--- Put Byte into FIFO
 80013b0:	4c06      	ldr	r4, [pc, #24]	; (80013cc <fnByteToFIFO_1+0x2c>)
 80013b2:	4d07      	ldr	r5, [pc, #28]	; (80013d0 <fnByteToFIFO_1+0x30>)
 80013b4:	8823      	ldrh	r3, [r4, #0]
 80013b6:	54e8      	strb	r0, [r5, r3]
      uwUSART1TxIptr++;                             //--- Bump pointer
 80013b8:	3301      	adds	r3, #1
      uwUSART1TxIptr %= USART1_TX_SIZE;             //--- Rollover mask
 80013ba:	f3c3 0309 	ubfx	r3, r3, #0, #10
      uwUSART1TxCntr++;                             //--- Bump the Counter
 80013be:	3201      	adds	r2, #1
      uwUSART1TxIptr %= USART1_TX_SIZE;             //--- Rollover mask
 80013c0:	8023      	strh	r3, [r4, #0]
      uwUSART1TxCntr++;                             //--- Bump the Counter
 80013c2:	800a      	strh	r2, [r1, #0]
    };

    GIE;                                            //--- Restore All Interrupts
 80013c4:	b662      	cpsie	i
  }
 80013c6:	bd30      	pop	{r4, r5, pc}
 80013c8:	20000e12 	.word	0x20000e12
 80013cc:	20000e14 	.word	0x20000e14
 80013d0:	200016ae 	.word	0x200016ae

080013d4 <fnInitUSART2>:
  //-------------------------------------------------------------------------------------------
  //                    Initialize USART2 for Transmit and receive @ 115200
  //-------------------------------------------------------------------------------------------
  void  fnInitUSART2 (u32 ulBaud)                   //--- Initialize USART2 Communications
  {
    uwUSART2TxCntr = 0;                             //--- Reset the FIFO's
 80013d4:	4b1f      	ldr	r3, [pc, #124]	; (8001454 <fnInitUSART2+0x80>)
  {
 80013d6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    uwUSART2TxCntr = 0;                             //--- Reset the FIFO's
 80013da:	2400      	movs	r4, #0
 80013dc:	801c      	strh	r4, [r3, #0]
    uwUSART2TxIptr = 0;
 80013de:	4b1e      	ldr	r3, [pc, #120]	; (8001458 <fnInitUSART2+0x84>)

    uwUSART2RxCntr = 0;
    uwUSART2RxIptr = 0;
    uwUSART2RxOptr = 0;

    USART2_CR1 = 0x0000;                            //--- Kill the UART
 80013e0:	4e1e      	ldr	r6, [pc, #120]	; (800145c <fnInitUSART2+0x88>)
    uwUSART2TxIptr = 0;
 80013e2:	801c      	strh	r4, [r3, #0]
    uwUSART2TxOptr = 0;
 80013e4:	4b1e      	ldr	r3, [pc, #120]	; (8001460 <fnInitUSART2+0x8c>)
    USART2_CR2 = 0x0000;
 80013e6:	4f1f      	ldr	r7, [pc, #124]	; (8001464 <fnInitUSART2+0x90>)
    uwUSART2TxOptr = 0;
 80013e8:	801c      	strh	r4, [r3, #0]
    uwUSART2RxCntr = 0;
 80013ea:	4b1f      	ldr	r3, [pc, #124]	; (8001468 <fnInitUSART2+0x94>)
    USART2_CR3 = 0x0000;
 80013ec:	f8df 8098 	ldr.w	r8, [pc, #152]	; 8001488 <fnInitUSART2+0xb4>
    uwUSART2RxCntr = 0;
 80013f0:	801c      	strh	r4, [r3, #0]
    uwUSART2RxIptr = 0;
 80013f2:	4b1e      	ldr	r3, [pc, #120]	; (800146c <fnInitUSART2+0x98>)
 80013f4:	801c      	strh	r4, [r3, #0]
    uwUSART2RxOptr = 0;
 80013f6:	4b1e      	ldr	r3, [pc, #120]	; (8001470 <fnInitUSART2+0x9c>)
  {
 80013f8:	4605      	mov	r5, r0
    uwUSART2RxOptr = 0;
 80013fa:	801c      	strh	r4, [r3, #0]

    fnClrIntPend (USART2_IRQn);                     //--- Clear ANY interrupt
 80013fc:	2026      	movs	r0, #38	; 0x26
    USART2_CR1 = 0x0000;                            //--- Kill the UART
 80013fe:	6034      	str	r4, [r6, #0]
    USART2_CR2 = 0x0000;
 8001400:	603c      	str	r4, [r7, #0]
    USART2_CR3 = 0x0000;
 8001402:	f8c8 4000 	str.w	r4, [r8]
    fnClrIntPend (USART2_IRQn);                     //--- Clear ANY interrupt
 8001406:	f000 fb73 	bl	8001af0 <fnClrIntPend>

    //--- Calculate Baud Rate
    //    NOTE: BAUD rates lower than 1000 are not possible with this USART
    //    OverSampling by 16 used  Base Clock = System Clock = 72 MHz

    USART2_BRR = SYSCLK / ulBaud;                   //--- Set Baud Rate to integer part
 800140a:	4a1a      	ldr	r2, [pc, #104]	; (8001474 <fnInitUSART2+0xa0>)
 800140c:	4b1a      	ldr	r3, [pc, #104]	; (8001478 <fnInitUSART2+0xa4>)
 800140e:	fbb3 f3f5 	udiv	r3, r3, r5
 8001412:	6013      	str	r3, [r2, #0]

    USART2_CR3 = 0x0000;                            //--- All Synchronous Stuff Off
    USART2_CR2 = 0x0000;

    //--- Modify this depending on USART Set_Up Parameters
    USART2_CR1 = 0x202C;                            //--- N81, Rx Int, Enable
 8001414:	f242 032c 	movw	r3, #8236	; 0x202c
    USART2_CR3 = 0x0000;                            //--- All Synchronous Stuff Off
 8001418:	f8c8 4000 	str.w	r4, [r8]
    USART2_CR2 = 0x0000;
 800141c:	603c      	str	r4, [r7, #0]
    USART2_CR1 = 0x202C;                            //--- N81, Rx Int, Enable
 800141e:	6033      	str	r3, [r6, #0]

    nop4;                                           //--- Waste a little time
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	bf00      	nop
 8001426:	bf00      	nop

    fnClrIntPend (USART2_IRQn);                     //--- Clear ANY interrupt
 8001428:	2026      	movs	r0, #38	; 0x26
 800142a:	f000 fb61 	bl	8001af0 <fnClrIntPend>
    fnEnaInt (USART2_IRQn);                         //--- Enable the interrupt
 800142e:	2026      	movs	r0, #38	; 0x26
 8001430:	f000 fb3e 	bl	8001ab0 <fnEnaInt>

    //--- Calculate the PACER Ticks required between BYTE Transmissions
    //    10000 / (ulBaud / 10)
    uwXmit_2_Delay = (u16) (SYS_TICK_FREQ / (ulBaud / 10));
 8001434:	f242 7310 	movw	r3, #10000	; 0x2710
 8001438:	200a      	movs	r0, #10
 800143a:	fbb5 f5f0 	udiv	r5, r5, r0
 800143e:	fbb3 f5f5 	udiv	r5, r3, r5
 8001442:	4b0e      	ldr	r3, [pc, #56]	; (800147c <fnInitUSART2+0xa8>)
 8001444:	801d      	strh	r5, [r3, #0]
    uwXmit_2_Count = uwXmit_2_Delay;                //--- Reset the Count
 8001446:	4b0e      	ldr	r3, [pc, #56]	; (8001480 <fnInitUSART2+0xac>)
 8001448:	801d      	strh	r5, [r3, #0]

    USART2_DR = ZERO;                               //--- Send a NULL Character
 800144a:	4b0e      	ldr	r3, [pc, #56]	; (8001484 <fnInitUSART2+0xb0>)
 800144c:	601c      	str	r4, [r3, #0]
  }
 800144e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8001452:	bf00      	nop
 8001454:	200016a4 	.word	0x200016a4
 8001458:	200016aa 	.word	0x200016aa
 800145c:	4000440c 	.word	0x4000440c
 8001460:	20000e0e 	.word	0x20000e0e
 8001464:	40004410 	.word	0x40004410
 8001468:	200016ac 	.word	0x200016ac
 800146c:	200016a0 	.word	0x200016a0
 8001470:	20000e18 	.word	0x20000e18
 8001474:	40004408 	.word	0x40004408
 8001478:	044aa200 	.word	0x044aa200
 800147c:	200016a6 	.word	0x200016a6
 8001480:	20000e0c 	.word	0x20000e0c
 8001484:	40004404 	.word	0x40004404
 8001488:	40004414 	.word	0x40004414

0800148c <fnUSART2_IRQ>:

  //-------------------------------------------------------------------------------------------
  //  Function Name  : USART_2 Rx Interrupt Handler //--- 38 - USART2 General Interrupt
  //-------------------------------------------------------------------------------------------
  void  fnUSART2_IRQ(void)
  {
 800148c:	b538      	push	{r3, r4, r5, lr}
    u08 ubRxData;

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    GID;                                            //--- Kill Interrupts
 800148e:	b672      	cpsid	i
    fnClrIntPend (USART2_IRQn);                     //--- Clear the interrupt
 8001490:	2026      	movs	r0, #38	; 0x26
 8001492:	f000 fb2d 	bl	8001af0 <fnClrIntPend>

    if (USART2_SR & 0x0008)                         //--- Is overrun error triggered?
 8001496:	4b0e      	ldr	r3, [pc, #56]	; (80014d0 <fnUSART2_IRQ+0x44>)
 8001498:	4a0e      	ldr	r2, [pc, #56]	; (80014d4 <fnUSART2_IRQ+0x48>)
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	f013 0f08 	tst.w	r3, #8
 80014a0:	d002      	beq.n	80014a8 <fnUSART2_IRQ+0x1c>
      uwUSART2RxCntr++;                             //--- Bump the RX Counter
      uwUSART2RxIptr++;                             //--- Bump the In Pointer
      uwUSART2RxIptr %= USART2_RX_SIZE;             //--- Roll Over the FIFO
    }

    ubRxData = (u08)USART2_DR;                      //--- Read in the data byte from USART
 80014a2:	6813      	ldr	r3, [r2, #0]
    GIE;                                            //--- Enable Interrupts
 80014a4:	b662      	cpsie	i
  }
 80014a6:	bd38      	pop	{r3, r4, r5, pc}
    if (uwUSART2RxCntr < (USART2_RX_SIZE - 2))
 80014a8:	490b      	ldr	r1, [pc, #44]	; (80014d8 <fnUSART2_IRQ+0x4c>)
    ubRxData = (u08)USART2_DR;                      //--- Read in the data byte from USART
 80014aa:	6815      	ldr	r5, [r2, #0]
    if (uwUSART2RxCntr < (USART2_RX_SIZE - 2))
 80014ac:	880b      	ldrh	r3, [r1, #0]
 80014ae:	f240 30fd 	movw	r0, #1021	; 0x3fd
 80014b2:	4283      	cmp	r3, r0
 80014b4:	d8f5      	bhi.n	80014a2 <fnUSART2_IRQ+0x16>
      uwUSART2RxCntr++;                             //--- Bump the RX Counter
 80014b6:	3301      	adds	r3, #1
 80014b8:	800b      	strh	r3, [r1, #0]
      uwUSART2RxIptr %= USART2_RX_SIZE;             //--- Roll Over the FIFO
 80014ba:	4908      	ldr	r1, [pc, #32]	; (80014dc <fnUSART2_IRQ+0x50>)
      ubUSART2RxFIFO[uwUSART1RxIptr] = ubRxData;
 80014bc:	4808      	ldr	r0, [pc, #32]	; (80014e0 <fnUSART2_IRQ+0x54>)
      uwUSART2RxIptr++;                             //--- Bump the In Pointer
 80014be:	880b      	ldrh	r3, [r1, #0]
      ubUSART2RxFIFO[uwUSART1RxIptr] = ubRxData;
 80014c0:	8800      	ldrh	r0, [r0, #0]
    ubRxData = (u08)USART2_DR;                      //--- Read in the data byte from USART
 80014c2:	4c08      	ldr	r4, [pc, #32]	; (80014e4 <fnUSART2_IRQ+0x58>)
      uwUSART2RxIptr++;                             //--- Bump the In Pointer
 80014c4:	3301      	adds	r3, #1
      uwUSART2RxIptr %= USART2_RX_SIZE;             //--- Roll Over the FIFO
 80014c6:	f3c3 0309 	ubfx	r3, r3, #0, #10
    ubRxData = (u08)USART2_DR;                      //--- Read in the data byte from USART
 80014ca:	5425      	strb	r5, [r4, r0]
      uwUSART2RxIptr %= USART2_RX_SIZE;             //--- Roll Over the FIFO
 80014cc:	800b      	strh	r3, [r1, #0]
 80014ce:	e7e8      	b.n	80014a2 <fnUSART2_IRQ+0x16>
 80014d0:	40004400 	.word	0x40004400
 80014d4:	40004404 	.word	0x40004404
 80014d8:	200016ac 	.word	0x200016ac
 80014dc:	200016a0 	.word	0x200016a0
 80014e0:	2000129c 	.word	0x2000129c
 80014e4:	2000129e 	.word	0x2000129e

080014e8 <fnGetNextUSART2>:
  {
    u16 uwRxData = 0;                               //--- Zero Data on Entry

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    GID;                                            //--- Kill Interrupts
 80014e8:	b672      	cpsid	i

    if (uwUSART2RxCntr)                             //--- Get FIFO Counter
 80014ea:	4b09      	ldr	r3, [pc, #36]	; (8001510 <fnGetNextUSART2+0x28>)
 80014ec:	8818      	ldrh	r0, [r3, #0]
 80014ee:	b168      	cbz	r0, 800150c <fnGetNextUSART2+0x24>
    {
      //--- Extract the Data Byte
      uwRxData = (u16) ubUSART2RxFIFO[uwUSART1RxOptr];
 80014f0:	4a08      	ldr	r2, [pc, #32]	; (8001514 <fnGetNextUSART2+0x2c>)
 80014f2:	4909      	ldr	r1, [pc, #36]	; (8001518 <fnGetNextUSART2+0x30>)
 80014f4:	8812      	ldrh	r2, [r2, #0]
 80014f6:	5c89      	ldrb	r1, [r1, r2]
      uwRxData |= 0x8000;                           //--- Set the valid data flag in Hi Byte
      uwUSART2RxCntr --;                            //--- Bump the counter
      uwUSART2RxOptr ++;                            //--- Bump the input pointer
      uwUSART2RxOptr %= USART2_RX_SIZE;             //--- Modulo Count Rx FIFO Size
 80014f8:	4a08      	ldr	r2, [pc, #32]	; (800151c <fnGetNextUSART2+0x34>)
      uwUSART2RxCntr --;                            //--- Bump the counter
 80014fa:	3801      	subs	r0, #1
 80014fc:	8018      	strh	r0, [r3, #0]
      uwUSART2RxOptr ++;                            //--- Bump the input pointer
 80014fe:	8813      	ldrh	r3, [r2, #0]
 8001500:	3301      	adds	r3, #1
      uwUSART2RxOptr %= USART2_RX_SIZE;             //--- Modulo Count Rx FIFO Size
 8001502:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001506:	8013      	strh	r3, [r2, #0]
      uwRxData |= 0x8000;                           //--- Set the valid data flag in Hi Byte
 8001508:	f441 4000 	orr.w	r0, r1, #32768	; 0x8000
    else
    {
      uwRxData = 0x0000;                            //--- No Data Available
    }

    GIE;
 800150c:	b662      	cpsie	i
    return uwRxData;                                //--- Return the data
  }
 800150e:	4770      	bx	lr
 8001510:	200016ac 	.word	0x200016ac
 8001514:	2000121a 	.word	0x2000121a
 8001518:	2000129e 	.word	0x2000129e
 800151c:	20000e18 	.word	0x20000e18

08001520 <fnXmitSvc_2>:
  //                       This function is called once every 100uS
  //-------------------------------------------------------------------------------------------
  void  fnXmitSvc_2 (void)
  {
    //--- Service USART #1 Transmit
    if (uwUSART2TxCntr > 0)                         //--- Test if Character Waiting
 8001520:	4a09      	ldr	r2, [pc, #36]	; (8001548 <fnXmitSvc_2+0x28>)
 8001522:	8813      	ldrh	r3, [r2, #0]
  {
 8001524:	b510      	push	{r4, lr}
    if (uwUSART2TxCntr > 0)                         //--- Test if Character Waiting
 8001526:	b173      	cbz	r3, 8001546 <fnXmitSvc_2+0x26>
    {
      GID;                                          //--- Kill All Interrupts
 8001528:	b672      	cpsid	i
      USART2_DR = ubUSART2TxFIFO[uwUSART2TxOptr];   //--- Xmit the data
 800152a:	4808      	ldr	r0, [pc, #32]	; (800154c <fnXmitSvc_2+0x2c>)
 800152c:	4908      	ldr	r1, [pc, #32]	; (8001550 <fnXmitSvc_2+0x30>)
 800152e:	8803      	ldrh	r3, [r0, #0]
 8001530:	5ccc      	ldrb	r4, [r1, r3]
 8001532:	4908      	ldr	r1, [pc, #32]	; (8001554 <fnXmitSvc_2+0x34>)
 8001534:	600c      	str	r4, [r1, #0]
      uwUSART2TxCntr--;                             //--- Bump the Counter -1
 8001536:	8811      	ldrh	r1, [r2, #0]
      uwUSART2TxOptr++;                             //--- Bump pointer
 8001538:	3301      	adds	r3, #1
      uwUSART2TxCntr--;                             //--- Bump the Counter -1
 800153a:	3901      	subs	r1, #1
      uwUSART2TxOptr %= USART2_TX_SIZE;             //--- Rollover at 8192 Characters
 800153c:	f3c3 0309 	ubfx	r3, r3, #0, #10
      uwUSART2TxCntr--;                             //--- Bump the Counter -1
 8001540:	8011      	strh	r1, [r2, #0]
      uwUSART2TxOptr %= USART2_TX_SIZE;             //--- Rollover at 8192 Characters
 8001542:	8003      	strh	r3, [r0, #0]
      GIE;                                          //--- Restore All Interrupts
 8001544:	b662      	cpsie	i
    }
  }
 8001546:	bd10      	pop	{r4, pc}
 8001548:	200016a4 	.word	0x200016a4
 800154c:	20000e0e 	.word	0x20000e0e
 8001550:	20000e1a 	.word	0x20000e1a
 8001554:	40004404 	.word	0x40004404

08001558 <fnByteToFIFO_2>:
  //                     Send a single Byte or character to TX FIFO
  //-------------------------------------------------------------------------------------------
  void  fnByteToFIFO_2 (u08 ubChar)
  {
    //--- Place Character in FIFO
    if (uwUSART2TxCntr < (USART2_TX_SIZE - 2))
 8001558:	4a0a      	ldr	r2, [pc, #40]	; (8001584 <fnByteToFIFO_2+0x2c>)
 800155a:	8811      	ldrh	r1, [r2, #0]
 800155c:	f240 33fd 	movw	r3, #1021	; 0x3fd
 8001560:	4299      	cmp	r1, r3
  {
 8001562:	b510      	push	{r4, lr}
    if (uwUSART2TxCntr < (USART2_TX_SIZE - 2))
 8001564:	d80c      	bhi.n	8001580 <fnByteToFIFO_2+0x28>
    {
      GID;                                          //--- Kill All Interrupts
 8001566:	b672      	cpsid	i
      ubUSART2TxFIFO[uwUSART2TxIptr] = ubChar;      //--- Put Char in FIFO
 8001568:	4907      	ldr	r1, [pc, #28]	; (8001588 <fnByteToFIFO_2+0x30>)
 800156a:	4c08      	ldr	r4, [pc, #32]	; (800158c <fnByteToFIFO_2+0x34>)
 800156c:	880b      	ldrh	r3, [r1, #0]
 800156e:	54e0      	strb	r0, [r4, r3]
      uwUSART2TxIptr++;                             //--- Bump pointer
 8001570:	3301      	adds	r3, #1
      uwUSART2TxIptr %= USART2_TX_SIZE;             //--- Rollover at 8192 Characters
 8001572:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8001576:	800b      	strh	r3, [r1, #0]
      uwUSART2TxCntr++;                             //--- Bump the Counter
 8001578:	8813      	ldrh	r3, [r2, #0]
 800157a:	3301      	adds	r3, #1
 800157c:	8013      	strh	r3, [r2, #0]
      GIE;                                          //--- Restore All Interrupts
 800157e:	b662      	cpsie	i
    };
  }
 8001580:	bd10      	pop	{r4, pc}
 8001582:	bf00      	nop
 8001584:	200016a4 	.word	0x200016a4
 8001588:	200016aa 	.word	0x200016aa
 800158c:	20000e1a 	.word	0x20000e1a

08001590 <fnArrayOut_2>:

  //-------------------------------------------------------------------------------------------
  //                     Export an Array of Bytes to USART_2 Tx FIFO
  //-------------------------------------------------------------------------------------------
  void fnArrayOut_2 (u08 ubOut[], u16 uwArraySize)
  {
 8001590:	b538      	push	{r3, r4, r5, lr}
    u16 uwPtr;

    //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

    //--- Kill Interrupts while testing
    GID;
 8001592:	b672      	cpsid	i

    //--- Test if this message is smaller than remaining FIFO size
    if ((uwUSART2TxCntr + uwArraySize) < (USART2_TX_SIZE - 2))
 8001594:	4b08      	ldr	r3, [pc, #32]	; (80015b8 <fnArrayOut_2+0x28>)
 8001596:	881b      	ldrh	r3, [r3, #0]
 8001598:	f240 32fd 	movw	r2, #1021	; 0x3fd
 800159c:	440b      	add	r3, r1
 800159e:	4293      	cmp	r3, r2
 80015a0:	dc03      	bgt.n	80015aa <fnArrayOut_2+0x1a>
 80015a2:	4604      	mov	r4, r0
 80015a4:	1845      	adds	r5, r0, r1
    {
      for (uwPtr = 0; uwPtr < uwArraySize; uwPtr++)
 80015a6:	42ac      	cmp	r4, r5
 80015a8:	d100      	bne.n	80015ac <fnArrayOut_2+0x1c>
    }
    else
    {
           //--- To be added by user
    }
  }
 80015aa:	bd38      	pop	{r3, r4, r5, pc}
        fnByteToFIFO_2 (ubOut[uwPtr]);
 80015ac:	f814 0b01 	ldrb.w	r0, [r4], #1
 80015b0:	f7ff ffd2 	bl	8001558 <fnByteToFIFO_2>
      for (uwPtr = 0; uwPtr < uwArraySize; uwPtr++)
 80015b4:	e7f7      	b.n	80015a6 <fnArrayOut_2+0x16>
 80015b6:	bf00      	nop
 80015b8:	200016a4 	.word	0x200016a4

080015bc <fnStringOut_2>:
  {
 80015bc:	b510      	push	{r4, lr}
 80015be:	4604      	mov	r4, r0
    uwSlen = strlen (ubOut);                      //--- Obtain Standard String Length
 80015c0:	f001 fc3e 	bl	8002e40 <strlen>
    fnArrayOut_2 (ubOut, uwSlen);                 //--- Output String Type Variable
 80015c4:	b281      	uxth	r1, r0
 80015c6:	4620      	mov	r0, r4
  }
 80015c8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    fnArrayOut_2 (ubOut, uwSlen);                 //--- Output String Type Variable
 80015cc:	f7ff bfe0 	b.w	8001590 <fnArrayOut_2>

080015d0 <fnInitSysTick>:
//          MUST Be Set to 1  (Bit #2 - 0x00000004)
//---------------------------------------------------------------------------------------------

void  fnInitSysTick (void)
{
  INIT_SYSTICK;
 80015d0:	f24e 0010 	movw	r0, #57360	; 0xe010
 80015d4:	f2ce 0000 	movt	r0, #57344	; 0xe000
 80015d8:	f04f 0104 	mov.w	r1, #4
 80015dc:	f2c0 0100 	movt	r1, #0
 80015e0:	6001      	str	r1, [r0, #0]
 80015e2:	bf00      	nop
 80015e4:	f24e 0014 	movw	r0, #57364	; 0xe014
 80015e8:	f2ce 0000 	movt	r0, #57344	; 0xe000
 80015ec:	f641 411f 	movw	r1, #7199	; 0x1c1f
 80015f0:	f2c0 0100 	movt	r1, #0
 80015f4:	6001      	str	r1, [r0, #0]
 80015f6:	bf00      	nop
 80015f8:	f24e 0014 	movw	r0, #57364	; 0xe014
 80015fc:	f2ce 0000 	movt	r0, #57344	; 0xe000
 8001600:	f641 411f 	movw	r1, #7199	; 0x1c1f
 8001604:	f2c0 0100 	movt	r1, #0
 8001608:	6001      	str	r1, [r0, #0]
 800160a:	bf00      	nop
 800160c:	f24e 0010 	movw	r0, #57360	; 0xe010
 8001610:	f2ce 0000 	movt	r0, #57344	; 0xe000
 8001614:	f04f 0107 	mov.w	r1, #7
 8001618:	f2c0 0100 	movt	r1, #0
 800161c:	6001      	str	r1, [r0, #0]
 800161e:	bf00      	nop

//  STK_CTRL = 0x00000004;                        //--- Zero Control Register Enable Clock Source
//  STK_LOAD = ulCount;                           //--- Set the SysTick Load Value
//  STK_VAL = ulCount - 1;                        //--- Preset Initial DownCount
//  STK_CTRL = 0x00000007;                        //--- Enable SysTick, Interrupt Use SysClock
}
 8001620:	4770      	bx	lr

08001622 <fnSysTick_IRQ>:
//
//---------------------------------------------------------------------------------------------

//void fnSysTick (void)
void fnSysTick_IRQ(void)                        //--- IRQ_- 1
{
 8001622:	b510      	push	{r4, lr}
  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::

  //--- Set Test Pulse Hi   OUTPUT PA15
  //    Comment this out if PA15 used for something else
//  #ifdef PacerTest
    SET_PA15;                                     //--- Pacer Test Pulse Hi
 8001624:	4b93      	ldr	r3, [pc, #588]	; (8001874 <fnSysTick_IRQ+0x252>)
//  #endif

  uxSysTick++;                                    //--- Advance the gross 64 bit Timer
 8001626:	4c94      	ldr	r4, [pc, #592]	; (8001878 <fnSysTick_IRQ+0x256>)
    SET_PA15;                                     //--- Pacer Test Pulse Hi
 8001628:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 800162c:	601a      	str	r2, [r3, #0]
  uxSysTick++;                                    //--- Advance the gross 64 bit Timer
 800162e:	e9d4 3200 	ldrd	r3, r2, [r4]
 8001632:	3301      	adds	r3, #1
 8001634:	f142 0200 	adc.w	r2, r2, #0
 8001638:	e9c4 3200 	strd	r3, r2, [r4]

  //--- Increments of 100uSec Delay               //--- Externally readable Downcount Delays
  if(ulFastTimeCount[0]) ulFastTimeCount[0]--;
 800163c:	4b8f      	ldr	r3, [pc, #572]	; (800187c <fnSysTick_IRQ+0x25a>)
 800163e:	681a      	ldr	r2, [r3, #0]
 8001640:	b10a      	cbz	r2, 8001646 <fnSysTick_IRQ+0x24>
 8001642:	3a01      	subs	r2, #1
 8001644:	601a      	str	r2, [r3, #0]
  if(ulFastTimeCount[1]) ulFastTimeCount[1]--;
 8001646:	685a      	ldr	r2, [r3, #4]
 8001648:	b10a      	cbz	r2, 800164e <fnSysTick_IRQ+0x2c>
 800164a:	3a01      	subs	r2, #1
 800164c:	605a      	str	r2, [r3, #4]
  if(ulFastTimeCount[2]) ulFastTimeCount[2]--;
 800164e:	689a      	ldr	r2, [r3, #8]
 8001650:	b10a      	cbz	r2, 8001656 <fnSysTick_IRQ+0x34>
 8001652:	3a01      	subs	r2, #1
 8001654:	609a      	str	r2, [r3, #8]
  if(ulFastTimeCount[3]) ulFastTimeCount[3]--;
 8001656:	68da      	ldr	r2, [r3, #12]
 8001658:	b10a      	cbz	r2, 800165e <fnSysTick_IRQ+0x3c>
 800165a:	3a01      	subs	r2, #1
 800165c:	60da      	str	r2, [r3, #12]

  //--- Bump Tx Delay Timers if Active
  if (uwTxDelay_1) uwTxDelay_1--;
 800165e:	4a88      	ldr	r2, [pc, #544]	; (8001880 <fnSysTick_IRQ+0x25e>)
 8001660:	8813      	ldrh	r3, [r2, #0]
 8001662:	b10b      	cbz	r3, 8001668 <fnSysTick_IRQ+0x46>
 8001664:	3b01      	subs	r3, #1
 8001666:	8013      	strh	r3, [r2, #0]
  if (uwTxDelay_2) uwTxDelay_2--;
 8001668:	4a86      	ldr	r2, [pc, #536]	; (8001884 <fnSysTick_IRQ+0x262>)
 800166a:	8813      	ldrh	r3, [r2, #0]
 800166c:	b10b      	cbz	r3, 8001672 <fnSysTick_IRQ+0x50>
 800166e:	3b01      	subs	r3, #1
 8001670:	8013      	strh	r3, [r2, #0]
  //===========================================================================================
  //    Phased Pacer Tasks 10 Phased Tasks Total Ctcle time = 1.000 mSec
  //===========================================================================================

  //--- Depending on Pacer Phase Determine Action
  switch (uwPacerPhase)
 8001672:	8923      	ldrh	r3, [r4, #8]
 8001674:	2b09      	cmp	r3, #9
 8001676:	f200 814f 	bhi.w	8001918 <fnSysTick_IRQ+0x2f6>
 800167a:	e8df f013 	tbh	[pc, r3, lsl #1]
 800167e:	000a      	.short	0x000a
 8001680:	0064004f 	.word	0x0064004f
 8001684:	00800072 	.word	0x00800072
 8001688:	00d60090 	.word	0x00d60090
 800168c:	011500e8 	.word	0x011500e8
 8001690:	012b      	.short	0x012b
    //-----------------------------------------------------------------------------------------
    //--- Process Timer (0)  at Pacer Phase-0
    //-----------------------------------------------------------------------------------------
    case 0x00:                                    //--- At this point update modulo phases
      //--- Test if The Timer at Location [0] == Active Timer
      if (stTimerQueue[0].uwTimer != 0)
 8001692:	4b7d      	ldr	r3, [pc, #500]	; (8001888 <fnSysTick_IRQ+0x266>)
 8001694:	881a      	ldrh	r2, [r3, #0]
 8001696:	b16a      	cbz	r2, 80016b4 <fnSysTick_IRQ+0x92>
      {
        //--- Decrement Timer
        stTimerQueue[0].uwTimer--;
 8001698:	3a01      	subs	r2, #1
 800169a:	b291      	uxth	r1, r2
 800169c:	801a      	strh	r2, [r3, #0]

        //--- If Timer now == 0 then treat it as a regular task by changing Task Flags
        if (!stTimerQueue[0].uwTimer)
 800169e:	b949      	cbnz	r1, 80016b4 <fnSysTick_IRQ+0x92>
        {
          uwErrCode = fnScheduleTask (stTimerQueue[0]);
 80016a0:	6818      	ldr	r0, [r3, #0]
 80016a2:	6859      	ldr	r1, [r3, #4]
 80016a4:	689a      	ldr	r2, [r3, #8]
 80016a6:	68db      	ldr	r3, [r3, #12]
 80016a8:	f7ff fc81 	bl	8000fae <fnScheduleTask>
 80016ac:	b280      	uxth	r0, r0
          //--- If Schedule Error the process error
          if (uwErrCode) fnError (uwErrCode);
 80016ae:	b108      	cbz	r0, 80016b4 <fnSysTick_IRQ+0x92>
 80016b0:	f000 fbce 	bl	8001e50 <fnError>
        }
      }

    //--- If test mode defined then show where Phase (0) is
    #ifdef PacerTest
      SET_PA00;
 80016b4:	4b6f      	ldr	r3, [pc, #444]	; (8001874 <fnSysTick_IRQ+0x252>)
 80016b6:	2201      	movs	r2, #1
 80016b8:	601a      	str	r2, [r3, #0]
      nop8;
 80016ba:	bf00      	nop
 80016bc:	bf00      	nop
 80016be:	bf00      	nop
 80016c0:	bf00      	nop
 80016c2:	bf00      	nop
 80016c4:	bf00      	nop
 80016c6:	bf00      	nop
 80016c8:	bf00      	nop
      CLR_PA00;
 80016ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80016ce:	601a      	str	r2, [r3, #0]
      break;
  }

  //--- These Items are executed once every PACER / SysTick Pass
  //--- Bump and Modulo the Phase Counter
  uwPacerPhase++;
 80016d0:	8923      	ldrh	r3, [r4, #8]
 80016d2:	3301      	adds	r3, #1
  uwPacerPhase %= 10;
 80016d4:	b29b      	uxth	r3, r3
 80016d6:	210a      	movs	r1, #10
 80016d8:	fbb3 f2f1 	udiv	r2, r3, r1
 80016dc:	fb01 3312 	mls	r3, r1, r2, r3
  //    This Delay takes care of sending next Byte to UARTS at proper times
  //    Depending on the BaudRate for the UART Port
  //    This TX method can transmit at any BAUD rate up to 115200


  if (uwXmit_1_Count)                             //--- Is Xmit Timer Active?
 80016e0:	4a6a      	ldr	r2, [pc, #424]	; (800188c <fnSysTick_IRQ+0x26a>)
  uwPacerPhase %= 10;
 80016e2:	8123      	strh	r3, [r4, #8]
  if (uwXmit_1_Count)                             //--- Is Xmit Timer Active?
 80016e4:	8813      	ldrh	r3, [r2, #0]
 80016e6:	b143      	cbz	r3, 80016fa <fnSysTick_IRQ+0xd8>
  {
    uwXmit_1_Count--;                             //--- Yes so decrement Counter
 80016e8:	3b01      	subs	r3, #1
 80016ea:	b29b      	uxth	r3, r3
 80016ec:	8013      	strh	r3, [r2, #0]
    if (!uwXmit_1_Count)                          //--- Did we reach TX period time?
 80016ee:	b923      	cbnz	r3, 80016fa <fnSysTick_IRQ+0xd8>
    {
      uwXmit_1_Count = uwXmit_1_Delay;            //--- Refresh the Period Count
 80016f0:	4b67      	ldr	r3, [pc, #412]	; (8001890 <fnSysTick_IRQ+0x26e>)
 80016f2:	881b      	ldrh	r3, [r3, #0]
 80016f4:	8013      	strh	r3, [r2, #0]
      fnXmitSvc_1 ();                             //--- Call the Xmit Service Routine
 80016f6:	f7ff fe37 	bl	8001368 <fnXmitSvc_1>
    }
  }

  if (uwXmit_2_Count)                             //--- Is Xmit Timer Active?
 80016fa:	4a66      	ldr	r2, [pc, #408]	; (8001894 <fnSysTick_IRQ+0x272>)
 80016fc:	8813      	ldrh	r3, [r2, #0]
 80016fe:	b143      	cbz	r3, 8001712 <fnSysTick_IRQ+0xf0>
  {
    uwXmit_2_Count--;                             //--- Yes so decrement Counter
 8001700:	3b01      	subs	r3, #1
 8001702:	b29b      	uxth	r3, r3
 8001704:	8013      	strh	r3, [r2, #0]
    if (!uwXmit_2_Count)                          //--- Did we reach TX period time?
 8001706:	b923      	cbnz	r3, 8001712 <fnSysTick_IRQ+0xf0>
    {
      uwXmit_2_Count = uwXmit_2_Delay;            //--- Refresh the Period Count
 8001708:	4b63      	ldr	r3, [pc, #396]	; (8001898 <fnSysTick_IRQ+0x276>)
 800170a:	881b      	ldrh	r3, [r3, #0]
 800170c:	8013      	strh	r3, [r2, #0]
      fnXmitSvc_2 ();                             //--- Call the Xmit Service Routine
 800170e:	f7ff ff07 	bl	8001520 <fnXmitSvc_2>
  }

  //--- Set Test Pulse Lo   OUTPUT PA15
  //    Comment this out if PA15 used for something else
//  #ifdef PacerTest
    CLR_PA15;                                    //--- Pacer Test Pulse Lo
 8001712:	4b58      	ldr	r3, [pc, #352]	; (8001874 <fnSysTick_IRQ+0x252>)
 8001714:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8001718:	601a      	str	r2, [r3, #0]
//  #endif
}
 800171a:	bd10      	pop	{r4, pc}
      if (stTimerQueue[1].uwTimer != 0)
 800171c:	4b5a      	ldr	r3, [pc, #360]	; (8001888 <fnSysTick_IRQ+0x266>)
 800171e:	8a1a      	ldrh	r2, [r3, #16]
 8001720:	2a00      	cmp	r2, #0
 8001722:	d0d5      	beq.n	80016d0 <fnSysTick_IRQ+0xae>
        stTimerQueue[1].uwTimer--;
 8001724:	3a01      	subs	r2, #1
 8001726:	b291      	uxth	r1, r2
 8001728:	821a      	strh	r2, [r3, #16]
        if (!stTimerQueue[1].uwTimer)
 800172a:	2900      	cmp	r1, #0
 800172c:	d1d0      	bne.n	80016d0 <fnSysTick_IRQ+0xae>
          uwErrCode = fnScheduleTask (stTimerQueue[1]);
 800172e:	6918      	ldr	r0, [r3, #16]
 8001730:	6959      	ldr	r1, [r3, #20]
 8001732:	699a      	ldr	r2, [r3, #24]
 8001734:	69db      	ldr	r3, [r3, #28]
          uwErrCode = fnScheduleTask (stTimerQueue[8]);
 8001736:	f7ff fc3a 	bl	8000fae <fnScheduleTask>
 800173a:	b280      	uxth	r0, r0
          if (uwErrCode) fnError (uwErrCode);
 800173c:	2800      	cmp	r0, #0
 800173e:	d0c7      	beq.n	80016d0 <fnSysTick_IRQ+0xae>
 8001740:	f000 fb86 	bl	8001e50 <fnError>
 8001744:	e7c4      	b.n	80016d0 <fnSysTick_IRQ+0xae>
      if (stTimerQueue[2].uwTimer != 0)
 8001746:	4b50      	ldr	r3, [pc, #320]	; (8001888 <fnSysTick_IRQ+0x266>)
 8001748:	8c1a      	ldrh	r2, [r3, #32]
 800174a:	2a00      	cmp	r2, #0
 800174c:	d0c0      	beq.n	80016d0 <fnSysTick_IRQ+0xae>
        stTimerQueue[2].uwTimer--;
 800174e:	3a01      	subs	r2, #1
 8001750:	b291      	uxth	r1, r2
 8001752:	841a      	strh	r2, [r3, #32]
        if (!stTimerQueue[2].uwTimer)
 8001754:	2900      	cmp	r1, #0
 8001756:	d1bb      	bne.n	80016d0 <fnSysTick_IRQ+0xae>
          uwErrCode = fnScheduleTask (stTimerQueue[2]);
 8001758:	6a18      	ldr	r0, [r3, #32]
 800175a:	6a59      	ldr	r1, [r3, #36]	; 0x24
 800175c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800175e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001760:	e7e9      	b.n	8001736 <fnSysTick_IRQ+0x114>
      if (stTimerQueue[3].uwTimer != 0)
 8001762:	4b49      	ldr	r3, [pc, #292]	; (8001888 <fnSysTick_IRQ+0x266>)
 8001764:	8e1a      	ldrh	r2, [r3, #48]	; 0x30
 8001766:	2a00      	cmp	r2, #0
 8001768:	d0b2      	beq.n	80016d0 <fnSysTick_IRQ+0xae>
        stTimerQueue[3].uwTimer--;
 800176a:	3a01      	subs	r2, #1
 800176c:	b291      	uxth	r1, r2
 800176e:	861a      	strh	r2, [r3, #48]	; 0x30
        if (!stTimerQueue[3].uwTimer)
 8001770:	2900      	cmp	r1, #0
 8001772:	d1ad      	bne.n	80016d0 <fnSysTick_IRQ+0xae>
          uwErrCode = fnScheduleTask (stTimerQueue[3]);
 8001774:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8001776:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001778:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800177a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800177c:	e7db      	b.n	8001736 <fnSysTick_IRQ+0x114>
      if (stTimerQueue[4].uwTimer != 0)
 800177e:	4b42      	ldr	r3, [pc, #264]	; (8001888 <fnSysTick_IRQ+0x266>)
 8001780:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8001784:	2a00      	cmp	r2, #0
 8001786:	d0a3      	beq.n	80016d0 <fnSysTick_IRQ+0xae>
        stTimerQueue[4].uwTimer--;
 8001788:	3a01      	subs	r2, #1
 800178a:	b291      	uxth	r1, r2
 800178c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
        if (!stTimerQueue[4].uwTimer)
 8001790:	2900      	cmp	r1, #0
 8001792:	d19d      	bne.n	80016d0 <fnSysTick_IRQ+0xae>
          uwErrCode = fnScheduleTask (stTimerQueue[4]);
 8001794:	6c18      	ldr	r0, [r3, #64]	; 0x40
 8001796:	6c59      	ldr	r1, [r3, #68]	; 0x44
 8001798:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800179a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179c:	e7cb      	b.n	8001736 <fnSysTick_IRQ+0x114>
      if (stTimerQueue[5].uwTimer != 0)
 800179e:	4b3a      	ldr	r3, [pc, #232]	; (8001888 <fnSysTick_IRQ+0x266>)
 80017a0:	f8b3 2050 	ldrh.w	r2, [r3, #80]	; 0x50
 80017a4:	b172      	cbz	r2, 80017c4 <fnSysTick_IRQ+0x1a2>
        stTimerQueue[5].uwTimer--;
 80017a6:	3a01      	subs	r2, #1
 80017a8:	b291      	uxth	r1, r2
 80017aa:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
        if (!stTimerQueue[5].uwTimer)
 80017ae:	b949      	cbnz	r1, 80017c4 <fnSysTick_IRQ+0x1a2>
          uwErrCode = fnScheduleTask (stTimerQueue[5]);
 80017b0:	6d18      	ldr	r0, [r3, #80]	; 0x50
 80017b2:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80017b4:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 80017b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80017b8:	f7ff fbf9 	bl	8000fae <fnScheduleTask>
 80017bc:	b280      	uxth	r0, r0
          if (uwErrCode) fnError (uwErrCode);
 80017be:	b108      	cbz	r0, 80017c4 <fnSysTick_IRQ+0x1a2>
 80017c0:	f000 fb46 	bl	8001e50 <fnError>
 80017c4:	8961      	ldrh	r1, [r4, #10]
 80017c6:	2219      	movs	r2, #25
 80017c8:	fbb1 f3f2 	udiv	r3, r1, r2
 80017cc:	fb02 1313 	mls	r3, r2, r3, r1
      if ((uwPacerTick % 25) == 17)
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	2b11      	cmp	r3, #17
 80017d4:	d110      	bne.n	80017f8 <fnSysTick_IRQ+0x1d6>
        if (ulSystemFlags & 0x80000000)           //--- Test Brightening / Dimming
 80017d6:	4931      	ldr	r1, [pc, #196]	; (800189c <fnSysTick_IRQ+0x27a>)
 80017d8:	4a31      	ldr	r2, [pc, #196]	; (80018a0 <fnSysTick_IRQ+0x27e>)
 80017da:	6808      	ldr	r0, [r1, #0]
 80017dc:	8813      	ldrh	r3, [r2, #0]
 80017de:	2800      	cmp	r0, #0
 80017e0:	da17      	bge.n	8001812 <fnSysTick_IRQ+0x1f0>
          uwLEDcntr--;                            //--- Decrement Counter
 80017e2:	3b01      	subs	r3, #1
 80017e4:	b29b      	uxth	r3, r3
          if (uwLEDcntr < 2)
 80017e6:	2b01      	cmp	r3, #1
          uwLEDcntr--;                            //--- Decrement Counter
 80017e8:	8013      	strh	r3, [r2, #0]
          if (uwLEDcntr < 2)
 80017ea:	d803      	bhi.n	80017f4 <fnSysTick_IRQ+0x1d2>
            ulSystemFlags &= 0x7FFFFFFF;          //--- Clear Brightening Flag LED dims
 80017ec:	680b      	ldr	r3, [r1, #0]
 80017ee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
            ulSystemFlags |= 0x80000000;          //--- Set Brightening Flag LED brightens
 80017f2:	600b      	str	r3, [r1, #0]
        uwLEDtime = uwLEDcntr;                    //--- Sets the amount of time LED is On/Off
 80017f4:	8813      	ldrh	r3, [r2, #0]
 80017f6:	81a3      	strh	r3, [r4, #12]
      if (uwLEDtime)                              //--- If Timer Active
 80017f8:	89a3      	ldrh	r3, [r4, #12]
 80017fa:	2b00      	cmp	r3, #0
 80017fc:	f43f af68 	beq.w	80016d0 <fnSysTick_IRQ+0xae>
        uwLEDtime--;                              //--- Decrement LED On Timer
 8001800:	3b01      	subs	r3, #1
 8001802:	b29b      	uxth	r3, r3
 8001804:	4a27      	ldr	r2, [pc, #156]	; (80018a4 <fnSysTick_IRQ+0x282>)
 8001806:	81a3      	strh	r3, [r4, #12]
        if (!uwLEDtime)
 8001808:	b963      	cbnz	r3, 8001824 <fnSysTick_IRQ+0x202>
          SET_PC15;                               //--- Turn LED Off!
 800180a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
          CLR_PC15;                               //--- Turn LED On!
 800180e:	6013      	str	r3, [r2, #0]
 8001810:	e75e      	b.n	80016d0 <fnSysTick_IRQ+0xae>
          uwLEDcntr++;                            //--- Increment Counter
 8001812:	3301      	adds	r3, #1
 8001814:	b29b      	uxth	r3, r3
          if (uwLEDcntr > 49)
 8001816:	2b31      	cmp	r3, #49	; 0x31
          uwLEDcntr++;                            //--- Increment Counter
 8001818:	8013      	strh	r3, [r2, #0]
          if (uwLEDcntr > 49)
 800181a:	d9eb      	bls.n	80017f4 <fnSysTick_IRQ+0x1d2>
            ulSystemFlags |= 0x80000000;          //--- Set Brightening Flag LED brightens
 800181c:	680b      	ldr	r3, [r1, #0]
 800181e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8001822:	e7e6      	b.n	80017f2 <fnSysTick_IRQ+0x1d0>
          CLR_PC15;                               //--- Turn LED On!
 8001824:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8001828:	e7f1      	b.n	800180e <fnSysTick_IRQ+0x1ec>
      if (stTimerQueue[6].uwTimer != 0)
 800182a:	4b17      	ldr	r3, [pc, #92]	; (8001888 <fnSysTick_IRQ+0x266>)
 800182c:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8001830:	2a00      	cmp	r2, #0
 8001832:	f43f af4d 	beq.w	80016d0 <fnSysTick_IRQ+0xae>
        stTimerQueue[6].uwTimer--;
 8001836:	3a01      	subs	r2, #1
 8001838:	b291      	uxth	r1, r2
 800183a:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        if (!stTimerQueue[6].uwTimer)
 800183e:	2900      	cmp	r1, #0
 8001840:	f47f af46 	bne.w	80016d0 <fnSysTick_IRQ+0xae>
          uwErrCode = fnScheduleTask (stTimerQueue[6]);
 8001844:	6e18      	ldr	r0, [r3, #96]	; 0x60
 8001846:	6e59      	ldr	r1, [r3, #100]	; 0x64
 8001848:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 800184a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800184c:	e773      	b.n	8001736 <fnSysTick_IRQ+0x114>
      if (stTimerQueue[7].uwTimer != 0)
 800184e:	4b0e      	ldr	r3, [pc, #56]	; (8001888 <fnSysTick_IRQ+0x266>)
 8001850:	f8b3 2070 	ldrh.w	r2, [r3, #112]	; 0x70
 8001854:	2a00      	cmp	r2, #0
 8001856:	f43f af3b 	beq.w	80016d0 <fnSysTick_IRQ+0xae>
        stTimerQueue[7].uwTimer--;
 800185a:	3a01      	subs	r2, #1
 800185c:	b291      	uxth	r1, r2
 800185e:	f8a3 2070 	strh.w	r2, [r3, #112]	; 0x70
        if (!stTimerQueue[7].uwTimer)
 8001862:	2900      	cmp	r1, #0
 8001864:	f47f af34 	bne.w	80016d0 <fnSysTick_IRQ+0xae>
          uwErrCode = fnScheduleTask (stTimerQueue[7]);
 8001868:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800186a:	6f59      	ldr	r1, [r3, #116]	; 0x74
 800186c:	6f9a      	ldr	r2, [r3, #120]	; 0x78
 800186e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001870:	e761      	b.n	8001736 <fnSysTick_IRQ+0x114>
 8001872:	bf00      	nop
 8001874:	48000018 	.word	0x48000018
 8001878:	20000440 	.word	0x20000440
 800187c:	20001ab0 	.word	0x20001ab0
 8001880:	20001ac2 	.word	0x20001ac2
 8001884:	20001ac0 	.word	0x20001ac0
 8001888:	20000464 	.word	0x20000464
 800188c:	200016a8 	.word	0x200016a8
 8001890:	2000169e 	.word	0x2000169e
 8001894:	20000e0c 	.word	0x20000e0c
 8001898:	200016a6 	.word	0x200016a6
 800189c:	20001bcc 	.word	0x20001bcc
 80018a0:	20000000 	.word	0x20000000
 80018a4:	48000818 	.word	0x48000818
      if (stTimerQueue[8].uwTimer != 0)
 80018a8:	4b1f      	ldr	r3, [pc, #124]	; (8001928 <fnSysTick_IRQ+0x306>)
 80018aa:	f8b3 2080 	ldrh.w	r2, [r3, #128]	; 0x80
 80018ae:	2a00      	cmp	r2, #0
 80018b0:	f43f af0e 	beq.w	80016d0 <fnSysTick_IRQ+0xae>
        stTimerQueue[8].uwTimer--;
 80018b4:	3a01      	subs	r2, #1
 80018b6:	b291      	uxth	r1, r2
 80018b8:	f8a3 2080 	strh.w	r2, [r3, #128]	; 0x80
        if (!stTimerQueue[8].uwTimer)
 80018bc:	2900      	cmp	r1, #0
 80018be:	f47f af07 	bne.w	80016d0 <fnSysTick_IRQ+0xae>
          uwErrCode = fnScheduleTask (stTimerQueue[8]);
 80018c2:	f8d3 0080 	ldr.w	r0, [r3, #128]	; 0x80
 80018c6:	f8d3 1084 	ldr.w	r1, [r3, #132]	; 0x84
 80018ca:	f8d3 2088 	ldr.w	r2, [r3, #136]	; 0x88
 80018ce:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80018d2:	e730      	b.n	8001736 <fnSysTick_IRQ+0x114>
      if (stTimerQueue[9].uwTimer != 0)
 80018d4:	4b14      	ldr	r3, [pc, #80]	; (8001928 <fnSysTick_IRQ+0x306>)
 80018d6:	f8b3 2090 	ldrh.w	r2, [r3, #144]	; 0x90
 80018da:	b192      	cbz	r2, 8001902 <fnSysTick_IRQ+0x2e0>
        stTimerQueue[9].uwTimer--;
 80018dc:	3a01      	subs	r2, #1
 80018de:	b291      	uxth	r1, r2
 80018e0:	f8a3 2090 	strh.w	r2, [r3, #144]	; 0x90
        if (!stTimerQueue[9].uwTimer)
 80018e4:	b969      	cbnz	r1, 8001902 <fnSysTick_IRQ+0x2e0>
          uwErrCode = fnScheduleTask (stTimerQueue[9]);
 80018e6:	f8d3 0090 	ldr.w	r0, [r3, #144]	; 0x90
 80018ea:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80018ee:	f8d3 2098 	ldr.w	r2, [r3, #152]	; 0x98
 80018f2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80018f6:	f7ff fb5a 	bl	8000fae <fnScheduleTask>
 80018fa:	b280      	uxth	r0, r0
          if (uwErrCode) fnError (uwErrCode);
 80018fc:	b108      	cbz	r0, 8001902 <fnSysTick_IRQ+0x2e0>
 80018fe:	f000 faa7 	bl	8001e50 <fnError>
      uwPacerTick++;                              //--- Bump 1ms Pacer Tick
 8001902:	8963      	ldrh	r3, [r4, #10]
 8001904:	3301      	adds	r3, #1
      uwPacerTick %= 60000;                       //--- 60,000 Pacer Ticks = 1 Minuite
 8001906:	b29b      	uxth	r3, r3
 8001908:	f64e 2160 	movw	r1, #60000	; 0xea60
 800190c:	fbb3 f2f1 	udiv	r2, r3, r1
 8001910:	fb01 3312 	mls	r3, r1, r2, r3
 8001914:	8163      	strh	r3, [r4, #10]
      break;
 8001916:	e6db      	b.n	80016d0 <fnSysTick_IRQ+0xae>
      ulSystemFlags |= 0x10000000;                //--- Set the Systick Error Flag
 8001918:	4a04      	ldr	r2, [pc, #16]	; (800192c <fnSysTick_IRQ+0x30a>)
 800191a:	6813      	ldr	r3, [r2, #0]
 800191c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001920:	6013      	str	r3, [r2, #0]
      uwPacerPhase = 0;
 8001922:	2300      	movs	r3, #0
 8001924:	8123      	strh	r3, [r4, #8]
      break;
 8001926:	e6d3      	b.n	80016d0 <fnSysTick_IRQ+0xae>
 8001928:	20000464 	.word	0x20000464
 800192c:	20001bcc 	.word	0x20001bcc

08001930 <fnReadFastCounter>:

//--- Read a fast timer down count
u32  fnReadFastCounter(u08 ubCntrNum)
{
  return ulFastTimeCount[ubCntrNum];
}
 8001930:	4b01      	ldr	r3, [pc, #4]	; (8001938 <fnReadFastCounter+0x8>)
 8001932:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]
 8001936:	4770      	bx	lr
 8001938:	20001ab0 	.word	0x20001ab0

0800193c <fnClearFastCounter>:

//--- Clear a fast timer down count
void fnClearFastCounter(u08 ubCntrNum)
{
  ulFastTimeCount[ubCntrNum] = 0;
 800193c:	4b02      	ldr	r3, [pc, #8]	; (8001948 <fnClearFastCounter+0xc>)
 800193e:	2200      	movs	r2, #0
 8001940:	f843 2020 	str.w	r2, [r3, r0, lsl #2]
}
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20001ab0 	.word	0x20001ab0

0800194c <fnSetFastCounter>:

//--- Setr a fast timer down count
void fnSetFastCounter(u08 ubCntrNum, u32 ulDownCount)
{
  ulFastTimeCount[ubCntrNum] = ulDownCount;
 800194c:	4b01      	ldr	r3, [pc, #4]	; (8001954 <fnSetFastCounter+0x8>)
 800194e:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
}
 8001952:	4770      	bx	lr
 8001954:	20001ab0 	.word	0x20001ab0

08001958 <fnNull_IRQ>:
//=============================================================================================
//  Function Name  : Do Nothing IRQ
//=============================================================================================
void fnNull_IRQ(void)                           //--- IRQ_XX
{
}
 8001958:	4770      	bx	lr

0800195a <fnHardFault_IRQ>:
//---------------------------------------------------------------------------------------------
//  Function Name  : HardFaultException Error
//---------------------------------------------------------------------------------------------
void fnHardFault_IRQ(void)                      //--- IRQ_-13
{
  GID;                                          //--- Kill Interrupts
 800195a:	b672      	cpsid	i

  //--- Enter Endless Loop Pulsing PB03, PB04, PB05
  while (1)
  {
    SET_PB03;
 800195c:	4b20      	ldr	r3, [pc, #128]	; (80019e0 <fnHardFault_IRQ+0x86>)
 800195e:	2608      	movs	r6, #8
    SET_PB04;
 8001960:	2510      	movs	r5, #16
    SET_PB05;
 8001962:	2420      	movs	r4, #32
    nop16;
    CLR_PB03;
 8001964:	f44f 2000 	mov.w	r0, #524288	; 0x80000
    CLR_PB04;
 8001968:	f44f 1180 	mov.w	r1, #1048576	; 0x100000
    CLR_PB05;
 800196c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
    SET_PB03;
 8001970:	601e      	str	r6, [r3, #0]
    SET_PB04;
 8001972:	601d      	str	r5, [r3, #0]
    SET_PB05;
 8001974:	601c      	str	r4, [r3, #0]
    nop16;
 8001976:	bf00      	nop
 8001978:	bf00      	nop
 800197a:	bf00      	nop
 800197c:	bf00      	nop
 800197e:	bf00      	nop
 8001980:	bf00      	nop
 8001982:	bf00      	nop
 8001984:	bf00      	nop
 8001986:	bf00      	nop
 8001988:	bf00      	nop
 800198a:	bf00      	nop
 800198c:	bf00      	nop
 800198e:	bf00      	nop
 8001990:	bf00      	nop
 8001992:	bf00      	nop
 8001994:	bf00      	nop
    CLR_PB03;
 8001996:	6018      	str	r0, [r3, #0]
    CLR_PB04;
 8001998:	6019      	str	r1, [r3, #0]
    CLR_PB05;
 800199a:	601a      	str	r2, [r3, #0]
    nop16;
 800199c:	bf00      	nop
 800199e:	bf00      	nop
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	bf00      	nop
 80019a6:	bf00      	nop
 80019a8:	bf00      	nop
 80019aa:	bf00      	nop
 80019ac:	bf00      	nop
 80019ae:	bf00      	nop
 80019b0:	bf00      	nop
 80019b2:	bf00      	nop
 80019b4:	bf00      	nop
 80019b6:	bf00      	nop
 80019b8:	bf00      	nop
 80019ba:	bf00      	nop
    nop16;
 80019bc:	bf00      	nop
 80019be:	bf00      	nop
 80019c0:	bf00      	nop
 80019c2:	bf00      	nop
 80019c4:	bf00      	nop
 80019c6:	bf00      	nop
 80019c8:	bf00      	nop
 80019ca:	bf00      	nop
 80019cc:	bf00      	nop
 80019ce:	bf00      	nop
 80019d0:	bf00      	nop
 80019d2:	bf00      	nop
 80019d4:	bf00      	nop
 80019d6:	bf00      	nop
 80019d8:	bf00      	nop
 80019da:	bf00      	nop
  while (1)
 80019dc:	e7c8      	b.n	8001970 <fnHardFault_IRQ+0x16>
 80019de:	bf00      	nop
 80019e0:	48000418 	.word	0x48000418

080019e4 <fnCRS_IRQ>:
 80019e4:	4770      	bx	lr

080019e6 <fnNMI_IRQ>:
 80019e6:	4770      	bx	lr

080019e8 <fnMemManage_IRQ>:
 80019e8:	4770      	bx	lr

080019ea <fnBusFault_IRQ>:
 80019ea:	4770      	bx	lr

080019ec <fnIllegal_IRQ>:
 80019ec:	4770      	bx	lr

080019ee <fnSVC_IRQ>:
 80019ee:	4770      	bx	lr

080019f0 <fnDebug_IRQ>:
 80019f0:	4770      	bx	lr

080019f2 <fnPendSVC_IRQ>:
 80019f2:	4770      	bx	lr

080019f4 <fnWWDG_IRQ>:
 80019f4:	4770      	bx	lr

080019f6 <fnPVD_IRQ>:
 80019f6:	4770      	bx	lr

080019f8 <fnRTC_IRQ>:
 80019f8:	4770      	bx	lr

080019fa <fnRTC_WKUP_IRQ>:
 80019fa:	4770      	bx	lr

080019fc <fnFLASH_IRQ>:
 80019fc:	4770      	bx	lr

080019fe <fnRCC_IRQ>:
 80019fe:	4770      	bx	lr

08001a00 <fnEXTI_0_IRQ>:
 8001a00:	4770      	bx	lr

08001a02 <fnEXTI_1_IRQ>:
 8001a02:	4770      	bx	lr

08001a04 <fnEXTI_2_IRQ>:
 8001a04:	4770      	bx	lr

08001a06 <fnEXTI_3_IRQ>:
 8001a06:	4770      	bx	lr

08001a08 <fnEXTI_4_IRQ>:
 8001a08:	4770      	bx	lr

08001a0a <fnDMA_11_IRQ>:
 8001a0a:	4770      	bx	lr

08001a0c <fnDMA_12_IRQ>:
 8001a0c:	4770      	bx	lr

08001a0e <fnDMA_13_IRQ>:
 8001a0e:	4770      	bx	lr

08001a10 <fnDMA_14_IRQ>:
 8001a10:	4770      	bx	lr

08001a12 <fnDMA_15_IRQ>:
 8001a12:	4770      	bx	lr

08001a14 <fnDMA_16_IRQ>:
 8001a14:	4770      	bx	lr

08001a16 <fnDMA_17_IRQ>:
 8001a16:	4770      	bx	lr

08001a18 <fnADC_IRQ>:
 8001a18:	4770      	bx	lr

08001a1a <fnCAN1_TX_IRQ>:
 8001a1a:	4770      	bx	lr

08001a1c <fnCAN1_RX0_IRQ>:
 8001a1c:	4770      	bx	lr

08001a1e <fnCAN1_RX1_IRQ>:
 8001a1e:	4770      	bx	lr

08001a20 <fnCAN1_SCE_IRQ>:
 8001a20:	4770      	bx	lr

08001a22 <fnEXTI_5_9_IRQ>:
 8001a22:	4770      	bx	lr

08001a24 <fnTIM1_BK_TIM15_IRQ>:
 8001a24:	4770      	bx	lr

08001a26 <fnTIM1_UP_TIM16_IRQ>:
 8001a26:	4770      	bx	lr

08001a28 <fnTIM1_TRG_COM_IRQ>:
 8001a28:	4770      	bx	lr

08001a2a <fnTIM1_CC_IRQ>:
 8001a2a:	4770      	bx	lr

08001a2c <fnTIM2_IRQ>:
 8001a2c:	4770      	bx	lr

08001a2e <fnTIM3_IRQ>:
 8001a2e:	4770      	bx	lr

08001a30 <fnTIM4_IRQ>:
 8001a30:	4770      	bx	lr

08001a32 <fnI2C1_EV_IRQ>:
 8001a32:	4770      	bx	lr

08001a34 <fnI2C1_ER_IRQ>:
 8001a34:	4770      	bx	lr

08001a36 <fnI2C2_EV_IRQ>:
 8001a36:	4770      	bx	lr

08001a38 <fnI2C2_ER_IRQ>:
 8001a38:	4770      	bx	lr

08001a3a <fnSPI1_IRQ>:
 8001a3a:	4770      	bx	lr

08001a3c <fnSPI2_IRQ>:
 8001a3c:	4770      	bx	lr

08001a3e <fnUSART3_IRQ>:
 8001a3e:	4770      	bx	lr

08001a40 <fnEXTI_10_15_IRQ>:
 8001a40:	4770      	bx	lr

08001a42 <fnRTC_ALARM_IRQ>:
 8001a42:	4770      	bx	lr

08001a44 <fnSDMMC1_IRQ>:
 8001a44:	4770      	bx	lr

08001a46 <fnSPI3_IRQ>:
 8001a46:	4770      	bx	lr

08001a48 <fnUSART4_IRQ>:
 8001a48:	4770      	bx	lr

08001a4a <fnTIM6_IRQ>:
 8001a4a:	4770      	bx	lr

08001a4c <fnTIM7_IRQ>:
 8001a4c:	4770      	bx	lr

08001a4e <fnDMA_21_IRQ>:
 8001a4e:	4770      	bx	lr

08001a50 <fnDMA_22_IRQ>:
 8001a50:	4770      	bx	lr

08001a52 <fnDMA_23_IRQ>:
 8001a52:	4770      	bx	lr

08001a54 <fnDMA_24_IRQ>:
 8001a54:	4770      	bx	lr

08001a56 <fnDMA_25_IRQ>:
 8001a56:	4770      	bx	lr

08001a58 <fnCOMP_IRQ>:
 8001a58:	4770      	bx	lr

08001a5a <fnLPTIM1_IRQ>:
 8001a5a:	4770      	bx	lr

08001a5c <fnLPTIM2_IRQ>:
 8001a5c:	4770      	bx	lr

08001a5e <fnUSB_FS_IRQ>:
 8001a5e:	4770      	bx	lr

08001a60 <fnDMA_26_IRQ>:
 8001a60:	4770      	bx	lr

08001a62 <fnDMA_27_IRQ>:
 8001a62:	4770      	bx	lr

08001a64 <fnLPUART1_IRQ>:
 8001a64:	4770      	bx	lr

08001a66 <fnQUADSPI_IRQ>:
 8001a66:	4770      	bx	lr

08001a68 <fnI2C3_EV_IRQ>:
 8001a68:	4770      	bx	lr

08001a6a <fnI2C3_ER_IRQ>:
 8001a6a:	4770      	bx	lr

08001a6c <fnSAI_IRQ>:
 8001a6c:	4770      	bx	lr

08001a6e <fnSWPMI1_IRQ>:
 8001a6e:	4770      	bx	lr

08001a70 <fnTSC_IRQ>:
 8001a70:	4770      	bx	lr

08001a72 <fnRNG_IRQ>:
 8001a72:	4770      	bx	lr

08001a74 <fnFPU_IRQ>:
 8001a74:	4770      	bx	lr

08001a76 <fnInitNVIC>:
{
 8001a76:	b510      	push	{r4, lr}
  GID;                                            //--- Kill All Interrupts
 8001a78:	b672      	cpsid	i
  SCB_AIRCR = 0x05FA0000;                         //--- Reset NVIC to no priority grouping
 8001a7a:	4b09      	ldr	r3, [pc, #36]	; (8001aa0 <fnInitNVIC+0x2a>)
 8001a7c:	4a09      	ldr	r2, [pc, #36]	; (8001aa4 <fnInitNVIC+0x2e>)
 8001a7e:	490a      	ldr	r1, [pc, #40]	; (8001aa8 <fnInitNVIC+0x32>)
  //  \param [in]      IRQn  Interrupt number.
  //  \param [in]  priority  Priority to set. in range of 0 to 0x0F
  //
  __STATIC_INLINE void NVIC_SetPriority(u32 IRQn, u32 priority)
  {
    NVIC->IP[((u32)IRQn)] = (u08)((priority << (8 - __NVIC_PRIO_BITS)) & (u32)0xFFUL);
 8001a80:	4c0a      	ldr	r4, [pc, #40]	; (8001aac <fnInitNVIC+0x36>)
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	2200      	movs	r2, #0
    ubA = ubNVIC_Ptable_Image[uwA];               //--- Get Interrupt Priority and Enable
 8001a86:	f811 3b01 	ldrb.w	r3, [r1], #1
 8001a8a:	18a0      	adds	r0, r4, r2
 8001a8c:	011b      	lsls	r3, r3, #4
 8001a8e:	3201      	adds	r2, #1
 8001a90:	b2db      	uxtb	r3, r3
  for (uwA = 0; uwA < 128; uwA++)
 8001a92:	2a80      	cmp	r2, #128	; 0x80
 8001a94:	f880 3300 	strb.w	r3, [r0, #768]	; 0x300
 8001a98:	d1f5      	bne.n	8001a86 <fnInitNVIC+0x10>
  GIE;                                            //--- Restore Interrrupt Enable
 8001a9a:	b662      	cpsie	i
}
 8001a9c:	bd10      	pop	{r4, pc}
 8001a9e:	bf00      	nop
 8001aa0:	e000ed0c 	.word	0xe000ed0c
 8001aa4:	05fa0000 	.word	0x05fa0000
 8001aa8:	080051b0 	.word	0x080051b0
 8001aac:	e000e100 	.word	0xe000e100

08001ab0 <fnEnaInt>:
//---------------------------------------------------------------------------------------------
//    Enable Individual Interrupts  (0 to 96) (97 Total Interrupts)
//---------------------------------------------------------------------------------------------
void  fnEnaInt (u16 uwIntNum)
{
  GID;                                            //--- Kill Other Interrupts
 8001ab0:	b672      	cpsid	i
    NVIC->ISER[(((u32)IRQn) >> 5UL)] = (u32)(1UL << (((u32)IRQn) & 0x1FUL));
 8001ab2:	2301      	movs	r3, #1
 8001ab4:	0942      	lsrs	r2, r0, #5
 8001ab6:	f000 001f 	and.w	r0, r0, #31
 8001aba:	fa03 f000 	lsl.w	r0, r3, r0
 8001abe:	4b02      	ldr	r3, [pc, #8]	; (8001ac8 <fnEnaInt+0x18>)
 8001ac0:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
  NVIC_EnableIRQ(uwIntNum);
  GIE;                                            //--- Enable Other Interrupts
 8001ac4:	b662      	cpsie	i
}
 8001ac6:	4770      	bx	lr
 8001ac8:	e000e100 	.word	0xe000e100

08001acc <fnDisInt>:
 8001acc:	f7ff bff0 	b.w	8001ab0 <fnEnaInt>

08001ad0 <fnSetIntPend>:
//---------------------------------------------------------------------------------------------
//    Set an Interrupt Bit in the Interrupts Mask
//---------------------------------------------------------------------------------------------
void  fnSetIntPend (u16 uwIntNum)
{
  GID;                                            //--- Kill Other Interrupts
 8001ad0:	b672      	cpsid	i
    NVIC->ICER[(((u32)IRQn) >> 5UL)] = (u32)(1UL << (((u32)IRQn) & 0x1FUL));
 8001ad2:	2201      	movs	r2, #1
 8001ad4:	0943      	lsrs	r3, r0, #5
 8001ad6:	f000 001f 	and.w	r0, r0, #31
 8001ada:	fa02 f000 	lsl.w	r0, r2, r0
 8001ade:	3320      	adds	r3, #32
 8001ae0:	4a02      	ldr	r2, [pc, #8]	; (8001aec <fnSetIntPend+0x1c>)
 8001ae2:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  NVIC_DisableIRQ(uwIntNum);
  GIE;                                            //--- Enable Other Interrupts
 8001ae6:	b662      	cpsie	i
}
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	e000e100 	.word	0xe000e100

08001af0 <fnClrIntPend>:
//---------------------------------------------------------------------------------------------
//    Clear an Interrupt Bit in the Interrupts Pending Mask
//---------------------------------------------------------------------------------------------
void  fnClrIntPend (u16 uwIntNum)
{
  GID;                                            //--- Kill Other Interrupts
 8001af0:	b672      	cpsid	i
    NVIC->ICPR[(((u32)IRQn) >> 5UL)] = (u32)(1UL << (((u32)IRQn) & 0x1FUL));
 8001af2:	2201      	movs	r2, #1
 8001af4:	0943      	lsrs	r3, r0, #5
 8001af6:	f000 001f 	and.w	r0, r0, #31
 8001afa:	fa02 f000 	lsl.w	r0, r2, r0
 8001afe:	3360      	adds	r3, #96	; 0x60
 8001b00:	4a02      	ldr	r2, [pc, #8]	; (8001b0c <fnClrIntPend+0x1c>)
 8001b02:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
  NVIC_ClearPendingIRQ(uwIntNum);
  GIE;                                            //--- Enable Other Interrupts
 8001b06:	b662      	cpsie	i
}
 8001b08:	4770      	bx	lr
 8001b0a:	bf00      	nop
 8001b0c:	e000e100 	.word	0xe000e100

08001b10 <fnSetIntPriority>:
    NVIC->IP[((u32)IRQn)] = (u08)((priority << (8 - __NVIC_PRIO_BITS)) & (u32)0xFFUL);
 8001b10:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
 8001b14:	0109      	lsls	r1, r1, #4
 8001b16:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
 8001b1a:	b2c9      	uxtb	r1, r1
 8001b1c:	f880 1300 	strb.w	r1, [r0, #768]	; 0x300
//    ubPri = Priority Level (0 . 0x00  - 15) Higher Number = Weaker priority
//---------------------------------------------------------------------------------------------
void  fnSetIntPriority (u16 uwIntNum, u08 ubPri)
{
  NVIC_SetPriority(uwIntNum, ubPri);
}
 8001b20:	4770      	bx	lr
 8001b22:	bf00      	nop

08001b24 <fnPulseNibbleOut>:
//      33222222222211111111110000000000
//      10987654321098765432109876543210
//---------------------------------------------------------------------------------------------
//--- Output A Pulse Byte
void  fnPulseNibbleOut (u08 ubPulseNibble)
{
 8001b24:	b5f0      	push	{r4, r5, r6, r7, lr}
  u16 uwA;
  u08 ubB = 0x04;                                 //--- Set Hi Bit Mask

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  //--- Define Bit Masks for Set/Clr Pins
  ulCsetMask = (0x00000001 << Cpin);
 8001b26:	4d1e      	ldr	r5, [pc, #120]	; (8001ba0 <fnPulseNibbleOut+0x7c>)
  ulCclrMask = (0x00000001 << (Cpin + 16));
  ulDsetMask = (0x00000001 << Dpin);
 8001b28:	4e1e      	ldr	r6, [pc, #120]	; (8001ba4 <fnPulseNibbleOut+0x80>)
  ulDclrMask = (0x00000001 << (Dpin + 16));
 8001b2a:	491f      	ldr	r1, [pc, #124]	; (8001ba8 <fnPulseNibbleOut+0x84>)
  ulCclrMask = (0x00000001 << (Cpin + 16));
 8001b2c:	4c1f      	ldr	r4, [pc, #124]	; (8001bac <fnPulseNibbleOut+0x88>)
  ulCsetMask = (0x00000001 << Cpin);
 8001b2e:	2380      	movs	r3, #128	; 0x80
 8001b30:	602b      	str	r3, [r5, #0]
  ulDsetMask = (0x00000001 << Dpin);
 8001b32:	2340      	movs	r3, #64	; 0x40
 8001b34:	6033      	str	r3, [r6, #0]
  ulDclrMask = (0x00000001 << (Dpin + 16));
 8001b36:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001b3a:	600b      	str	r3, [r1, #0]

  //--- Clear Clock & Data Pins
  ClrCpin;
 8001b3c:	4b1c      	ldr	r3, [pc, #112]	; (8001bb0 <fnPulseNibbleOut+0x8c>)
  ulCclrMask = (0x00000001 << (Cpin + 16));
 8001b3e:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8001b42:	6022      	str	r2, [r4, #0]
  ClrCpin;
 8001b44:	601a      	str	r2, [r3, #0]
  ClrDpin;
 8001b46:	680a      	ldr	r2, [r1, #0]
 8001b48:	601a      	str	r2, [r3, #0]
 8001b4a:	2204      	movs	r2, #4
  u08 ubB = 0x04;                                 //--- Set Hi Bit Mask
 8001b4c:	4617      	mov	r7, r2
 8001b4e:	46a4      	mov	ip, r4

  //--- Pulse the Value Out
  for (uwA = 0; uwA < 4; uwA++)
  {
    if (ubPulseNibble & ubB)
 8001b50:	4238      	tst	r0, r7
    {
      SetDpin;
 8001b52:	bf14      	ite	ne
 8001b54:	6834      	ldrne	r4, [r6, #0]
    }
    else
    {
      ClrDpin;
 8001b56:	680c      	ldreq	r4, [r1, #0]
 8001b58:	601c      	str	r4, [r3, #0]
    }

    nop4;
 8001b5a:	bf00      	nop
 8001b5c:	bf00      	nop
 8001b5e:	bf00      	nop
 8001b60:	bf00      	nop

    SetCpin;                                      //--- Set Clock Hi
 8001b62:	682c      	ldr	r4, [r5, #0]
 8001b64:	601c      	str	r4, [r3, #0]

    nop4;
 8001b66:	bf00      	nop
 8001b68:	bf00      	nop
 8001b6a:	bf00      	nop
 8001b6c:	bf00      	nop

    ClrCpin;                                      //--- Set Clock Lo
 8001b6e:	f8dc 4000 	ldr.w	r4, [ip]
 8001b72:	601c      	str	r4, [r3, #0]

    nop4;
 8001b74:	bf00      	nop
 8001b76:	bf00      	nop
 8001b78:	bf00      	nop
 8001b7a:	bf00      	nop

    ClrDpin;                                      //--- Set Data Lo
 8001b7c:	3a01      	subs	r2, #1
 8001b7e:	680c      	ldr	r4, [r1, #0]
 8001b80:	601c      	str	r4, [r3, #0]

    ubB = ubB >> 1;                               //--- Rotate to Next Bit Lower
 8001b82:	b292      	uxth	r2, r2
 8001b84:	087f      	lsrs	r7, r7, #1
  for (uwA = 0; uwA < 4; uwA++)
 8001b86:	2a00      	cmp	r2, #0
 8001b88:	d1e2      	bne.n	8001b50 <fnPulseNibbleOut+0x2c>
 8001b8a:	230c      	movs	r3, #12
  }

  //--- Inter Value Time Spacer
  for (uwA = 0; uwA < 12; uwA++)
  {
    nop4;                                          //--- Inter Value Spacer
 8001b8c:	bf00      	nop
 8001b8e:	bf00      	nop
 8001b90:	bf00      	nop
 8001b92:	bf00      	nop
  for (uwA = 0; uwA < 12; uwA++)
 8001b94:	3b01      	subs	r3, #1
 8001b96:	b29b      	uxth	r3, r3
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d1f7      	bne.n	8001b8c <fnPulseNibbleOut+0x68>
  }
}
 8001b9c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001b9e:	bf00      	nop
 8001ba0:	20001ac8 	.word	0x20001ac8
 8001ba4:	20001ac4 	.word	0x20001ac4
 8001ba8:	20001acc 	.word	0x20001acc
 8001bac:	20001ad4 	.word	0x20001ad4
 8001bb0:	48000018 	.word	0x48000018

08001bb4 <fnPulseByteOut>:

//--- Output A Pulse Byte
void  fnPulseByteOut (u08 ubPulseByte)
{
 8001bb4:	b5f0      	push	{r4, r5, r6, r7, lr}

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  //--- Define Bit Masks for Set/Clr Pins
  ulCsetMask = (0x00000001 << Cpin);
  ulCclrMask = (0x00000001 << (Cpin + 16));
  ulDsetMask = (0x00000001 << Dpin);
 8001bb6:	4f1d      	ldr	r7, [pc, #116]	; (8001c2c <fnPulseByteOut+0x78>)
  ulDclrMask = (0x00000001 << (Dpin + 16));
 8001bb8:	491d      	ldr	r1, [pc, #116]	; (8001c30 <fnPulseByteOut+0x7c>)
  ulCclrMask = (0x00000001 << (Cpin + 16));
 8001bba:	4d1e      	ldr	r5, [pc, #120]	; (8001c34 <fnPulseByteOut+0x80>)
  ulCsetMask = (0x00000001 << Cpin);
 8001bbc:	4e1e      	ldr	r6, [pc, #120]	; (8001c38 <fnPulseByteOut+0x84>)
  ulDsetMask = (0x00000001 << Dpin);
 8001bbe:	2340      	movs	r3, #64	; 0x40
 8001bc0:	603b      	str	r3, [r7, #0]
  ulDclrMask = (0x00000001 << (Dpin + 16));
 8001bc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001bc6:	600b      	str	r3, [r1, #0]

  //--- Clear Clock & Data Pins
  ClrCpin;
 8001bc8:	4b1c      	ldr	r3, [pc, #112]	; (8001c3c <fnPulseByteOut+0x88>)
  ulCclrMask = (0x00000001 << (Cpin + 16));
 8001bca:	f44f 0400 	mov.w	r4, #8388608	; 0x800000
  ulCsetMask = (0x00000001 << Cpin);
 8001bce:	2280      	movs	r2, #128	; 0x80
  ulCclrMask = (0x00000001 << (Cpin + 16));
 8001bd0:	602c      	str	r4, [r5, #0]
  ulCsetMask = (0x00000001 << Cpin);
 8001bd2:	6032      	str	r2, [r6, #0]
  ClrCpin;
 8001bd4:	601c      	str	r4, [r3, #0]
  ClrDpin;
 8001bd6:	680c      	ldr	r4, [r1, #0]
 8001bd8:	601c      	str	r4, [r3, #0]

  //--- Pulse the Value Out
  for (uwA = 0; uwA < 8; uwA++)
 8001bda:	46ac      	mov	ip, r5
  ClrDpin;
 8001bdc:	2408      	movs	r4, #8
  {
    if (ubPulseByte & ubB)
 8001bde:	4210      	tst	r0, r2
    {
      SetDpin;
 8001be0:	bf14      	ite	ne
 8001be2:	683d      	ldrne	r5, [r7, #0]
    }
    else
    {
      ClrDpin;
 8001be4:	680d      	ldreq	r5, [r1, #0]
 8001be6:	601d      	str	r5, [r3, #0]
    }

    nop4;
 8001be8:	bf00      	nop
 8001bea:	bf00      	nop
 8001bec:	bf00      	nop
 8001bee:	bf00      	nop

    SetCpin;                                      //--- Set Clock Hi
 8001bf0:	6835      	ldr	r5, [r6, #0]
 8001bf2:	601d      	str	r5, [r3, #0]

    nop4;
 8001bf4:	bf00      	nop
 8001bf6:	bf00      	nop
 8001bf8:	bf00      	nop
 8001bfa:	bf00      	nop

    ClrCpin;                                      //--- Set Clock Lo
 8001bfc:	f8dc 5000 	ldr.w	r5, [ip]
 8001c00:	601d      	str	r5, [r3, #0]

    nop4;
 8001c02:	bf00      	nop
 8001c04:	bf00      	nop
 8001c06:	bf00      	nop
 8001c08:	bf00      	nop

    ClrDpin;                                      //--- Set Data Lo
 8001c0a:	3c01      	subs	r4, #1
 8001c0c:	680d      	ldr	r5, [r1, #0]
 8001c0e:	601d      	str	r5, [r3, #0]

    ubB = ubB >> 1;                               //--- Rotate to Next Bit Lower
 8001c10:	b2a4      	uxth	r4, r4
 8001c12:	0852      	lsrs	r2, r2, #1
  for (uwA = 0; uwA < 8; uwA++)
 8001c14:	2c00      	cmp	r4, #0
 8001c16:	d1e2      	bne.n	8001bde <fnPulseByteOut+0x2a>
 8001c18:	230c      	movs	r3, #12
  }

  //--- Inter Value Time Spacer
  for (uwA = 0; uwA < 12; uwA++)
  {
    nop4;                                          //--- Inter Value Spacer
 8001c1a:	bf00      	nop
 8001c1c:	bf00      	nop
 8001c1e:	bf00      	nop
 8001c20:	bf00      	nop
  for (uwA = 0; uwA < 12; uwA++)
 8001c22:	3b01      	subs	r3, #1
 8001c24:	b29b      	uxth	r3, r3
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d1f7      	bne.n	8001c1a <fnPulseByteOut+0x66>
  }
}
 8001c2a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001c2c:	20001ac4 	.word	0x20001ac4
 8001c30:	20001acc 	.word	0x20001acc
 8001c34:	20001ad4 	.word	0x20001ad4
 8001c38:	20001ac8 	.word	0x20001ac8
 8001c3c:	48000018 	.word	0x48000018

08001c40 <fnPulseWordOut>:

//--- Output a 16 Bit Word Value
void  fnPulseWordOut (u16 uwPulseWord)
{
 8001c40:	b5f0      	push	{r4, r5, r6, r7, lr}
  u16 uwA;
  u16 uwB = 0x8000;                                 //--- Set MSB Bit Mask

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  //--- Define Bit Masks for Set/Clr Pins
  ulCsetMask = (0x00000001 << Cpin);
 8001c42:	4d1e      	ldr	r5, [pc, #120]	; (8001cbc <fnPulseWordOut+0x7c>)
  ulCclrMask = (0x00000001 << (Cpin + 16));
  ulDsetMask = (0x00000001 << Dpin);
 8001c44:	4e1e      	ldr	r6, [pc, #120]	; (8001cc0 <fnPulseWordOut+0x80>)
  ulDclrMask = (0x00000001 << (Dpin + 16));
 8001c46:	4a1f      	ldr	r2, [pc, #124]	; (8001cc4 <fnPulseWordOut+0x84>)
  ulCclrMask = (0x00000001 << (Cpin + 16));
 8001c48:	4c1f      	ldr	r4, [pc, #124]	; (8001cc8 <fnPulseWordOut+0x88>)
  ulCsetMask = (0x00000001 << Cpin);
 8001c4a:	2380      	movs	r3, #128	; 0x80
 8001c4c:	602b      	str	r3, [r5, #0]
  ulDsetMask = (0x00000001 << Dpin);
 8001c4e:	2340      	movs	r3, #64	; 0x40
 8001c50:	6033      	str	r3, [r6, #0]
  ulDclrMask = (0x00000001 << (Dpin + 16));
 8001c52:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001c56:	6013      	str	r3, [r2, #0]

  //--- Clear Clock & Data Pins
  ClrCpin;
 8001c58:	4b1c      	ldr	r3, [pc, #112]	; (8001ccc <fnPulseWordOut+0x8c>)
  ulCclrMask = (0x00000001 << (Cpin + 16));
 8001c5a:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8001c5e:	6021      	str	r1, [r4, #0]
  ClrCpin;
 8001c60:	6019      	str	r1, [r3, #0]
  ClrDpin;
 8001c62:	6811      	ldr	r1, [r2, #0]
 8001c64:	6019      	str	r1, [r3, #0]
  u16 uwB = 0x8000;                                 //--- Set MSB Bit Mask
 8001c66:	f44f 4700 	mov.w	r7, #32768	; 0x8000
  ClrDpin;
 8001c6a:	2110      	movs	r1, #16
 8001c6c:	46a4      	mov	ip, r4

  //--- Pulse the Value Out
  for (uwA = 0; uwA < 16; uwA++)
  {
    if (uwPulseWord & uwB)
 8001c6e:	4238      	tst	r0, r7
    {
      SetDpin;
 8001c70:	bf14      	ite	ne
 8001c72:	6834      	ldrne	r4, [r6, #0]
    }
    else
    {
      ClrDpin;
 8001c74:	6814      	ldreq	r4, [r2, #0]
 8001c76:	601c      	str	r4, [r3, #0]
    }

    nop4;
 8001c78:	bf00      	nop
 8001c7a:	bf00      	nop
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop

    SetCpin;                                      //--- Set Clock Hi
 8001c80:	682c      	ldr	r4, [r5, #0]
 8001c82:	601c      	str	r4, [r3, #0]

    nop4;
 8001c84:	bf00      	nop
 8001c86:	bf00      	nop
 8001c88:	bf00      	nop
 8001c8a:	bf00      	nop

    ClrCpin;                                      //--- Set Clock Hi
 8001c8c:	f8dc 4000 	ldr.w	r4, [ip]
 8001c90:	601c      	str	r4, [r3, #0]

    nop4;
 8001c92:	bf00      	nop
 8001c94:	bf00      	nop
 8001c96:	bf00      	nop
 8001c98:	bf00      	nop

    ClrDpin;                                      //--- Set Clock Hi
 8001c9a:	3901      	subs	r1, #1
 8001c9c:	6814      	ldr	r4, [r2, #0]
 8001c9e:	601c      	str	r4, [r3, #0]

    uwB = uwB >> 1;                               //--- Rotate to Next Bit Lower
 8001ca0:	b289      	uxth	r1, r1
 8001ca2:	087f      	lsrs	r7, r7, #1
  for (uwA = 0; uwA < 16; uwA++)
 8001ca4:	2900      	cmp	r1, #0
 8001ca6:	d1e2      	bne.n	8001c6e <fnPulseWordOut+0x2e>
 8001ca8:	230c      	movs	r3, #12
  }

  //--- Inter Value Time Spacer
  for (uwA = 0; uwA < 12; uwA++)
  {
    nop4;                                          //--- Inter Value Spacer
 8001caa:	bf00      	nop
 8001cac:	bf00      	nop
 8001cae:	bf00      	nop
 8001cb0:	bf00      	nop
  for (uwA = 0; uwA < 12; uwA++)
 8001cb2:	3b01      	subs	r3, #1
 8001cb4:	b29b      	uxth	r3, r3
 8001cb6:	2b00      	cmp	r3, #0
 8001cb8:	d1f7      	bne.n	8001caa <fnPulseWordOut+0x6a>
  }
}
 8001cba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001cbc:	20001ac8 	.word	0x20001ac8
 8001cc0:	20001ac4 	.word	0x20001ac4
 8001cc4:	20001acc 	.word	0x20001acc
 8001cc8:	20001ad4 	.word	0x20001ad4
 8001ccc:	48000018 	.word	0x48000018

08001cd0 <fnPulseLongOut>:

//--- Output a 32 Bit Long Value
//    Outputs Data Bits Highest to Lowest order

void  fnPulseLongOut (u32 ulPulseLong)
{
 8001cd0:	b5f0      	push	{r4, r5, r6, r7, lr}
  u16 uwA;
  u32 ulB = 0x80000000;                            //--- Set MSB Bit Mask

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  //--- Define Bit Masks for Set/Clr Pins
  ulCsetMask = (0x00000001 << Cpin);
 8001cd2:	4d1e      	ldr	r5, [pc, #120]	; (8001d4c <fnPulseLongOut+0x7c>)
  ulCclrMask = (0x00000001 << (Cpin + 16));
  ulDsetMask = (0x00000001 << Dpin);
 8001cd4:	4e1e      	ldr	r6, [pc, #120]	; (8001d50 <fnPulseLongOut+0x80>)
  ulDclrMask = (0x00000001 << (Dpin + 16));
 8001cd6:	4a1f      	ldr	r2, [pc, #124]	; (8001d54 <fnPulseLongOut+0x84>)
  ulCclrMask = (0x00000001 << (Cpin + 16));
 8001cd8:	4c1f      	ldr	r4, [pc, #124]	; (8001d58 <fnPulseLongOut+0x88>)
  ulCsetMask = (0x00000001 << Cpin);
 8001cda:	2380      	movs	r3, #128	; 0x80
 8001cdc:	602b      	str	r3, [r5, #0]
  ulDsetMask = (0x00000001 << Dpin);
 8001cde:	2340      	movs	r3, #64	; 0x40
 8001ce0:	6033      	str	r3, [r6, #0]
  ulDclrMask = (0x00000001 << (Dpin + 16));
 8001ce2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001ce6:	6013      	str	r3, [r2, #0]

  //--- Clear Clock & Data Pins
  ClrCpin;
 8001ce8:	4b1c      	ldr	r3, [pc, #112]	; (8001d5c <fnPulseLongOut+0x8c>)
  ulCclrMask = (0x00000001 << (Cpin + 16));
 8001cea:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8001cee:	6021      	str	r1, [r4, #0]
  ClrCpin;
 8001cf0:	6019      	str	r1, [r3, #0]
  ClrDpin;
 8001cf2:	6811      	ldr	r1, [r2, #0]
 8001cf4:	6019      	str	r1, [r3, #0]
  u32 ulB = 0x80000000;                            //--- Set MSB Bit Mask
 8001cf6:	f04f 4700 	mov.w	r7, #2147483648	; 0x80000000
  ClrDpin;
 8001cfa:	2120      	movs	r1, #32
 8001cfc:	46a4      	mov	ip, r4

  //--- Pulse the Value Out
  for (uwA = 0; uwA < 32; uwA++)
  {
    if ((ulPulseLong & ulB) > 0)
 8001cfe:	4238      	tst	r0, r7
    {
      SetDpin;
 8001d00:	bf14      	ite	ne
 8001d02:	6834      	ldrne	r4, [r6, #0]
    }
    else
    {
      ClrDpin;
 8001d04:	6814      	ldreq	r4, [r2, #0]
 8001d06:	601c      	str	r4, [r3, #0]
    }

    nop4;
 8001d08:	bf00      	nop
 8001d0a:	bf00      	nop
 8001d0c:	bf00      	nop
 8001d0e:	bf00      	nop

    SetCpin;                                      //--- Set Clock Hi
 8001d10:	682c      	ldr	r4, [r5, #0]
 8001d12:	601c      	str	r4, [r3, #0]

    nop4;
 8001d14:	bf00      	nop
 8001d16:	bf00      	nop
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop

    ClrCpin;                                      //--- Set Clock Hi
 8001d1c:	f8dc 4000 	ldr.w	r4, [ip]
 8001d20:	601c      	str	r4, [r3, #0]

    nop4;
 8001d22:	bf00      	nop
 8001d24:	bf00      	nop
 8001d26:	bf00      	nop
 8001d28:	bf00      	nop

    ClrDpin;                                      //--- Set Clock Hi
 8001d2a:	3901      	subs	r1, #1
 8001d2c:	6814      	ldr	r4, [r2, #0]
 8001d2e:	601c      	str	r4, [r3, #0]

    ulB = ulB >> 1;                               //--- Rotate to Next Bit Lower
 8001d30:	b289      	uxth	r1, r1
 8001d32:	087f      	lsrs	r7, r7, #1
  for (uwA = 0; uwA < 32; uwA++)
 8001d34:	2900      	cmp	r1, #0
 8001d36:	d1e2      	bne.n	8001cfe <fnPulseLongOut+0x2e>
 8001d38:	230c      	movs	r3, #12
  }

  //--- Inter Value Time Spacer
  for (uwA = 0; uwA < 12; uwA++)
  {
    nop4;                                          //--- Inter Value Spacer
 8001d3a:	bf00      	nop
 8001d3c:	bf00      	nop
 8001d3e:	bf00      	nop
 8001d40:	bf00      	nop
  for (uwA = 0; uwA < 12; uwA++)
 8001d42:	3b01      	subs	r3, #1
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	2b00      	cmp	r3, #0
 8001d48:	d1f7      	bne.n	8001d3a <fnPulseLongOut+0x6a>
  }
}
 8001d4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001d4c:	20001ac8 	.word	0x20001ac8
 8001d50:	20001ac4 	.word	0x20001ac4
 8001d54:	20001acc 	.word	0x20001acc
 8001d58:	20001ad4 	.word	0x20001ad4
 8001d5c:	48000018 	.word	0x48000018

08001d60 <fnPulseValueOut>:
  switch (ubType)
 8001d60:	2803      	cmp	r0, #3
 8001d62:	d810      	bhi.n	8001d86 <fnPulseValueOut+0x26>
 8001d64:	e8df f000 	tbb	[pc, r0]
 8001d68:	0c090602 	.word	0x0c090602
      fnPulseNibbleOut ((u08) (ulPVO & 0x0000000F));
 8001d6c:	f001 000f 	and.w	r0, r1, #15
 8001d70:	f7ff bed8 	b.w	8001b24 <fnPulseNibbleOut>
      fnPulseByteOut ((u08) (ulPVO & 0x000000FF));
 8001d74:	b2c8      	uxtb	r0, r1
 8001d76:	f7ff bf1d 	b.w	8001bb4 <fnPulseByteOut>
      fnPulseWordOut ((u16) (ulPVO & 0x0000FFFF));
 8001d7a:	b288      	uxth	r0, r1
 8001d7c:	f7ff bf60 	b.w	8001c40 <fnPulseWordOut>
      fnPulseLongOut ((u32) (ulPVO & 0xFFFFFFFF));
 8001d80:	4608      	mov	r0, r1
 8001d82:	f7ff bfa5 	b.w	8001cd0 <fnPulseLongOut>
}
 8001d86:	4770      	bx	lr

08001d88 <fnReadCPUregister>:
u32  fnReadCPUregister (u08 ubRegNum)
{
  u32 ulResult;

  //:::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::::
  switch (ubRegNum)
 8001d88:	2814      	cmp	r0, #20
 8001d8a:	d83b      	bhi.n	8001e04 <fnReadCPUregister+0x7c>
 8001d8c:	e8df f000 	tbb	[pc, r0]
 8001d90:	110f0d0b 	.word	0x110f0d0b
 8001d94:	19171513 	.word	0x19171513
 8001d98:	211f1d1b 	.word	0x211f1d1b
 8001d9c:	29272523 	.word	0x29272523
 8001da0:	34312e2b 	.word	0x34312e2b
 8001da4:	37          	.byte	0x37
 8001da5:	00          	.byte	0x00
  {
    //--- Register R0
    case 0:
      __ASM volatile ("MOV R0, R0\n\t" : "=r" (ulResult) );
 8001da6:	4600      	mov	r0, r0
      break;
 8001da8:	4770      	bx	lr

    //--- Register R1
    case 1:
      __ASM volatile ("MOV R0, R1\n\t" : "=r" (ulResult) );
 8001daa:	4608      	mov	r0, r1
      break;
 8001dac:	4770      	bx	lr

    //--- Register R2
    case 2:
      __ASM volatile ("MOV R0, R2\n\t" : "=r" (ulResult) );
 8001dae:	4610      	mov	r0, r2
      break;
 8001db0:	4770      	bx	lr

    //--- Register R3
    case 3:
      __ASM volatile ("MOV R0, R3\n\t" : "=r" (ulResult) );
 8001db2:	4618      	mov	r0, r3
      break;
 8001db4:	4770      	bx	lr

    //--- Register R4
    case 4:
      __ASM volatile ("MOV R0, R4\n\t" : "=r" (ulResult) );
 8001db6:	4620      	mov	r0, r4
      break;
 8001db8:	4770      	bx	lr

    //--- Register R5
    case 5:
      __ASM volatile ("MOV R0, R5\n\t" : "=r" (ulResult) );
 8001dba:	4628      	mov	r0, r5
      break;
 8001dbc:	4770      	bx	lr

    //--- Register R6
    case 6:
      __ASM volatile ("MOV R0, R6\n\t" : "=r" (ulResult) );
 8001dbe:	4630      	mov	r0, r6
      break;
 8001dc0:	4770      	bx	lr

    //--- Register R7
    case 7:
      __ASM volatile ("MOV R0, R7\n\t" : "=r" (ulResult) );
 8001dc2:	4638      	mov	r0, r7
      break;
 8001dc4:	4770      	bx	lr

    //--- Register R8
    case 8:
      __ASM volatile ("MOV R0, R8\n\t" : "=r" (ulResult) );
 8001dc6:	4640      	mov	r0, r8
      break;
 8001dc8:	4770      	bx	lr

    //--- Register R9
    case 9:
      __ASM volatile ("MOV R0, R9\n\t" : "=r" (ulResult) );
 8001dca:	4648      	mov	r0, r9
      break;
 8001dcc:	4770      	bx	lr

    //--- Register R10
    case 10:
      __ASM volatile ("MOV R0, R10\n\t" : "=r" (ulResult) );
 8001dce:	4650      	mov	r0, sl
      break;
 8001dd0:	4770      	bx	lr

    //--- Register R11
    case 11:
      __ASM volatile ("MOV R0, R11\n\t" : "=r" (ulResult) );
 8001dd2:	4658      	mov	r0, fp
      break;
 8001dd4:	4770      	bx	lr

    //--- Register R12
    case 12:
      __ASM volatile ("MOV R0, R12\n\t" : "=r" (ulResult) );
 8001dd6:	4660      	mov	r0, ip
      break;
 8001dd8:	4770      	bx	lr

    //--- Register R13  STACK POINTER
    case 13:
      __ASM volatile ("MOV R0, SP\n\t" : "=r" (ulResult) );
 8001dda:	4668      	mov	r0, sp
      break;
 8001ddc:	4770      	bx	lr

    //--- Register R14  LINK REGISTER - RETURN LINK
    case 14:
      __ASM volatile ("MOV R0, LR\n\t" : "=r" (ulResult) );
 8001dde:	4670      	mov	r0, lr
      break;
 8001de0:	4770      	bx	lr

    //--- Register R15  PROGRAM COUNTER (PC)
    case 15:
      __ASM volatile ("MOV R0, PC\n\t" : "=r" (ulResult) );
 8001de2:	4678      	mov	r0, pc
      break;
 8001de4:	4770      	bx	lr

    //--- Register PSR
    case 16:
      __ASM volatile ("MRS R0, PSR\n\t" : "=r" (ulResult) );
 8001de6:	f3ef 8003 	mrs	r0, PSR
      break;
 8001dea:	4770      	bx	lr

    //--- Register PRIMASK
    case 17:
      __ASM volatile ("MRS R0, PRIMASK\n\t" : "=r" (ulResult) );
 8001dec:	f3ef 8010 	mrs	r0, PRIMASK
      break;
 8001df0:	4770      	bx	lr

    //--- Register FAULTMASK
    case 18:
      __ASM volatile ("MRS R0, FAULTMASK\n\t" : "=r" (ulResult) );
 8001df2:	f3ef 8013 	mrs	r0, FAULTMASK
      break;
 8001df6:	4770      	bx	lr

    //--- Register BASEPRI
    case 19:
      __ASM volatile ("MRS R0, BASEPRI\n\t" : "=r" (ulResult) );
 8001df8:	f3ef 8011 	mrs	r0, BASEPRI
      break;
 8001dfc:	4770      	bx	lr

    //--- Register CONTROL
    case 20:
      __ASM volatile ("MRS R0, CONTROL\n\t" : "=r" (ulResult) );
 8001dfe:	f3ef 8014 	mrs	r0, CONTROL
      break;
 8001e02:	4770      	bx	lr
{
 8001e04:	f04f 30ff 	mov.w	r0, #4294967295
      ulResult = 0xFFFFFFFF;
      break;
  }

  return ulResult;
}
 8001e08:	4770      	bx	lr

08001e0a <fnPulseOut>:
//    Output a series of Pulses on Clock Pin
//---------------------------------------------------------------------------------------------
void  fnPulseOut (u08 ubPulseCntr)
{
  //--- Output a short pulse
  if (ubPulseCntr)
 8001e0a:	b1d0      	cbz	r0, 8001e42 <fnPulseOut+0x38>
  {
    SetCpin;
 8001e0c:	4b0d      	ldr	r3, [pc, #52]	; (8001e44 <fnPulseOut+0x3a>)
 8001e0e:	681a      	ldr	r2, [r3, #0]
 8001e10:	4b0d      	ldr	r3, [pc, #52]	; (8001e48 <fnPulseOut+0x3e>)
 8001e12:	601a      	str	r2, [r3, #0]
    nop8;                                         //--- Tiny Delay
 8001e14:	bf00      	nop
 8001e16:	bf00      	nop
 8001e18:	bf00      	nop
 8001e1a:	bf00      	nop
 8001e1c:	bf00      	nop
 8001e1e:	bf00      	nop
 8001e20:	bf00      	nop
 8001e22:	bf00      	nop
    ClrCpin;
 8001e24:	4a09      	ldr	r2, [pc, #36]	; (8001e4c <fnPulseOut+0x42>)
 8001e26:	6812      	ldr	r2, [r2, #0]
 8001e28:	601a      	str	r2, [r3, #0]
    ubPulseCntr--;                                //--- Down Count # of Pulses
    nop12;
 8001e2a:	bf00      	nop
 8001e2c:	bf00      	nop
 8001e2e:	bf00      	nop
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	bf00      	nop
 8001e36:	bf00      	nop
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	bf00      	nop
 8001e3e:	bf00      	nop
 8001e40:	bf00      	nop
  }
}
 8001e42:	4770      	bx	lr
 8001e44:	20001ac8 	.word	0x20001ac8
 8001e48:	48000018 	.word	0x48000018
 8001e4c:	20001ad4 	.word	0x20001ad4

08001e50 <fnError>:

//--- Generic Error Processing Error
void  fnError (u16 uwErrCode)
{
  //--- Exit if No Error
  if (!uwErrCode) return;
 8001e50:	2800      	cmp	r0, #0
 8001e52:	d03f      	beq.n	8001ed4 <fnError+0x84>

  //--- Process Error depending on TYPE Code
  switch (uwErrCode & 0xF000)
 8001e54:	f400 4370 	and.w	r3, r0, #61440	; 0xf000
 8001e58:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001e5c:	d03a      	beq.n	8001ed4 <fnError+0x84>
 8001e5e:	d819      	bhi.n	8001e94 <fnError+0x44>
 8001e60:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001e64:	d02b      	beq.n	8001ebe <fnError+0x6e>
 8001e66:	d801      	bhi.n	8001e6c <fnError+0x1c>
 8001e68:	b963      	cbnz	r3, 8001e84 <fnError+0x34>
 8001e6a:	4770      	bx	lr
 8001e6c:	f5b3 4fa0 	cmp.w	r3, #20480	; 0x5000
 8001e70:	d030      	beq.n	8001ed4 <fnError+0x84>
 8001e72:	d809      	bhi.n	8001e88 <fnError+0x38>
 8001e74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001e78:	d02c      	beq.n	8001ed4 <fnError+0x84>
 8001e7a:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8001e7e:	f5b0 5f00 	cmp.w	r0, #8192	; 0x2000
 8001e82:	d027      	beq.n	8001ed4 <fnError+0x84>
      }
      break;

    //--- Default Unknown Error
    default:
      uwUnkn_Errs++;
 8001e84:	4a14      	ldr	r2, [pc, #80]	; (8001ed8 <fnError+0x88>)
 8001e86:	e01b      	b.n	8001ec0 <fnError+0x70>
  switch (uwErrCode & 0xF000)
 8001e88:	f400 4060 	and.w	r0, r0, #57344	; 0xe000
 8001e8c:	f5b0 4fc0 	cmp.w	r0, #24576	; 0x6000
 8001e90:	d1f8      	bne.n	8001e84 <fnError+0x34>
 8001e92:	4770      	bx	lr
 8001e94:	f5b3 4f70 	cmp.w	r3, #61440	; 0xf000
 8001e98:	d014      	beq.n	8001ec4 <fnError+0x74>
 8001e9a:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8001e9e:	d019      	beq.n	8001ed4 <fnError+0x84>
 8001ea0:	d807      	bhi.n	8001eb2 <fnError+0x62>
 8001ea2:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8001ea6:	d015      	beq.n	8001ed4 <fnError+0x84>
 8001ea8:	f400 4050 	and.w	r0, r0, #53248	; 0xd000
 8001eac:	f5b0 4f10 	cmp.w	r0, #36864	; 0x9000
 8001eb0:	e7e7      	b.n	8001e82 <fnError+0x32>
 8001eb2:	f5b3 4f50 	cmp.w	r3, #53248	; 0xd000
 8001eb6:	d00d      	beq.n	8001ed4 <fnError+0x84>
 8001eb8:	f5b3 4f60 	cmp.w	r3, #57344	; 0xe000
 8001ebc:	e7e1      	b.n	8001e82 <fnError+0x32>
      uwCore_Errs++;                             //--- Bump Error Type Counter
 8001ebe:	4a07      	ldr	r2, [pc, #28]	; (8001edc <fnError+0x8c>)
      uwUnkn_Errs++;
 8001ec0:	8813      	ldrh	r3, [r2, #0]
 8001ec2:	e005      	b.n	8001ed0 <fnError+0x80>
      if (uwRTOS_Errs < 0xFFFE)
 8001ec4:	4a06      	ldr	r2, [pc, #24]	; (8001ee0 <fnError+0x90>)
 8001ec6:	8813      	ldrh	r3, [r2, #0]
 8001ec8:	f64f 71fd 	movw	r1, #65533	; 0xfffd
 8001ecc:	428b      	cmp	r3, r1
 8001ece:	d801      	bhi.n	8001ed4 <fnError+0x84>
      uwUnkn_Errs++;
 8001ed0:	3301      	adds	r3, #1
 8001ed2:	8013      	strh	r3, [r2, #0]
      return;
  }
}
 8001ed4:	4770      	bx	lr
 8001ed6:	bf00      	nop
 8001ed8:	20001afe 	.word	0x20001afe
 8001edc:	20001ae0 	.word	0x20001ae0
 8001ee0:	20001adc 	.word	0x20001adc
 8001ee4:	b570      	push	{r4, r5, r6, lr}
 8001ee6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8001eea:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8001eee:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8001ef2:	bf1d      	ittte	ne
 8001ef4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8001ef8:	ea94 0f0c 	teqne	r4, ip
 8001efc:	ea95 0f0c 	teqne	r5, ip
 8001f00:	f000 f8de 	bleq	80020c0 <fnError+0x270>
 8001f04:	442c      	add	r4, r5
 8001f06:	ea81 0603 	eor.w	r6, r1, r3
 8001f0a:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8001f0e:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8001f12:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8001f16:	bf18      	it	ne
 8001f18:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8001f1c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001f20:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001f24:	d038      	beq.n	8001f98 <fnError+0x148>
 8001f26:	fba0 ce02 	umull	ip, lr, r0, r2
 8001f2a:	f04f 0500 	mov.w	r5, #0
 8001f2e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8001f32:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8001f36:	fbe0 e503 	umlal	lr, r5, r0, r3
 8001f3a:	f04f 0600 	mov.w	r6, #0
 8001f3e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8001f42:	f09c 0f00 	teq	ip, #0
 8001f46:	bf18      	it	ne
 8001f48:	f04e 0e01 	orrne.w	lr, lr, #1
 8001f4c:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8001f50:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8001f54:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8001f58:	d204      	bcs.n	8001f64 <fnError+0x114>
 8001f5a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8001f5e:	416d      	adcs	r5, r5
 8001f60:	eb46 0606 	adc.w	r6, r6, r6
 8001f64:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8001f68:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8001f6c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8001f70:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8001f74:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8001f78:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8001f7c:	bf88      	it	hi
 8001f7e:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8001f82:	d81e      	bhi.n	8001fc2 <fnError+0x172>
 8001f84:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8001f88:	bf08      	it	eq
 8001f8a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8001f8e:	f150 0000 	adcs.w	r0, r0, #0
 8001f92:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8001f96:	bd70      	pop	{r4, r5, r6, pc}
 8001f98:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8001f9c:	ea46 0101 	orr.w	r1, r6, r1
 8001fa0:	ea40 0002 	orr.w	r0, r0, r2
 8001fa4:	ea81 0103 	eor.w	r1, r1, r3
 8001fa8:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8001fac:	bfc2      	ittt	gt
 8001fae:	ebd4 050c 	rsbsgt	r5, r4, ip
 8001fb2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8001fb6:	bd70      	popgt	{r4, r5, r6, pc}
 8001fb8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8001fbc:	f04f 0e00 	mov.w	lr, #0
 8001fc0:	3c01      	subs	r4, #1
 8001fc2:	f300 80ab 	bgt.w	800211c <fnError+0x2cc>
 8001fc6:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8001fca:	bfde      	ittt	le
 8001fcc:	2000      	movle	r0, #0
 8001fce:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8001fd2:	bd70      	pople	{r4, r5, r6, pc}
 8001fd4:	f1c4 0400 	rsb	r4, r4, #0
 8001fd8:	3c20      	subs	r4, #32
 8001fda:	da35      	bge.n	8002048 <fnError+0x1f8>
 8001fdc:	340c      	adds	r4, #12
 8001fde:	dc1b      	bgt.n	8002018 <fnError+0x1c8>
 8001fe0:	f104 0414 	add.w	r4, r4, #20
 8001fe4:	f1c4 0520 	rsb	r5, r4, #32
 8001fe8:	fa00 f305 	lsl.w	r3, r0, r5
 8001fec:	fa20 f004 	lsr.w	r0, r0, r4
 8001ff0:	fa01 f205 	lsl.w	r2, r1, r5
 8001ff4:	ea40 0002 	orr.w	r0, r0, r2
 8001ff8:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8001ffc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002000:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002004:	fa21 f604 	lsr.w	r6, r1, r4
 8002008:	eb42 0106 	adc.w	r1, r2, r6
 800200c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002010:	bf08      	it	eq
 8002012:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002016:	bd70      	pop	{r4, r5, r6, pc}
 8002018:	f1c4 040c 	rsb	r4, r4, #12
 800201c:	f1c4 0520 	rsb	r5, r4, #32
 8002020:	fa00 f304 	lsl.w	r3, r0, r4
 8002024:	fa20 f005 	lsr.w	r0, r0, r5
 8002028:	fa01 f204 	lsl.w	r2, r1, r4
 800202c:	ea40 0002 	orr.w	r0, r0, r2
 8002030:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002034:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002038:	f141 0100 	adc.w	r1, r1, #0
 800203c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002040:	bf08      	it	eq
 8002042:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002046:	bd70      	pop	{r4, r5, r6, pc}
 8002048:	f1c4 0520 	rsb	r5, r4, #32
 800204c:	fa00 f205 	lsl.w	r2, r0, r5
 8002050:	ea4e 0e02 	orr.w	lr, lr, r2
 8002054:	fa20 f304 	lsr.w	r3, r0, r4
 8002058:	fa01 f205 	lsl.w	r2, r1, r5
 800205c:	ea43 0302 	orr.w	r3, r3, r2
 8002060:	fa21 f004 	lsr.w	r0, r1, r4
 8002064:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002068:	fa21 f204 	lsr.w	r2, r1, r4
 800206c:	ea20 0002 	bic.w	r0, r0, r2
 8002070:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8002074:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002078:	bf08      	it	eq
 800207a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800207e:	bd70      	pop	{r4, r5, r6, pc}
 8002080:	f094 0f00 	teq	r4, #0
 8002084:	d10f      	bne.n	80020a6 <fnError+0x256>
 8002086:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800208a:	0040      	lsls	r0, r0, #1
 800208c:	eb41 0101 	adc.w	r1, r1, r1
 8002090:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002094:	bf08      	it	eq
 8002096:	3c01      	subeq	r4, #1
 8002098:	d0f7      	beq.n	800208a <fnError+0x23a>
 800209a:	ea41 0106 	orr.w	r1, r1, r6
 800209e:	f095 0f00 	teq	r5, #0
 80020a2:	bf18      	it	ne
 80020a4:	4770      	bxne	lr
 80020a6:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80020aa:	0052      	lsls	r2, r2, #1
 80020ac:	eb43 0303 	adc.w	r3, r3, r3
 80020b0:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80020b4:	bf08      	it	eq
 80020b6:	3d01      	subeq	r5, #1
 80020b8:	d0f7      	beq.n	80020aa <fnError+0x25a>
 80020ba:	ea43 0306 	orr.w	r3, r3, r6
 80020be:	4770      	bx	lr
 80020c0:	ea94 0f0c 	teq	r4, ip
 80020c4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80020c8:	bf18      	it	ne
 80020ca:	ea95 0f0c 	teqne	r5, ip
 80020ce:	d00c      	beq.n	80020ea <fnError+0x29a>
 80020d0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80020d4:	bf18      	it	ne
 80020d6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80020da:	d1d1      	bne.n	8002080 <fnError+0x230>
 80020dc:	ea81 0103 	eor.w	r1, r1, r3
 80020e0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80020e4:	f04f 0000 	mov.w	r0, #0
 80020e8:	bd70      	pop	{r4, r5, r6, pc}
 80020ea:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80020ee:	bf06      	itte	eq
 80020f0:	4610      	moveq	r0, r2
 80020f2:	4619      	moveq	r1, r3
 80020f4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80020f8:	d019      	beq.n	800212e <fnError+0x2de>
 80020fa:	ea94 0f0c 	teq	r4, ip
 80020fe:	d102      	bne.n	8002106 <fnError+0x2b6>
 8002100:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8002104:	d113      	bne.n	800212e <fnError+0x2de>
 8002106:	ea95 0f0c 	teq	r5, ip
 800210a:	d105      	bne.n	8002118 <fnError+0x2c8>
 800210c:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8002110:	bf1c      	itt	ne
 8002112:	4610      	movne	r0, r2
 8002114:	4619      	movne	r1, r3
 8002116:	d10a      	bne.n	800212e <fnError+0x2de>
 8002118:	ea81 0103 	eor.w	r1, r1, r3
 800211c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002120:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002124:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8002128:	f04f 0000 	mov.w	r0, #0
 800212c:	bd70      	pop	{r4, r5, r6, pc}
 800212e:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8002132:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8002136:	bd70      	pop	{r4, r5, r6, pc}

08002138 <__aeabi_drsub>:
 8002138:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800213c:	e002      	b.n	8002144 <__adddf3>
 800213e:	bf00      	nop

08002140 <__aeabi_dsub>:
 8002140:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08002144 <__adddf3>:
 8002144:	b530      	push	{r4, r5, lr}
 8002146:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800214a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800214e:	ea94 0f05 	teq	r4, r5
 8002152:	bf08      	it	eq
 8002154:	ea90 0f02 	teqeq	r0, r2
 8002158:	bf1f      	itttt	ne
 800215a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800215e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8002162:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8002166:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800216a:	f000 80e2 	beq.w	8002332 <__adddf3+0x1ee>
 800216e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8002172:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8002176:	bfb8      	it	lt
 8002178:	426d      	neglt	r5, r5
 800217a:	dd0c      	ble.n	8002196 <__adddf3+0x52>
 800217c:	442c      	add	r4, r5
 800217e:	ea80 0202 	eor.w	r2, r0, r2
 8002182:	ea81 0303 	eor.w	r3, r1, r3
 8002186:	ea82 0000 	eor.w	r0, r2, r0
 800218a:	ea83 0101 	eor.w	r1, r3, r1
 800218e:	ea80 0202 	eor.w	r2, r0, r2
 8002192:	ea81 0303 	eor.w	r3, r1, r3
 8002196:	2d36      	cmp	r5, #54	; 0x36
 8002198:	bf88      	it	hi
 800219a:	bd30      	pophi	{r4, r5, pc}
 800219c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80021a0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80021a4:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80021a8:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80021ac:	d002      	beq.n	80021b4 <__adddf3+0x70>
 80021ae:	4240      	negs	r0, r0
 80021b0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80021b4:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80021b8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80021bc:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80021c0:	d002      	beq.n	80021c8 <__adddf3+0x84>
 80021c2:	4252      	negs	r2, r2
 80021c4:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80021c8:	ea94 0f05 	teq	r4, r5
 80021cc:	f000 80a7 	beq.w	800231e <__adddf3+0x1da>
 80021d0:	f1a4 0401 	sub.w	r4, r4, #1
 80021d4:	f1d5 0e20 	rsbs	lr, r5, #32
 80021d8:	db0d      	blt.n	80021f6 <__adddf3+0xb2>
 80021da:	fa02 fc0e 	lsl.w	ip, r2, lr
 80021de:	fa22 f205 	lsr.w	r2, r2, r5
 80021e2:	1880      	adds	r0, r0, r2
 80021e4:	f141 0100 	adc.w	r1, r1, #0
 80021e8:	fa03 f20e 	lsl.w	r2, r3, lr
 80021ec:	1880      	adds	r0, r0, r2
 80021ee:	fa43 f305 	asr.w	r3, r3, r5
 80021f2:	4159      	adcs	r1, r3
 80021f4:	e00e      	b.n	8002214 <__adddf3+0xd0>
 80021f6:	f1a5 0520 	sub.w	r5, r5, #32
 80021fa:	f10e 0e20 	add.w	lr, lr, #32
 80021fe:	2a01      	cmp	r2, #1
 8002200:	fa03 fc0e 	lsl.w	ip, r3, lr
 8002204:	bf28      	it	cs
 8002206:	f04c 0c02 	orrcs.w	ip, ip, #2
 800220a:	fa43 f305 	asr.w	r3, r3, r5
 800220e:	18c0      	adds	r0, r0, r3
 8002210:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8002214:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002218:	d507      	bpl.n	800222a <__adddf3+0xe6>
 800221a:	f04f 0e00 	mov.w	lr, #0
 800221e:	f1dc 0c00 	rsbs	ip, ip, #0
 8002222:	eb7e 0000 	sbcs.w	r0, lr, r0
 8002226:	eb6e 0101 	sbc.w	r1, lr, r1
 800222a:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 800222e:	d31b      	bcc.n	8002268 <__adddf3+0x124>
 8002230:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8002234:	d30c      	bcc.n	8002250 <__adddf3+0x10c>
 8002236:	0849      	lsrs	r1, r1, #1
 8002238:	ea5f 0030 	movs.w	r0, r0, rrx
 800223c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8002240:	f104 0401 	add.w	r4, r4, #1
 8002244:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8002248:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800224c:	f080 809a 	bcs.w	8002384 <__adddf3+0x240>
 8002250:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8002254:	bf08      	it	eq
 8002256:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800225a:	f150 0000 	adcs.w	r0, r0, #0
 800225e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002262:	ea41 0105 	orr.w	r1, r1, r5
 8002266:	bd30      	pop	{r4, r5, pc}
 8002268:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800226c:	4140      	adcs	r0, r0
 800226e:	eb41 0101 	adc.w	r1, r1, r1
 8002272:	3c01      	subs	r4, #1
 8002274:	bf28      	it	cs
 8002276:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800227a:	d2e9      	bcs.n	8002250 <__adddf3+0x10c>
 800227c:	f091 0f00 	teq	r1, #0
 8002280:	bf04      	itt	eq
 8002282:	4601      	moveq	r1, r0
 8002284:	2000      	moveq	r0, #0
 8002286:	fab1 f381 	clz	r3, r1
 800228a:	bf08      	it	eq
 800228c:	3320      	addeq	r3, #32
 800228e:	f1a3 030b 	sub.w	r3, r3, #11
 8002292:	f1b3 0220 	subs.w	r2, r3, #32
 8002296:	da0c      	bge.n	80022b2 <__adddf3+0x16e>
 8002298:	320c      	adds	r2, #12
 800229a:	dd08      	ble.n	80022ae <__adddf3+0x16a>
 800229c:	f102 0c14 	add.w	ip, r2, #20
 80022a0:	f1c2 020c 	rsb	r2, r2, #12
 80022a4:	fa01 f00c 	lsl.w	r0, r1, ip
 80022a8:	fa21 f102 	lsr.w	r1, r1, r2
 80022ac:	e00c      	b.n	80022c8 <__adddf3+0x184>
 80022ae:	f102 0214 	add.w	r2, r2, #20
 80022b2:	bfd8      	it	le
 80022b4:	f1c2 0c20 	rsble	ip, r2, #32
 80022b8:	fa01 f102 	lsl.w	r1, r1, r2
 80022bc:	fa20 fc0c 	lsr.w	ip, r0, ip
 80022c0:	bfdc      	itt	le
 80022c2:	ea41 010c 	orrle.w	r1, r1, ip
 80022c6:	4090      	lslle	r0, r2
 80022c8:	1ae4      	subs	r4, r4, r3
 80022ca:	bfa2      	ittt	ge
 80022cc:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80022d0:	4329      	orrge	r1, r5
 80022d2:	bd30      	popge	{r4, r5, pc}
 80022d4:	ea6f 0404 	mvn.w	r4, r4
 80022d8:	3c1f      	subs	r4, #31
 80022da:	da1c      	bge.n	8002316 <__adddf3+0x1d2>
 80022dc:	340c      	adds	r4, #12
 80022de:	dc0e      	bgt.n	80022fe <__adddf3+0x1ba>
 80022e0:	f104 0414 	add.w	r4, r4, #20
 80022e4:	f1c4 0220 	rsb	r2, r4, #32
 80022e8:	fa20 f004 	lsr.w	r0, r0, r4
 80022ec:	fa01 f302 	lsl.w	r3, r1, r2
 80022f0:	ea40 0003 	orr.w	r0, r0, r3
 80022f4:	fa21 f304 	lsr.w	r3, r1, r4
 80022f8:	ea45 0103 	orr.w	r1, r5, r3
 80022fc:	bd30      	pop	{r4, r5, pc}
 80022fe:	f1c4 040c 	rsb	r4, r4, #12
 8002302:	f1c4 0220 	rsb	r2, r4, #32
 8002306:	fa20 f002 	lsr.w	r0, r0, r2
 800230a:	fa01 f304 	lsl.w	r3, r1, r4
 800230e:	ea40 0003 	orr.w	r0, r0, r3
 8002312:	4629      	mov	r1, r5
 8002314:	bd30      	pop	{r4, r5, pc}
 8002316:	fa21 f004 	lsr.w	r0, r1, r4
 800231a:	4629      	mov	r1, r5
 800231c:	bd30      	pop	{r4, r5, pc}
 800231e:	f094 0f00 	teq	r4, #0
 8002322:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 8002326:	bf06      	itte	eq
 8002328:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 800232c:	3401      	addeq	r4, #1
 800232e:	3d01      	subne	r5, #1
 8002330:	e74e      	b.n	80021d0 <__adddf3+0x8c>
 8002332:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002336:	bf18      	it	ne
 8002338:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800233c:	d029      	beq.n	8002392 <__adddf3+0x24e>
 800233e:	ea94 0f05 	teq	r4, r5
 8002342:	bf08      	it	eq
 8002344:	ea90 0f02 	teqeq	r0, r2
 8002348:	d005      	beq.n	8002356 <__adddf3+0x212>
 800234a:	ea54 0c00 	orrs.w	ip, r4, r0
 800234e:	bf04      	itt	eq
 8002350:	4619      	moveq	r1, r3
 8002352:	4610      	moveq	r0, r2
 8002354:	bd30      	pop	{r4, r5, pc}
 8002356:	ea91 0f03 	teq	r1, r3
 800235a:	bf1e      	ittt	ne
 800235c:	2100      	movne	r1, #0
 800235e:	2000      	movne	r0, #0
 8002360:	bd30      	popne	{r4, r5, pc}
 8002362:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8002366:	d105      	bne.n	8002374 <__adddf3+0x230>
 8002368:	0040      	lsls	r0, r0, #1
 800236a:	4149      	adcs	r1, r1
 800236c:	bf28      	it	cs
 800236e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8002372:	bd30      	pop	{r4, r5, pc}
 8002374:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8002378:	bf3c      	itt	cc
 800237a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800237e:	bd30      	popcc	{r4, r5, pc}
 8002380:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8002384:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8002388:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800238c:	f04f 0000 	mov.w	r0, #0
 8002390:	bd30      	pop	{r4, r5, pc}
 8002392:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8002396:	bf1a      	itte	ne
 8002398:	4619      	movne	r1, r3
 800239a:	4610      	movne	r0, r2
 800239c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80023a0:	bf1c      	itt	ne
 80023a2:	460b      	movne	r3, r1
 80023a4:	4602      	movne	r2, r0
 80023a6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80023aa:	bf06      	itte	eq
 80023ac:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80023b0:	ea91 0f03 	teqeq	r1, r3
 80023b4:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80023b8:	bd30      	pop	{r4, r5, pc}
 80023ba:	bf00      	nop

080023bc <__aeabi_ui2d>:
 80023bc:	f090 0f00 	teq	r0, #0
 80023c0:	bf04      	itt	eq
 80023c2:	2100      	moveq	r1, #0
 80023c4:	4770      	bxeq	lr
 80023c6:	b530      	push	{r4, r5, lr}
 80023c8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80023cc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80023d0:	f04f 0500 	mov.w	r5, #0
 80023d4:	f04f 0100 	mov.w	r1, #0
 80023d8:	e750      	b.n	800227c <__adddf3+0x138>
 80023da:	bf00      	nop

080023dc <__aeabi_i2d>:
 80023dc:	f090 0f00 	teq	r0, #0
 80023e0:	bf04      	itt	eq
 80023e2:	2100      	moveq	r1, #0
 80023e4:	4770      	bxeq	lr
 80023e6:	b530      	push	{r4, r5, lr}
 80023e8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80023ec:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80023f0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80023f4:	bf48      	it	mi
 80023f6:	4240      	negmi	r0, r0
 80023f8:	f04f 0100 	mov.w	r1, #0
 80023fc:	e73e      	b.n	800227c <__adddf3+0x138>
 80023fe:	bf00      	nop

08002400 <__aeabi_f2d>:
 8002400:	0042      	lsls	r2, r0, #1
 8002402:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8002406:	ea4f 0131 	mov.w	r1, r1, rrx
 800240a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800240e:	bf1f      	itttt	ne
 8002410:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 8002414:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8002418:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 800241c:	4770      	bxne	lr
 800241e:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8002422:	bf08      	it	eq
 8002424:	4770      	bxeq	lr
 8002426:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800242a:	bf04      	itt	eq
 800242c:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8002430:	4770      	bxeq	lr
 8002432:	b530      	push	{r4, r5, lr}
 8002434:	f44f 7460 	mov.w	r4, #896	; 0x380
 8002438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800243c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8002440:	e71c      	b.n	800227c <__adddf3+0x138>
 8002442:	bf00      	nop

08002444 <__aeabi_ul2d>:
 8002444:	ea50 0201 	orrs.w	r2, r0, r1
 8002448:	bf08      	it	eq
 800244a:	4770      	bxeq	lr
 800244c:	b530      	push	{r4, r5, lr}
 800244e:	f04f 0500 	mov.w	r5, #0
 8002452:	e00a      	b.n	800246a <__aeabi_l2d+0x16>

08002454 <__aeabi_l2d>:
 8002454:	ea50 0201 	orrs.w	r2, r0, r1
 8002458:	bf08      	it	eq
 800245a:	4770      	bxeq	lr
 800245c:	b530      	push	{r4, r5, lr}
 800245e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8002462:	d502      	bpl.n	800246a <__aeabi_l2d+0x16>
 8002464:	4240      	negs	r0, r0
 8002466:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800246a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800246e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8002472:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8002476:	f43f aed8 	beq.w	800222a <__adddf3+0xe6>
 800247a:	f04f 0203 	mov.w	r2, #3
 800247e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8002482:	bf18      	it	ne
 8002484:	3203      	addne	r2, #3
 8002486:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800248a:	bf18      	it	ne
 800248c:	3203      	addne	r2, #3
 800248e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8002492:	f1c2 0320 	rsb	r3, r2, #32
 8002496:	fa00 fc03 	lsl.w	ip, r0, r3
 800249a:	fa20 f002 	lsr.w	r0, r0, r2
 800249e:	fa01 fe03 	lsl.w	lr, r1, r3
 80024a2:	ea40 000e 	orr.w	r0, r0, lr
 80024a6:	fa21 f102 	lsr.w	r1, r1, r2
 80024aa:	4414      	add	r4, r2
 80024ac:	e6bd      	b.n	800222a <__adddf3+0xe6>
 80024ae:	bf00      	nop

080024b0 <__aeabi_dmul>:
 80024b0:	b570      	push	{r4, r5, r6, lr}
 80024b2:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80024b6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80024ba:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80024be:	bf1d      	ittte	ne
 80024c0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80024c4:	ea94 0f0c 	teqne	r4, ip
 80024c8:	ea95 0f0c 	teqne	r5, ip
 80024cc:	f000 f8de 	bleq	800268c <__aeabi_dmul+0x1dc>
 80024d0:	442c      	add	r4, r5
 80024d2:	ea81 0603 	eor.w	r6, r1, r3
 80024d6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80024da:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80024de:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80024e2:	bf18      	it	ne
 80024e4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80024e8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80024ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80024f0:	d038      	beq.n	8002564 <__aeabi_dmul+0xb4>
 80024f2:	fba0 ce02 	umull	ip, lr, r0, r2
 80024f6:	f04f 0500 	mov.w	r5, #0
 80024fa:	fbe1 e502 	umlal	lr, r5, r1, r2
 80024fe:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8002502:	fbe0 e503 	umlal	lr, r5, r0, r3
 8002506:	f04f 0600 	mov.w	r6, #0
 800250a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800250e:	f09c 0f00 	teq	ip, #0
 8002512:	bf18      	it	ne
 8002514:	f04e 0e01 	orrne.w	lr, lr, #1
 8002518:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 800251c:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8002520:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 8002524:	d204      	bcs.n	8002530 <__aeabi_dmul+0x80>
 8002526:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800252a:	416d      	adcs	r5, r5
 800252c:	eb46 0606 	adc.w	r6, r6, r6
 8002530:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8002534:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8002538:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800253c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8002540:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8002544:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002548:	bf88      	it	hi
 800254a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800254e:	d81e      	bhi.n	800258e <__aeabi_dmul+0xde>
 8002550:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8002554:	bf08      	it	eq
 8002556:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800255a:	f150 0000 	adcs.w	r0, r0, #0
 800255e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002562:	bd70      	pop	{r4, r5, r6, pc}
 8002564:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8002568:	ea46 0101 	orr.w	r1, r6, r1
 800256c:	ea40 0002 	orr.w	r0, r0, r2
 8002570:	ea81 0103 	eor.w	r1, r1, r3
 8002574:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8002578:	bfc2      	ittt	gt
 800257a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800257e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8002582:	bd70      	popgt	{r4, r5, r6, pc}
 8002584:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002588:	f04f 0e00 	mov.w	lr, #0
 800258c:	3c01      	subs	r4, #1
 800258e:	f300 80ab 	bgt.w	80026e8 <__aeabi_dmul+0x238>
 8002592:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8002596:	bfde      	ittt	le
 8002598:	2000      	movle	r0, #0
 800259a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800259e:	bd70      	pople	{r4, r5, r6, pc}
 80025a0:	f1c4 0400 	rsb	r4, r4, #0
 80025a4:	3c20      	subs	r4, #32
 80025a6:	da35      	bge.n	8002614 <__aeabi_dmul+0x164>
 80025a8:	340c      	adds	r4, #12
 80025aa:	dc1b      	bgt.n	80025e4 <__aeabi_dmul+0x134>
 80025ac:	f104 0414 	add.w	r4, r4, #20
 80025b0:	f1c4 0520 	rsb	r5, r4, #32
 80025b4:	fa00 f305 	lsl.w	r3, r0, r5
 80025b8:	fa20 f004 	lsr.w	r0, r0, r4
 80025bc:	fa01 f205 	lsl.w	r2, r1, r5
 80025c0:	ea40 0002 	orr.w	r0, r0, r2
 80025c4:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80025c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80025cc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80025d0:	fa21 f604 	lsr.w	r6, r1, r4
 80025d4:	eb42 0106 	adc.w	r1, r2, r6
 80025d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80025dc:	bf08      	it	eq
 80025de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80025e2:	bd70      	pop	{r4, r5, r6, pc}
 80025e4:	f1c4 040c 	rsb	r4, r4, #12
 80025e8:	f1c4 0520 	rsb	r5, r4, #32
 80025ec:	fa00 f304 	lsl.w	r3, r0, r4
 80025f0:	fa20 f005 	lsr.w	r0, r0, r5
 80025f4:	fa01 f204 	lsl.w	r2, r1, r4
 80025f8:	ea40 0002 	orr.w	r0, r0, r2
 80025fc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002600:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8002604:	f141 0100 	adc.w	r1, r1, #0
 8002608:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800260c:	bf08      	it	eq
 800260e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8002612:	bd70      	pop	{r4, r5, r6, pc}
 8002614:	f1c4 0520 	rsb	r5, r4, #32
 8002618:	fa00 f205 	lsl.w	r2, r0, r5
 800261c:	ea4e 0e02 	orr.w	lr, lr, r2
 8002620:	fa20 f304 	lsr.w	r3, r0, r4
 8002624:	fa01 f205 	lsl.w	r2, r1, r5
 8002628:	ea43 0302 	orr.w	r3, r3, r2
 800262c:	fa21 f004 	lsr.w	r0, r1, r4
 8002630:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8002634:	fa21 f204 	lsr.w	r2, r1, r4
 8002638:	ea20 0002 	bic.w	r0, r0, r2
 800263c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8002640:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8002644:	bf08      	it	eq
 8002646:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800264a:	bd70      	pop	{r4, r5, r6, pc}
 800264c:	f094 0f00 	teq	r4, #0
 8002650:	d10f      	bne.n	8002672 <__aeabi_dmul+0x1c2>
 8002652:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8002656:	0040      	lsls	r0, r0, #1
 8002658:	eb41 0101 	adc.w	r1, r1, r1
 800265c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002660:	bf08      	it	eq
 8002662:	3c01      	subeq	r4, #1
 8002664:	d0f7      	beq.n	8002656 <__aeabi_dmul+0x1a6>
 8002666:	ea41 0106 	orr.w	r1, r1, r6
 800266a:	f095 0f00 	teq	r5, #0
 800266e:	bf18      	it	ne
 8002670:	4770      	bxne	lr
 8002672:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8002676:	0052      	lsls	r2, r2, #1
 8002678:	eb43 0303 	adc.w	r3, r3, r3
 800267c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8002680:	bf08      	it	eq
 8002682:	3d01      	subeq	r5, #1
 8002684:	d0f7      	beq.n	8002676 <__aeabi_dmul+0x1c6>
 8002686:	ea43 0306 	orr.w	r3, r3, r6
 800268a:	4770      	bx	lr
 800268c:	ea94 0f0c 	teq	r4, ip
 8002690:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002694:	bf18      	it	ne
 8002696:	ea95 0f0c 	teqne	r5, ip
 800269a:	d00c      	beq.n	80026b6 <__aeabi_dmul+0x206>
 800269c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80026a0:	bf18      	it	ne
 80026a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80026a6:	d1d1      	bne.n	800264c <__aeabi_dmul+0x19c>
 80026a8:	ea81 0103 	eor.w	r1, r1, r3
 80026ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80026b0:	f04f 0000 	mov.w	r0, #0
 80026b4:	bd70      	pop	{r4, r5, r6, pc}
 80026b6:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80026ba:	bf06      	itte	eq
 80026bc:	4610      	moveq	r0, r2
 80026be:	4619      	moveq	r1, r3
 80026c0:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80026c4:	d019      	beq.n	80026fa <__aeabi_dmul+0x24a>
 80026c6:	ea94 0f0c 	teq	r4, ip
 80026ca:	d102      	bne.n	80026d2 <__aeabi_dmul+0x222>
 80026cc:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80026d0:	d113      	bne.n	80026fa <__aeabi_dmul+0x24a>
 80026d2:	ea95 0f0c 	teq	r5, ip
 80026d6:	d105      	bne.n	80026e4 <__aeabi_dmul+0x234>
 80026d8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80026dc:	bf1c      	itt	ne
 80026de:	4610      	movne	r0, r2
 80026e0:	4619      	movne	r1, r3
 80026e2:	d10a      	bne.n	80026fa <__aeabi_dmul+0x24a>
 80026e4:	ea81 0103 	eor.w	r1, r1, r3
 80026e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80026ec:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80026f0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80026f4:	f04f 0000 	mov.w	r0, #0
 80026f8:	bd70      	pop	{r4, r5, r6, pc}
 80026fa:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80026fe:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8002702:	bd70      	pop	{r4, r5, r6, pc}

08002704 <__aeabi_ddiv>:
 8002704:	b570      	push	{r4, r5, r6, lr}
 8002706:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800270a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800270e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8002712:	bf1d      	ittte	ne
 8002714:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8002718:	ea94 0f0c 	teqne	r4, ip
 800271c:	ea95 0f0c 	teqne	r5, ip
 8002720:	f000 f8a7 	bleq	8002872 <__aeabi_ddiv+0x16e>
 8002724:	eba4 0405 	sub.w	r4, r4, r5
 8002728:	ea81 0e03 	eor.w	lr, r1, r3
 800272c:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8002730:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8002734:	f000 8088 	beq.w	8002848 <__aeabi_ddiv+0x144>
 8002738:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800273c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8002740:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8002744:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8002748:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800274c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8002750:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8002754:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8002758:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800275c:	429d      	cmp	r5, r3
 800275e:	bf08      	it	eq
 8002760:	4296      	cmpeq	r6, r2
 8002762:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8002766:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800276a:	d202      	bcs.n	8002772 <__aeabi_ddiv+0x6e>
 800276c:	085b      	lsrs	r3, r3, #1
 800276e:	ea4f 0232 	mov.w	r2, r2, rrx
 8002772:	1ab6      	subs	r6, r6, r2
 8002774:	eb65 0503 	sbc.w	r5, r5, r3
 8002778:	085b      	lsrs	r3, r3, #1
 800277a:	ea4f 0232 	mov.w	r2, r2, rrx
 800277e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8002782:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8002786:	ebb6 0e02 	subs.w	lr, r6, r2
 800278a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800278e:	bf22      	ittt	cs
 8002790:	1ab6      	subcs	r6, r6, r2
 8002792:	4675      	movcs	r5, lr
 8002794:	ea40 000c 	orrcs.w	r0, r0, ip
 8002798:	085b      	lsrs	r3, r3, #1
 800279a:	ea4f 0232 	mov.w	r2, r2, rrx
 800279e:	ebb6 0e02 	subs.w	lr, r6, r2
 80027a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80027a6:	bf22      	ittt	cs
 80027a8:	1ab6      	subcs	r6, r6, r2
 80027aa:	4675      	movcs	r5, lr
 80027ac:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80027b0:	085b      	lsrs	r3, r3, #1
 80027b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80027b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80027ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80027be:	bf22      	ittt	cs
 80027c0:	1ab6      	subcs	r6, r6, r2
 80027c2:	4675      	movcs	r5, lr
 80027c4:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80027c8:	085b      	lsrs	r3, r3, #1
 80027ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80027ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80027d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80027d6:	bf22      	ittt	cs
 80027d8:	1ab6      	subcs	r6, r6, r2
 80027da:	4675      	movcs	r5, lr
 80027dc:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80027e0:	ea55 0e06 	orrs.w	lr, r5, r6
 80027e4:	d018      	beq.n	8002818 <__aeabi_ddiv+0x114>
 80027e6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80027ea:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80027ee:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80027f2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80027f6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80027fa:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80027fe:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8002802:	d1c0      	bne.n	8002786 <__aeabi_ddiv+0x82>
 8002804:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8002808:	d10b      	bne.n	8002822 <__aeabi_ddiv+0x11e>
 800280a:	ea41 0100 	orr.w	r1, r1, r0
 800280e:	f04f 0000 	mov.w	r0, #0
 8002812:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 8002816:	e7b6      	b.n	8002786 <__aeabi_ddiv+0x82>
 8002818:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800281c:	bf04      	itt	eq
 800281e:	4301      	orreq	r1, r0
 8002820:	2000      	moveq	r0, #0
 8002822:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8002826:	bf88      	it	hi
 8002828:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800282c:	f63f aeaf 	bhi.w	800258e <__aeabi_dmul+0xde>
 8002830:	ebb5 0c03 	subs.w	ip, r5, r3
 8002834:	bf04      	itt	eq
 8002836:	ebb6 0c02 	subseq.w	ip, r6, r2
 800283a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800283e:	f150 0000 	adcs.w	r0, r0, #0
 8002842:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8002846:	bd70      	pop	{r4, r5, r6, pc}
 8002848:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800284c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8002850:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8002854:	bfc2      	ittt	gt
 8002856:	ebd4 050c 	rsbsgt	r5, r4, ip
 800285a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800285e:	bd70      	popgt	{r4, r5, r6, pc}
 8002860:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002864:	f04f 0e00 	mov.w	lr, #0
 8002868:	3c01      	subs	r4, #1
 800286a:	e690      	b.n	800258e <__aeabi_dmul+0xde>
 800286c:	ea45 0e06 	orr.w	lr, r5, r6
 8002870:	e68d      	b.n	800258e <__aeabi_dmul+0xde>
 8002872:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8002876:	ea94 0f0c 	teq	r4, ip
 800287a:	bf08      	it	eq
 800287c:	ea95 0f0c 	teqeq	r5, ip
 8002880:	f43f af3b 	beq.w	80026fa <__aeabi_dmul+0x24a>
 8002884:	ea94 0f0c 	teq	r4, ip
 8002888:	d10a      	bne.n	80028a0 <__aeabi_ddiv+0x19c>
 800288a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800288e:	f47f af34 	bne.w	80026fa <__aeabi_dmul+0x24a>
 8002892:	ea95 0f0c 	teq	r5, ip
 8002896:	f47f af25 	bne.w	80026e4 <__aeabi_dmul+0x234>
 800289a:	4610      	mov	r0, r2
 800289c:	4619      	mov	r1, r3
 800289e:	e72c      	b.n	80026fa <__aeabi_dmul+0x24a>
 80028a0:	ea95 0f0c 	teq	r5, ip
 80028a4:	d106      	bne.n	80028b4 <__aeabi_ddiv+0x1b0>
 80028a6:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80028aa:	f43f aefd 	beq.w	80026a8 <__aeabi_dmul+0x1f8>
 80028ae:	4610      	mov	r0, r2
 80028b0:	4619      	mov	r1, r3
 80028b2:	e722      	b.n	80026fa <__aeabi_dmul+0x24a>
 80028b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80028b8:	bf18      	it	ne
 80028ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80028be:	f47f aec5 	bne.w	800264c <__aeabi_dmul+0x19c>
 80028c2:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80028c6:	f47f af0d 	bne.w	80026e4 <__aeabi_dmul+0x234>
 80028ca:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80028ce:	f47f aeeb 	bne.w	80026a8 <__aeabi_dmul+0x1f8>
 80028d2:	e712      	b.n	80026fa <__aeabi_dmul+0x24a>

080028d4 <__gedf2>:
 80028d4:	f04f 3cff 	mov.w	ip, #4294967295
 80028d8:	e006      	b.n	80028e8 <__cmpdf2+0x4>
 80028da:	bf00      	nop

080028dc <__ledf2>:
 80028dc:	f04f 0c01 	mov.w	ip, #1
 80028e0:	e002      	b.n	80028e8 <__cmpdf2+0x4>
 80028e2:	bf00      	nop

080028e4 <__cmpdf2>:
 80028e4:	f04f 0c01 	mov.w	ip, #1
 80028e8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80028ec:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80028f0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80028f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80028f8:	bf18      	it	ne
 80028fa:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80028fe:	d01b      	beq.n	8002938 <__cmpdf2+0x54>
 8002900:	b001      	add	sp, #4
 8002902:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8002906:	bf0c      	ite	eq
 8002908:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 800290c:	ea91 0f03 	teqne	r1, r3
 8002910:	bf02      	ittt	eq
 8002912:	ea90 0f02 	teqeq	r0, r2
 8002916:	2000      	moveq	r0, #0
 8002918:	4770      	bxeq	lr
 800291a:	f110 0f00 	cmn.w	r0, #0
 800291e:	ea91 0f03 	teq	r1, r3
 8002922:	bf58      	it	pl
 8002924:	4299      	cmppl	r1, r3
 8002926:	bf08      	it	eq
 8002928:	4290      	cmpeq	r0, r2
 800292a:	bf2c      	ite	cs
 800292c:	17d8      	asrcs	r0, r3, #31
 800292e:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8002932:	f040 0001 	orr.w	r0, r0, #1
 8002936:	4770      	bx	lr
 8002938:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 800293c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002940:	d102      	bne.n	8002948 <__cmpdf2+0x64>
 8002942:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8002946:	d107      	bne.n	8002958 <__cmpdf2+0x74>
 8002948:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 800294c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8002950:	d1d6      	bne.n	8002900 <__cmpdf2+0x1c>
 8002952:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002956:	d0d3      	beq.n	8002900 <__cmpdf2+0x1c>
 8002958:	f85d 0b04 	ldr.w	r0, [sp], #4
 800295c:	4770      	bx	lr
 800295e:	bf00      	nop

08002960 <__aeabi_cdrcmple>:
 8002960:	4684      	mov	ip, r0
 8002962:	4610      	mov	r0, r2
 8002964:	4662      	mov	r2, ip
 8002966:	468c      	mov	ip, r1
 8002968:	4619      	mov	r1, r3
 800296a:	4663      	mov	r3, ip
 800296c:	e000      	b.n	8002970 <__aeabi_cdcmpeq>
 800296e:	bf00      	nop

08002970 <__aeabi_cdcmpeq>:
 8002970:	b501      	push	{r0, lr}
 8002972:	f7ff ffb7 	bl	80028e4 <__cmpdf2>
 8002976:	2800      	cmp	r0, #0
 8002978:	bf48      	it	mi
 800297a:	f110 0f00 	cmnmi.w	r0, #0
 800297e:	bd01      	pop	{r0, pc}

08002980 <__aeabi_dcmpeq>:
 8002980:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002984:	f7ff fff4 	bl	8002970 <__aeabi_cdcmpeq>
 8002988:	bf0c      	ite	eq
 800298a:	2001      	moveq	r0, #1
 800298c:	2000      	movne	r0, #0
 800298e:	f85d fb08 	ldr.w	pc, [sp], #8
 8002992:	bf00      	nop

08002994 <__aeabi_dcmplt>:
 8002994:	f84d ed08 	str.w	lr, [sp, #-8]!
 8002998:	f7ff ffea 	bl	8002970 <__aeabi_cdcmpeq>
 800299c:	bf34      	ite	cc
 800299e:	2001      	movcc	r0, #1
 80029a0:	2000      	movcs	r0, #0
 80029a2:	f85d fb08 	ldr.w	pc, [sp], #8
 80029a6:	bf00      	nop

080029a8 <__aeabi_dcmple>:
 80029a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80029ac:	f7ff ffe0 	bl	8002970 <__aeabi_cdcmpeq>
 80029b0:	bf94      	ite	ls
 80029b2:	2001      	movls	r0, #1
 80029b4:	2000      	movhi	r0, #0
 80029b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80029ba:	bf00      	nop

080029bc <__aeabi_dcmpge>:
 80029bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80029c0:	f7ff ffce 	bl	8002960 <__aeabi_cdrcmple>
 80029c4:	bf94      	ite	ls
 80029c6:	2001      	movls	r0, #1
 80029c8:	2000      	movhi	r0, #0
 80029ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80029ce:	bf00      	nop

080029d0 <__aeabi_dcmpgt>:
 80029d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80029d4:	f7ff ffc4 	bl	8002960 <__aeabi_cdrcmple>
 80029d8:	bf34      	ite	cc
 80029da:	2001      	movcc	r0, #1
 80029dc:	2000      	movcs	r0, #0
 80029de:	f85d fb08 	ldr.w	pc, [sp], #8
 80029e2:	bf00      	nop

080029e4 <__aeabi_dcmpun>:
 80029e4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80029e8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80029ec:	d102      	bne.n	80029f4 <__aeabi_dcmpun+0x10>
 80029ee:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80029f2:	d10a      	bne.n	8002a0a <__aeabi_dcmpun+0x26>
 80029f4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80029f8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80029fc:	d102      	bne.n	8002a04 <__aeabi_dcmpun+0x20>
 80029fe:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8002a02:	d102      	bne.n	8002a0a <__aeabi_dcmpun+0x26>
 8002a04:	f04f 0000 	mov.w	r0, #0
 8002a08:	4770      	bx	lr
 8002a0a:	f04f 0001 	mov.w	r0, #1
 8002a0e:	4770      	bx	lr

08002a10 <__aeabi_d2iz>:
 8002a10:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002a14:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8002a18:	d215      	bcs.n	8002a46 <__aeabi_d2iz+0x36>
 8002a1a:	d511      	bpl.n	8002a40 <__aeabi_d2iz+0x30>
 8002a1c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8002a20:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8002a24:	d912      	bls.n	8002a4c <__aeabi_d2iz+0x3c>
 8002a26:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002a2a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002a2e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8002a32:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002a36:	fa23 f002 	lsr.w	r0, r3, r2
 8002a3a:	bf18      	it	ne
 8002a3c:	4240      	negne	r0, r0
 8002a3e:	4770      	bx	lr
 8002a40:	f04f 0000 	mov.w	r0, #0
 8002a44:	4770      	bx	lr
 8002a46:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8002a4a:	d105      	bne.n	8002a58 <__aeabi_d2iz+0x48>
 8002a4c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8002a50:	bf08      	it	eq
 8002a52:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8002a56:	4770      	bx	lr
 8002a58:	f04f 0000 	mov.w	r0, #0
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop

08002a60 <__aeabi_d2f>:
 8002a60:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8002a64:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8002a68:	bf24      	itt	cs
 8002a6a:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8002a6e:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8002a72:	d90d      	bls.n	8002a90 <__aeabi_d2f+0x30>
 8002a74:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8002a78:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8002a7c:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8002a80:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8002a84:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8002a88:	bf08      	it	eq
 8002a8a:	f020 0001 	biceq.w	r0, r0, #1
 8002a8e:	4770      	bx	lr
 8002a90:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8002a94:	d121      	bne.n	8002ada <__aeabi_d2f+0x7a>
 8002a96:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8002a9a:	bfbc      	itt	lt
 8002a9c:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8002aa0:	4770      	bxlt	lr
 8002aa2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8002aa6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8002aaa:	f1c2 0218 	rsb	r2, r2, #24
 8002aae:	f1c2 0c20 	rsb	ip, r2, #32
 8002ab2:	fa10 f30c 	lsls.w	r3, r0, ip
 8002ab6:	fa20 f002 	lsr.w	r0, r0, r2
 8002aba:	bf18      	it	ne
 8002abc:	f040 0001 	orrne.w	r0, r0, #1
 8002ac0:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002ac4:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8002ac8:	fa03 fc0c 	lsl.w	ip, r3, ip
 8002acc:	ea40 000c 	orr.w	r0, r0, ip
 8002ad0:	fa23 f302 	lsr.w	r3, r3, r2
 8002ad4:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8002ad8:	e7cc      	b.n	8002a74 <__aeabi_d2f+0x14>
 8002ada:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8002ade:	d107      	bne.n	8002af0 <__aeabi_d2f+0x90>
 8002ae0:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8002ae4:	bf1e      	ittt	ne
 8002ae6:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8002aea:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8002aee:	4770      	bxne	lr
 8002af0:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8002af4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8002af8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop

08002b00 <__aeabi_frsub>:
 8002b00:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8002b04:	e002      	b.n	8002b0c <__addsf3>
 8002b06:	bf00      	nop

08002b08 <__aeabi_fsub>:
 8002b08:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08002b0c <__addsf3>:
 8002b0c:	0042      	lsls	r2, r0, #1
 8002b0e:	bf1f      	itttt	ne
 8002b10:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8002b14:	ea92 0f03 	teqne	r2, r3
 8002b18:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8002b1c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8002b20:	d06a      	beq.n	8002bf8 <__addsf3+0xec>
 8002b22:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8002b26:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8002b2a:	bfc1      	itttt	gt
 8002b2c:	18d2      	addgt	r2, r2, r3
 8002b2e:	4041      	eorgt	r1, r0
 8002b30:	4048      	eorgt	r0, r1
 8002b32:	4041      	eorgt	r1, r0
 8002b34:	bfb8      	it	lt
 8002b36:	425b      	neglt	r3, r3
 8002b38:	2b19      	cmp	r3, #25
 8002b3a:	bf88      	it	hi
 8002b3c:	4770      	bxhi	lr
 8002b3e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8002b42:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002b46:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8002b4a:	bf18      	it	ne
 8002b4c:	4240      	negne	r0, r0
 8002b4e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8002b52:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8002b56:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8002b5a:	bf18      	it	ne
 8002b5c:	4249      	negne	r1, r1
 8002b5e:	ea92 0f03 	teq	r2, r3
 8002b62:	d03f      	beq.n	8002be4 <__addsf3+0xd8>
 8002b64:	f1a2 0201 	sub.w	r2, r2, #1
 8002b68:	fa41 fc03 	asr.w	ip, r1, r3
 8002b6c:	eb10 000c 	adds.w	r0, r0, ip
 8002b70:	f1c3 0320 	rsb	r3, r3, #32
 8002b74:	fa01 f103 	lsl.w	r1, r1, r3
 8002b78:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8002b7c:	d502      	bpl.n	8002b84 <__addsf3+0x78>
 8002b7e:	4249      	negs	r1, r1
 8002b80:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8002b84:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8002b88:	d313      	bcc.n	8002bb2 <__addsf3+0xa6>
 8002b8a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8002b8e:	d306      	bcc.n	8002b9e <__addsf3+0x92>
 8002b90:	0840      	lsrs	r0, r0, #1
 8002b92:	ea4f 0131 	mov.w	r1, r1, rrx
 8002b96:	f102 0201 	add.w	r2, r2, #1
 8002b9a:	2afe      	cmp	r2, #254	; 0xfe
 8002b9c:	d251      	bcs.n	8002c42 <__addsf3+0x136>
 8002b9e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8002ba2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8002ba6:	bf08      	it	eq
 8002ba8:	f020 0001 	biceq.w	r0, r0, #1
 8002bac:	ea40 0003 	orr.w	r0, r0, r3
 8002bb0:	4770      	bx	lr
 8002bb2:	0049      	lsls	r1, r1, #1
 8002bb4:	eb40 0000 	adc.w	r0, r0, r0
 8002bb8:	3a01      	subs	r2, #1
 8002bba:	bf28      	it	cs
 8002bbc:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8002bc0:	d2ed      	bcs.n	8002b9e <__addsf3+0x92>
 8002bc2:	fab0 fc80 	clz	ip, r0
 8002bc6:	f1ac 0c08 	sub.w	ip, ip, #8
 8002bca:	ebb2 020c 	subs.w	r2, r2, ip
 8002bce:	fa00 f00c 	lsl.w	r0, r0, ip
 8002bd2:	bfaa      	itet	ge
 8002bd4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8002bd8:	4252      	neglt	r2, r2
 8002bda:	4318      	orrge	r0, r3
 8002bdc:	bfbc      	itt	lt
 8002bde:	40d0      	lsrlt	r0, r2
 8002be0:	4318      	orrlt	r0, r3
 8002be2:	4770      	bx	lr
 8002be4:	f092 0f00 	teq	r2, #0
 8002be8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8002bec:	bf06      	itte	eq
 8002bee:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8002bf2:	3201      	addeq	r2, #1
 8002bf4:	3b01      	subne	r3, #1
 8002bf6:	e7b5      	b.n	8002b64 <__addsf3+0x58>
 8002bf8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8002bfc:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8002c00:	bf18      	it	ne
 8002c02:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8002c06:	d021      	beq.n	8002c4c <__addsf3+0x140>
 8002c08:	ea92 0f03 	teq	r2, r3
 8002c0c:	d004      	beq.n	8002c18 <__addsf3+0x10c>
 8002c0e:	f092 0f00 	teq	r2, #0
 8002c12:	bf08      	it	eq
 8002c14:	4608      	moveq	r0, r1
 8002c16:	4770      	bx	lr
 8002c18:	ea90 0f01 	teq	r0, r1
 8002c1c:	bf1c      	itt	ne
 8002c1e:	2000      	movne	r0, #0
 8002c20:	4770      	bxne	lr
 8002c22:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8002c26:	d104      	bne.n	8002c32 <__addsf3+0x126>
 8002c28:	0040      	lsls	r0, r0, #1
 8002c2a:	bf28      	it	cs
 8002c2c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8002c30:	4770      	bx	lr
 8002c32:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8002c36:	bf3c      	itt	cc
 8002c38:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8002c3c:	4770      	bxcc	lr
 8002c3e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8002c42:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8002c46:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8002c4a:	4770      	bx	lr
 8002c4c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8002c50:	bf16      	itet	ne
 8002c52:	4608      	movne	r0, r1
 8002c54:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8002c58:	4601      	movne	r1, r0
 8002c5a:	0242      	lsls	r2, r0, #9
 8002c5c:	bf06      	itte	eq
 8002c5e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8002c62:	ea90 0f01 	teqeq	r0, r1
 8002c66:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8002c6a:	4770      	bx	lr

08002c6c <__aeabi_ui2f>:
 8002c6c:	f04f 0300 	mov.w	r3, #0
 8002c70:	e004      	b.n	8002c7c <__aeabi_i2f+0x8>
 8002c72:	bf00      	nop

08002c74 <__aeabi_i2f>:
 8002c74:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8002c78:	bf48      	it	mi
 8002c7a:	4240      	negmi	r0, r0
 8002c7c:	ea5f 0c00 	movs.w	ip, r0
 8002c80:	bf08      	it	eq
 8002c82:	4770      	bxeq	lr
 8002c84:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8002c88:	4601      	mov	r1, r0
 8002c8a:	f04f 0000 	mov.w	r0, #0
 8002c8e:	e01c      	b.n	8002cca <__aeabi_l2f+0x2a>

08002c90 <__aeabi_ul2f>:
 8002c90:	ea50 0201 	orrs.w	r2, r0, r1
 8002c94:	bf08      	it	eq
 8002c96:	4770      	bxeq	lr
 8002c98:	f04f 0300 	mov.w	r3, #0
 8002c9c:	e00a      	b.n	8002cb4 <__aeabi_l2f+0x14>
 8002c9e:	bf00      	nop

08002ca0 <__aeabi_l2f>:
 8002ca0:	ea50 0201 	orrs.w	r2, r0, r1
 8002ca4:	bf08      	it	eq
 8002ca6:	4770      	bxeq	lr
 8002ca8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8002cac:	d502      	bpl.n	8002cb4 <__aeabi_l2f+0x14>
 8002cae:	4240      	negs	r0, r0
 8002cb0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002cb4:	ea5f 0c01 	movs.w	ip, r1
 8002cb8:	bf02      	ittt	eq
 8002cba:	4684      	moveq	ip, r0
 8002cbc:	4601      	moveq	r1, r0
 8002cbe:	2000      	moveq	r0, #0
 8002cc0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8002cc4:	bf08      	it	eq
 8002cc6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8002cca:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8002cce:	fabc f28c 	clz	r2, ip
 8002cd2:	3a08      	subs	r2, #8
 8002cd4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8002cd8:	db10      	blt.n	8002cfc <__aeabi_l2f+0x5c>
 8002cda:	fa01 fc02 	lsl.w	ip, r1, r2
 8002cde:	4463      	add	r3, ip
 8002ce0:	fa00 fc02 	lsl.w	ip, r0, r2
 8002ce4:	f1c2 0220 	rsb	r2, r2, #32
 8002ce8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8002cec:	fa20 f202 	lsr.w	r2, r0, r2
 8002cf0:	eb43 0002 	adc.w	r0, r3, r2
 8002cf4:	bf08      	it	eq
 8002cf6:	f020 0001 	biceq.w	r0, r0, #1
 8002cfa:	4770      	bx	lr
 8002cfc:	f102 0220 	add.w	r2, r2, #32
 8002d00:	fa01 fc02 	lsl.w	ip, r1, r2
 8002d04:	f1c2 0220 	rsb	r2, r2, #32
 8002d08:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8002d0c:	fa21 f202 	lsr.w	r2, r1, r2
 8002d10:	eb43 0002 	adc.w	r0, r3, r2
 8002d14:	bf08      	it	eq
 8002d16:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8002d1a:	4770      	bx	lr

08002d1c <__aeabi_f2lz>:
 8002d1c:	ee07 0a90 	vmov	s15, r0
 8002d20:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d24:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d28:	d401      	bmi.n	8002d2e <__aeabi_f2lz+0x12>
 8002d2a:	f000 b823 	b.w	8002d74 <__aeabi_f2ulz>
 8002d2e:	eef1 7a67 	vneg.f32	s15, s15
 8002d32:	b508      	push	{r3, lr}
 8002d34:	ee17 0a90 	vmov	r0, s15
 8002d38:	f000 f81c 	bl	8002d74 <__aeabi_f2ulz>
 8002d3c:	4240      	negs	r0, r0
 8002d3e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002d42:	bd08      	pop	{r3, pc}

08002d44 <__aeabi_d2lz>:
 8002d44:	b538      	push	{r3, r4, r5, lr}
 8002d46:	2200      	movs	r2, #0
 8002d48:	2300      	movs	r3, #0
 8002d4a:	4604      	mov	r4, r0
 8002d4c:	460d      	mov	r5, r1
 8002d4e:	f7ff fe21 	bl	8002994 <__aeabi_dcmplt>
 8002d52:	b928      	cbnz	r0, 8002d60 <__aeabi_d2lz+0x1c>
 8002d54:	4620      	mov	r0, r4
 8002d56:	4629      	mov	r1, r5
 8002d58:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8002d5c:	f000 b82a 	b.w	8002db4 <__aeabi_d2ulz>
 8002d60:	4620      	mov	r0, r4
 8002d62:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8002d66:	f000 f825 	bl	8002db4 <__aeabi_d2ulz>
 8002d6a:	4240      	negs	r0, r0
 8002d6c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8002d70:	bd38      	pop	{r3, r4, r5, pc}
 8002d72:	bf00      	nop

08002d74 <__aeabi_f2ulz>:
 8002d74:	b5d0      	push	{r4, r6, r7, lr}
 8002d76:	f7ff fb43 	bl	8002400 <__aeabi_f2d>
 8002d7a:	4b0c      	ldr	r3, [pc, #48]	; (8002dac <__aeabi_f2ulz+0x38>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	4606      	mov	r6, r0
 8002d80:	460f      	mov	r7, r1
 8002d82:	f7ff fb95 	bl	80024b0 <__aeabi_dmul>
 8002d86:	f000 f833 	bl	8002df0 <__aeabi_d2uiz>
 8002d8a:	4604      	mov	r4, r0
 8002d8c:	f7ff fb16 	bl	80023bc <__aeabi_ui2d>
 8002d90:	4b07      	ldr	r3, [pc, #28]	; (8002db0 <__aeabi_f2ulz+0x3c>)
 8002d92:	2200      	movs	r2, #0
 8002d94:	f7ff fb8c 	bl	80024b0 <__aeabi_dmul>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	460b      	mov	r3, r1
 8002d9c:	4630      	mov	r0, r6
 8002d9e:	4639      	mov	r1, r7
 8002da0:	f7ff f9ce 	bl	8002140 <__aeabi_dsub>
 8002da4:	f000 f824 	bl	8002df0 <__aeabi_d2uiz>
 8002da8:	4621      	mov	r1, r4
 8002daa:	bdd0      	pop	{r4, r6, r7, pc}
 8002dac:	3df00000 	.word	0x3df00000
 8002db0:	41f00000 	.word	0x41f00000

08002db4 <__aeabi_d2ulz>:
 8002db4:	b5d0      	push	{r4, r6, r7, lr}
 8002db6:	4b0c      	ldr	r3, [pc, #48]	; (8002de8 <__aeabi_d2ulz+0x34>)
 8002db8:	2200      	movs	r2, #0
 8002dba:	4606      	mov	r6, r0
 8002dbc:	460f      	mov	r7, r1
 8002dbe:	f7ff fb77 	bl	80024b0 <__aeabi_dmul>
 8002dc2:	f000 f815 	bl	8002df0 <__aeabi_d2uiz>
 8002dc6:	4604      	mov	r4, r0
 8002dc8:	f7ff faf8 	bl	80023bc <__aeabi_ui2d>
 8002dcc:	4b07      	ldr	r3, [pc, #28]	; (8002dec <__aeabi_d2ulz+0x38>)
 8002dce:	2200      	movs	r2, #0
 8002dd0:	f7ff fb6e 	bl	80024b0 <__aeabi_dmul>
 8002dd4:	4602      	mov	r2, r0
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	4630      	mov	r0, r6
 8002dda:	4639      	mov	r1, r7
 8002ddc:	f7ff f9b0 	bl	8002140 <__aeabi_dsub>
 8002de0:	f000 f806 	bl	8002df0 <__aeabi_d2uiz>
 8002de4:	4621      	mov	r1, r4
 8002de6:	bdd0      	pop	{r4, r6, r7, pc}
 8002de8:	3df00000 	.word	0x3df00000
 8002dec:	41f00000 	.word	0x41f00000

08002df0 <__aeabi_d2uiz>:
 8002df0:	004a      	lsls	r2, r1, #1
 8002df2:	d211      	bcs.n	8002e18 <__aeabi_d2uiz+0x28>
 8002df4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8002df8:	d211      	bcs.n	8002e1e <__aeabi_d2uiz+0x2e>
 8002dfa:	d50d      	bpl.n	8002e18 <__aeabi_d2uiz+0x28>
 8002dfc:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8002e00:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8002e04:	d40e      	bmi.n	8002e24 <__aeabi_d2uiz+0x34>
 8002e06:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8002e0a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002e0e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8002e12:	fa23 f002 	lsr.w	r0, r3, r2
 8002e16:	4770      	bx	lr
 8002e18:	f04f 0000 	mov.w	r0, #0
 8002e1c:	4770      	bx	lr
 8002e1e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8002e22:	d102      	bne.n	8002e2a <__aeabi_d2uiz+0x3a>
 8002e24:	f04f 30ff 	mov.w	r0, #4294967295
 8002e28:	4770      	bx	lr
 8002e2a:	f04f 0000 	mov.w	r0, #0
 8002e2e:	4770      	bx	lr
	...

08002e40 <strlen>:
 8002e40:	f890 f000 	pld	[r0]
 8002e44:	e96d 4502 	strd	r4, r5, [sp, #-8]!
 8002e48:	f020 0107 	bic.w	r1, r0, #7
 8002e4c:	f06f 0c00 	mvn.w	ip, #0
 8002e50:	f010 0407 	ands.w	r4, r0, #7
 8002e54:	f891 f020 	pld	[r1, #32]
 8002e58:	f040 8049 	bne.w	8002eee <strlen+0xae>
 8002e5c:	f04f 0400 	mov.w	r4, #0
 8002e60:	f06f 0007 	mvn.w	r0, #7
 8002e64:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002e68:	f891 f040 	pld	[r1, #64]	; 0x40
 8002e6c:	f100 0008 	add.w	r0, r0, #8
 8002e70:	fa82 f24c 	uadd8	r2, r2, ip
 8002e74:	faa4 f28c 	sel	r2, r4, ip
 8002e78:	fa83 f34c 	uadd8	r3, r3, ip
 8002e7c:	faa2 f38c 	sel	r3, r2, ip
 8002e80:	bb4b      	cbnz	r3, 8002ed6 <strlen+0x96>
 8002e82:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
 8002e86:	fa82 f24c 	uadd8	r2, r2, ip
 8002e8a:	f100 0008 	add.w	r0, r0, #8
 8002e8e:	faa4 f28c 	sel	r2, r4, ip
 8002e92:	fa83 f34c 	uadd8	r3, r3, ip
 8002e96:	faa2 f38c 	sel	r3, r2, ip
 8002e9a:	b9e3      	cbnz	r3, 8002ed6 <strlen+0x96>
 8002e9c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
 8002ea0:	fa82 f24c 	uadd8	r2, r2, ip
 8002ea4:	f100 0008 	add.w	r0, r0, #8
 8002ea8:	faa4 f28c 	sel	r2, r4, ip
 8002eac:	fa83 f34c 	uadd8	r3, r3, ip
 8002eb0:	faa2 f38c 	sel	r3, r2, ip
 8002eb4:	b97b      	cbnz	r3, 8002ed6 <strlen+0x96>
 8002eb6:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
 8002eba:	f101 0120 	add.w	r1, r1, #32
 8002ebe:	fa82 f24c 	uadd8	r2, r2, ip
 8002ec2:	f100 0008 	add.w	r0, r0, #8
 8002ec6:	faa4 f28c 	sel	r2, r4, ip
 8002eca:	fa83 f34c 	uadd8	r3, r3, ip
 8002ece:	faa2 f38c 	sel	r3, r2, ip
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d0c6      	beq.n	8002e64 <strlen+0x24>
 8002ed6:	2a00      	cmp	r2, #0
 8002ed8:	bf04      	itt	eq
 8002eda:	3004      	addeq	r0, #4
 8002edc:	461a      	moveq	r2, r3
 8002ede:	ba12      	rev	r2, r2
 8002ee0:	fab2 f282 	clz	r2, r2
 8002ee4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
 8002ee8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
 8002eec:	4770      	bx	lr
 8002eee:	e9d1 2300 	ldrd	r2, r3, [r1]
 8002ef2:	f004 0503 	and.w	r5, r4, #3
 8002ef6:	f1c4 0000 	rsb	r0, r4, #0
 8002efa:	ea4f 05c5 	mov.w	r5, r5, lsl #3
 8002efe:	f014 0f04 	tst.w	r4, #4
 8002f02:	f891 f040 	pld	[r1, #64]	; 0x40
 8002f06:	fa0c f505 	lsl.w	r5, ip, r5
 8002f0a:	ea62 0205 	orn	r2, r2, r5
 8002f0e:	bf1c      	itt	ne
 8002f10:	ea63 0305 	ornne	r3, r3, r5
 8002f14:	4662      	movne	r2, ip
 8002f16:	f04f 0400 	mov.w	r4, #0
 8002f1a:	e7a9      	b.n	8002e70 <strlen+0x30>

08002f1c <main>:

//---------------------------------------------------------------------------------------------
//    Main Program Entry Point Add your user code
//---------------------------------------------------------------------------------------------
int main (void)
{
 8002f1c:	b570      	push	{r4, r5, r6, lr}
    {
      nop4;
    }

    //--- Output the STK_CTRL Value to PA06 & PA07
    fnPulseLongOut (STK_CTRL);
 8002f1e:	4c13      	ldr	r4, [pc, #76]	; (8002f6c <main+0x50>)
      fnPulseLongOut (0x00FF0F35);     //--- Pulse Out Orientation
 8002f20:	4e13      	ldr	r6, [pc, #76]	; (8002f70 <main+0x54>)
 8002f22:	4625      	mov	r5, r4
 8002f24:	4630      	mov	r0, r6
 8002f26:	f7fe fed3 	bl	8001cd0 <fnPulseLongOut>
 8002f2a:	230a      	movs	r3, #10
      nop4;
 8002f2c:	bf00      	nop
 8002f2e:	bf00      	nop
 8002f30:	bf00      	nop
 8002f32:	bf00      	nop
    for (ulC = 0; ulC < 10; ulC++)
 8002f34:	3b01      	subs	r3, #1
 8002f36:	d1f9      	bne.n	8002f2c <main+0x10>
    fnPulseLongOut (STK_CTRL);
 8002f38:	6823      	ldr	r3, [r4, #0]
 8002f3a:	6818      	ldr	r0, [r3, #0]
 8002f3c:	f7fe fec8 	bl	8001cd0 <fnPulseLongOut>
 8002f40:	230a      	movs	r3, #10

    //--- Spacing Delay
    for (ulC = 0; ulC < 10; ulC++)
    {
      nop4;
 8002f42:	bf00      	nop
 8002f44:	bf00      	nop
 8002f46:	bf00      	nop
 8002f48:	bf00      	nop
    for (ulC = 0; ulC < 10; ulC++)
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	d1f9      	bne.n	8002f42 <main+0x26>
    }

    //--- Pulse Out STK_LOAD Value
    fnPulseLongOut (STK_LOAD);
 8002f4e:	682b      	ldr	r3, [r5, #0]
 8002f50:	6858      	ldr	r0, [r3, #4]
 8002f52:	f7fe febd 	bl	8001cd0 <fnPulseLongOut>
 8002f56:	230a      	movs	r3, #10
    //--- The Dispatcher is called from the main endless loop

    //--- Spacing Delay
    for (ulC = 0; ulC < 10; ulC++)
    {
      nop4;
 8002f58:	bf00      	nop
 8002f5a:	bf00      	nop
 8002f5c:	bf00      	nop
 8002f5e:	bf00      	nop
    for (ulC = 0; ulC < 10; ulC++)
 8002f60:	3b01      	subs	r3, #1
 8002f62:	d1f9      	bne.n	8002f58 <main+0x3c>
    }

    fnDispatcher();
 8002f64:	f7fe f8b0 	bl	80010c8 <fnDispatcher>
      fnPulseLongOut (0x00FF0F35);     //--- Pulse Out Orientation
 8002f68:	e7dc      	b.n	8002f24 <main+0x8>
 8002f6a:	bf00      	nop
 8002f6c:	e000e010 	.word	0xe000e010
 8002f70:	00ff0f35 	.word	0x00ff0f35
 8002f74:	00000000 	.word	0x00000000

08002f78 <floor>:
 8002f78:	ec51 0b10 	vmov	r0, r1, d0
 8002f7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f7e:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8002f82:	f2a3 35ff 	subw	r5, r3, #1023	; 0x3ff
 8002f86:	2d13      	cmp	r5, #19
 8002f88:	ee10 6a10 	vmov	r6, s0
 8002f8c:	460c      	mov	r4, r1
 8002f8e:	dc20      	bgt.n	8002fd2 <floor+0x5a>
 8002f90:	2d00      	cmp	r5, #0
 8002f92:	db3d      	blt.n	8003010 <floor+0x98>
 8002f94:	4f38      	ldr	r7, [pc, #224]	; (8003078 <floor+0x100>)
 8002f96:	412f      	asrs	r7, r5
 8002f98:	ea01 0307 	and.w	r3, r1, r7
 8002f9c:	4303      	orrs	r3, r0
 8002f9e:	d01d      	beq.n	8002fdc <floor+0x64>
 8002fa0:	a333      	add	r3, pc, #204	; (adr r3, 8003070 <floor+0xf8>)
 8002fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fa6:	f7ff f8cd 	bl	8002144 <__adddf3>
 8002faa:	2200      	movs	r2, #0
 8002fac:	2300      	movs	r3, #0
 8002fae:	f7ff fd0f 	bl	80029d0 <__aeabi_dcmpgt>
 8002fb2:	b148      	cbz	r0, 8002fc8 <floor+0x50>
 8002fb4:	2c00      	cmp	r4, #0
 8002fb6:	da04      	bge.n	8002fc2 <floor+0x4a>
 8002fb8:	f44f 1380 	mov.w	r3, #1048576	; 0x100000
 8002fbc:	fa43 f505 	asr.w	r5, r3, r5
 8002fc0:	442c      	add	r4, r5
 8002fc2:	ea24 0407 	bic.w	r4, r4, r7
 8002fc6:	2600      	movs	r6, #0
 8002fc8:	4623      	mov	r3, r4
 8002fca:	4632      	mov	r2, r6
 8002fcc:	ec43 2b10 	vmov	d0, r2, r3
 8002fd0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fd2:	2d33      	cmp	r5, #51	; 0x33
 8002fd4:	dd05      	ble.n	8002fe2 <floor+0x6a>
 8002fd6:	f5b5 6f80 	cmp.w	r5, #1024	; 0x400
 8002fda:	d029      	beq.n	8003030 <floor+0xb8>
 8002fdc:	ec41 0b10 	vmov	d0, r0, r1
 8002fe0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002fe2:	f2a3 4313 	subw	r3, r3, #1043	; 0x413
 8002fe6:	f04f 37ff 	mov.w	r7, #4294967295
 8002fea:	40df      	lsrs	r7, r3
 8002fec:	4207      	tst	r7, r0
 8002fee:	d0f5      	beq.n	8002fdc <floor+0x64>
 8002ff0:	a31f      	add	r3, pc, #124	; (adr r3, 8003070 <floor+0xf8>)
 8002ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff6:	f7ff f8a5 	bl	8002144 <__adddf3>
 8002ffa:	2200      	movs	r2, #0
 8002ffc:	2300      	movs	r3, #0
 8002ffe:	f7ff fce7 	bl	80029d0 <__aeabi_dcmpgt>
 8003002:	2800      	cmp	r0, #0
 8003004:	d0e0      	beq.n	8002fc8 <floor+0x50>
 8003006:	2c00      	cmp	r4, #0
 8003008:	db23      	blt.n	8003052 <floor+0xda>
 800300a:	ea26 0607 	bic.w	r6, r6, r7
 800300e:	e7db      	b.n	8002fc8 <floor+0x50>
 8003010:	a317      	add	r3, pc, #92	; (adr r3, 8003070 <floor+0xf8>)
 8003012:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003016:	f7ff f895 	bl	8002144 <__adddf3>
 800301a:	2200      	movs	r2, #0
 800301c:	2300      	movs	r3, #0
 800301e:	f7ff fcd7 	bl	80029d0 <__aeabi_dcmpgt>
 8003022:	2800      	cmp	r0, #0
 8003024:	d0d0      	beq.n	8002fc8 <floor+0x50>
 8003026:	2c00      	cmp	r4, #0
 8003028:	db0a      	blt.n	8003040 <floor+0xc8>
 800302a:	2600      	movs	r6, #0
 800302c:	4634      	mov	r4, r6
 800302e:	e7cb      	b.n	8002fc8 <floor+0x50>
 8003030:	ee10 2a10 	vmov	r2, s0
 8003034:	460b      	mov	r3, r1
 8003036:	f7ff f885 	bl	8002144 <__adddf3>
 800303a:	ec41 0b10 	vmov	d0, r0, r1
 800303e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003040:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 8003044:	4a0d      	ldr	r2, [pc, #52]	; (800307c <floor+0x104>)
 8003046:	431e      	orrs	r6, r3
 8003048:	2e00      	cmp	r6, #0
 800304a:	bf18      	it	ne
 800304c:	4614      	movne	r4, r2
 800304e:	2600      	movs	r6, #0
 8003050:	e7ba      	b.n	8002fc8 <floor+0x50>
 8003052:	2d14      	cmp	r5, #20
 8003054:	d008      	beq.n	8003068 <floor+0xf0>
 8003056:	2301      	movs	r3, #1
 8003058:	f1c5 0534 	rsb	r5, r5, #52	; 0x34
 800305c:	fa03 f505 	lsl.w	r5, r3, r5
 8003060:	19ae      	adds	r6, r5, r6
 8003062:	bf28      	it	cs
 8003064:	18e4      	addcs	r4, r4, r3
 8003066:	e7d0      	b.n	800300a <floor+0x92>
 8003068:	3401      	adds	r4, #1
 800306a:	e7ce      	b.n	800300a <floor+0x92>
 800306c:	f3af 8000 	nop.w
 8003070:	8800759c 	.word	0x8800759c
 8003074:	7e37e43c 	.word	0x7e37e43c
 8003078:	000fffff 	.word	0x000fffff
 800307c:	bff00000 	.word	0xbff00000

08003080 <log10>:
 8003080:	b538      	push	{r3, r4, r5, lr}
 8003082:	ed2d 8b02 	vpush	{d8}
 8003086:	ec55 4b10 	vmov	r4, r5, d0
 800308a:	f000 f9b5 	bl	80033f8 <__ieee754_log10>
 800308e:	4b1e      	ldr	r3, [pc, #120]	; (8003108 <log10+0x88>)
 8003090:	eeb0 8a40 	vmov.f32	s16, s0
 8003094:	eef0 8a60 	vmov.f32	s17, s1
 8003098:	f993 3000 	ldrsb.w	r3, [r3]
 800309c:	3301      	adds	r3, #1
 800309e:	d01a      	beq.n	80030d6 <log10+0x56>
 80030a0:	4622      	mov	r2, r4
 80030a2:	462b      	mov	r3, r5
 80030a4:	4620      	mov	r0, r4
 80030a6:	4629      	mov	r1, r5
 80030a8:	f7ff fc9c 	bl	80029e4 <__aeabi_dcmpun>
 80030ac:	b998      	cbnz	r0, 80030d6 <log10+0x56>
 80030ae:	2200      	movs	r2, #0
 80030b0:	2300      	movs	r3, #0
 80030b2:	4620      	mov	r0, r4
 80030b4:	4629      	mov	r1, r5
 80030b6:	f7ff fc77 	bl	80029a8 <__aeabi_dcmple>
 80030ba:	b160      	cbz	r0, 80030d6 <log10+0x56>
 80030bc:	4620      	mov	r0, r4
 80030be:	4629      	mov	r1, r5
 80030c0:	2200      	movs	r2, #0
 80030c2:	2300      	movs	r3, #0
 80030c4:	f7ff fc5c 	bl	8002980 <__aeabi_dcmpeq>
 80030c8:	b160      	cbz	r0, 80030e4 <log10+0x64>
 80030ca:	f002 f80d 	bl	80050e8 <__errno>
 80030ce:	ed9f 8b0c 	vldr	d8, [pc, #48]	; 8003100 <log10+0x80>
 80030d2:	2322      	movs	r3, #34	; 0x22
 80030d4:	6003      	str	r3, [r0, #0]
 80030d6:	eeb0 0a48 	vmov.f32	s0, s16
 80030da:	eef0 0a68 	vmov.f32	s1, s17
 80030de:	ecbd 8b02 	vpop	{d8}
 80030e2:	bd38      	pop	{r3, r4, r5, pc}
 80030e4:	f002 f800 	bl	80050e8 <__errno>
 80030e8:	ecbd 8b02 	vpop	{d8}
 80030ec:	2321      	movs	r3, #33	; 0x21
 80030ee:	6003      	str	r3, [r0, #0]
 80030f0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80030f4:	4805      	ldr	r0, [pc, #20]	; (800310c <log10+0x8c>)
 80030f6:	f001 bbcf 	b.w	8004898 <nan>
 80030fa:	bf00      	nop
 80030fc:	f3af 8000 	nop.w
 8003100:	00000000 	.word	0x00000000
 8003104:	fff00000 	.word	0xfff00000
 8003108:	20000008 	.word	0x20000008
 800310c:	08000410 	.word	0x08000410

08003110 <pow>:
 8003110:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003112:	ed2d 8b02 	vpush	{d8}
 8003116:	ec57 6b10 	vmov	r6, r7, d0
 800311a:	ec55 4b11 	vmov	r4, r5, d1
 800311e:	f000 fa03 	bl	8003528 <__ieee754_pow>
 8003122:	4b63      	ldr	r3, [pc, #396]	; (80032b0 <pow+0x1a0>)
 8003124:	eeb0 8a40 	vmov.f32	s16, s0
 8003128:	eef0 8a60 	vmov.f32	s17, s1
 800312c:	f993 3000 	ldrsb.w	r3, [r3]
 8003130:	3301      	adds	r3, #1
 8003132:	d02a      	beq.n	800318a <pow+0x7a>
 8003134:	4622      	mov	r2, r4
 8003136:	462b      	mov	r3, r5
 8003138:	4620      	mov	r0, r4
 800313a:	4629      	mov	r1, r5
 800313c:	f7ff fc52 	bl	80029e4 <__aeabi_dcmpun>
 8003140:	bb18      	cbnz	r0, 800318a <pow+0x7a>
 8003142:	4632      	mov	r2, r6
 8003144:	463b      	mov	r3, r7
 8003146:	4630      	mov	r0, r6
 8003148:	4639      	mov	r1, r7
 800314a:	f7ff fc4b 	bl	80029e4 <__aeabi_dcmpun>
 800314e:	2800      	cmp	r0, #0
 8003150:	d144      	bne.n	80031dc <pow+0xcc>
 8003152:	2200      	movs	r2, #0
 8003154:	2300      	movs	r3, #0
 8003156:	4630      	mov	r0, r6
 8003158:	4639      	mov	r1, r7
 800315a:	f7ff fc11 	bl	8002980 <__aeabi_dcmpeq>
 800315e:	b1d8      	cbz	r0, 8003198 <pow+0x88>
 8003160:	2200      	movs	r2, #0
 8003162:	2300      	movs	r3, #0
 8003164:	4620      	mov	r0, r4
 8003166:	4629      	mov	r1, r5
 8003168:	f7ff fc0a 	bl	8002980 <__aeabi_dcmpeq>
 800316c:	2800      	cmp	r0, #0
 800316e:	d13d      	bne.n	80031ec <pow+0xdc>
 8003170:	ec45 4b10 	vmov	d0, r4, r5
 8003174:	f001 fb84 	bl	8004880 <finite>
 8003178:	b138      	cbz	r0, 800318a <pow+0x7a>
 800317a:	4620      	mov	r0, r4
 800317c:	4629      	mov	r1, r5
 800317e:	2200      	movs	r2, #0
 8003180:	2300      	movs	r3, #0
 8003182:	f7ff fc07 	bl	8002994 <__aeabi_dcmplt>
 8003186:	2800      	cmp	r0, #0
 8003188:	d15c      	bne.n	8003244 <pow+0x134>
 800318a:	eeb0 0a48 	vmov.f32	s0, s16
 800318e:	eef0 0a68 	vmov.f32	s1, s17
 8003192:	ecbd 8b02 	vpop	{d8}
 8003196:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003198:	eeb0 0a48 	vmov.f32	s0, s16
 800319c:	eef0 0a68 	vmov.f32	s1, s17
 80031a0:	f001 fb6e 	bl	8004880 <finite>
 80031a4:	b358      	cbz	r0, 80031fe <pow+0xee>
 80031a6:	ec51 0b18 	vmov	r0, r1, d8
 80031aa:	2200      	movs	r2, #0
 80031ac:	2300      	movs	r3, #0
 80031ae:	f7ff fbe7 	bl	8002980 <__aeabi_dcmpeq>
 80031b2:	2800      	cmp	r0, #0
 80031b4:	d0e9      	beq.n	800318a <pow+0x7a>
 80031b6:	ec47 6b10 	vmov	d0, r6, r7
 80031ba:	f001 fb61 	bl	8004880 <finite>
 80031be:	2800      	cmp	r0, #0
 80031c0:	d0e3      	beq.n	800318a <pow+0x7a>
 80031c2:	ec45 4b10 	vmov	d0, r4, r5
 80031c6:	f001 fb5b 	bl	8004880 <finite>
 80031ca:	2800      	cmp	r0, #0
 80031cc:	d0dd      	beq.n	800318a <pow+0x7a>
 80031ce:	f001 ff8b 	bl	80050e8 <__errno>
 80031d2:	2322      	movs	r3, #34	; 0x22
 80031d4:	ed9f 8b2e 	vldr	d8, [pc, #184]	; 8003290 <pow+0x180>
 80031d8:	6003      	str	r3, [r0, #0]
 80031da:	e7d6      	b.n	800318a <pow+0x7a>
 80031dc:	4620      	mov	r0, r4
 80031de:	4629      	mov	r1, r5
 80031e0:	2200      	movs	r2, #0
 80031e2:	2300      	movs	r3, #0
 80031e4:	f7ff fbcc 	bl	8002980 <__aeabi_dcmpeq>
 80031e8:	2800      	cmp	r0, #0
 80031ea:	d0ce      	beq.n	800318a <pow+0x7a>
 80031ec:	ed9f 8b2a 	vldr	d8, [pc, #168]	; 8003298 <pow+0x188>
 80031f0:	eeb0 0a48 	vmov.f32	s0, s16
 80031f4:	eef0 0a68 	vmov.f32	s1, s17
 80031f8:	ecbd 8b02 	vpop	{d8}
 80031fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80031fe:	ec47 6b10 	vmov	d0, r6, r7
 8003202:	f001 fb3d 	bl	8004880 <finite>
 8003206:	2800      	cmp	r0, #0
 8003208:	d0cd      	beq.n	80031a6 <pow+0x96>
 800320a:	ec45 4b10 	vmov	d0, r4, r5
 800320e:	f001 fb37 	bl	8004880 <finite>
 8003212:	2800      	cmp	r0, #0
 8003214:	d0c7      	beq.n	80031a6 <pow+0x96>
 8003216:	ec53 2b18 	vmov	r2, r3, d8
 800321a:	ee18 0a10 	vmov	r0, s16
 800321e:	4619      	mov	r1, r3
 8003220:	f7ff fbe0 	bl	80029e4 <__aeabi_dcmpun>
 8003224:	bb20      	cbnz	r0, 8003270 <pow+0x160>
 8003226:	f001 ff5f 	bl	80050e8 <__errno>
 800322a:	4603      	mov	r3, r0
 800322c:	2222      	movs	r2, #34	; 0x22
 800322e:	601a      	str	r2, [r3, #0]
 8003230:	4630      	mov	r0, r6
 8003232:	4639      	mov	r1, r7
 8003234:	2200      	movs	r2, #0
 8003236:	2300      	movs	r3, #0
 8003238:	f7ff fbac 	bl	8002994 <__aeabi_dcmplt>
 800323c:	b948      	cbnz	r0, 8003252 <pow+0x142>
 800323e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 80032a0 <pow+0x190>
 8003242:	e7a2      	b.n	800318a <pow+0x7a>
 8003244:	f001 ff50 	bl	80050e8 <__errno>
 8003248:	2321      	movs	r3, #33	; 0x21
 800324a:	ed9f 8b17 	vldr	d8, [pc, #92]	; 80032a8 <pow+0x198>
 800324e:	6003      	str	r3, [r0, #0]
 8003250:	e79b      	b.n	800318a <pow+0x7a>
 8003252:	ec45 4b10 	vmov	d0, r4, r5
 8003256:	f001 fb27 	bl	80048a8 <rint>
 800325a:	4622      	mov	r2, r4
 800325c:	ec51 0b10 	vmov	r0, r1, d0
 8003260:	462b      	mov	r3, r5
 8003262:	f7ff fb8d 	bl	8002980 <__aeabi_dcmpeq>
 8003266:	2800      	cmp	r0, #0
 8003268:	d1e9      	bne.n	800323e <pow+0x12e>
 800326a:	ed9f 8b0f 	vldr	d8, [pc, #60]	; 80032a8 <pow+0x198>
 800326e:	e78c      	b.n	800318a <pow+0x7a>
 8003270:	f001 ff3a 	bl	80050e8 <__errno>
 8003274:	2200      	movs	r2, #0
 8003276:	2300      	movs	r3, #0
 8003278:	2121      	movs	r1, #33	; 0x21
 800327a:	6001      	str	r1, [r0, #0]
 800327c:	4610      	mov	r0, r2
 800327e:	4619      	mov	r1, r3
 8003280:	f7ff fa40 	bl	8002704 <__aeabi_ddiv>
 8003284:	ec41 0b18 	vmov	d8, r0, r1
 8003288:	e77f      	b.n	800318a <pow+0x7a>
 800328a:	bf00      	nop
 800328c:	f3af 8000 	nop.w
	...
 800329c:	3ff00000 	.word	0x3ff00000
 80032a0:	00000000 	.word	0x00000000
 80032a4:	7ff00000 	.word	0x7ff00000
 80032a8:	00000000 	.word	0x00000000
 80032ac:	fff00000 	.word	0xfff00000
 80032b0:	20000008 	.word	0x20000008

080032b4 <powf>:
 80032b4:	b508      	push	{r3, lr}
 80032b6:	ed2d 8b04 	vpush	{d8-d9}
 80032ba:	eef0 8a40 	vmov.f32	s17, s0
 80032be:	eeb0 8a60 	vmov.f32	s16, s1
 80032c2:	f000 ffcf 	bl	8004264 <__ieee754_powf>
 80032c6:	4b47      	ldr	r3, [pc, #284]	; (80033e4 <powf+0x130>)
 80032c8:	f993 3000 	ldrsb.w	r3, [r3]
 80032cc:	3301      	adds	r3, #1
 80032ce:	eeb0 9a40 	vmov.f32	s18, s0
 80032d2:	d01f      	beq.n	8003314 <powf+0x60>
 80032d4:	eeb4 8a48 	vcmp.f32	s16, s16
 80032d8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032dc:	d61a      	bvs.n	8003314 <powf+0x60>
 80032de:	eef4 8a68 	vcmp.f32	s17, s17
 80032e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032e6:	d659      	bvs.n	800339c <powf+0xe8>
 80032e8:	eddf 9a3f 	vldr	s19, [pc, #252]	; 80033e8 <powf+0x134>
 80032ec:	eef4 8a69 	vcmp.f32	s17, s19
 80032f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f4:	d113      	bne.n	800331e <powf+0x6a>
 80032f6:	eeb4 8a69 	vcmp.f32	s16, s19
 80032fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032fe:	d029      	beq.n	8003354 <powf+0xa0>
 8003300:	eeb0 0a48 	vmov.f32	s0, s16
 8003304:	f001 fbfe 	bl	8004b04 <finitef>
 8003308:	b120      	cbz	r0, 8003314 <powf+0x60>
 800330a:	eeb4 8ae9 	vcmpe.f32	s16, s19
 800330e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003312:	d44d      	bmi.n	80033b0 <powf+0xfc>
 8003314:	eeb0 0a49 	vmov.f32	s0, s18
 8003318:	ecbd 8b04 	vpop	{d8-d9}
 800331c:	bd08      	pop	{r3, pc}
 800331e:	f001 fbf1 	bl	8004b04 <finitef>
 8003322:	b1f0      	cbz	r0, 8003362 <powf+0xae>
 8003324:	eeb5 9a40 	vcmp.f32	s18, #0.0
 8003328:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800332c:	d1f2      	bne.n	8003314 <powf+0x60>
 800332e:	eeb0 0a68 	vmov.f32	s0, s17
 8003332:	f001 fbe7 	bl	8004b04 <finitef>
 8003336:	2800      	cmp	r0, #0
 8003338:	d0ec      	beq.n	8003314 <powf+0x60>
 800333a:	eeb0 0a48 	vmov.f32	s0, s16
 800333e:	f001 fbe1 	bl	8004b04 <finitef>
 8003342:	2800      	cmp	r0, #0
 8003344:	d0e6      	beq.n	8003314 <powf+0x60>
 8003346:	f001 fecf 	bl	80050e8 <__errno>
 800334a:	2322      	movs	r3, #34	; 0x22
 800334c:	ed9f 9a26 	vldr	s18, [pc, #152]	; 80033e8 <powf+0x134>
 8003350:	6003      	str	r3, [r0, #0]
 8003352:	e7df      	b.n	8003314 <powf+0x60>
 8003354:	eeb7 9a00 	vmov.f32	s18, #112	; 0x3f800000  1.0
 8003358:	eeb0 0a49 	vmov.f32	s0, s18
 800335c:	ecbd 8b04 	vpop	{d8-d9}
 8003360:	bd08      	pop	{r3, pc}
 8003362:	eeb0 0a68 	vmov.f32	s0, s17
 8003366:	f001 fbcd 	bl	8004b04 <finitef>
 800336a:	2800      	cmp	r0, #0
 800336c:	d0da      	beq.n	8003324 <powf+0x70>
 800336e:	eeb0 0a48 	vmov.f32	s0, s16
 8003372:	f001 fbc7 	bl	8004b04 <finitef>
 8003376:	2800      	cmp	r0, #0
 8003378:	d0d4      	beq.n	8003324 <powf+0x70>
 800337a:	eeb4 9a49 	vcmp.f32	s18, s18
 800337e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003382:	d628      	bvs.n	80033d6 <powf+0x122>
 8003384:	f001 feb0 	bl	80050e8 <__errno>
 8003388:	eef5 8ac0 	vcmpe.f32	s17, #0.0
 800338c:	2322      	movs	r3, #34	; 0x22
 800338e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003392:	6003      	str	r3, [r0, #0]
 8003394:	d413      	bmi.n	80033be <powf+0x10a>
 8003396:	ed9f 9a15 	vldr	s18, [pc, #84]	; 80033ec <powf+0x138>
 800339a:	e7bb      	b.n	8003314 <powf+0x60>
 800339c:	eeb5 8a40 	vcmp.f32	s16, #0.0
 80033a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033a4:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 80033a8:	bf08      	it	eq
 80033aa:	eeb0 9a67 	vmoveq.f32	s18, s15
 80033ae:	e7b1      	b.n	8003314 <powf+0x60>
 80033b0:	f001 fe9a 	bl	80050e8 <__errno>
 80033b4:	2321      	movs	r3, #33	; 0x21
 80033b6:	ed9f 9a0e 	vldr	s18, [pc, #56]	; 80033f0 <powf+0x13c>
 80033ba:	6003      	str	r3, [r0, #0]
 80033bc:	e7aa      	b.n	8003314 <powf+0x60>
 80033be:	eeb0 0a48 	vmov.f32	s0, s16
 80033c2:	f001 fbb3 	bl	8004b2c <rintf>
 80033c6:	eeb4 0a48 	vcmp.f32	s0, s16
 80033ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ce:	d0e2      	beq.n	8003396 <powf+0xe2>
 80033d0:	ed9f 9a07 	vldr	s18, [pc, #28]	; 80033f0 <powf+0x13c>
 80033d4:	e79e      	b.n	8003314 <powf+0x60>
 80033d6:	f001 fe87 	bl	80050e8 <__errno>
 80033da:	2321      	movs	r3, #33	; 0x21
 80033dc:	ee89 9aa9 	vdiv.f32	s18, s19, s19
 80033e0:	6003      	str	r3, [r0, #0]
 80033e2:	e797      	b.n	8003314 <powf+0x60>
 80033e4:	20000008 	.word	0x20000008
 80033e8:	00000000 	.word	0x00000000
 80033ec:	7f800000 	.word	0x7f800000
 80033f0:	ff800000 	.word	0xff800000
 80033f4:	00000000 	.word	0x00000000

080033f8 <__ieee754_log10>:
 80033f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80033fc:	ec55 4b10 	vmov	r4, r5, d0
 8003400:	f5b5 1f80 	cmp.w	r5, #1048576	; 0x100000
 8003404:	462b      	mov	r3, r5
 8003406:	da1e      	bge.n	8003446 <__ieee754_log10+0x4e>
 8003408:	f025 4200 	bic.w	r2, r5, #2147483648	; 0x80000000
 800340c:	4322      	orrs	r2, r4
 800340e:	d060      	beq.n	80034d2 <__ieee754_log10+0xda>
 8003410:	2d00      	cmp	r5, #0
 8003412:	db68      	blt.n	80034e6 <__ieee754_log10+0xee>
 8003414:	4b40      	ldr	r3, [pc, #256]	; (8003518 <__ieee754_log10+0x120>)
 8003416:	4629      	mov	r1, r5
 8003418:	2200      	movs	r2, #0
 800341a:	ee10 0a10 	vmov	r0, s0
 800341e:	f7ff f847 	bl	80024b0 <__aeabi_dmul>
 8003422:	4a3e      	ldr	r2, [pc, #248]	; (800351c <__ieee754_log10+0x124>)
 8003424:	460d      	mov	r5, r1
 8003426:	462b      	mov	r3, r5
 8003428:	4293      	cmp	r3, r2
 800342a:	4604      	mov	r4, r0
 800342c:	f06f 0135 	mvn.w	r1, #53	; 0x35
 8003430:	dd0e      	ble.n	8003450 <__ieee754_log10+0x58>
 8003432:	4622      	mov	r2, r4
 8003434:	462b      	mov	r3, r5
 8003436:	4620      	mov	r0, r4
 8003438:	4629      	mov	r1, r5
 800343a:	f7fe fe83 	bl	8002144 <__adddf3>
 800343e:	ec41 0b10 	vmov	d0, r0, r1
 8003442:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003446:	4a35      	ldr	r2, [pc, #212]	; (800351c <__ieee754_log10+0x124>)
 8003448:	4293      	cmp	r3, r2
 800344a:	f04f 0100 	mov.w	r1, #0
 800344e:	dcf0      	bgt.n	8003432 <__ieee754_log10+0x3a>
 8003450:	1518      	asrs	r0, r3, #20
 8003452:	f2a0 30ff 	subw	r0, r0, #1023	; 0x3ff
 8003456:	4408      	add	r0, r1
 8003458:	0fc7      	lsrs	r7, r0, #31
 800345a:	eb00 70d0 	add.w	r0, r0, r0, lsr #31
 800345e:	f3c3 0613 	ubfx	r6, r3, #0, #20
 8003462:	f7fe ffbb 	bl	80023dc <__aeabi_i2d>
 8003466:	f5c7 737f 	rsb	r3, r7, #1020	; 0x3fc
 800346a:	3303      	adds	r3, #3
 800346c:	ea46 5503 	orr.w	r5, r6, r3, lsl #20
 8003470:	ec45 4b10 	vmov	d0, r4, r5
 8003474:	4606      	mov	r6, r0
 8003476:	460f      	mov	r7, r1
 8003478:	f001 fc2a 	bl	8004cd0 <__ieee754_log>
 800347c:	a320      	add	r3, pc, #128	; (adr r3, 8003500 <__ieee754_log10+0x108>)
 800347e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003482:	4630      	mov	r0, r6
 8003484:	4639      	mov	r1, r7
 8003486:	ec59 8b10 	vmov	r8, r9, d0
 800348a:	f7ff f811 	bl	80024b0 <__aeabi_dmul>
 800348e:	a31e      	add	r3, pc, #120	; (adr r3, 8003508 <__ieee754_log10+0x110>)
 8003490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003494:	4604      	mov	r4, r0
 8003496:	460d      	mov	r5, r1
 8003498:	4640      	mov	r0, r8
 800349a:	4649      	mov	r1, r9
 800349c:	f7ff f808 	bl	80024b0 <__aeabi_dmul>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4620      	mov	r0, r4
 80034a6:	4629      	mov	r1, r5
 80034a8:	f7fe fe4c 	bl	8002144 <__adddf3>
 80034ac:	a318      	add	r3, pc, #96	; (adr r3, 8003510 <__ieee754_log10+0x118>)
 80034ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034b2:	4604      	mov	r4, r0
 80034b4:	460d      	mov	r5, r1
 80034b6:	4630      	mov	r0, r6
 80034b8:	4639      	mov	r1, r7
 80034ba:	f7fe fff9 	bl	80024b0 <__aeabi_dmul>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4620      	mov	r0, r4
 80034c4:	4629      	mov	r1, r5
 80034c6:	f7fe fe3d 	bl	8002144 <__adddf3>
 80034ca:	ec41 0b10 	vmov	d0, r0, r1
 80034ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034d2:	2200      	movs	r2, #0
 80034d4:	2300      	movs	r3, #0
 80034d6:	4912      	ldr	r1, [pc, #72]	; (8003520 <__ieee754_log10+0x128>)
 80034d8:	2000      	movs	r0, #0
 80034da:	f7ff f913 	bl	8002704 <__aeabi_ddiv>
 80034de:	ec41 0b10 	vmov	d0, r0, r1
 80034e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80034e6:	ee10 2a10 	vmov	r2, s0
 80034ea:	4620      	mov	r0, r4
 80034ec:	4629      	mov	r1, r5
 80034ee:	f7fe fe27 	bl	8002140 <__aeabi_dsub>
 80034f2:	2200      	movs	r2, #0
 80034f4:	2300      	movs	r3, #0
 80034f6:	f7ff f905 	bl	8002704 <__aeabi_ddiv>
 80034fa:	ec41 0b10 	vmov	d0, r0, r1
 80034fe:	e7a0      	b.n	8003442 <__ieee754_log10+0x4a>
 8003500:	11f12b36 	.word	0x11f12b36
 8003504:	3d59fef3 	.word	0x3d59fef3
 8003508:	1526e50e 	.word	0x1526e50e
 800350c:	3fdbcb7b 	.word	0x3fdbcb7b
 8003510:	509f6000 	.word	0x509f6000
 8003514:	3fd34413 	.word	0x3fd34413
 8003518:	43500000 	.word	0x43500000
 800351c:	7fefffff 	.word	0x7fefffff
 8003520:	c3500000 	.word	0xc3500000
 8003524:	00000000 	.word	0x00000000

08003528 <__ieee754_pow>:
 8003528:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800352c:	ec57 6b11 	vmov	r6, r7, d1
 8003530:	ed2d 8b0a 	vpush	{d8-d12}
 8003534:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
 8003538:	ea5a 0206 	orrs.w	r2, sl, r6
 800353c:	b089      	sub	sp, #36	; 0x24
 800353e:	d03d      	beq.n	80035bc <__ieee754_pow+0x94>
 8003540:	ec55 4b10 	vmov	r4, r5, d0
 8003544:	4976      	ldr	r1, [pc, #472]	; (8003720 <__ieee754_pow+0x1f8>)
 8003546:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 800354a:	4588      	cmp	r8, r1
 800354c:	ee10 2a10 	vmov	r2, s0
 8003550:	46a9      	mov	r9, r5
 8003552:	dc2c      	bgt.n	80035ae <__ieee754_pow+0x86>
 8003554:	ee11 3a10 	vmov	r3, s2
 8003558:	46bb      	mov	fp, r7
 800355a:	d03a      	beq.n	80035d2 <__ieee754_pow+0xaa>
 800355c:	458a      	cmp	sl, r1
 800355e:	dc26      	bgt.n	80035ae <__ieee754_pow+0x86>
 8003560:	496f      	ldr	r1, [pc, #444]	; (8003720 <__ieee754_pow+0x1f8>)
 8003562:	458a      	cmp	sl, r1
 8003564:	d021      	beq.n	80035aa <__ieee754_pow+0x82>
 8003566:	f1b9 0f00 	cmp.w	r9, #0
 800356a:	db3d      	blt.n	80035e8 <__ieee754_pow+0xc0>
 800356c:	2100      	movs	r1, #0
 800356e:	9103      	str	r1, [sp, #12]
 8003570:	2b00      	cmp	r3, #0
 8003572:	d155      	bne.n	8003620 <__ieee754_pow+0xf8>
 8003574:	4b6a      	ldr	r3, [pc, #424]	; (8003720 <__ieee754_pow+0x1f8>)
 8003576:	459a      	cmp	sl, r3
 8003578:	f000 80a8 	beq.w	80036cc <__ieee754_pow+0x1a4>
 800357c:	4b69      	ldr	r3, [pc, #420]	; (8003724 <__ieee754_pow+0x1fc>)
 800357e:	459a      	cmp	sl, r3
 8003580:	f000 80b6 	beq.w	80036f0 <__ieee754_pow+0x1c8>
 8003584:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
 8003588:	f000 8501 	beq.w	8003f8e <__ieee754_pow+0xa66>
 800358c:	4b66      	ldr	r3, [pc, #408]	; (8003728 <__ieee754_pow+0x200>)
 800358e:	459b      	cmp	fp, r3
 8003590:	d146      	bne.n	8003620 <__ieee754_pow+0xf8>
 8003592:	f1b9 0f00 	cmp.w	r9, #0
 8003596:	db43      	blt.n	8003620 <__ieee754_pow+0xf8>
 8003598:	ec45 4b10 	vmov	d0, r4, r5
 800359c:	b009      	add	sp, #36	; 0x24
 800359e:	ecbd 8b0a 	vpop	{d8-d12}
 80035a2:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035a6:	f000 bd99 	b.w	80040dc <__ieee754_sqrt>
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0db      	beq.n	8003566 <__ieee754_pow+0x3e>
 80035ae:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 80035b2:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 80035b6:	ea58 0302 	orrs.w	r3, r8, r2
 80035ba:	d10d      	bne.n	80035d8 <__ieee754_pow+0xb0>
 80035bc:	ed9f 7b54 	vldr	d7, [pc, #336]	; 8003710 <__ieee754_pow+0x1e8>
 80035c0:	ed8d 7b00 	vstr	d7, [sp]
 80035c4:	ed9d 0b00 	vldr	d0, [sp]
 80035c8:	b009      	add	sp, #36	; 0x24
 80035ca:	ecbd 8b0a 	vpop	{d8-d12}
 80035ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80035d2:	b90c      	cbnz	r4, 80035d8 <__ieee754_pow+0xb0>
 80035d4:	45c2      	cmp	sl, r8
 80035d6:	ddc3      	ble.n	8003560 <__ieee754_pow+0x38>
 80035d8:	4854      	ldr	r0, [pc, #336]	; (800372c <__ieee754_pow+0x204>)
 80035da:	b009      	add	sp, #36	; 0x24
 80035dc:	ecbd 8b0a 	vpop	{d8-d12}
 80035e0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80035e4:	f001 b958 	b.w	8004898 <nan>
 80035e8:	4951      	ldr	r1, [pc, #324]	; (8003730 <__ieee754_pow+0x208>)
 80035ea:	458a      	cmp	sl, r1
 80035ec:	f300 8087 	bgt.w	80036fe <__ieee754_pow+0x1d6>
 80035f0:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80035f4:	458a      	cmp	sl, r1
 80035f6:	dd0f      	ble.n	8003618 <__ieee754_pow+0xf0>
 80035f8:	ea4f 512a 	mov.w	r1, sl, asr #20
 80035fc:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8003600:	2914      	cmp	r1, #20
 8003602:	f340 84ce 	ble.w	8003fa2 <__ieee754_pow+0xa7a>
 8003606:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800360a:	fa23 f001 	lsr.w	r0, r3, r1
 800360e:	fa00 f101 	lsl.w	r1, r0, r1
 8003612:	4299      	cmp	r1, r3
 8003614:	f000 8520 	beq.w	8004058 <__ieee754_pow+0xb30>
 8003618:	2100      	movs	r1, #0
 800361a:	9103      	str	r1, [sp, #12]
 800361c:	2b00      	cmp	r3, #0
 800361e:	d0ad      	beq.n	800357c <__ieee754_pow+0x54>
 8003620:	ec45 4b10 	vmov	d0, r4, r5
 8003624:	9206      	str	r2, [sp, #24]
 8003626:	f001 f921 	bl	800486c <fabs>
 800362a:	9a06      	ldr	r2, [sp, #24]
 800362c:	ed8d 0b00 	vstr	d0, [sp]
 8003630:	bb5a      	cbnz	r2, 800368a <__ieee754_pow+0x162>
 8003632:	f1b8 0f00 	cmp.w	r8, #0
 8003636:	d004      	beq.n	8003642 <__ieee754_pow+0x11a>
 8003638:	4b3a      	ldr	r3, [pc, #232]	; (8003724 <__ieee754_pow+0x1fc>)
 800363a:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
 800363e:	429a      	cmp	r2, r3
 8003640:	d123      	bne.n	800368a <__ieee754_pow+0x162>
 8003642:	f1bb 0f00 	cmp.w	fp, #0
 8003646:	da07      	bge.n	8003658 <__ieee754_pow+0x130>
 8003648:	e9dd 2300 	ldrd	r2, r3, [sp]
 800364c:	4935      	ldr	r1, [pc, #212]	; (8003724 <__ieee754_pow+0x1fc>)
 800364e:	2000      	movs	r0, #0
 8003650:	f7ff f858 	bl	8002704 <__aeabi_ddiv>
 8003654:	e9cd 0100 	strd	r0, r1, [sp]
 8003658:	f1b9 0f00 	cmp.w	r9, #0
 800365c:	dab2      	bge.n	80035c4 <__ieee754_pow+0x9c>
 800365e:	9b03      	ldr	r3, [sp, #12]
 8003660:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
 8003664:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
 8003668:	ea58 0303 	orrs.w	r3, r8, r3
 800366c:	f040 84be 	bne.w	8003fec <__ieee754_pow+0xac4>
 8003670:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003674:	4610      	mov	r0, r2
 8003676:	4619      	mov	r1, r3
 8003678:	f7fe fd62 	bl	8002140 <__aeabi_dsub>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	f7ff f840 	bl	8002704 <__aeabi_ddiv>
 8003684:	e9cd 0100 	strd	r0, r1, [sp]
 8003688:	e79c      	b.n	80035c4 <__ieee754_pow+0x9c>
 800368a:	9a03      	ldr	r2, [sp, #12]
 800368c:	ea4f 73d9 	mov.w	r3, r9, lsr #31
 8003690:	3b01      	subs	r3, #1
 8003692:	9306      	str	r3, [sp, #24]
 8003694:	4313      	orrs	r3, r2
 8003696:	d035      	beq.n	8003704 <__ieee754_pow+0x1dc>
 8003698:	4b26      	ldr	r3, [pc, #152]	; (8003734 <__ieee754_pow+0x20c>)
 800369a:	459a      	cmp	sl, r3
 800369c:	dd4e      	ble.n	800373c <__ieee754_pow+0x214>
 800369e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80036a2:	459a      	cmp	sl, r3
 80036a4:	4b24      	ldr	r3, [pc, #144]	; (8003738 <__ieee754_pow+0x210>)
 80036a6:	f340 83ed 	ble.w	8003e84 <__ieee754_pow+0x95c>
 80036aa:	4598      	cmp	r8, r3
 80036ac:	f340 836b 	ble.w	8003d86 <__ieee754_pow+0x85e>
 80036b0:	f1bb 0f00 	cmp.w	fp, #0
 80036b4:	f340 836b 	ble.w	8003d8e <__ieee754_pow+0x866>
 80036b8:	a317      	add	r3, pc, #92	; (adr r3, 8003718 <__ieee754_pow+0x1f0>)
 80036ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036be:	4610      	mov	r0, r2
 80036c0:	4619      	mov	r1, r3
 80036c2:	f7fe fef5 	bl	80024b0 <__aeabi_dmul>
 80036c6:	e9cd 0100 	strd	r0, r1, [sp]
 80036ca:	e77b      	b.n	80035c4 <__ieee754_pow+0x9c>
 80036cc:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
 80036d0:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80036d4:	4313      	orrs	r3, r2
 80036d6:	f43f af71 	beq.w	80035bc <__ieee754_pow+0x94>
 80036da:	4b17      	ldr	r3, [pc, #92]	; (8003738 <__ieee754_pow+0x210>)
 80036dc:	4598      	cmp	r8, r3
 80036de:	f340 8388 	ble.w	8003df2 <__ieee754_pow+0x8ca>
 80036e2:	f1bb 0f00 	cmp.w	fp, #0
 80036e6:	f2c0 8352 	blt.w	8003d8e <__ieee754_pow+0x866>
 80036ea:	e9cd 6700 	strd	r6, r7, [sp]
 80036ee:	e769      	b.n	80035c4 <__ieee754_pow+0x9c>
 80036f0:	f1bb 0f00 	cmp.w	fp, #0
 80036f4:	f2c0 8441 	blt.w	8003f7a <__ieee754_pow+0xa52>
 80036f8:	e9cd 4500 	strd	r4, r5, [sp]
 80036fc:	e762      	b.n	80035c4 <__ieee754_pow+0x9c>
 80036fe:	2102      	movs	r1, #2
 8003700:	9103      	str	r1, [sp, #12]
 8003702:	e735      	b.n	8003570 <__ieee754_pow+0x48>
 8003704:	4622      	mov	r2, r4
 8003706:	462b      	mov	r3, r5
 8003708:	e7b4      	b.n	8003674 <__ieee754_pow+0x14c>
 800370a:	bf00      	nop
 800370c:	f3af 8000 	nop.w
 8003710:	00000000 	.word	0x00000000
 8003714:	3ff00000 	.word	0x3ff00000
 8003718:	8800759c 	.word	0x8800759c
 800371c:	7e37e43c 	.word	0x7e37e43c
 8003720:	7ff00000 	.word	0x7ff00000
 8003724:	3ff00000 	.word	0x3ff00000
 8003728:	3fe00000 	.word	0x3fe00000
 800372c:	08000414 	.word	0x08000414
 8003730:	433fffff 	.word	0x433fffff
 8003734:	41e00000 	.word	0x41e00000
 8003738:	3fefffff 	.word	0x3fefffff
 800373c:	4be4      	ldr	r3, [pc, #912]	; (8003ad0 <__ieee754_pow+0x5a8>)
 800373e:	ea09 0303 	and.w	r3, r9, r3
 8003742:	2b00      	cmp	r3, #0
 8003744:	f040 8416 	bne.w	8003f74 <__ieee754_pow+0xa4c>
 8003748:	e9dd 0100 	ldrd	r0, r1, [sp]
 800374c:	4be1      	ldr	r3, [pc, #900]	; (8003ad4 <__ieee754_pow+0x5ac>)
 800374e:	2200      	movs	r2, #0
 8003750:	f7fe feae 	bl	80024b0 <__aeabi_dmul>
 8003754:	e9cd 0100 	strd	r0, r1, [sp]
 8003758:	f8dd 8004 	ldr.w	r8, [sp, #4]
 800375c:	f06f 0034 	mvn.w	r0, #52	; 0x34
 8003760:	ea4f 5328 	mov.w	r3, r8, asr #20
 8003764:	49dc      	ldr	r1, [pc, #880]	; (8003ad8 <__ieee754_pow+0x5b0>)
 8003766:	f3c8 0213 	ubfx	r2, r8, #0, #20
 800376a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800376e:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
 8003772:	1818      	adds	r0, r3, r0
 8003774:	428a      	cmp	r2, r1
 8003776:	9007      	str	r0, [sp, #28]
 8003778:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
 800377c:	f340 83e9 	ble.w	8003f52 <__ieee754_pow+0xa2a>
 8003780:	4bd6      	ldr	r3, [pc, #856]	; (8003adc <__ieee754_pow+0x5b4>)
 8003782:	429a      	cmp	r2, r3
 8003784:	f340 843e 	ble.w	8004004 <__ieee754_pow+0xadc>
 8003788:	ed9f 7bbb 	vldr	d7, [pc, #748]	; 8003a78 <__ieee754_pow+0x550>
 800378c:	eeb0 ba47 	vmov.f32	s22, s14
 8003790:	eef0 ba67 	vmov.f32	s23, s15
 8003794:	eeb0 ca47 	vmov.f32	s24, s14
 8003798:	eef0 ca67 	vmov.f32	s25, s15
 800379c:	ed9f 7bb8 	vldr	d7, [pc, #736]	; 8003a80 <__ieee754_pow+0x558>
 80037a0:	3001      	adds	r0, #1
 80037a2:	ec54 3b17 	vmov	r3, r4, d7
 80037a6:	9007      	str	r0, [sp, #28]
 80037a8:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
 80037ac:	f04f 0900 	mov.w	r9, #0
 80037b0:	e9dd ab00 	ldrd	sl, fp, [sp]
 80037b4:	ec44 3b18 	vmov	d8, r3, r4
 80037b8:	461a      	mov	r2, r3
 80037ba:	4650      	mov	r0, sl
 80037bc:	4623      	mov	r3, r4
 80037be:	4641      	mov	r1, r8
 80037c0:	f7fe fcbe 	bl	8002140 <__aeabi_dsub>
 80037c4:	ec53 2b18 	vmov	r2, r3, d8
 80037c8:	4604      	mov	r4, r0
 80037ca:	460d      	mov	r5, r1
 80037cc:	4650      	mov	r0, sl
 80037ce:	4641      	mov	r1, r8
 80037d0:	f7fe fcb8 	bl	8002144 <__adddf3>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	2000      	movs	r0, #0
 80037da:	49c1      	ldr	r1, [pc, #772]	; (8003ae0 <__ieee754_pow+0x5b8>)
 80037dc:	f7fe ff92 	bl	8002704 <__aeabi_ddiv>
 80037e0:	ec45 4b1a 	vmov	d10, r4, r5
 80037e4:	ec41 0b19 	vmov	d9, r0, r1
 80037e8:	ec51 0b1a 	vmov	r0, r1, d10
 80037ec:	ec53 2b19 	vmov	r2, r3, d9
 80037f0:	f7fe fe5e 	bl	80024b0 <__aeabi_dmul>
 80037f4:	46c3      	mov	fp, r8
 80037f6:	ea4f 0868 	mov.w	r8, r8, asr #1
 80037fa:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
 80037fe:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
 8003802:	eb03 0509 	add.w	r5, r3, r9
 8003806:	460a      	mov	r2, r1
 8003808:	2300      	movs	r3, #0
 800380a:	4601      	mov	r1, r0
 800380c:	e9cd 1200 	strd	r1, r2, [sp]
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	e9dd 8900 	ldrd	r8, r9, [sp]
 8003816:	2400      	movs	r4, #0
 8003818:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800381c:	462b      	mov	r3, r5
 800381e:	4622      	mov	r2, r4
 8003820:	4640      	mov	r0, r8
 8003822:	4649      	mov	r1, r9
 8003824:	f7fe fe44 	bl	80024b0 <__aeabi_dmul>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	ec51 0b1a 	vmov	r0, r1, d10
 8003830:	f7fe fc86 	bl	8002140 <__aeabi_dsub>
 8003834:	ec41 0b17 	vmov	d7, r0, r1
 8003838:	ec53 2b18 	vmov	r2, r3, d8
 800383c:	4620      	mov	r0, r4
 800383e:	4629      	mov	r1, r5
 8003840:	ec55 4b17 	vmov	r4, r5, d7
 8003844:	f7fe fc7c 	bl	8002140 <__aeabi_dsub>
 8003848:	4602      	mov	r2, r0
 800384a:	460b      	mov	r3, r1
 800384c:	4650      	mov	r0, sl
 800384e:	4659      	mov	r1, fp
 8003850:	f7fe fc76 	bl	8002140 <__aeabi_dsub>
 8003854:	4642      	mov	r2, r8
 8003856:	464b      	mov	r3, r9
 8003858:	f7fe fe2a 	bl	80024b0 <__aeabi_dmul>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4620      	mov	r0, r4
 8003862:	4629      	mov	r1, r5
 8003864:	f7fe fc6c 	bl	8002140 <__aeabi_dsub>
 8003868:	ec53 2b19 	vmov	r2, r3, d9
 800386c:	f7fe fe20 	bl	80024b0 <__aeabi_dmul>
 8003870:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
 8003874:	4604      	mov	r4, r0
 8003876:	460d      	mov	r5, r1
 8003878:	4652      	mov	r2, sl
 800387a:	465b      	mov	r3, fp
 800387c:	4650      	mov	r0, sl
 800387e:	4659      	mov	r1, fp
 8003880:	f7fe fe16 	bl	80024b0 <__aeabi_dmul>
 8003884:	a380      	add	r3, pc, #512	; (adr r3, 8003a88 <__ieee754_pow+0x560>)
 8003886:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388a:	ec45 4b1a 	vmov	d10, r4, r5
 800388e:	4604      	mov	r4, r0
 8003890:	460d      	mov	r5, r1
 8003892:	f7fe fe0d 	bl	80024b0 <__aeabi_dmul>
 8003896:	a37e      	add	r3, pc, #504	; (adr r3, 8003a90 <__ieee754_pow+0x568>)
 8003898:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389c:	f7fe fc52 	bl	8002144 <__adddf3>
 80038a0:	4622      	mov	r2, r4
 80038a2:	462b      	mov	r3, r5
 80038a4:	f7fe fe04 	bl	80024b0 <__aeabi_dmul>
 80038a8:	a37b      	add	r3, pc, #492	; (adr r3, 8003a98 <__ieee754_pow+0x570>)
 80038aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038ae:	f7fe fc49 	bl	8002144 <__adddf3>
 80038b2:	4622      	mov	r2, r4
 80038b4:	462b      	mov	r3, r5
 80038b6:	f7fe fdfb 	bl	80024b0 <__aeabi_dmul>
 80038ba:	a379      	add	r3, pc, #484	; (adr r3, 8003aa0 <__ieee754_pow+0x578>)
 80038bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038c0:	f7fe fc40 	bl	8002144 <__adddf3>
 80038c4:	4622      	mov	r2, r4
 80038c6:	462b      	mov	r3, r5
 80038c8:	f7fe fdf2 	bl	80024b0 <__aeabi_dmul>
 80038cc:	a376      	add	r3, pc, #472	; (adr r3, 8003aa8 <__ieee754_pow+0x580>)
 80038ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d2:	f7fe fc37 	bl	8002144 <__adddf3>
 80038d6:	4622      	mov	r2, r4
 80038d8:	462b      	mov	r3, r5
 80038da:	f7fe fde9 	bl	80024b0 <__aeabi_dmul>
 80038de:	a374      	add	r3, pc, #464	; (adr r3, 8003ab0 <__ieee754_pow+0x588>)
 80038e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038e4:	f7fe fc2e 	bl	8002144 <__adddf3>
 80038e8:	4622      	mov	r2, r4
 80038ea:	462b      	mov	r3, r5
 80038ec:	4604      	mov	r4, r0
 80038ee:	460d      	mov	r5, r1
 80038f0:	4610      	mov	r0, r2
 80038f2:	4619      	mov	r1, r3
 80038f4:	f7fe fddc 	bl	80024b0 <__aeabi_dmul>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4620      	mov	r0, r4
 80038fe:	4629      	mov	r1, r5
 8003900:	f7fe fdd6 	bl	80024b0 <__aeabi_dmul>
 8003904:	4642      	mov	r2, r8
 8003906:	4604      	mov	r4, r0
 8003908:	460d      	mov	r5, r1
 800390a:	464b      	mov	r3, r9
 800390c:	4650      	mov	r0, sl
 800390e:	4659      	mov	r1, fp
 8003910:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003914:	f7fe fc16 	bl	8002144 <__adddf3>
 8003918:	ec53 2b1a 	vmov	r2, r3, d10
 800391c:	f7fe fdc8 	bl	80024b0 <__aeabi_dmul>
 8003920:	4622      	mov	r2, r4
 8003922:	462b      	mov	r3, r5
 8003924:	f7fe fc0e 	bl	8002144 <__adddf3>
 8003928:	4642      	mov	r2, r8
 800392a:	4604      	mov	r4, r0
 800392c:	460d      	mov	r5, r1
 800392e:	464b      	mov	r3, r9
 8003930:	4640      	mov	r0, r8
 8003932:	4649      	mov	r1, r9
 8003934:	f7fe fdbc 	bl	80024b0 <__aeabi_dmul>
 8003938:	ec45 4b19 	vmov	d9, r4, r5
 800393c:	4b69      	ldr	r3, [pc, #420]	; (8003ae4 <__ieee754_pow+0x5bc>)
 800393e:	2200      	movs	r2, #0
 8003940:	4682      	mov	sl, r0
 8003942:	468b      	mov	fp, r1
 8003944:	f7fe fbfe 	bl	8002144 <__adddf3>
 8003948:	ec53 2b19 	vmov	r2, r3, d9
 800394c:	f7fe fbfa 	bl	8002144 <__adddf3>
 8003950:	9c00      	ldr	r4, [sp, #0]
 8003952:	460d      	mov	r5, r1
 8003954:	4622      	mov	r2, r4
 8003956:	462b      	mov	r3, r5
 8003958:	4640      	mov	r0, r8
 800395a:	4649      	mov	r1, r9
 800395c:	f7fe fda8 	bl	80024b0 <__aeabi_dmul>
 8003960:	4b60      	ldr	r3, [pc, #384]	; (8003ae4 <__ieee754_pow+0x5bc>)
 8003962:	4680      	mov	r8, r0
 8003964:	4689      	mov	r9, r1
 8003966:	2200      	movs	r2, #0
 8003968:	4620      	mov	r0, r4
 800396a:	4629      	mov	r1, r5
 800396c:	f7fe fbe8 	bl	8002140 <__aeabi_dsub>
 8003970:	4652      	mov	r2, sl
 8003972:	465b      	mov	r3, fp
 8003974:	f7fe fbe4 	bl	8002140 <__aeabi_dsub>
 8003978:	4602      	mov	r2, r0
 800397a:	460b      	mov	r3, r1
 800397c:	ec51 0b19 	vmov	r0, r1, d9
 8003980:	f7fe fbde 	bl	8002140 <__aeabi_dsub>
 8003984:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003988:	f7fe fd92 	bl	80024b0 <__aeabi_dmul>
 800398c:	ec49 8b18 	vmov	d8, r8, r9
 8003990:	4622      	mov	r2, r4
 8003992:	4680      	mov	r8, r0
 8003994:	4689      	mov	r9, r1
 8003996:	462b      	mov	r3, r5
 8003998:	ec51 0b1a 	vmov	r0, r1, d10
 800399c:	f7fe fd88 	bl	80024b0 <__aeabi_dmul>
 80039a0:	4602      	mov	r2, r0
 80039a2:	460b      	mov	r3, r1
 80039a4:	4640      	mov	r0, r8
 80039a6:	4649      	mov	r1, r9
 80039a8:	f7fe fbcc 	bl	8002144 <__adddf3>
 80039ac:	4682      	mov	sl, r0
 80039ae:	468b      	mov	fp, r1
 80039b0:	4652      	mov	r2, sl
 80039b2:	465b      	mov	r3, fp
 80039b4:	ec51 0b18 	vmov	r0, r1, d8
 80039b8:	f7fe fbc4 	bl	8002144 <__adddf3>
 80039bc:	9c00      	ldr	r4, [sp, #0]
 80039be:	a33e      	add	r3, pc, #248	; (adr r3, 8003ab8 <__ieee754_pow+0x590>)
 80039c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039c4:	4620      	mov	r0, r4
 80039c6:	460d      	mov	r5, r1
 80039c8:	f7fe fd72 	bl	80024b0 <__aeabi_dmul>
 80039cc:	ec53 2b18 	vmov	r2, r3, d8
 80039d0:	4680      	mov	r8, r0
 80039d2:	4689      	mov	r9, r1
 80039d4:	4620      	mov	r0, r4
 80039d6:	4629      	mov	r1, r5
 80039d8:	f7fe fbb2 	bl	8002140 <__aeabi_dsub>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4650      	mov	r0, sl
 80039e2:	4659      	mov	r1, fp
 80039e4:	f7fe fbac 	bl	8002140 <__aeabi_dsub>
 80039e8:	a335      	add	r3, pc, #212	; (adr r3, 8003ac0 <__ieee754_pow+0x598>)
 80039ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ee:	f7fe fd5f 	bl	80024b0 <__aeabi_dmul>
 80039f2:	ec49 8b19 	vmov	d9, r8, r9
 80039f6:	a334      	add	r3, pc, #208	; (adr r3, 8003ac8 <__ieee754_pow+0x5a0>)
 80039f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039fc:	4680      	mov	r8, r0
 80039fe:	4689      	mov	r9, r1
 8003a00:	4620      	mov	r0, r4
 8003a02:	4629      	mov	r1, r5
 8003a04:	f7fe fd54 	bl	80024b0 <__aeabi_dmul>
 8003a08:	4602      	mov	r2, r0
 8003a0a:	460b      	mov	r3, r1
 8003a0c:	4640      	mov	r0, r8
 8003a0e:	4649      	mov	r1, r9
 8003a10:	f7fe fb98 	bl	8002144 <__adddf3>
 8003a14:	ec53 2b1c 	vmov	r2, r3, d12
 8003a18:	f7fe fb94 	bl	8002144 <__adddf3>
 8003a1c:	4682      	mov	sl, r0
 8003a1e:	9807      	ldr	r0, [sp, #28]
 8003a20:	468b      	mov	fp, r1
 8003a22:	f7fe fcdb 	bl	80023dc <__aeabi_i2d>
 8003a26:	4652      	mov	r2, sl
 8003a28:	4680      	mov	r8, r0
 8003a2a:	4689      	mov	r9, r1
 8003a2c:	465b      	mov	r3, fp
 8003a2e:	ec51 0b19 	vmov	r0, r1, d9
 8003a32:	f7fe fb87 	bl	8002144 <__adddf3>
 8003a36:	ec53 2b1b 	vmov	r2, r3, d11
 8003a3a:	f7fe fb83 	bl	8002144 <__adddf3>
 8003a3e:	4642      	mov	r2, r8
 8003a40:	464b      	mov	r3, r9
 8003a42:	f7fe fb7f 	bl	8002144 <__adddf3>
 8003a46:	9c00      	ldr	r4, [sp, #0]
 8003a48:	4642      	mov	r2, r8
 8003a4a:	464b      	mov	r3, r9
 8003a4c:	4620      	mov	r0, r4
 8003a4e:	460d      	mov	r5, r1
 8003a50:	f7fe fb76 	bl	8002140 <__aeabi_dsub>
 8003a54:	ec53 2b1b 	vmov	r2, r3, d11
 8003a58:	f7fe fb72 	bl	8002140 <__aeabi_dsub>
 8003a5c:	ec53 2b19 	vmov	r2, r3, d9
 8003a60:	f7fe fb6e 	bl	8002140 <__aeabi_dsub>
 8003a64:	4602      	mov	r2, r0
 8003a66:	460b      	mov	r3, r1
 8003a68:	4650      	mov	r0, sl
 8003a6a:	4659      	mov	r1, fp
 8003a6c:	f7fe fb68 	bl	8002140 <__aeabi_dsub>
 8003a70:	4682      	mov	sl, r0
 8003a72:	468b      	mov	fp, r1
 8003a74:	e038      	b.n	8003ae8 <__ieee754_pow+0x5c0>
 8003a76:	bf00      	nop
	...
 8003a84:	3ff00000 	.word	0x3ff00000
 8003a88:	4a454eef 	.word	0x4a454eef
 8003a8c:	3fca7e28 	.word	0x3fca7e28
 8003a90:	93c9db65 	.word	0x93c9db65
 8003a94:	3fcd864a 	.word	0x3fcd864a
 8003a98:	a91d4101 	.word	0xa91d4101
 8003a9c:	3fd17460 	.word	0x3fd17460
 8003aa0:	518f264d 	.word	0x518f264d
 8003aa4:	3fd55555 	.word	0x3fd55555
 8003aa8:	db6fabff 	.word	0xdb6fabff
 8003aac:	3fdb6db6 	.word	0x3fdb6db6
 8003ab0:	33333303 	.word	0x33333303
 8003ab4:	3fe33333 	.word	0x3fe33333
 8003ab8:	e0000000 	.word	0xe0000000
 8003abc:	3feec709 	.word	0x3feec709
 8003ac0:	dc3a03fd 	.word	0xdc3a03fd
 8003ac4:	3feec709 	.word	0x3feec709
 8003ac8:	145b01f5 	.word	0x145b01f5
 8003acc:	be3e2fe0 	.word	0xbe3e2fe0
 8003ad0:	7ff00000 	.word	0x7ff00000
 8003ad4:	43400000 	.word	0x43400000
 8003ad8:	0003988e 	.word	0x0003988e
 8003adc:	000bb679 	.word	0x000bb679
 8003ae0:	3ff00000 	.word	0x3ff00000
 8003ae4:	40080000 	.word	0x40080000
 8003ae8:	9b03      	ldr	r3, [sp, #12]
 8003aea:	9a06      	ldr	r2, [sp, #24]
 8003aec:	3b01      	subs	r3, #1
 8003aee:	4313      	orrs	r3, r2
 8003af0:	f040 8178 	bne.w	8003de4 <__ieee754_pow+0x8bc>
 8003af4:	ed9f 7bc4 	vldr	d7, [pc, #784]	; 8003e08 <__ieee754_pow+0x8e0>
 8003af8:	eeb0 9a47 	vmov.f32	s18, s14
 8003afc:	eef0 9a67 	vmov.f32	s19, s15
 8003b00:	2300      	movs	r3, #0
 8003b02:	e9cd 6700 	strd	r6, r7, [sp]
 8003b06:	9300      	str	r3, [sp, #0]
 8003b08:	e9dd 8900 	ldrd	r8, r9, [sp]
 8003b0c:	4630      	mov	r0, r6
 8003b0e:	4642      	mov	r2, r8
 8003b10:	4639      	mov	r1, r7
 8003b12:	464b      	mov	r3, r9
 8003b14:	f7fe fb14 	bl	8002140 <__aeabi_dsub>
 8003b18:	4622      	mov	r2, r4
 8003b1a:	462b      	mov	r3, r5
 8003b1c:	f7fe fcc8 	bl	80024b0 <__aeabi_dmul>
 8003b20:	4632      	mov	r2, r6
 8003b22:	463b      	mov	r3, r7
 8003b24:	4606      	mov	r6, r0
 8003b26:	460f      	mov	r7, r1
 8003b28:	4650      	mov	r0, sl
 8003b2a:	4659      	mov	r1, fp
 8003b2c:	f7fe fcc0 	bl	80024b0 <__aeabi_dmul>
 8003b30:	4602      	mov	r2, r0
 8003b32:	460b      	mov	r3, r1
 8003b34:	4630      	mov	r0, r6
 8003b36:	4639      	mov	r1, r7
 8003b38:	f7fe fb04 	bl	8002144 <__adddf3>
 8003b3c:	4642      	mov	r2, r8
 8003b3e:	4682      	mov	sl, r0
 8003b40:	468b      	mov	fp, r1
 8003b42:	464b      	mov	r3, r9
 8003b44:	4620      	mov	r0, r4
 8003b46:	4629      	mov	r1, r5
 8003b48:	f7fe fcb2 	bl	80024b0 <__aeabi_dmul>
 8003b4c:	4606      	mov	r6, r0
 8003b4e:	460f      	mov	r7, r1
 8003b50:	463b      	mov	r3, r7
 8003b52:	4650      	mov	r0, sl
 8003b54:	4659      	mov	r1, fp
 8003b56:	4632      	mov	r2, r6
 8003b58:	f7fe faf4 	bl	8002144 <__adddf3>
 8003b5c:	4bc4      	ldr	r3, [pc, #784]	; (8003e70 <__ieee754_pow+0x948>)
 8003b5e:	4299      	cmp	r1, r3
 8003b60:	4604      	mov	r4, r0
 8003b62:	460d      	mov	r5, r1
 8003b64:	4688      	mov	r8, r1
 8003b66:	f340 8117 	ble.w	8003d98 <__ieee754_pow+0x870>
 8003b6a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8003b6e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8003b72:	4303      	orrs	r3, r0
 8003b74:	f040 822a 	bne.w	8003fcc <__ieee754_pow+0xaa4>
 8003b78:	a3a5      	add	r3, pc, #660	; (adr r3, 8003e10 <__ieee754_pow+0x8e8>)
 8003b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b7e:	4650      	mov	r0, sl
 8003b80:	4659      	mov	r1, fp
 8003b82:	f7fe fadf 	bl	8002144 <__adddf3>
 8003b86:	4632      	mov	r2, r6
 8003b88:	ec41 0b18 	vmov	d8, r0, r1
 8003b8c:	463b      	mov	r3, r7
 8003b8e:	4620      	mov	r0, r4
 8003b90:	4629      	mov	r1, r5
 8003b92:	f7fe fad5 	bl	8002140 <__aeabi_dsub>
 8003b96:	4602      	mov	r2, r0
 8003b98:	460b      	mov	r3, r1
 8003b9a:	ec51 0b18 	vmov	r0, r1, d8
 8003b9e:	f7fe ff17 	bl	80029d0 <__aeabi_dcmpgt>
 8003ba2:	2800      	cmp	r0, #0
 8003ba4:	f040 8212 	bne.w	8003fcc <__ieee754_pow+0xaa4>
 8003ba8:	f3c8 530a 	ubfx	r3, r8, #20, #11
 8003bac:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8003bb0:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8003bb4:	fa42 f303 	asr.w	r3, r2, r3
 8003bb8:	4443      	add	r3, r8
 8003bba:	49ae      	ldr	r1, [pc, #696]	; (8003e74 <__ieee754_pow+0x94c>)
 8003bbc:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8003bc0:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8003bc4:	fa41 fc02 	asr.w	ip, r1, r2
 8003bc8:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8003bcc:	ea23 010c 	bic.w	r1, r3, ip
 8003bd0:	f1c2 0414 	rsb	r4, r2, #20
 8003bd4:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
 8003bd8:	f1b8 0f00 	cmp.w	r8, #0
 8003bdc:	460b      	mov	r3, r1
 8003bde:	fa45 f104 	asr.w	r1, r5, r4
 8003be2:	9103      	str	r1, [sp, #12]
 8003be4:	f04f 0000 	mov.w	r0, #0
 8003be8:	bfb8      	it	lt
 8003bea:	4249      	neglt	r1, r1
 8003bec:	4602      	mov	r2, r0
 8003bee:	bfb8      	it	lt
 8003bf0:	9103      	strlt	r1, [sp, #12]
 8003bf2:	4630      	mov	r0, r6
 8003bf4:	4639      	mov	r1, r7
 8003bf6:	f7fe faa3 	bl	8002140 <__aeabi_dsub>
 8003bfa:	4606      	mov	r6, r0
 8003bfc:	460f      	mov	r7, r1
 8003bfe:	463b      	mov	r3, r7
 8003c00:	4650      	mov	r0, sl
 8003c02:	4659      	mov	r1, fp
 8003c04:	4632      	mov	r2, r6
 8003c06:	f7fe fa9d 	bl	8002144 <__adddf3>
 8003c0a:	9b03      	ldr	r3, [sp, #12]
 8003c0c:	051b      	lsls	r3, r3, #20
 8003c0e:	9300      	str	r3, [sp, #0]
 8003c10:	460d      	mov	r5, r1
 8003c12:	2400      	movs	r4, #0
 8003c14:	a380      	add	r3, pc, #512	; (adr r3, 8003e18 <__ieee754_pow+0x8f0>)
 8003c16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1a:	4620      	mov	r0, r4
 8003c1c:	4629      	mov	r1, r5
 8003c1e:	f7fe fc47 	bl	80024b0 <__aeabi_dmul>
 8003c22:	4632      	mov	r2, r6
 8003c24:	4680      	mov	r8, r0
 8003c26:	4689      	mov	r9, r1
 8003c28:	463b      	mov	r3, r7
 8003c2a:	4620      	mov	r0, r4
 8003c2c:	4629      	mov	r1, r5
 8003c2e:	f7fe fa87 	bl	8002140 <__aeabi_dsub>
 8003c32:	4602      	mov	r2, r0
 8003c34:	460b      	mov	r3, r1
 8003c36:	4650      	mov	r0, sl
 8003c38:	4659      	mov	r1, fp
 8003c3a:	f7fe fa81 	bl	8002140 <__aeabi_dsub>
 8003c3e:	a378      	add	r3, pc, #480	; (adr r3, 8003e20 <__ieee754_pow+0x8f8>)
 8003c40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c44:	f7fe fc34 	bl	80024b0 <__aeabi_dmul>
 8003c48:	a377      	add	r3, pc, #476	; (adr r3, 8003e28 <__ieee754_pow+0x900>)
 8003c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4e:	4606      	mov	r6, r0
 8003c50:	460f      	mov	r7, r1
 8003c52:	4620      	mov	r0, r4
 8003c54:	4629      	mov	r1, r5
 8003c56:	f7fe fc2b 	bl	80024b0 <__aeabi_dmul>
 8003c5a:	4602      	mov	r2, r0
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	4630      	mov	r0, r6
 8003c60:	4639      	mov	r1, r7
 8003c62:	f7fe fa6f 	bl	8002144 <__adddf3>
 8003c66:	4606      	mov	r6, r0
 8003c68:	460f      	mov	r7, r1
 8003c6a:	4632      	mov	r2, r6
 8003c6c:	463b      	mov	r3, r7
 8003c6e:	4640      	mov	r0, r8
 8003c70:	4649      	mov	r1, r9
 8003c72:	f7fe fa67 	bl	8002144 <__adddf3>
 8003c76:	4642      	mov	r2, r8
 8003c78:	464b      	mov	r3, r9
 8003c7a:	4604      	mov	r4, r0
 8003c7c:	460d      	mov	r5, r1
 8003c7e:	f7fe fa5f 	bl	8002140 <__aeabi_dsub>
 8003c82:	4602      	mov	r2, r0
 8003c84:	460b      	mov	r3, r1
 8003c86:	4630      	mov	r0, r6
 8003c88:	4639      	mov	r1, r7
 8003c8a:	f7fe fa59 	bl	8002140 <__aeabi_dsub>
 8003c8e:	4622      	mov	r2, r4
 8003c90:	4682      	mov	sl, r0
 8003c92:	468b      	mov	fp, r1
 8003c94:	462b      	mov	r3, r5
 8003c96:	4620      	mov	r0, r4
 8003c98:	4629      	mov	r1, r5
 8003c9a:	f7fe fc09 	bl	80024b0 <__aeabi_dmul>
 8003c9e:	a364      	add	r3, pc, #400	; (adr r3, 8003e30 <__ieee754_pow+0x908>)
 8003ca0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ca4:	4606      	mov	r6, r0
 8003ca6:	460f      	mov	r7, r1
 8003ca8:	f7fe fc02 	bl	80024b0 <__aeabi_dmul>
 8003cac:	a362      	add	r3, pc, #392	; (adr r3, 8003e38 <__ieee754_pow+0x910>)
 8003cae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb2:	f7fe fa45 	bl	8002140 <__aeabi_dsub>
 8003cb6:	4632      	mov	r2, r6
 8003cb8:	463b      	mov	r3, r7
 8003cba:	f7fe fbf9 	bl	80024b0 <__aeabi_dmul>
 8003cbe:	a360      	add	r3, pc, #384	; (adr r3, 8003e40 <__ieee754_pow+0x918>)
 8003cc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cc4:	f7fe fa3e 	bl	8002144 <__adddf3>
 8003cc8:	4632      	mov	r2, r6
 8003cca:	463b      	mov	r3, r7
 8003ccc:	f7fe fbf0 	bl	80024b0 <__aeabi_dmul>
 8003cd0:	a35d      	add	r3, pc, #372	; (adr r3, 8003e48 <__ieee754_pow+0x920>)
 8003cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cd6:	f7fe fa33 	bl	8002140 <__aeabi_dsub>
 8003cda:	4632      	mov	r2, r6
 8003cdc:	463b      	mov	r3, r7
 8003cde:	f7fe fbe7 	bl	80024b0 <__aeabi_dmul>
 8003ce2:	a35b      	add	r3, pc, #364	; (adr r3, 8003e50 <__ieee754_pow+0x928>)
 8003ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ce8:	f7fe fa2c 	bl	8002144 <__adddf3>
 8003cec:	4632      	mov	r2, r6
 8003cee:	463b      	mov	r3, r7
 8003cf0:	f7fe fbde 	bl	80024b0 <__aeabi_dmul>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4620      	mov	r0, r4
 8003cfa:	4629      	mov	r1, r5
 8003cfc:	f7fe fa20 	bl	8002140 <__aeabi_dsub>
 8003d00:	4606      	mov	r6, r0
 8003d02:	460f      	mov	r7, r1
 8003d04:	4632      	mov	r2, r6
 8003d06:	463b      	mov	r3, r7
 8003d08:	4620      	mov	r0, r4
 8003d0a:	4629      	mov	r1, r5
 8003d0c:	f7fe fbd0 	bl	80024b0 <__aeabi_dmul>
 8003d10:	2200      	movs	r2, #0
 8003d12:	4680      	mov	r8, r0
 8003d14:	4689      	mov	r9, r1
 8003d16:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003d1a:	4630      	mov	r0, r6
 8003d1c:	4639      	mov	r1, r7
 8003d1e:	f7fe fa0f 	bl	8002140 <__aeabi_dsub>
 8003d22:	4602      	mov	r2, r0
 8003d24:	460b      	mov	r3, r1
 8003d26:	4640      	mov	r0, r8
 8003d28:	4649      	mov	r1, r9
 8003d2a:	f7fe fceb 	bl	8002704 <__aeabi_ddiv>
 8003d2e:	4652      	mov	r2, sl
 8003d30:	4606      	mov	r6, r0
 8003d32:	460f      	mov	r7, r1
 8003d34:	465b      	mov	r3, fp
 8003d36:	4620      	mov	r0, r4
 8003d38:	4629      	mov	r1, r5
 8003d3a:	f7fe fbb9 	bl	80024b0 <__aeabi_dmul>
 8003d3e:	4652      	mov	r2, sl
 8003d40:	465b      	mov	r3, fp
 8003d42:	f7fe f9ff 	bl	8002144 <__adddf3>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4630      	mov	r0, r6
 8003d4c:	4639      	mov	r1, r7
 8003d4e:	f7fe f9f7 	bl	8002140 <__aeabi_dsub>
 8003d52:	4622      	mov	r2, r4
 8003d54:	462b      	mov	r3, r5
 8003d56:	f7fe f9f3 	bl	8002140 <__aeabi_dsub>
 8003d5a:	4602      	mov	r2, r0
 8003d5c:	460b      	mov	r3, r1
 8003d5e:	2000      	movs	r0, #0
 8003d60:	4945      	ldr	r1, [pc, #276]	; (8003e78 <__ieee754_pow+0x950>)
 8003d62:	f7fe f9ed 	bl	8002140 <__aeabi_dsub>
 8003d66:	460b      	mov	r3, r1
 8003d68:	9900      	ldr	r1, [sp, #0]
 8003d6a:	4419      	add	r1, r3
 8003d6c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8003d70:	4602      	mov	r2, r0
 8003d72:	f2c0 8169 	blt.w	8004048 <__ieee754_pow+0xb20>
 8003d76:	4610      	mov	r0, r2
 8003d78:	ec53 2b19 	vmov	r2, r3, d9
 8003d7c:	f7fe fb98 	bl	80024b0 <__aeabi_dmul>
 8003d80:	e9cd 0100 	strd	r0, r1, [sp]
 8003d84:	e41e      	b.n	80035c4 <__ieee754_pow+0x9c>
 8003d86:	f1bb 0f00 	cmp.w	fp, #0
 8003d8a:	f6ff ac95 	blt.w	80036b8 <__ieee754_pow+0x190>
 8003d8e:	ed9f 7b32 	vldr	d7, [pc, #200]	; 8003e58 <__ieee754_pow+0x930>
 8003d92:	ed8d 7b00 	vstr	d7, [sp]
 8003d96:	e415      	b.n	80035c4 <__ieee754_pow+0x9c>
 8003d98:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8003e80 <__ieee754_pow+0x958>
 8003d9c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8003da0:	4563      	cmp	r3, ip
 8003da2:	f340 810b 	ble.w	8003fbc <__ieee754_pow+0xa94>
 8003da6:	4b35      	ldr	r3, [pc, #212]	; (8003e7c <__ieee754_pow+0x954>)
 8003da8:	440b      	add	r3, r1
 8003daa:	4303      	orrs	r3, r0
 8003dac:	d10a      	bne.n	8003dc4 <__ieee754_pow+0x89c>
 8003dae:	4632      	mov	r2, r6
 8003db0:	463b      	mov	r3, r7
 8003db2:	f7fe f9c5 	bl	8002140 <__aeabi_dsub>
 8003db6:	4652      	mov	r2, sl
 8003db8:	465b      	mov	r3, fp
 8003dba:	f7fe fdff 	bl	80029bc <__aeabi_dcmpge>
 8003dbe:	2800      	cmp	r0, #0
 8003dc0:	f43f aef2 	beq.w	8003ba8 <__ieee754_pow+0x680>
 8003dc4:	a326      	add	r3, pc, #152	; (adr r3, 8003e60 <__ieee754_pow+0x938>)
 8003dc6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dca:	ec51 0b19 	vmov	r0, r1, d9
 8003dce:	f7fe fb6f 	bl	80024b0 <__aeabi_dmul>
 8003dd2:	a323      	add	r3, pc, #140	; (adr r3, 8003e60 <__ieee754_pow+0x938>)
 8003dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd8:	f7fe fb6a 	bl	80024b0 <__aeabi_dmul>
 8003ddc:	e9cd 0100 	strd	r0, r1, [sp]
 8003de0:	f7ff bbf0 	b.w	80035c4 <__ieee754_pow+0x9c>
 8003de4:	ed9f 7b20 	vldr	d7, [pc, #128]	; 8003e68 <__ieee754_pow+0x940>
 8003de8:	eeb0 9a47 	vmov.f32	s18, s14
 8003dec:	eef0 9a67 	vmov.f32	s19, s15
 8003df0:	e686      	b.n	8003b00 <__ieee754_pow+0x5d8>
 8003df2:	f1bb 0f00 	cmp.w	fp, #0
 8003df6:	daca      	bge.n	8003d8e <__ieee754_pow+0x866>
 8003df8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8003dfc:	9600      	str	r6, [sp, #0]
 8003dfe:	9301      	str	r3, [sp, #4]
 8003e00:	f7ff bbe0 	b.w	80035c4 <__ieee754_pow+0x9c>
 8003e04:	f3af 8000 	nop.w
 8003e08:	00000000 	.word	0x00000000
 8003e0c:	bff00000 	.word	0xbff00000
 8003e10:	652b82fe 	.word	0x652b82fe
 8003e14:	3c971547 	.word	0x3c971547
 8003e18:	00000000 	.word	0x00000000
 8003e1c:	3fe62e43 	.word	0x3fe62e43
 8003e20:	fefa39ef 	.word	0xfefa39ef
 8003e24:	3fe62e42 	.word	0x3fe62e42
 8003e28:	0ca86c39 	.word	0x0ca86c39
 8003e2c:	be205c61 	.word	0xbe205c61
 8003e30:	72bea4d0 	.word	0x72bea4d0
 8003e34:	3e663769 	.word	0x3e663769
 8003e38:	c5d26bf1 	.word	0xc5d26bf1
 8003e3c:	3ebbbd41 	.word	0x3ebbbd41
 8003e40:	af25de2c 	.word	0xaf25de2c
 8003e44:	3f11566a 	.word	0x3f11566a
 8003e48:	16bebd93 	.word	0x16bebd93
 8003e4c:	3f66c16c 	.word	0x3f66c16c
 8003e50:	5555553e 	.word	0x5555553e
 8003e54:	3fc55555 	.word	0x3fc55555
	...
 8003e60:	c2f8f359 	.word	0xc2f8f359
 8003e64:	01a56e1f 	.word	0x01a56e1f
 8003e68:	00000000 	.word	0x00000000
 8003e6c:	3ff00000 	.word	0x3ff00000
 8003e70:	408fffff 	.word	0x408fffff
 8003e74:	000fffff 	.word	0x000fffff
 8003e78:	3ff00000 	.word	0x3ff00000
 8003e7c:	3f6f3400 	.word	0x3f6f3400
 8003e80:	4090cbff 	.word	0x4090cbff
 8003e84:	4598      	cmp	r8, r3
 8003e86:	f6ff af7e 	blt.w	8003d86 <__ieee754_pow+0x85e>
 8003e8a:	4b91      	ldr	r3, [pc, #580]	; (80040d0 <__ieee754_pow+0xba8>)
 8003e8c:	4598      	cmp	r8, r3
 8003e8e:	f73f ac0f 	bgt.w	80036b0 <__ieee754_pow+0x188>
 8003e92:	4b8f      	ldr	r3, [pc, #572]	; (80040d0 <__ieee754_pow+0xba8>)
 8003e94:	2200      	movs	r2, #0
 8003e96:	e9dd 0100 	ldrd	r0, r1, [sp]
 8003e9a:	f7fe f951 	bl	8002140 <__aeabi_dsub>
 8003e9e:	a378      	add	r3, pc, #480	; (adr r3, 8004080 <__ieee754_pow+0xb58>)
 8003ea0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ea4:	4604      	mov	r4, r0
 8003ea6:	460d      	mov	r5, r1
 8003ea8:	f7fe fb02 	bl	80024b0 <__aeabi_dmul>
 8003eac:	a376      	add	r3, pc, #472	; (adr r3, 8004088 <__ieee754_pow+0xb60>)
 8003eae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eb2:	4682      	mov	sl, r0
 8003eb4:	468b      	mov	fp, r1
 8003eb6:	4620      	mov	r0, r4
 8003eb8:	4629      	mov	r1, r5
 8003eba:	f7fe faf9 	bl	80024b0 <__aeabi_dmul>
 8003ebe:	4b85      	ldr	r3, [pc, #532]	; (80040d4 <__ieee754_pow+0xbac>)
 8003ec0:	4680      	mov	r8, r0
 8003ec2:	4689      	mov	r9, r1
 8003ec4:	2200      	movs	r2, #0
 8003ec6:	4620      	mov	r0, r4
 8003ec8:	4629      	mov	r1, r5
 8003eca:	f7fe faf1 	bl	80024b0 <__aeabi_dmul>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	a16f      	add	r1, pc, #444	; (adr r1, 8004090 <__ieee754_pow+0xb68>)
 8003ed4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003ed8:	f7fe f932 	bl	8002140 <__aeabi_dsub>
 8003edc:	4622      	mov	r2, r4
 8003ede:	462b      	mov	r3, r5
 8003ee0:	f7fe fae6 	bl	80024b0 <__aeabi_dmul>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	2000      	movs	r0, #0
 8003eea:	497b      	ldr	r1, [pc, #492]	; (80040d8 <__ieee754_pow+0xbb0>)
 8003eec:	f7fe f928 	bl	8002140 <__aeabi_dsub>
 8003ef0:	4622      	mov	r2, r4
 8003ef2:	462b      	mov	r3, r5
 8003ef4:	4604      	mov	r4, r0
 8003ef6:	460d      	mov	r5, r1
 8003ef8:	4610      	mov	r0, r2
 8003efa:	4619      	mov	r1, r3
 8003efc:	f7fe fad8 	bl	80024b0 <__aeabi_dmul>
 8003f00:	4602      	mov	r2, r0
 8003f02:	460b      	mov	r3, r1
 8003f04:	4620      	mov	r0, r4
 8003f06:	4629      	mov	r1, r5
 8003f08:	f7fe fad2 	bl	80024b0 <__aeabi_dmul>
 8003f0c:	a362      	add	r3, pc, #392	; (adr r3, 8004098 <__ieee754_pow+0xb70>)
 8003f0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f12:	f7fe facd 	bl	80024b0 <__aeabi_dmul>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4640      	mov	r0, r8
 8003f1c:	4649      	mov	r1, r9
 8003f1e:	f7fe f90f 	bl	8002140 <__aeabi_dsub>
 8003f22:	4680      	mov	r8, r0
 8003f24:	4689      	mov	r9, r1
 8003f26:	4650      	mov	r0, sl
 8003f28:	4659      	mov	r1, fp
 8003f2a:	4642      	mov	r2, r8
 8003f2c:	464b      	mov	r3, r9
 8003f2e:	f7fe f909 	bl	8002144 <__adddf3>
 8003f32:	2400      	movs	r4, #0
 8003f34:	4652      	mov	r2, sl
 8003f36:	465b      	mov	r3, fp
 8003f38:	4620      	mov	r0, r4
 8003f3a:	460d      	mov	r5, r1
 8003f3c:	f7fe f900 	bl	8002140 <__aeabi_dsub>
 8003f40:	4602      	mov	r2, r0
 8003f42:	460b      	mov	r3, r1
 8003f44:	4640      	mov	r0, r8
 8003f46:	4649      	mov	r1, r9
 8003f48:	f7fe f8fa 	bl	8002140 <__aeabi_dsub>
 8003f4c:	4682      	mov	sl, r0
 8003f4e:	468b      	mov	fp, r1
 8003f50:	e5ca      	b.n	8003ae8 <__ieee754_pow+0x5c0>
 8003f52:	ed9f 7b53 	vldr	d7, [pc, #332]	; 80040a0 <__ieee754_pow+0xb78>
 8003f56:	eeb0 ba47 	vmov.f32	s22, s14
 8003f5a:	eef0 ba67 	vmov.f32	s23, s15
 8003f5e:	eeb0 ca47 	vmov.f32	s24, s14
 8003f62:	eef0 ca67 	vmov.f32	s25, s15
 8003f66:	ed9f 7b50 	vldr	d7, [pc, #320]	; 80040a8 <__ieee754_pow+0xb80>
 8003f6a:	f04f 0900 	mov.w	r9, #0
 8003f6e:	ec54 3b17 	vmov	r3, r4, d7
 8003f72:	e41d      	b.n	80037b0 <__ieee754_pow+0x288>
 8003f74:	2000      	movs	r0, #0
 8003f76:	f7ff bbf3 	b.w	8003760 <__ieee754_pow+0x238>
 8003f7a:	4955      	ldr	r1, [pc, #340]	; (80040d0 <__ieee754_pow+0xba8>)
 8003f7c:	4622      	mov	r2, r4
 8003f7e:	462b      	mov	r3, r5
 8003f80:	2000      	movs	r0, #0
 8003f82:	f7fe fbbf 	bl	8002704 <__aeabi_ddiv>
 8003f86:	e9cd 0100 	strd	r0, r1, [sp]
 8003f8a:	f7ff bb1b 	b.w	80035c4 <__ieee754_pow+0x9c>
 8003f8e:	4622      	mov	r2, r4
 8003f90:	462b      	mov	r3, r5
 8003f92:	4620      	mov	r0, r4
 8003f94:	4629      	mov	r1, r5
 8003f96:	f7fe fa8b 	bl	80024b0 <__aeabi_dmul>
 8003f9a:	e9cd 0100 	strd	r0, r1, [sp]
 8003f9e:	f7ff bb11 	b.w	80035c4 <__ieee754_pow+0x9c>
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d142      	bne.n	800402c <__ieee754_pow+0xb04>
 8003fa6:	f1c1 0114 	rsb	r1, r1, #20
 8003faa:	fa4a f001 	asr.w	r0, sl, r1
 8003fae:	fa00 f101 	lsl.w	r1, r0, r1
 8003fb2:	4551      	cmp	r1, sl
 8003fb4:	d05a      	beq.n	800406c <__ieee754_pow+0xb44>
 8003fb6:	9303      	str	r3, [sp, #12]
 8003fb8:	f7ff bae0 	b.w	800357c <__ieee754_pow+0x54>
 8003fbc:	4a46      	ldr	r2, [pc, #280]	; (80040d8 <__ieee754_pow+0xbb0>)
 8003fbe:	4293      	cmp	r3, r2
 8003fc0:	dc5b      	bgt.n	800407a <__ieee754_pow+0xb52>
 8003fc2:	e9dd 1200 	ldrd	r1, r2, [sp]
 8003fc6:	9100      	str	r1, [sp, #0]
 8003fc8:	9103      	str	r1, [sp, #12]
 8003fca:	e622      	b.n	8003c12 <__ieee754_pow+0x6ea>
 8003fcc:	a338      	add	r3, pc, #224	; (adr r3, 80040b0 <__ieee754_pow+0xb88>)
 8003fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd2:	ec51 0b19 	vmov	r0, r1, d9
 8003fd6:	f7fe fa6b 	bl	80024b0 <__aeabi_dmul>
 8003fda:	a335      	add	r3, pc, #212	; (adr r3, 80040b0 <__ieee754_pow+0xb88>)
 8003fdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fe0:	f7fe fa66 	bl	80024b0 <__aeabi_dmul>
 8003fe4:	e9cd 0100 	strd	r0, r1, [sp]
 8003fe8:	f7ff baec 	b.w	80035c4 <__ieee754_pow+0x9c>
 8003fec:	9b03      	ldr	r3, [sp, #12]
 8003fee:	2b01      	cmp	r3, #1
 8003ff0:	f47f aae8 	bne.w	80035c4 <__ieee754_pow+0x9c>
 8003ff4:	e9dd 2100 	ldrd	r2, r1, [sp]
 8003ff8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8003ffc:	e9cd 2300 	strd	r2, r3, [sp]
 8004000:	f7ff bae0 	b.w	80035c4 <__ieee754_pow+0x9c>
 8004004:	ed9f 7b2c 	vldr	d7, [pc, #176]	; 80040b8 <__ieee754_pow+0xb90>
 8004008:	eeb0 ba47 	vmov.f32	s22, s14
 800400c:	eef0 ba67 	vmov.f32	s23, s15
 8004010:	ed9f 7b2b 	vldr	d7, [pc, #172]	; 80040c0 <__ieee754_pow+0xb98>
 8004014:	eeb0 ca47 	vmov.f32	s24, s14
 8004018:	eef0 ca67 	vmov.f32	s25, s15
 800401c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; 80040c8 <__ieee754_pow+0xba0>
 8004020:	f44f 2980 	mov.w	r9, #262144	; 0x40000
 8004024:	ec54 3b17 	vmov	r3, r4, d7
 8004028:	f7ff bbc2 	b.w	80037b0 <__ieee754_pow+0x288>
 800402c:	ec45 4b10 	vmov	d0, r4, r5
 8004030:	9203      	str	r2, [sp, #12]
 8004032:	f000 fc1b 	bl	800486c <fabs>
 8004036:	9a03      	ldr	r2, [sp, #12]
 8004038:	ed8d 0b00 	vstr	d0, [sp]
 800403c:	2a00      	cmp	r2, #0
 800403e:	f47f ab61 	bne.w	8003704 <__ieee754_pow+0x1dc>
 8004042:	9203      	str	r2, [sp, #12]
 8004044:	f7ff baf5 	b.w	8003632 <__ieee754_pow+0x10a>
 8004048:	9803      	ldr	r0, [sp, #12]
 800404a:	ec43 2b10 	vmov	d0, r2, r3
 800404e:	f000 fcbf 	bl	80049d0 <scalbn>
 8004052:	ec51 0b10 	vmov	r0, r1, d0
 8004056:	e68f      	b.n	8003d78 <__ieee754_pow+0x850>
 8004058:	f000 0001 	and.w	r0, r0, #1
 800405c:	f1c0 0102 	rsb	r1, r0, #2
 8004060:	9103      	str	r1, [sp, #12]
 8004062:	2b00      	cmp	r3, #0
 8004064:	f43f aa8a 	beq.w	800357c <__ieee754_pow+0x54>
 8004068:	f7ff bada 	b.w	8003620 <__ieee754_pow+0xf8>
 800406c:	f000 0001 	and.w	r0, r0, #1
 8004070:	f1c0 0302 	rsb	r3, r0, #2
 8004074:	9303      	str	r3, [sp, #12]
 8004076:	f7ff ba81 	b.w	800357c <__ieee754_pow+0x54>
 800407a:	151b      	asrs	r3, r3, #20
 800407c:	e596      	b.n	8003bac <__ieee754_pow+0x684>
 800407e:	bf00      	nop
 8004080:	60000000 	.word	0x60000000
 8004084:	3ff71547 	.word	0x3ff71547
 8004088:	f85ddf44 	.word	0xf85ddf44
 800408c:	3e54ae0b 	.word	0x3e54ae0b
 8004090:	55555555 	.word	0x55555555
 8004094:	3fd55555 	.word	0x3fd55555
 8004098:	652b82fe 	.word	0x652b82fe
 800409c:	3ff71547 	.word	0x3ff71547
	...
 80040ac:	3ff00000 	.word	0x3ff00000
 80040b0:	8800759c 	.word	0x8800759c
 80040b4:	7e37e43c 	.word	0x7e37e43c
 80040b8:	40000000 	.word	0x40000000
 80040bc:	3fe2b803 	.word	0x3fe2b803
 80040c0:	43cfd006 	.word	0x43cfd006
 80040c4:	3e4cfdeb 	.word	0x3e4cfdeb
 80040c8:	00000000 	.word	0x00000000
 80040cc:	3ff80000 	.word	0x3ff80000
 80040d0:	3ff00000 	.word	0x3ff00000
 80040d4:	3fd00000 	.word	0x3fd00000
 80040d8:	3fe00000 	.word	0x3fe00000

080040dc <__ieee754_sqrt>:
 80040dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80040e0:	4a5f      	ldr	r2, [pc, #380]	; (8004260 <__ieee754_sqrt+0x184>)
 80040e2:	ec57 6b10 	vmov	r6, r7, d0
 80040e6:	43ba      	bics	r2, r7
 80040e8:	f000 8098 	beq.w	800421c <__ieee754_sqrt+0x140>
 80040ec:	2f00      	cmp	r7, #0
 80040ee:	ee10 4a10 	vmov	r4, s0
 80040f2:	463b      	mov	r3, r7
 80040f4:	dd4e      	ble.n	8004194 <__ieee754_sqrt+0xb8>
 80040f6:	1539      	asrs	r1, r7, #20
 80040f8:	d05b      	beq.n	80041b2 <__ieee754_sqrt+0xd6>
 80040fa:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80040fe:	07ca      	lsls	r2, r1, #31
 8004100:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004104:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
 8004108:	d403      	bmi.n	8004112 <__ieee754_sqrt+0x36>
 800410a:	005b      	lsls	r3, r3, #1
 800410c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 8004110:	0064      	lsls	r4, r4, #1
 8004112:	0fe2      	lsrs	r2, r4, #31
 8004114:	f04f 0c00 	mov.w	ip, #0
 8004118:	eb02 0343 	add.w	r3, r2, r3, lsl #1
 800411c:	ea4f 0e6e 	mov.w	lr, lr, asr #1
 8004120:	0064      	lsls	r4, r4, #1
 8004122:	4666      	mov	r6, ip
 8004124:	2516      	movs	r5, #22
 8004126:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800412a:	18b1      	adds	r1, r6, r2
 800412c:	4299      	cmp	r1, r3
 800412e:	dc02      	bgt.n	8004136 <__ieee754_sqrt+0x5a>
 8004130:	1a5b      	subs	r3, r3, r1
 8004132:	188e      	adds	r6, r1, r2
 8004134:	4494      	add	ip, r2
 8004136:	005b      	lsls	r3, r3, #1
 8004138:	3d01      	subs	r5, #1
 800413a:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
 800413e:	ea4f 0252 	mov.w	r2, r2, lsr #1
 8004142:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8004146:	d1f0      	bne.n	800412a <__ieee754_sqrt+0x4e>
 8004148:	462f      	mov	r7, r5
 800414a:	2020      	movs	r0, #32
 800414c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8004150:	e009      	b.n	8004166 <__ieee754_sqrt+0x8a>
 8004152:	d03e      	beq.n	80041d2 <__ieee754_sqrt+0xf6>
 8004154:	0fe1      	lsrs	r1, r4, #31
 8004156:	3801      	subs	r0, #1
 8004158:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800415c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
 8004160:	ea4f 0444 	mov.w	r4, r4, lsl #1
 8004164:	d03e      	beq.n	80041e4 <__ieee754_sqrt+0x108>
 8004166:	42b3      	cmp	r3, r6
 8004168:	eb02 0105 	add.w	r1, r2, r5
 800416c:	ddf1      	ble.n	8004152 <__ieee754_sqrt+0x76>
 800416e:	2900      	cmp	r1, #0
 8004170:	eb01 0502 	add.w	r5, r1, r2
 8004174:	db09      	blt.n	800418a <__ieee754_sqrt+0xae>
 8004176:	46b0      	mov	r8, r6
 8004178:	1b9b      	subs	r3, r3, r6
 800417a:	42a1      	cmp	r1, r4
 800417c:	bf88      	it	hi
 800417e:	f103 33ff 	addhi.w	r3, r3, #4294967295
 8004182:	1a64      	subs	r4, r4, r1
 8004184:	4417      	add	r7, r2
 8004186:	4646      	mov	r6, r8
 8004188:	e7e4      	b.n	8004154 <__ieee754_sqrt+0x78>
 800418a:	2d00      	cmp	r5, #0
 800418c:	dbf3      	blt.n	8004176 <__ieee754_sqrt+0x9a>
 800418e:	f106 0801 	add.w	r8, r6, #1
 8004192:	e7f1      	b.n	8004178 <__ieee754_sqrt+0x9c>
 8004194:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
 8004198:	4332      	orrs	r2, r6
 800419a:	d036      	beq.n	800420a <__ieee754_sqrt+0x12e>
 800419c:	2f00      	cmp	r7, #0
 800419e:	d14d      	bne.n	800423c <__ieee754_sqrt+0x160>
 80041a0:	4639      	mov	r1, r7
 80041a2:	0ae2      	lsrs	r2, r4, #11
 80041a4:	3915      	subs	r1, #21
 80041a6:	0564      	lsls	r4, r4, #21
 80041a8:	4613      	mov	r3, r2
 80041aa:	2a00      	cmp	r2, #0
 80041ac:	d0f9      	beq.n	80041a2 <__ieee754_sqrt+0xc6>
 80041ae:	02d7      	lsls	r7, r2, #11
 80041b0:	d451      	bmi.n	8004256 <__ieee754_sqrt+0x17a>
 80041b2:	2000      	movs	r0, #0
 80041b4:	005b      	lsls	r3, r3, #1
 80041b6:	02de      	lsls	r6, r3, #11
 80041b8:	4605      	mov	r5, r0
 80041ba:	f100 0001 	add.w	r0, r0, #1
 80041be:	d5f9      	bpl.n	80041b4 <__ieee754_sqrt+0xd8>
 80041c0:	461a      	mov	r2, r3
 80041c2:	4623      	mov	r3, r4
 80041c4:	4084      	lsls	r4, r0
 80041c6:	f1c0 0020 	rsb	r0, r0, #32
 80041ca:	40c3      	lsrs	r3, r0
 80041cc:	4313      	orrs	r3, r2
 80041ce:	1b49      	subs	r1, r1, r5
 80041d0:	e793      	b.n	80040fa <__ieee754_sqrt+0x1e>
 80041d2:	42a1      	cmp	r1, r4
 80041d4:	d8be      	bhi.n	8004154 <__ieee754_sqrt+0x78>
 80041d6:	2900      	cmp	r1, #0
 80041d8:	eb01 0502 	add.w	r5, r1, r2
 80041dc:	dbd5      	blt.n	800418a <__ieee754_sqrt+0xae>
 80041de:	4698      	mov	r8, r3
 80041e0:	2300      	movs	r3, #0
 80041e2:	e7ce      	b.n	8004182 <__ieee754_sqrt+0xa6>
 80041e4:	4323      	orrs	r3, r4
 80041e6:	d112      	bne.n	800420e <__ieee754_sqrt+0x132>
 80041e8:	0878      	lsrs	r0, r7, #1
 80041ea:	ea4f 016c 	mov.w	r1, ip, asr #1
 80041ee:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
 80041f2:	f01c 0f01 	tst.w	ip, #1
 80041f6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
 80041fa:	bf18      	it	ne
 80041fc:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
 8004200:	eb01 530e 	add.w	r3, r1, lr, lsl #20
 8004204:	4602      	mov	r2, r0
 8004206:	ec43 2b10 	vmov	d0, r2, r3
 800420a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800420e:	1c7b      	adds	r3, r7, #1
 8004210:	bf16      	itet	ne
 8004212:	1c78      	addne	r0, r7, #1
 8004214:	f10c 0c01 	addeq.w	ip, ip, #1
 8004218:	0840      	lsrne	r0, r0, #1
 800421a:	e7e6      	b.n	80041ea <__ieee754_sqrt+0x10e>
 800421c:	ee10 2a10 	vmov	r2, s0
 8004220:	ee10 0a10 	vmov	r0, s0
 8004224:	463b      	mov	r3, r7
 8004226:	4639      	mov	r1, r7
 8004228:	f7fe f942 	bl	80024b0 <__aeabi_dmul>
 800422c:	4632      	mov	r2, r6
 800422e:	463b      	mov	r3, r7
 8004230:	f7fd ff88 	bl	8002144 <__adddf3>
 8004234:	ec41 0b10 	vmov	d0, r0, r1
 8004238:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800423c:	ee10 2a10 	vmov	r2, s0
 8004240:	4630      	mov	r0, r6
 8004242:	4639      	mov	r1, r7
 8004244:	f7fd ff7c 	bl	8002140 <__aeabi_dsub>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	f7fe fa5a 	bl	8002704 <__aeabi_ddiv>
 8004250:	ec41 0b10 	vmov	d0, r0, r1
 8004254:	e7d9      	b.n	800420a <__ieee754_sqrt+0x12e>
 8004256:	4623      	mov	r3, r4
 8004258:	2020      	movs	r0, #32
 800425a:	f04f 35ff 	mov.w	r5, #4294967295
 800425e:	e7b4      	b.n	80041ca <__ieee754_sqrt+0xee>
 8004260:	7ff00000 	.word	0x7ff00000

08004264 <__ieee754_powf>:
 8004264:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004268:	ee10 4a90 	vmov	r4, s1
 800426c:	f034 4800 	bics.w	r8, r4, #2147483648	; 0x80000000
 8004270:	ed2d 8b02 	vpush	{d8}
 8004274:	d015      	beq.n	80042a2 <__ieee754_powf+0x3e>
 8004276:	ee10 5a10 	vmov	r5, s0
 800427a:	f025 4700 	bic.w	r7, r5, #2147483648	; 0x80000000
 800427e:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 8004282:	ee10 9a10 	vmov	r9, s0
 8004286:	dd06      	ble.n	8004296 <__ieee754_powf+0x32>
 8004288:	ecbd 8b02 	vpop	{d8}
 800428c:	48ba      	ldr	r0, [pc, #744]	; (8004578 <__ieee754_powf+0x314>)
 800428e:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004292:	f000 bc45 	b.w	8004b20 <nanf>
 8004296:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 800429a:	dd08      	ble.n	80042ae <__ieee754_powf+0x4a>
 800429c:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80042a0:	d1f2      	bne.n	8004288 <__ieee754_powf+0x24>
 80042a2:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80042a6:	ecbd 8b02 	vpop	{d8}
 80042aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80042ae:	2d00      	cmp	r5, #0
 80042b0:	ee10 6a90 	vmov	r6, s1
 80042b4:	f2c0 80f6 	blt.w	80044a4 <__ieee754_powf+0x240>
 80042b8:	f04f 0a00 	mov.w	sl, #0
 80042bc:	f1b8 4fff 	cmp.w	r8, #2139095040	; 0x7f800000
 80042c0:	f000 8104 	beq.w	80044cc <__ieee754_powf+0x268>
 80042c4:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80042c8:	f000 812a 	beq.w	8004520 <__ieee754_powf+0x2bc>
 80042cc:	f1b6 4f80 	cmp.w	r6, #1073741824	; 0x40000000
 80042d0:	f000 813f 	beq.w	8004552 <__ieee754_powf+0x2ee>
 80042d4:	f1b6 5f7c 	cmp.w	r6, #1056964608	; 0x3f000000
 80042d8:	ee00 5a10 	vmov	s0, r5
 80042dc:	f040 8103 	bne.w	80044e6 <__ieee754_powf+0x282>
 80042e0:	f1b9 0f00 	cmp.w	r9, #0
 80042e4:	f280 813a 	bge.w	800455c <__ieee754_powf+0x2f8>
 80042e8:	f000 fc04 	bl	8004af4 <fabsf>
 80042ec:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80042f0:	f000 810b 	beq.w	800450a <__ieee754_powf+0x2a6>
 80042f4:	2f00      	cmp	r7, #0
 80042f6:	f000 8104 	beq.w	8004502 <__ieee754_powf+0x29e>
 80042fa:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80042fe:	f000 80fa 	beq.w	80044f6 <__ieee754_powf+0x292>
 8004302:	ea4f 72d9 	mov.w	r2, r9, lsr #31
 8004306:	3a01      	subs	r2, #1
 8004308:	ea5a 0302 	orrs.w	r3, sl, r2
 800430c:	f000 812c 	beq.w	8004568 <__ieee754_powf+0x304>
 8004310:	f1b8 4f9a 	cmp.w	r8, #1291845632	; 0x4d000000
 8004314:	f340 8152 	ble.w	80045bc <__ieee754_powf+0x358>
 8004318:	4b98      	ldr	r3, [pc, #608]	; (800457c <__ieee754_powf+0x318>)
 800431a:	429f      	cmp	r7, r3
 800431c:	f340 825f 	ble.w	80047de <__ieee754_powf+0x57a>
 8004320:	4b97      	ldr	r3, [pc, #604]	; (8004580 <__ieee754_powf+0x31c>)
 8004322:	429f      	cmp	r7, r3
 8004324:	f300 8101 	bgt.w	800452a <__ieee754_powf+0x2c6>
 8004328:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800432c:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004330:	eddf 6a94 	vldr	s13, [pc, #592]	; 8004584 <__ieee754_powf+0x320>
 8004334:	eddf 7a94 	vldr	s15, [pc, #592]	; 8004588 <__ieee754_powf+0x324>
 8004338:	eddf 5a94 	vldr	s11, [pc, #592]	; 800458c <__ieee754_powf+0x328>
 800433c:	ed9f 6a94 	vldr	s12, [pc, #592]	; 8004590 <__ieee754_powf+0x32c>
 8004340:	eeb5 7a00 	vmov.f32	s14, #80	; 0x3e800000  0.250
 8004344:	eee0 6a47 	vfms.f32	s13, s0, s14
 8004348:	eeb6 7a00 	vmov.f32	s14, #96	; 0x3f000000  0.5
 800434c:	eea6 7ac0 	vfms.f32	s14, s13, s0
 8004350:	eef0 6a47 	vmov.f32	s13, s14
 8004354:	ee20 7a00 	vmul.f32	s14, s0, s0
 8004358:	ee27 7a26 	vmul.f32	s14, s14, s13
 800435c:	ee67 7ac7 	vnmul.f32	s15, s15, s14
 8004360:	eee0 7a25 	vfma.f32	s15, s0, s11
 8004364:	eef0 6a67 	vmov.f32	s13, s15
 8004368:	eee0 6a06 	vfma.f32	s13, s0, s12
 800436c:	ee16 3a90 	vmov	r3, s13
 8004370:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 8004374:	f023 030f 	bic.w	r3, r3, #15
 8004378:	ee07 3a10 	vmov	s14, r3
 800437c:	eea0 7a46 	vfms.f32	s14, s0, s12
 8004380:	ee06 3a90 	vmov	s13, r3
 8004384:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004388:	f426 667f 	bic.w	r6, r6, #4080	; 0xff0
 800438c:	f026 060f 	bic.w	r6, r6, #15
 8004390:	ee07 4a10 	vmov	s14, r4
 8004394:	ee06 6a10 	vmov	s12, r6
 8004398:	ee67 7a87 	vmul.f32	s15, s15, s14
 800439c:	ee37 6a46 	vsub.f32	s12, s14, s12
 80043a0:	ee07 6a10 	vmov	s14, r6
 80043a4:	eee6 7a26 	vfma.f32	s15, s12, s13
 80043a8:	f10a 3aff 	add.w	sl, sl, #4294967295
 80043ac:	ea5a 0302 	orrs.w	r3, sl, r2
 80043b0:	ee26 7a87 	vmul.f32	s14, s13, s14
 80043b4:	eeb7 0a00 	vmov.f32	s0, #112	; 0x3f800000  1.0
 80043b8:	ee77 6a87 	vadd.f32	s13, s15, s14
 80043bc:	eebf 6a00 	vmov.f32	s12, #240	; 0xbf800000 -1.0
 80043c0:	ee16 3a90 	vmov	r3, s13
 80043c4:	bf0c      	ite	eq
 80043c6:	eeb0 8a46 	vmoveq.f32	s16, s12
 80043ca:	eeb0 8a40 	vmovne.f32	s16, s0
 80043ce:	2b00      	cmp	r3, #0
 80043d0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80043d4:	f340 81b9 	ble.w	800474a <__ieee754_powf+0x4e6>
 80043d8:	f1b2 4f86 	cmp.w	r2, #1124073472	; 0x43000000
 80043dc:	f300 81f8 	bgt.w	80047d0 <__ieee754_powf+0x56c>
 80043e0:	f000 81eb 	beq.w	80047ba <__ieee754_powf+0x556>
 80043e4:	f1b2 5f7c 	cmp.w	r2, #1056964608	; 0x3f000000
 80043e8:	f300 81bb 	bgt.w	8004762 <__ieee754_powf+0x4fe>
 80043ec:	2200      	movs	r2, #0
 80043ee:	4610      	mov	r0, r2
 80043f0:	f423 637f 	bic.w	r3, r3, #4080	; 0xff0
 80043f4:	f023 030f 	bic.w	r3, r3, #15
 80043f8:	ee06 3a10 	vmov	s12, r3
 80043fc:	eddf 6a65 	vldr	s13, [pc, #404]	; 8004594 <__ieee754_powf+0x330>
 8004400:	eddf 5a65 	vldr	s11, [pc, #404]	; 8004598 <__ieee754_powf+0x334>
 8004404:	ed9f 3a65 	vldr	s6, [pc, #404]	; 800459c <__ieee754_powf+0x338>
 8004408:	eddf 3a65 	vldr	s7, [pc, #404]	; 80045a0 <__ieee754_powf+0x33c>
 800440c:	ed9f 2a65 	vldr	s4, [pc, #404]	; 80045a4 <__ieee754_powf+0x340>
 8004410:	ed9f 4a65 	vldr	s8, [pc, #404]	; 80045a8 <__ieee754_powf+0x344>
 8004414:	eddf 4a65 	vldr	s9, [pc, #404]	; 80045ac <__ieee754_powf+0x348>
 8004418:	ed9f 5a65 	vldr	s10, [pc, #404]	; 80045b0 <__ieee754_powf+0x34c>
 800441c:	ee36 7a47 	vsub.f32	s14, s12, s14
 8004420:	eef0 2a00 	vmov.f32	s5, #0	; 0x40000000  2.0
 8004424:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004428:	ee26 7a26 	vmul.f32	s14, s12, s13
 800442c:	eea7 7aa5 	vfma.f32	s14, s15, s11
 8004430:	eef7 5a00 	vmov.f32	s11, #112	; 0x3f800000  1.0
 8004434:	eef0 7a47 	vmov.f32	s15, s14
 8004438:	eea6 7a03 	vfma.f32	s14, s12, s6
 800443c:	ee67 6a07 	vmul.f32	s13, s14, s14
 8004440:	eef0 1a47 	vmov.f32	s3, s14
 8004444:	eee6 1a43 	vfms.f32	s3, s12, s6
 8004448:	eeb0 6a63 	vmov.f32	s12, s7
 800444c:	eea6 6a82 	vfma.f32	s12, s13, s4
 8004450:	ee77 7ae1 	vsub.f32	s15, s15, s3
 8004454:	eea6 4a26 	vfma.f32	s8, s12, s13
 8004458:	eee7 7a27 	vfma.f32	s15, s14, s15
 800445c:	eee4 4a26 	vfma.f32	s9, s8, s13
 8004460:	eea4 5aa6 	vfma.f32	s10, s9, s13
 8004464:	eeb0 6a45 	vmov.f32	s12, s10
 8004468:	eeb0 5a47 	vmov.f32	s10, s14
 800446c:	eea6 5a66 	vfms.f32	s10, s12, s13
 8004470:	eef0 6a45 	vmov.f32	s13, s10
 8004474:	ee36 6ae2 	vsub.f32	s12, s13, s5
 8004478:	ee27 5a05 	vmul.f32	s10, s14, s10
 800447c:	eec5 6a06 	vdiv.f32	s13, s10, s12
 8004480:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004484:	ee37 7ac7 	vsub.f32	s14, s15, s14
 8004488:	ee35 0ac7 	vsub.f32	s0, s11, s14
 800448c:	ee10 3a10 	vmov	r3, s0
 8004490:	4413      	add	r3, r2
 8004492:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004496:	f2c0 81ba 	blt.w	800480e <__ieee754_powf+0x5aa>
 800449a:	ee00 3a10 	vmov	s0, r3
 800449e:	ee20 0a08 	vmul.f32	s0, s0, s16
 80044a2:	e700      	b.n	80042a6 <__ieee754_powf+0x42>
 80044a4:	f1b8 4f97 	cmp.w	r8, #1266679808	; 0x4b800000
 80044a8:	da1a      	bge.n	80044e0 <__ieee754_powf+0x27c>
 80044aa:	f1b8 5f7e 	cmp.w	r8, #1065353216	; 0x3f800000
 80044ae:	db0a      	blt.n	80044c6 <__ieee754_powf+0x262>
 80044b0:	ea4f 53e8 	mov.w	r3, r8, asr #23
 80044b4:	f1c3 0396 	rsb	r3, r3, #150	; 0x96
 80044b8:	fa48 f203 	asr.w	r2, r8, r3
 80044bc:	fa02 f303 	lsl.w	r3, r2, r3
 80044c0:	4543      	cmp	r3, r8
 80044c2:	f000 813d 	beq.w	8004740 <__ieee754_powf+0x4dc>
 80044c6:	f04f 0a00 	mov.w	sl, #0
 80044ca:	e6fb      	b.n	80042c4 <__ieee754_powf+0x60>
 80044cc:	f1b7 5f7e 	cmp.w	r7, #1065353216	; 0x3f800000
 80044d0:	f43f aee7 	beq.w	80042a2 <__ieee754_powf+0x3e>
 80044d4:	dd2f      	ble.n	8004536 <__ieee754_powf+0x2d2>
 80044d6:	2e00      	cmp	r6, #0
 80044d8:	db2a      	blt.n	8004530 <__ieee754_powf+0x2cc>
 80044da:	ee00 4a10 	vmov	s0, r4
 80044de:	e6e2      	b.n	80042a6 <__ieee754_powf+0x42>
 80044e0:	f04f 0a02 	mov.w	sl, #2
 80044e4:	e6ea      	b.n	80042bc <__ieee754_powf+0x58>
 80044e6:	f000 fb05 	bl	8004af4 <fabsf>
 80044ea:	f1b7 4fff 	cmp.w	r7, #2139095040	; 0x7f800000
 80044ee:	d002      	beq.n	80044f6 <__ieee754_powf+0x292>
 80044f0:	2f00      	cmp	r7, #0
 80044f2:	f47f af02 	bne.w	80042fa <__ieee754_powf+0x96>
 80044f6:	2e00      	cmp	r6, #0
 80044f8:	bfbc      	itt	lt
 80044fa:	eef7 7a00 	vmovlt.f32	s15, #112	; 0x3f800000  1.0
 80044fe:	ee87 0a80 	vdivlt.f32	s0, s15, s0
 8004502:	f1b9 0f00 	cmp.w	r9, #0
 8004506:	f6bf aece 	bge.w	80042a6 <__ieee754_powf+0x42>
 800450a:	f1a7 577e 	sub.w	r7, r7, #1065353216	; 0x3f800000
 800450e:	ea57 030a 	orrs.w	r3, r7, sl
 8004512:	f040 810e 	bne.w	8004732 <__ieee754_powf+0x4ce>
 8004516:	ee70 7a40 	vsub.f32	s15, s0, s0
 800451a:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 800451e:	e6c2      	b.n	80042a6 <__ieee754_powf+0x42>
 8004520:	2e00      	cmp	r6, #0
 8004522:	db0f      	blt.n	8004544 <__ieee754_powf+0x2e0>
 8004524:	ee00 5a10 	vmov	s0, r5
 8004528:	e6bd      	b.n	80042a6 <__ieee754_powf+0x42>
 800452a:	2e00      	cmp	r6, #0
 800452c:	f300 815a 	bgt.w	80047e4 <__ieee754_powf+0x580>
 8004530:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80045b4 <__ieee754_powf+0x350>
 8004534:	e6b7      	b.n	80042a6 <__ieee754_powf+0x42>
 8004536:	2e00      	cmp	r6, #0
 8004538:	dafa      	bge.n	8004530 <__ieee754_powf+0x2cc>
 800453a:	ee07 4a90 	vmov	s15, r4
 800453e:	eeb1 0a67 	vneg.f32	s0, s15
 8004542:	e6b0      	b.n	80042a6 <__ieee754_powf+0x42>
 8004544:	ee07 5a10 	vmov	s14, r5
 8004548:	eef7 7a00 	vmov.f32	s15, #112	; 0x3f800000  1.0
 800454c:	ee87 0a87 	vdiv.f32	s0, s15, s14
 8004550:	e6a9      	b.n	80042a6 <__ieee754_powf+0x42>
 8004552:	ee07 5a90 	vmov	s15, r5
 8004556:	ee27 0aa7 	vmul.f32	s0, s15, s15
 800455a:	e6a4      	b.n	80042a6 <__ieee754_powf+0x42>
 800455c:	ecbd 8b02 	vpop	{d8}
 8004560:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004564:	f000 b97e 	b.w	8004864 <__ieee754_sqrtf>
 8004568:	ee07 5a90 	vmov	s15, r5
 800456c:	ee77 7ae7 	vsub.f32	s15, s15, s15
 8004570:	ee87 0aa7 	vdiv.f32	s0, s15, s15
 8004574:	e697      	b.n	80042a6 <__ieee754_powf+0x42>
 8004576:	bf00      	nop
 8004578:	08000418 	.word	0x08000418
 800457c:	3f7ffff7 	.word	0x3f7ffff7
 8004580:	3f800007 	.word	0x3f800007
 8004584:	3eaaaaab 	.word	0x3eaaaaab
 8004588:	3fb8aa3b 	.word	0x3fb8aa3b
 800458c:	36eca570 	.word	0x36eca570
 8004590:	3fb8aa00 	.word	0x3fb8aa00
 8004594:	35bfbe8c 	.word	0x35bfbe8c
 8004598:	3f317218 	.word	0x3f317218
 800459c:	3f317200 	.word	0x3f317200
 80045a0:	b5ddea0e 	.word	0xb5ddea0e
 80045a4:	3331bb4c 	.word	0x3331bb4c
 80045a8:	388ab355 	.word	0x388ab355
 80045ac:	bb360b61 	.word	0xbb360b61
 80045b0:	3e2aaaab 	.word	0x3e2aaaab
 80045b4:	00000000 	.word	0x00000000
 80045b8:	4b800000 	.word	0x4b800000
 80045bc:	f019 4fff 	tst.w	r9, #2139095040	; 0x7f800000
 80045c0:	f040 80f9 	bne.w	80047b6 <__ieee754_powf+0x552>
 80045c4:	ed5f 7a04 	vldr	s15, [pc, #-16]	; 80045b8 <__ieee754_powf+0x354>
 80045c8:	ee60 7a27 	vmul.f32	s15, s0, s15
 80045cc:	f06f 0117 	mvn.w	r1, #23
 80045d0:	ee17 7a90 	vmov	r7, s15
 80045d4:	488f      	ldr	r0, [pc, #572]	; (8004814 <__ieee754_powf+0x5b0>)
 80045d6:	15fb      	asrs	r3, r7, #23
 80045d8:	f3c7 0716 	ubfx	r7, r7, #0, #23
 80045dc:	3b7f      	subs	r3, #127	; 0x7f
 80045de:	4287      	cmp	r7, r0
 80045e0:	440b      	add	r3, r1
 80045e2:	f047 517e 	orr.w	r1, r7, #1065353216	; 0x3f800000
 80045e6:	f340 80de 	ble.w	80047a6 <__ieee754_powf+0x542>
 80045ea:	488b      	ldr	r0, [pc, #556]	; (8004818 <__ieee754_powf+0x5b4>)
 80045ec:	4287      	cmp	r7, r0
 80045ee:	f340 80fe 	ble.w	80047ee <__ieee754_powf+0x58a>
 80045f2:	eddf 4a8a 	vldr	s9, [pc, #552]	; 800481c <__ieee754_powf+0x5b8>
 80045f6:	3301      	adds	r3, #1
 80045f8:	f5a1 0100 	sub.w	r1, r1, #8388608	; 0x800000
 80045fc:	eef0 3a64 	vmov.f32	s7, s9
 8004600:	2000      	movs	r0, #0
 8004602:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8004606:	ee06 1a90 	vmov	s13, r1
 800460a:	ee76 7a86 	vadd.f32	s15, s13, s12
 800460e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004612:	ee87 8a27 	vdiv.f32	s16, s14, s15
 8004616:	1049      	asrs	r1, r1, #1
 8004618:	f041 5100 	orr.w	r1, r1, #536870912	; 0x20000000
 800461c:	f501 2180 	add.w	r1, r1, #262144	; 0x40000
 8004620:	4401      	add	r1, r0
 8004622:	ee36 7ac6 	vsub.f32	s14, s13, s12
 8004626:	ee07 1a90 	vmov	s15, r1
 800462a:	ee27 2a08 	vmul.f32	s4, s14, s16
 800462e:	ee77 5ac6 	vsub.f32	s11, s15, s12
 8004632:	ed9f 4a7b 	vldr	s8, [pc, #492]	; 8004820 <__ieee754_powf+0x5bc>
 8004636:	497b      	ldr	r1, [pc, #492]	; (8004824 <__ieee754_powf+0x5c0>)
 8004638:	eddf 8a7b 	vldr	s17, [pc, #492]	; 8004828 <__ieee754_powf+0x5c4>
 800463c:	ed9f 0a7b 	vldr	s0, [pc, #492]	; 800482c <__ieee754_powf+0x5c8>
 8004640:	eddf 0a7b 	vldr	s1, [pc, #492]	; 8004830 <__ieee754_powf+0x5cc>
 8004644:	ed9f 1a7b 	vldr	s2, [pc, #492]	; 8004834 <__ieee754_powf+0x5d0>
 8004648:	eddf 1a7b 	vldr	s3, [pc, #492]	; 8004838 <__ieee754_powf+0x5d4>
 800464c:	eddf 2a7b 	vldr	s5, [pc, #492]	; 800483c <__ieee754_powf+0x5d8>
 8004650:	ed9f 3a7b 	vldr	s6, [pc, #492]	; 8004840 <__ieee754_powf+0x5dc>
 8004654:	ed9f 5a7b 	vldr	s10, [pc, #492]	; 8004844 <__ieee754_powf+0x5e0>
 8004658:	ee22 6a02 	vmul.f32	s12, s4, s4
 800465c:	ee12 0a10 	vmov	r0, s4
 8004660:	ee76 6ae5 	vsub.f32	s13, s13, s11
 8004664:	eef0 5a44 	vmov.f32	s11, s8
 8004668:	eee6 5a28 	vfma.f32	s11, s12, s17
 800466c:	4008      	ands	r0, r1
 800466e:	ee04 0a10 	vmov	s8, r0
 8004672:	eea4 7a67 	vfms.f32	s14, s8, s15
 8004676:	eef0 7a40 	vmov.f32	s15, s0
 800467a:	eee5 7a86 	vfma.f32	s15, s11, s12
 800467e:	eea4 7a66 	vfms.f32	s14, s8, s13
 8004682:	eee7 0a86 	vfma.f32	s1, s15, s12
 8004686:	ee67 6a08 	vmul.f32	s13, s14, s16
 800468a:	eeb0 7a41 	vmov.f32	s14, s2
 800468e:	eea0 7a86 	vfma.f32	s14, s1, s12
 8004692:	ee72 7a04 	vadd.f32	s15, s4, s8
 8004696:	eee7 1a06 	vfma.f32	s3, s14, s12
 800469a:	ee67 7aa6 	vmul.f32	s15, s15, s13
 800469e:	ee26 6a06 	vmul.f32	s12, s12, s12
 80046a2:	eef0 5a08 	vmov.f32	s11, #8	; 0x40400000  3.0
 80046a6:	eee6 7a21 	vfma.f32	s15, s12, s3
 80046aa:	eeb0 6a65 	vmov.f32	s12, s11
 80046ae:	eea4 6a04 	vfma.f32	s12, s8, s8
 80046b2:	ee07 3a10 	vmov	s14, r3
 80046b6:	ee36 6a27 	vadd.f32	s12, s12, s15
 80046ba:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 80046be:	ee16 3a10 	vmov	r3, s12
 80046c2:	400b      	ands	r3, r1
 80046c4:	ee06 3a10 	vmov	s12, r3
 80046c8:	ee76 5a65 	vsub.f32	s11, s12, s11
 80046cc:	eee4 5a44 	vfms.f32	s11, s8, s8
 80046d0:	ee77 7ae5 	vsub.f32	s15, s15, s11
 80046d4:	ee67 7a82 	vmul.f32	s15, s15, s4
 80046d8:	eee6 7a86 	vfma.f32	s15, s13, s12
 80046dc:	eef0 5a67 	vmov.f32	s11, s15
 80046e0:	eee4 5a06 	vfma.f32	s11, s8, s12
 80046e4:	ee15 3a90 	vmov	r3, s11
 80046e8:	400b      	ands	r3, r1
 80046ea:	ee06 3a90 	vmov	s13, r3
 80046ee:	eee4 6a46 	vfms.f32	s13, s8, s12
 80046f2:	ee05 3a90 	vmov	s11, r3
 80046f6:	ee77 7ae6 	vsub.f32	s15, s15, s13
 80046fa:	ee67 7aa2 	vmul.f32	s15, s15, s5
 80046fe:	eee5 7a83 	vfma.f32	s15, s11, s6
 8004702:	ee77 7aa3 	vadd.f32	s15, s15, s7
 8004706:	eef0 6a67 	vmov.f32	s13, s15
 800470a:	eee5 6a85 	vfma.f32	s13, s11, s10
 800470e:	ee76 6aa4 	vadd.f32	s13, s13, s9
 8004712:	ee76 6a87 	vadd.f32	s13, s13, s14
 8004716:	ee16 3a90 	vmov	r3, s13
 800471a:	400b      	ands	r3, r1
 800471c:	ee06 3a90 	vmov	s13, r3
 8004720:	ee36 7ac7 	vsub.f32	s14, s13, s14
 8004724:	ee37 7a64 	vsub.f32	s14, s14, s9
 8004728:	eea5 7ac5 	vfms.f32	s14, s11, s10
 800472c:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004730:	e62a      	b.n	8004388 <__ieee754_powf+0x124>
 8004732:	f1ba 0f01 	cmp.w	sl, #1
 8004736:	f47f adb6 	bne.w	80042a6 <__ieee754_powf+0x42>
 800473a:	eeb1 0a40 	vneg.f32	s0, s0
 800473e:	e5b2      	b.n	80042a6 <__ieee754_powf+0x42>
 8004740:	f002 0201 	and.w	r2, r2, #1
 8004744:	f1c2 0a02 	rsb	sl, r2, #2
 8004748:	e5bc      	b.n	80042c4 <__ieee754_powf+0x60>
 800474a:	493f      	ldr	r1, [pc, #252]	; (8004848 <__ieee754_powf+0x5e4>)
 800474c:	428a      	cmp	r2, r1
 800474e:	dc57      	bgt.n	8004800 <__ieee754_powf+0x59c>
 8004750:	f47f ae48 	bne.w	80043e4 <__ieee754_powf+0x180>
 8004754:	ee76 6ac7 	vsub.f32	s13, s13, s14
 8004758:	eef4 6ae7 	vcmpe.f32	s13, s15
 800475c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004760:	da4e      	bge.n	8004800 <__ieee754_powf+0x59c>
 8004762:	15d2      	asrs	r2, r2, #23
 8004764:	f44f 0100 	mov.w	r1, #8388608	; 0x800000
 8004768:	3a7e      	subs	r2, #126	; 0x7e
 800476a:	fa41 f202 	asr.w	r2, r1, r2
 800476e:	441a      	add	r2, r3
 8004770:	f3c2 51c7 	ubfx	r1, r2, #23, #8
 8004774:	4c35      	ldr	r4, [pc, #212]	; (800484c <__ieee754_powf+0x5e8>)
 8004776:	397f      	subs	r1, #127	; 0x7f
 8004778:	410c      	asrs	r4, r1
 800477a:	f3c2 0016 	ubfx	r0, r2, #0, #23
 800477e:	ea22 0204 	bic.w	r2, r2, r4
 8004782:	ee06 2a90 	vmov	s13, r2
 8004786:	ee37 7a66 	vsub.f32	s14, s14, s13
 800478a:	f1c1 0117 	rsb	r1, r1, #23
 800478e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8004792:	4108      	asrs	r0, r1
 8004794:	2b00      	cmp	r3, #0
 8004796:	ee77 6a87 	vadd.f32	s13, s15, s14
 800479a:	bfb8      	it	lt
 800479c:	4240      	neglt	r0, r0
 800479e:	ee16 3a90 	vmov	r3, s13
 80047a2:	05c2      	lsls	r2, r0, #23
 80047a4:	e624      	b.n	80043f0 <__ieee754_powf+0x18c>
 80047a6:	eddf 4a1d 	vldr	s9, [pc, #116]	; 800481c <__ieee754_powf+0x5b8>
 80047aa:	2000      	movs	r0, #0
 80047ac:	eef0 3a64 	vmov.f32	s7, s9
 80047b0:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 80047b4:	e727      	b.n	8004606 <__ieee754_powf+0x3a2>
 80047b6:	2100      	movs	r1, #0
 80047b8:	e70c      	b.n	80045d4 <__ieee754_powf+0x370>
 80047ba:	ed9f 6a25 	vldr	s12, [pc, #148]	; 8004850 <__ieee754_powf+0x5ec>
 80047be:	ee76 6ac7 	vsub.f32	s13, s13, s14
 80047c2:	ee37 6a86 	vadd.f32	s12, s15, s12
 80047c6:	eeb4 6ae6 	vcmpe.f32	s12, s13
 80047ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80047ce:	ddc8      	ble.n	8004762 <__ieee754_powf+0x4fe>
 80047d0:	eddf 7a20 	vldr	s15, [pc, #128]	; 8004854 <__ieee754_powf+0x5f0>
 80047d4:	ee28 0a27 	vmul.f32	s0, s16, s15
 80047d8:	ee20 0a27 	vmul.f32	s0, s0, s15
 80047dc:	e563      	b.n	80042a6 <__ieee754_powf+0x42>
 80047de:	2e00      	cmp	r6, #0
 80047e0:	f6bf aea6 	bge.w	8004530 <__ieee754_powf+0x2cc>
 80047e4:	ed9f 0a1b 	vldr	s0, [pc, #108]	; 8004854 <__ieee754_powf+0x5f0>
 80047e8:	ee20 0a00 	vmul.f32	s0, s0, s0
 80047ec:	e55b      	b.n	80042a6 <__ieee754_powf+0x42>
 80047ee:	eddf 4a1a 	vldr	s9, [pc, #104]	; 8004858 <__ieee754_powf+0x5f4>
 80047f2:	eddf 3a1a 	vldr	s7, [pc, #104]	; 800485c <__ieee754_powf+0x5f8>
 80047f6:	f44f 1000 	mov.w	r0, #2097152	; 0x200000
 80047fa:	eeb7 6a08 	vmov.f32	s12, #120	; 0x3fc00000  1.5
 80047fe:	e702      	b.n	8004606 <__ieee754_powf+0x3a2>
 8004800:	eddf 7a17 	vldr	s15, [pc, #92]	; 8004860 <__ieee754_powf+0x5fc>
 8004804:	ee28 0a27 	vmul.f32	s0, s16, s15
 8004808:	ee20 0a27 	vmul.f32	s0, s0, s15
 800480c:	e54b      	b.n	80042a6 <__ieee754_powf+0x42>
 800480e:	f000 f9eb 	bl	8004be8 <scalbnf>
 8004812:	e644      	b.n	800449e <__ieee754_powf+0x23a>
 8004814:	001cc471 	.word	0x001cc471
 8004818:	005db3d6 	.word	0x005db3d6
 800481c:	00000000 	.word	0x00000000
 8004820:	3e6c3255 	.word	0x3e6c3255
 8004824:	fffff000 	.word	0xfffff000
 8004828:	3e53f142 	.word	0x3e53f142
 800482c:	3e8ba305 	.word	0x3e8ba305
 8004830:	3eaaaaab 	.word	0x3eaaaaab
 8004834:	3edb6db7 	.word	0x3edb6db7
 8004838:	3f19999a 	.word	0x3f19999a
 800483c:	3f76384f 	.word	0x3f76384f
 8004840:	369dc3a0 	.word	0x369dc3a0
 8004844:	3f763800 	.word	0x3f763800
 8004848:	43160000 	.word	0x43160000
 800484c:	007fffff 	.word	0x007fffff
 8004850:	3338aa3c 	.word	0x3338aa3c
 8004854:	7149f2ca 	.word	0x7149f2ca
 8004858:	3f15c000 	.word	0x3f15c000
 800485c:	35d1cfdc 	.word	0x35d1cfdc
 8004860:	0da24260 	.word	0x0da24260

08004864 <__ieee754_sqrtf>:
 8004864:	eeb1 0ac0 	vsqrt.f32	s0, s0
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop

0800486c <fabs>:
 800486c:	ec51 0b10 	vmov	r0, r1, d0
 8004870:	ee10 2a10 	vmov	r2, s0
 8004874:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004878:	ec43 2b10 	vmov	d0, r2, r3
 800487c:	4770      	bx	lr
 800487e:	bf00      	nop

08004880 <finite>:
 8004880:	b082      	sub	sp, #8
 8004882:	ed8d 0b00 	vstr	d0, [sp]
 8004886:	9801      	ldr	r0, [sp, #4]
 8004888:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800488c:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8004890:	0fc0      	lsrs	r0, r0, #31
 8004892:	b002      	add	sp, #8
 8004894:	4770      	bx	lr
 8004896:	bf00      	nop

08004898 <nan>:
 8004898:	ed9f 0b01 	vldr	d0, [pc, #4]	; 80048a0 <nan+0x8>
 800489c:	4770      	bx	lr
 800489e:	bf00      	nop
 80048a0:	00000000 	.word	0x00000000
 80048a4:	7ff80000 	.word	0x7ff80000

080048a8 <rint>:
 80048a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80048aa:	ec53 2b10 	vmov	r2, r3, d0
 80048ae:	f3c3 560a 	ubfx	r6, r3, #20, #11
 80048b2:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
 80048b6:	2813      	cmp	r0, #19
 80048b8:	ee10 5a10 	vmov	r5, s0
 80048bc:	b083      	sub	sp, #12
 80048be:	4619      	mov	r1, r3
 80048c0:	ea4f 74d3 	mov.w	r4, r3, lsr #31
 80048c4:	dc31      	bgt.n	800492a <rint+0x82>
 80048c6:	2800      	cmp	r0, #0
 80048c8:	db4c      	blt.n	8004964 <rint+0xbc>
 80048ca:	4e3e      	ldr	r6, [pc, #248]	; (80049c4 <rint+0x11c>)
 80048cc:	4106      	asrs	r6, r0
 80048ce:	ea03 0706 	and.w	r7, r3, r6
 80048d2:	4317      	orrs	r7, r2
 80048d4:	d02e      	beq.n	8004934 <rint+0x8c>
 80048d6:	ea03 0356 	and.w	r3, r3, r6, lsr #1
 80048da:	431d      	orrs	r5, r3
 80048dc:	ea4f 0656 	mov.w	r6, r6, lsr #1
 80048e0:	d00c      	beq.n	80048fc <rint+0x54>
 80048e2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 80048e6:	2813      	cmp	r0, #19
 80048e8:	ea21 0606 	bic.w	r6, r1, r6
 80048ec:	fa43 f100 	asr.w	r1, r3, r0
 80048f0:	ea41 0106 	orr.w	r1, r1, r6
 80048f4:	bf0c      	ite	eq
 80048f6:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
 80048fa:	2500      	movne	r5, #0
 80048fc:	4832      	ldr	r0, [pc, #200]	; (80049c8 <rint+0x120>)
 80048fe:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
 8004902:	462a      	mov	r2, r5
 8004904:	e9d4 4500 	ldrd	r4, r5, [r4]
 8004908:	460b      	mov	r3, r1
 800490a:	4620      	mov	r0, r4
 800490c:	4629      	mov	r1, r5
 800490e:	f7fd fc19 	bl	8002144 <__adddf3>
 8004912:	e9cd 0100 	strd	r0, r1, [sp]
 8004916:	e9dd 0100 	ldrd	r0, r1, [sp]
 800491a:	4622      	mov	r2, r4
 800491c:	462b      	mov	r3, r5
 800491e:	f7fd fc0f 	bl	8002140 <__aeabi_dsub>
 8004922:	ec41 0b10 	vmov	d0, r0, r1
 8004926:	b003      	add	sp, #12
 8004928:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800492a:	2833      	cmp	r0, #51	; 0x33
 800492c:	dd06      	ble.n	800493c <rint+0x94>
 800492e:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
 8004932:	d040      	beq.n	80049b6 <rint+0x10e>
 8004934:	ec43 2b10 	vmov	d0, r2, r3
 8004938:	b003      	add	sp, #12
 800493a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800493c:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
 8004940:	f04f 30ff 	mov.w	r0, #4294967295
 8004944:	40f0      	lsrs	r0, r6
 8004946:	4202      	tst	r2, r0
 8004948:	d0f4      	beq.n	8004934 <rint+0x8c>
 800494a:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
 800494e:	ea4f 0350 	mov.w	r3, r0, lsr #1
 8004952:	d0d3      	beq.n	80048fc <rint+0x54>
 8004954:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8004958:	ea25 0503 	bic.w	r5, r5, r3
 800495c:	fa42 f606 	asr.w	r6, r2, r6
 8004960:	4335      	orrs	r5, r6
 8004962:	e7cb      	b.n	80048fc <rint+0x54>
 8004964:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
 8004968:	4310      	orrs	r0, r2
 800496a:	d0e3      	beq.n	8004934 <rint+0x8c>
 800496c:	f3c3 0013 	ubfx	r0, r3, #0, #20
 8004970:	4310      	orrs	r0, r2
 8004972:	4245      	negs	r5, r0
 8004974:	4305      	orrs	r5, r0
 8004976:	4814      	ldr	r0, [pc, #80]	; (80049c8 <rint+0x120>)
 8004978:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
 800497c:	e9d0 6700 	ldrd	r6, r7, [r0]
 8004980:	0c59      	lsrs	r1, r3, #17
 8004982:	0b2d      	lsrs	r5, r5, #12
 8004984:	0449      	lsls	r1, r1, #17
 8004986:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
 800498a:	ea45 0301 	orr.w	r3, r5, r1
 800498e:	4630      	mov	r0, r6
 8004990:	4639      	mov	r1, r7
 8004992:	f7fd fbd7 	bl	8002144 <__adddf3>
 8004996:	e9cd 0100 	strd	r0, r1, [sp]
 800499a:	463b      	mov	r3, r7
 800499c:	e9dd 0100 	ldrd	r0, r1, [sp]
 80049a0:	4632      	mov	r2, r6
 80049a2:	f7fd fbcd 	bl	8002140 <__aeabi_dsub>
 80049a6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80049aa:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
 80049ae:	ec41 0b10 	vmov	d0, r0, r1
 80049b2:	b003      	add	sp, #12
 80049b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80049b6:	ee10 0a10 	vmov	r0, s0
 80049ba:	f7fd fbc3 	bl	8002144 <__adddf3>
 80049be:	ec41 0b10 	vmov	d0, r0, r1
 80049c2:	e7b9      	b.n	8004938 <rint+0x90>
 80049c4:	000fffff 	.word	0x000fffff
 80049c8:	08000420 	.word	0x08000420
 80049cc:	00000000 	.word	0x00000000

080049d0 <scalbn>:
 80049d0:	b538      	push	{r3, r4, r5, lr}
 80049d2:	ec53 2b10 	vmov	r2, r3, d0
 80049d6:	f3c3 510a 	ubfx	r1, r3, #20, #11
 80049da:	461c      	mov	r4, r3
 80049dc:	4605      	mov	r5, r0
 80049de:	bb81      	cbnz	r1, 8004a42 <scalbn+0x72>
 80049e0:	ee10 1a10 	vmov	r1, s0
 80049e4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80049e8:	4321      	orrs	r1, r4
 80049ea:	d029      	beq.n	8004a40 <scalbn+0x70>
 80049ec:	4619      	mov	r1, r3
 80049ee:	2200      	movs	r2, #0
 80049f0:	4b3d      	ldr	r3, [pc, #244]	; (8004ae8 <scalbn+0x118>)
 80049f2:	4c3e      	ldr	r4, [pc, #248]	; (8004aec <scalbn+0x11c>)
 80049f4:	ee10 0a10 	vmov	r0, s0
 80049f8:	f7fd fd5a 	bl	80024b0 <__aeabi_dmul>
 80049fc:	42a5      	cmp	r5, r4
 80049fe:	4602      	mov	r2, r0
 8004a00:	460b      	mov	r3, r1
 8004a02:	db16      	blt.n	8004a32 <scalbn+0x62>
 8004a04:	460c      	mov	r4, r1
 8004a06:	f3c1 510a 	ubfx	r1, r1, #20, #11
 8004a0a:	3936      	subs	r1, #54	; 0x36
 8004a0c:	4429      	add	r1, r5
 8004a0e:	f240 70fe 	movw	r0, #2046	; 0x7fe
 8004a12:	4281      	cmp	r1, r0
 8004a14:	dc21      	bgt.n	8004a5a <scalbn+0x8a>
 8004a16:	2900      	cmp	r1, #0
 8004a18:	dc47      	bgt.n	8004aaa <scalbn+0xda>
 8004a1a:	f111 0f35 	cmn.w	r1, #53	; 0x35
 8004a1e:	da34      	bge.n	8004a8a <scalbn+0xba>
 8004a20:	f24c 3150 	movw	r1, #50000	; 0xc350
 8004a24:	428d      	cmp	r5, r1
 8004a26:	dc18      	bgt.n	8004a5a <scalbn+0x8a>
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	a127      	add	r1, pc, #156	; (adr r1, 8004ac8 <scalbn+0xf8>)
 8004a2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a30:	db44      	blt.n	8004abc <scalbn+0xec>
 8004a32:	a325      	add	r3, pc, #148	; (adr r3, 8004ac8 <scalbn+0xf8>)
 8004a34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a38:	f7fd fd3a 	bl	80024b0 <__aeabi_dmul>
 8004a3c:	ec41 0b10 	vmov	d0, r0, r1
 8004a40:	bd38      	pop	{r3, r4, r5, pc}
 8004a42:	f240 70ff 	movw	r0, #2047	; 0x7ff
 8004a46:	4281      	cmp	r1, r0
 8004a48:	d1e0      	bne.n	8004a0c <scalbn+0x3c>
 8004a4a:	ee10 0a10 	vmov	r0, s0
 8004a4e:	4619      	mov	r1, r3
 8004a50:	f7fd fb78 	bl	8002144 <__adddf3>
 8004a54:	ec41 0b10 	vmov	d0, r0, r1
 8004a58:	bd38      	pop	{r3, r4, r5, pc}
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	a11c      	add	r1, pc, #112	; (adr r1, 8004ad0 <scalbn+0x100>)
 8004a5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a62:	db07      	blt.n	8004a74 <scalbn+0xa4>
 8004a64:	a31a      	add	r3, pc, #104	; (adr r3, 8004ad0 <scalbn+0x100>)
 8004a66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a6a:	f7fd fd21 	bl	80024b0 <__aeabi_dmul>
 8004a6e:	ec41 0b10 	vmov	d0, r0, r1
 8004a72:	bd38      	pop	{r3, r4, r5, pc}
 8004a74:	a118      	add	r1, pc, #96	; (adr r1, 8004ad8 <scalbn+0x108>)
 8004a76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004a7a:	a315      	add	r3, pc, #84	; (adr r3, 8004ad0 <scalbn+0x100>)
 8004a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a80:	f7fd fd16 	bl	80024b0 <__aeabi_dmul>
 8004a84:	ec41 0b10 	vmov	d0, r0, r1
 8004a88:	e7f3      	b.n	8004a72 <scalbn+0xa2>
 8004a8a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8004a8e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
 8004a92:	3136      	adds	r1, #54	; 0x36
 8004a94:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
 8004a98:	4610      	mov	r0, r2
 8004a9a:	4619      	mov	r1, r3
 8004a9c:	2200      	movs	r2, #0
 8004a9e:	4b14      	ldr	r3, [pc, #80]	; (8004af0 <scalbn+0x120>)
 8004aa0:	f7fd fd06 	bl	80024b0 <__aeabi_dmul>
 8004aa4:	ec41 0b10 	vmov	d0, r0, r1
 8004aa8:	bd38      	pop	{r3, r4, r5, pc}
 8004aaa:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
 8004aae:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
 8004ab2:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
 8004ab6:	ec43 2b10 	vmov	d0, r2, r3
 8004aba:	bd38      	pop	{r3, r4, r5, pc}
 8004abc:	a108      	add	r1, pc, #32	; (adr r1, 8004ae0 <scalbn+0x110>)
 8004abe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004ac2:	e7b6      	b.n	8004a32 <scalbn+0x62>
 8004ac4:	f3af 8000 	nop.w
 8004ac8:	c2f8f359 	.word	0xc2f8f359
 8004acc:	01a56e1f 	.word	0x01a56e1f
 8004ad0:	8800759c 	.word	0x8800759c
 8004ad4:	7e37e43c 	.word	0x7e37e43c
 8004ad8:	8800759c 	.word	0x8800759c
 8004adc:	fe37e43c 	.word	0xfe37e43c
 8004ae0:	c2f8f359 	.word	0xc2f8f359
 8004ae4:	81a56e1f 	.word	0x81a56e1f
 8004ae8:	43500000 	.word	0x43500000
 8004aec:	ffff3cb0 	.word	0xffff3cb0
 8004af0:	3c900000 	.word	0x3c900000

08004af4 <fabsf>:
 8004af4:	ee10 3a10 	vmov	r3, s0
 8004af8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004afc:	ee00 3a10 	vmov	s0, r3
 8004b00:	4770      	bx	lr
 8004b02:	bf00      	nop

08004b04 <finitef>:
 8004b04:	b082      	sub	sp, #8
 8004b06:	ed8d 0a01 	vstr	s0, [sp, #4]
 8004b0a:	9801      	ldr	r0, [sp, #4]
 8004b0c:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8004b10:	f1b0 4fff 	cmp.w	r0, #2139095040	; 0x7f800000
 8004b14:	bfac      	ite	ge
 8004b16:	2000      	movge	r0, #0
 8004b18:	2001      	movlt	r0, #1
 8004b1a:	b002      	add	sp, #8
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop

08004b20 <nanf>:
 8004b20:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8004b28 <nanf+0x8>
 8004b24:	4770      	bx	lr
 8004b26:	bf00      	nop
 8004b28:	7fc00000 	.word	0x7fc00000

08004b2c <rintf>:
 8004b2c:	ee10 1a10 	vmov	r1, s0
 8004b30:	f3c1 53c7 	ubfx	r3, r1, #23, #8
 8004b34:	f1a3 027f 	sub.w	r2, r3, #127	; 0x7f
 8004b38:	2a16      	cmp	r2, #22
 8004b3a:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8004b3e:	dc28      	bgt.n	8004b92 <rintf+0x66>
 8004b40:	b333      	cbz	r3, 8004b90 <rintf+0x64>
 8004b42:	b410      	push	{r4}
 8004b44:	2a00      	cmp	r2, #0
 8004b46:	b083      	sub	sp, #12
 8004b48:	ea4f 70d1 	mov.w	r0, r1, lsr #31
 8004b4c:	db27      	blt.n	8004b9e <rintf+0x72>
 8004b4e:	4b24      	ldr	r3, [pc, #144]	; (8004be0 <rintf+0xb4>)
 8004b50:	4113      	asrs	r3, r2
 8004b52:	4219      	tst	r1, r3
 8004b54:	d018      	beq.n	8004b88 <rintf+0x5c>
 8004b56:	085c      	lsrs	r4, r3, #1
 8004b58:	ea11 0353 	ands.w	r3, r1, r3, lsr #1
 8004b5c:	d007      	beq.n	8004b6e <rintf+0x42>
 8004b5e:	f44f 1300 	mov.w	r3, #2097152	; 0x200000
 8004b62:	ea21 0104 	bic.w	r1, r1, r4
 8004b66:	4113      	asrs	r3, r2
 8004b68:	430b      	orrs	r3, r1
 8004b6a:	ee00 3a10 	vmov	s0, r3
 8004b6e:	4b1d      	ldr	r3, [pc, #116]	; (8004be4 <rintf+0xb8>)
 8004b70:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 8004b74:	edd0 7a00 	vldr	s15, [r0]
 8004b78:	ee37 0a80 	vadd.f32	s0, s15, s0
 8004b7c:	ed8d 0a01 	vstr	s0, [sp, #4]
 8004b80:	ed9d 0a01 	vldr	s0, [sp, #4]
 8004b84:	ee30 0a67 	vsub.f32	s0, s0, s15
 8004b88:	b003      	add	sp, #12
 8004b8a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8004b8e:	4770      	bx	lr
 8004b90:	4770      	bx	lr
 8004b92:	f1b3 4fff 	cmp.w	r3, #2139095040	; 0x7f800000
 8004b96:	d3fb      	bcc.n	8004b90 <rintf+0x64>
 8004b98:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004b9c:	4770      	bx	lr
 8004b9e:	f3c1 0316 	ubfx	r3, r1, #0, #23
 8004ba2:	425b      	negs	r3, r3
 8004ba4:	4a0f      	ldr	r2, [pc, #60]	; (8004be4 <rintf+0xb8>)
 8004ba6:	0a5b      	lsrs	r3, r3, #9
 8004ba8:	0d09      	lsrs	r1, r1, #20
 8004baa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004bae:	0509      	lsls	r1, r1, #20
 8004bb0:	4319      	orrs	r1, r3
 8004bb2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
 8004bb6:	edd2 6a00 	vldr	s13, [r2]
 8004bba:	ee07 1a90 	vmov	s15, r1
 8004bbe:	ee36 7aa7 	vadd.f32	s14, s13, s15
 8004bc2:	ed8d 7a01 	vstr	s14, [sp, #4]
 8004bc6:	eddd 7a01 	vldr	s15, [sp, #4]
 8004bca:	ee77 7ae6 	vsub.f32	s15, s15, s13
 8004bce:	ee17 3a90 	vmov	r3, s15
 8004bd2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8004bd6:	ea43 73c0 	orr.w	r3, r3, r0, lsl #31
 8004bda:	ee00 3a10 	vmov	s0, r3
 8004bde:	e7d3      	b.n	8004b88 <rintf+0x5c>
 8004be0:	007fffff 	.word	0x007fffff
 8004be4:	08000430 	.word	0x08000430

08004be8 <scalbnf>:
 8004be8:	b082      	sub	sp, #8
 8004bea:	ed8d 0a01 	vstr	s0, [sp, #4]
 8004bee:	9b01      	ldr	r3, [sp, #4]
 8004bf0:	f033 4200 	bics.w	r2, r3, #2147483648	; 0x80000000
 8004bf4:	d02a      	beq.n	8004c4c <scalbnf+0x64>
 8004bf6:	f1b2 4fff 	cmp.w	r2, #2139095040	; 0x7f800000
 8004bfa:	d223      	bcs.n	8004c44 <scalbnf+0x5c>
 8004bfc:	f013 4fff 	tst.w	r3, #2139095040	; 0x7f800000
 8004c00:	d128      	bne.n	8004c54 <scalbnf+0x6c>
 8004c02:	ed9d 7a01 	vldr	s14, [sp, #4]
 8004c06:	eddf 7a2a 	vldr	s15, [pc, #168]	; 8004cb0 <scalbnf+0xc8>
 8004c0a:	4b2a      	ldr	r3, [pc, #168]	; (8004cb4 <scalbnf+0xcc>)
 8004c0c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004c10:	4298      	cmp	r0, r3
 8004c12:	edcd 7a01 	vstr	s15, [sp, #4]
 8004c16:	db37      	blt.n	8004c88 <scalbnf+0xa0>
 8004c18:	9b01      	ldr	r3, [sp, #4]
 8004c1a:	f3c3 52c7 	ubfx	r2, r3, #23, #8
 8004c1e:	3a19      	subs	r2, #25
 8004c20:	4402      	add	r2, r0
 8004c22:	2afe      	cmp	r2, #254	; 0xfe
 8004c24:	dd1a      	ble.n	8004c5c <scalbnf+0x74>
 8004c26:	ed9f 0a24 	vldr	s0, [pc, #144]	; 8004cb8 <scalbnf+0xd0>
 8004c2a:	ed9f 7a24 	vldr	s14, [pc, #144]	; 8004cbc <scalbnf+0xd4>
 8004c2e:	9b01      	ldr	r3, [sp, #4]
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	eef0 7a40 	vmov.f32	s15, s0
 8004c36:	bfb8      	it	lt
 8004c38:	eeb0 0a47 	vmovlt.f32	s0, s14
 8004c3c:	ee20 0a27 	vmul.f32	s0, s0, s15
 8004c40:	b002      	add	sp, #8
 8004c42:	4770      	bx	lr
 8004c44:	ee30 0a00 	vadd.f32	s0, s0, s0
 8004c48:	b002      	add	sp, #8
 8004c4a:	4770      	bx	lr
 8004c4c:	ed9d 0a01 	vldr	s0, [sp, #4]
 8004c50:	b002      	add	sp, #8
 8004c52:	4770      	bx	lr
 8004c54:	0dd2      	lsrs	r2, r2, #23
 8004c56:	4402      	add	r2, r0
 8004c58:	2afe      	cmp	r2, #254	; 0xfe
 8004c5a:	dce4      	bgt.n	8004c26 <scalbnf+0x3e>
 8004c5c:	2a00      	cmp	r2, #0
 8004c5e:	dc0b      	bgt.n	8004c78 <scalbnf+0x90>
 8004c60:	f112 0f16 	cmn.w	r2, #22
 8004c64:	da17      	bge.n	8004c96 <scalbnf+0xae>
 8004c66:	f24c 3350 	movw	r3, #50000	; 0xc350
 8004c6a:	4298      	cmp	r0, r3
 8004c6c:	dcdb      	bgt.n	8004c26 <scalbnf+0x3e>
 8004c6e:	ed9f 0a14 	vldr	s0, [pc, #80]	; 8004cc0 <scalbnf+0xd8>
 8004c72:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8004cc4 <scalbnf+0xdc>
 8004c76:	e7da      	b.n	8004c2e <scalbnf+0x46>
 8004c78:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004c7c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004c80:	ee00 3a10 	vmov	s0, r3
 8004c84:	b002      	add	sp, #8
 8004c86:	4770      	bx	lr
 8004c88:	ed9f 0a0d 	vldr	s0, [pc, #52]	; 8004cc0 <scalbnf+0xd8>
 8004c8c:	eddd 7a01 	vldr	s15, [sp, #4]
 8004c90:	ee27 0a80 	vmul.f32	s0, s15, s0
 8004c94:	e7d8      	b.n	8004c48 <scalbnf+0x60>
 8004c96:	3219      	adds	r2, #25
 8004c98:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8004c9c:	ea43 53c2 	orr.w	r3, r3, r2, lsl #23
 8004ca0:	eddf 7a09 	vldr	s15, [pc, #36]	; 8004cc8 <scalbnf+0xe0>
 8004ca4:	ee07 3a10 	vmov	s14, r3
 8004ca8:	ee27 0a27 	vmul.f32	s0, s14, s15
 8004cac:	e7cc      	b.n	8004c48 <scalbnf+0x60>
 8004cae:	bf00      	nop
 8004cb0:	4c000000 	.word	0x4c000000
 8004cb4:	ffff3cb0 	.word	0xffff3cb0
 8004cb8:	7149f2ca 	.word	0x7149f2ca
 8004cbc:	f149f2ca 	.word	0xf149f2ca
 8004cc0:	0da24260 	.word	0x0da24260
 8004cc4:	8da24260 	.word	0x8da24260
 8004cc8:	33000000 	.word	0x33000000
 8004ccc:	00000000 	.word	0x00000000

08004cd0 <__ieee754_log>:
 8004cd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cd4:	ec51 0b10 	vmov	r0, r1, d0
 8004cd8:	ed2d 8b02 	vpush	{d8}
 8004cdc:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8004ce0:	b083      	sub	sp, #12
 8004ce2:	460b      	mov	r3, r1
 8004ce4:	da57      	bge.n	8004d96 <__ieee754_log+0xc6>
 8004ce6:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8004cea:	4302      	orrs	r2, r0
 8004cec:	f000 80fe 	beq.w	8004eec <__ieee754_log+0x21c>
 8004cf0:	2900      	cmp	r1, #0
 8004cf2:	f2c0 813e 	blt.w	8004f72 <__ieee754_log+0x2a2>
 8004cf6:	4be4      	ldr	r3, [pc, #912]	; (8005088 <__ieee754_log+0x3b8>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	f7fd fbd9 	bl	80024b0 <__aeabi_dmul>
 8004cfe:	4ae3      	ldr	r2, [pc, #908]	; (800508c <__ieee754_log+0x3bc>)
 8004d00:	460b      	mov	r3, r1
 8004d02:	4293      	cmp	r3, r2
 8004d04:	f06f 0735 	mvn.w	r7, #53	; 0x35
 8004d08:	dc4a      	bgt.n	8004da0 <__ieee754_log+0xd0>
 8004d0a:	f3c3 0513 	ubfx	r5, r3, #0, #20
 8004d0e:	f505 2615 	add.w	r6, r5, #610304	; 0x95000
 8004d12:	f606 7664 	addw	r6, r6, #3940	; 0xf64
 8004d16:	f406 1680 	and.w	r6, r6, #1048576	; 0x100000
 8004d1a:	f086 527f 	eor.w	r2, r6, #1069547520	; 0x3fc00000
 8004d1e:	f482 1240 	eor.w	r2, r2, #3145728	; 0x300000
 8004d22:	ea42 0105 	orr.w	r1, r2, r5
 8004d26:	151c      	asrs	r4, r3, #20
 8004d28:	2200      	movs	r2, #0
 8004d2a:	4bd9      	ldr	r3, [pc, #868]	; (8005090 <__ieee754_log+0x3c0>)
 8004d2c:	f7fd fa08 	bl	8002140 <__aeabi_dsub>
 8004d30:	1cab      	adds	r3, r5, #2
 8004d32:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004d36:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004d3a:	443c      	add	r4, r7
 8004d3c:	2b02      	cmp	r3, #2
 8004d3e:	eb04 5416 	add.w	r4, r4, r6, lsr #20
 8004d42:	4682      	mov	sl, r0
 8004d44:	468b      	mov	fp, r1
 8004d46:	f04f 0200 	mov.w	r2, #0
 8004d4a:	dc34      	bgt.n	8004db6 <__ieee754_log+0xe6>
 8004d4c:	2300      	movs	r3, #0
 8004d4e:	f7fd fe17 	bl	8002980 <__aeabi_dcmpeq>
 8004d52:	2800      	cmp	r0, #0
 8004d54:	f000 80d7 	beq.w	8004f06 <__ieee754_log+0x236>
 8004d58:	2c00      	cmp	r4, #0
 8004d5a:	f000 8166 	beq.w	800502a <__ieee754_log+0x35a>
 8004d5e:	4620      	mov	r0, r4
 8004d60:	f7fd fb3c 	bl	80023dc <__aeabi_i2d>
 8004d64:	a3b2      	add	r3, pc, #712	; (adr r3, 8005030 <__ieee754_log+0x360>)
 8004d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6a:	4606      	mov	r6, r0
 8004d6c:	460f      	mov	r7, r1
 8004d6e:	f7fd fb9f 	bl	80024b0 <__aeabi_dmul>
 8004d72:	a3b1      	add	r3, pc, #708	; (adr r3, 8005038 <__ieee754_log+0x368>)
 8004d74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d78:	4604      	mov	r4, r0
 8004d7a:	460d      	mov	r5, r1
 8004d7c:	4630      	mov	r0, r6
 8004d7e:	4639      	mov	r1, r7
 8004d80:	f7fd fb96 	bl	80024b0 <__aeabi_dmul>
 8004d84:	4602      	mov	r2, r0
 8004d86:	460b      	mov	r3, r1
 8004d88:	4620      	mov	r0, r4
 8004d8a:	4629      	mov	r1, r5
 8004d8c:	f7fd f9da 	bl	8002144 <__adddf3>
 8004d90:	ec41 0b10 	vmov	d0, r0, r1
 8004d94:	e00a      	b.n	8004dac <__ieee754_log+0xdc>
 8004d96:	4abd      	ldr	r2, [pc, #756]	; (800508c <__ieee754_log+0x3bc>)
 8004d98:	4293      	cmp	r3, r2
 8004d9a:	f04f 0700 	mov.w	r7, #0
 8004d9e:	ddb4      	ble.n	8004d0a <__ieee754_log+0x3a>
 8004da0:	4602      	mov	r2, r0
 8004da2:	460b      	mov	r3, r1
 8004da4:	f7fd f9ce 	bl	8002144 <__adddf3>
 8004da8:	ec41 0b10 	vmov	d0, r0, r1
 8004dac:	b003      	add	sp, #12
 8004dae:	ecbd 8b02 	vpop	{d8}
 8004db2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004db6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8004dba:	f7fd f9c3 	bl	8002144 <__adddf3>
 8004dbe:	4602      	mov	r2, r0
 8004dc0:	460b      	mov	r3, r1
 8004dc2:	4650      	mov	r0, sl
 8004dc4:	4659      	mov	r1, fp
 8004dc6:	f7fd fc9d 	bl	8002704 <__aeabi_ddiv>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	460b      	mov	r3, r1
 8004dce:	4620      	mov	r0, r4
 8004dd0:	ec43 2b18 	vmov	d8, r2, r3
 8004dd4:	f7fd fb02 	bl	80023dc <__aeabi_i2d>
 8004dd8:	ec53 2b18 	vmov	r2, r3, d8
 8004ddc:	4606      	mov	r6, r0
 8004dde:	460f      	mov	r7, r1
 8004de0:	ec51 0b18 	vmov	r0, r1, d8
 8004de4:	e9cd 6700 	strd	r6, r7, [sp]
 8004de8:	f7fd fb62 	bl	80024b0 <__aeabi_dmul>
 8004dec:	4602      	mov	r2, r0
 8004dee:	460b      	mov	r3, r1
 8004df0:	4680      	mov	r8, r0
 8004df2:	4689      	mov	r9, r1
 8004df4:	f7fd fb5c 	bl	80024b0 <__aeabi_dmul>
 8004df8:	a391      	add	r3, pc, #580	; (adr r3, 8005040 <__ieee754_log+0x370>)
 8004dfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfe:	4606      	mov	r6, r0
 8004e00:	460f      	mov	r7, r1
 8004e02:	f7fd fb55 	bl	80024b0 <__aeabi_dmul>
 8004e06:	a390      	add	r3, pc, #576	; (adr r3, 8005048 <__ieee754_log+0x378>)
 8004e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e0c:	f7fd f99a 	bl	8002144 <__adddf3>
 8004e10:	4632      	mov	r2, r6
 8004e12:	463b      	mov	r3, r7
 8004e14:	f7fd fb4c 	bl	80024b0 <__aeabi_dmul>
 8004e18:	a38d      	add	r3, pc, #564	; (adr r3, 8005050 <__ieee754_log+0x380>)
 8004e1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e1e:	f7fd f991 	bl	8002144 <__adddf3>
 8004e22:	4632      	mov	r2, r6
 8004e24:	463b      	mov	r3, r7
 8004e26:	f7fd fb43 	bl	80024b0 <__aeabi_dmul>
 8004e2a:	a38b      	add	r3, pc, #556	; (adr r3, 8005058 <__ieee754_log+0x388>)
 8004e2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e30:	f7fd f988 	bl	8002144 <__adddf3>
 8004e34:	4642      	mov	r2, r8
 8004e36:	464b      	mov	r3, r9
 8004e38:	f7fd fb3a 	bl	80024b0 <__aeabi_dmul>
 8004e3c:	a388      	add	r3, pc, #544	; (adr r3, 8005060 <__ieee754_log+0x390>)
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	4680      	mov	r8, r0
 8004e44:	4689      	mov	r9, r1
 8004e46:	4630      	mov	r0, r6
 8004e48:	4639      	mov	r1, r7
 8004e4a:	f7fd fb31 	bl	80024b0 <__aeabi_dmul>
 8004e4e:	a386      	add	r3, pc, #536	; (adr r3, 8005068 <__ieee754_log+0x398>)
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f7fd f976 	bl	8002144 <__adddf3>
 8004e58:	4632      	mov	r2, r6
 8004e5a:	463b      	mov	r3, r7
 8004e5c:	f7fd fb28 	bl	80024b0 <__aeabi_dmul>
 8004e60:	a383      	add	r3, pc, #524	; (adr r3, 8005070 <__ieee754_log+0x3a0>)
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	f7fd f96d 	bl	8002144 <__adddf3>
 8004e6a:	4632      	mov	r2, r6
 8004e6c:	463b      	mov	r3, r7
 8004e6e:	f7fd fb1f 	bl	80024b0 <__aeabi_dmul>
 8004e72:	460b      	mov	r3, r1
 8004e74:	4602      	mov	r2, r0
 8004e76:	4649      	mov	r1, r9
 8004e78:	4640      	mov	r0, r8
 8004e7a:	f7fd f963 	bl	8002144 <__adddf3>
 8004e7e:	f5a5 23c2 	sub.w	r3, r5, #397312	; 0x61000
 8004e82:	f5c5 25d7 	rsb	r5, r5, #440320	; 0x6b800
 8004e86:	f2a3 437a 	subw	r3, r3, #1146	; 0x47a
 8004e8a:	3551      	adds	r5, #81	; 0x51
 8004e8c:	431d      	orrs	r5, r3
 8004e8e:	2d00      	cmp	r5, #0
 8004e90:	4606      	mov	r6, r0
 8004e92:	460f      	mov	r7, r1
 8004e94:	dd5f      	ble.n	8004f56 <__ieee754_log+0x286>
 8004e96:	4b7f      	ldr	r3, [pc, #508]	; (8005094 <__ieee754_log+0x3c4>)
 8004e98:	2200      	movs	r2, #0
 8004e9a:	4650      	mov	r0, sl
 8004e9c:	4659      	mov	r1, fp
 8004e9e:	f7fd fb07 	bl	80024b0 <__aeabi_dmul>
 8004ea2:	4652      	mov	r2, sl
 8004ea4:	465b      	mov	r3, fp
 8004ea6:	f7fd fb03 	bl	80024b0 <__aeabi_dmul>
 8004eaa:	4680      	mov	r8, r0
 8004eac:	4689      	mov	r9, r1
 8004eae:	2c00      	cmp	r4, #0
 8004eb0:	d16a      	bne.n	8004f88 <__ieee754_log+0x2b8>
 8004eb2:	4642      	mov	r2, r8
 8004eb4:	464b      	mov	r3, r9
 8004eb6:	4630      	mov	r0, r6
 8004eb8:	4639      	mov	r1, r7
 8004eba:	f7fd f943 	bl	8002144 <__adddf3>
 8004ebe:	ec53 2b18 	vmov	r2, r3, d8
 8004ec2:	f7fd faf5 	bl	80024b0 <__aeabi_dmul>
 8004ec6:	4602      	mov	r2, r0
 8004ec8:	460b      	mov	r3, r1
 8004eca:	4640      	mov	r0, r8
 8004ecc:	4649      	mov	r1, r9
 8004ece:	f7fd f937 	bl	8002140 <__aeabi_dsub>
 8004ed2:	4602      	mov	r2, r0
 8004ed4:	460b      	mov	r3, r1
 8004ed6:	4650      	mov	r0, sl
 8004ed8:	4659      	mov	r1, fp
 8004eda:	f7fd f931 	bl	8002140 <__aeabi_dsub>
 8004ede:	ec41 0b10 	vmov	d0, r0, r1
 8004ee2:	b003      	add	sp, #12
 8004ee4:	ecbd 8b02 	vpop	{d8}
 8004ee8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004eec:	2200      	movs	r2, #0
 8004eee:	2300      	movs	r3, #0
 8004ef0:	4969      	ldr	r1, [pc, #420]	; (8005098 <__ieee754_log+0x3c8>)
 8004ef2:	2000      	movs	r0, #0
 8004ef4:	f7fd fc06 	bl	8002704 <__aeabi_ddiv>
 8004ef8:	ec41 0b10 	vmov	d0, r0, r1
 8004efc:	b003      	add	sp, #12
 8004efe:	ecbd 8b02 	vpop	{d8}
 8004f02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f06:	a35c      	add	r3, pc, #368	; (adr r3, 8005078 <__ieee754_log+0x3a8>)
 8004f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0c:	4650      	mov	r0, sl
 8004f0e:	4659      	mov	r1, fp
 8004f10:	f7fd face 	bl	80024b0 <__aeabi_dmul>
 8004f14:	4602      	mov	r2, r0
 8004f16:	460b      	mov	r3, r1
 8004f18:	2000      	movs	r0, #0
 8004f1a:	495e      	ldr	r1, [pc, #376]	; (8005094 <__ieee754_log+0x3c4>)
 8004f1c:	f7fd f910 	bl	8002140 <__aeabi_dsub>
 8004f20:	4652      	mov	r2, sl
 8004f22:	4606      	mov	r6, r0
 8004f24:	460f      	mov	r7, r1
 8004f26:	465b      	mov	r3, fp
 8004f28:	4650      	mov	r0, sl
 8004f2a:	4659      	mov	r1, fp
 8004f2c:	f7fd fac0 	bl	80024b0 <__aeabi_dmul>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	4630      	mov	r0, r6
 8004f36:	4639      	mov	r1, r7
 8004f38:	f7fd faba 	bl	80024b0 <__aeabi_dmul>
 8004f3c:	4606      	mov	r6, r0
 8004f3e:	460f      	mov	r7, r1
 8004f40:	2c00      	cmp	r4, #0
 8004f42:	d15a      	bne.n	8004ffa <__ieee754_log+0x32a>
 8004f44:	4602      	mov	r2, r0
 8004f46:	460b      	mov	r3, r1
 8004f48:	4650      	mov	r0, sl
 8004f4a:	4659      	mov	r1, fp
 8004f4c:	f7fd f8f8 	bl	8002140 <__aeabi_dsub>
 8004f50:	ec41 0b10 	vmov	d0, r0, r1
 8004f54:	e72a      	b.n	8004dac <__ieee754_log+0xdc>
 8004f56:	2c00      	cmp	r4, #0
 8004f58:	f040 80a0 	bne.w	800509c <__ieee754_log+0x3cc>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4650      	mov	r0, sl
 8004f62:	4659      	mov	r1, fp
 8004f64:	f7fd f8ec 	bl	8002140 <__aeabi_dsub>
 8004f68:	ec53 2b18 	vmov	r2, r3, d8
 8004f6c:	f7fd faa0 	bl	80024b0 <__aeabi_dmul>
 8004f70:	e7af      	b.n	8004ed2 <__ieee754_log+0x202>
 8004f72:	ee10 2a10 	vmov	r2, s0
 8004f76:	f7fd f8e3 	bl	8002140 <__aeabi_dsub>
 8004f7a:	2200      	movs	r2, #0
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	f7fd fbc1 	bl	8002704 <__aeabi_ddiv>
 8004f82:	ec41 0b10 	vmov	d0, r0, r1
 8004f86:	e711      	b.n	8004dac <__ieee754_log+0xdc>
 8004f88:	a329      	add	r3, pc, #164	; (adr r3, 8005030 <__ieee754_log+0x360>)
 8004f8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f8e:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004f92:	f7fd fa8d 	bl	80024b0 <__aeabi_dmul>
 8004f96:	4642      	mov	r2, r8
 8004f98:	464b      	mov	r3, r9
 8004f9a:	4604      	mov	r4, r0
 8004f9c:	460d      	mov	r5, r1
 8004f9e:	4630      	mov	r0, r6
 8004fa0:	4639      	mov	r1, r7
 8004fa2:	f7fd f8cf 	bl	8002144 <__adddf3>
 8004fa6:	ec53 2b18 	vmov	r2, r3, d8
 8004faa:	f7fd fa81 	bl	80024b0 <__aeabi_dmul>
 8004fae:	a322      	add	r3, pc, #136	; (adr r3, 8005038 <__ieee754_log+0x368>)
 8004fb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004fb4:	4606      	mov	r6, r0
 8004fb6:	460f      	mov	r7, r1
 8004fb8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004fbc:	f7fd fa78 	bl	80024b0 <__aeabi_dmul>
 8004fc0:	4602      	mov	r2, r0
 8004fc2:	460b      	mov	r3, r1
 8004fc4:	4630      	mov	r0, r6
 8004fc6:	4639      	mov	r1, r7
 8004fc8:	f7fd f8bc 	bl	8002144 <__adddf3>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	460b      	mov	r3, r1
 8004fd0:	4640      	mov	r0, r8
 8004fd2:	4649      	mov	r1, r9
 8004fd4:	f7fd f8b4 	bl	8002140 <__aeabi_dsub>
 8004fd8:	4652      	mov	r2, sl
 8004fda:	465b      	mov	r3, fp
 8004fdc:	f7fd f8b0 	bl	8002140 <__aeabi_dsub>
 8004fe0:	4602      	mov	r2, r0
 8004fe2:	460b      	mov	r3, r1
 8004fe4:	4620      	mov	r0, r4
 8004fe6:	4629      	mov	r1, r5
 8004fe8:	f7fd f8aa 	bl	8002140 <__aeabi_dsub>
 8004fec:	ec41 0b10 	vmov	d0, r0, r1
 8004ff0:	b003      	add	sp, #12
 8004ff2:	ecbd 8b02 	vpop	{d8}
 8004ff6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ffa:	4620      	mov	r0, r4
 8004ffc:	f7fd f9ee 	bl	80023dc <__aeabi_i2d>
 8005000:	a30b      	add	r3, pc, #44	; (adr r3, 8005030 <__ieee754_log+0x360>)
 8005002:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005006:	4680      	mov	r8, r0
 8005008:	4689      	mov	r9, r1
 800500a:	f7fd fa51 	bl	80024b0 <__aeabi_dmul>
 800500e:	a30a      	add	r3, pc, #40	; (adr r3, 8005038 <__ieee754_log+0x368>)
 8005010:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005014:	4604      	mov	r4, r0
 8005016:	460d      	mov	r5, r1
 8005018:	4640      	mov	r0, r8
 800501a:	4649      	mov	r1, r9
 800501c:	f7fd fa48 	bl	80024b0 <__aeabi_dmul>
 8005020:	4602      	mov	r2, r0
 8005022:	460b      	mov	r3, r1
 8005024:	4630      	mov	r0, r6
 8005026:	4639      	mov	r1, r7
 8005028:	e7d4      	b.n	8004fd4 <__ieee754_log+0x304>
 800502a:	ed9f 0b15 	vldr	d0, [pc, #84]	; 8005080 <__ieee754_log+0x3b0>
 800502e:	e6bd      	b.n	8004dac <__ieee754_log+0xdc>
 8005030:	fee00000 	.word	0xfee00000
 8005034:	3fe62e42 	.word	0x3fe62e42
 8005038:	35793c76 	.word	0x35793c76
 800503c:	3dea39ef 	.word	0x3dea39ef
 8005040:	df3e5244 	.word	0xdf3e5244
 8005044:	3fc2f112 	.word	0x3fc2f112
 8005048:	96cb03de 	.word	0x96cb03de
 800504c:	3fc74664 	.word	0x3fc74664
 8005050:	94229359 	.word	0x94229359
 8005054:	3fd24924 	.word	0x3fd24924
 8005058:	55555593 	.word	0x55555593
 800505c:	3fe55555 	.word	0x3fe55555
 8005060:	d078c69f 	.word	0xd078c69f
 8005064:	3fc39a09 	.word	0x3fc39a09
 8005068:	1d8e78af 	.word	0x1d8e78af
 800506c:	3fcc71c5 	.word	0x3fcc71c5
 8005070:	9997fa04 	.word	0x9997fa04
 8005074:	3fd99999 	.word	0x3fd99999
 8005078:	55555555 	.word	0x55555555
 800507c:	3fd55555 	.word	0x3fd55555
	...
 8005088:	43500000 	.word	0x43500000
 800508c:	7fefffff 	.word	0x7fefffff
 8005090:	3ff00000 	.word	0x3ff00000
 8005094:	3fe00000 	.word	0x3fe00000
 8005098:	c3500000 	.word	0xc3500000
 800509c:	e9dd 8900 	ldrd	r8, r9, [sp]
 80050a0:	a30d      	add	r3, pc, #52	; (adr r3, 80050d8 <__ieee754_log+0x408>)
 80050a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050a6:	4640      	mov	r0, r8
 80050a8:	4649      	mov	r1, r9
 80050aa:	f7fd fa01 	bl	80024b0 <__aeabi_dmul>
 80050ae:	4632      	mov	r2, r6
 80050b0:	463b      	mov	r3, r7
 80050b2:	4604      	mov	r4, r0
 80050b4:	460d      	mov	r5, r1
 80050b6:	4650      	mov	r0, sl
 80050b8:	4659      	mov	r1, fp
 80050ba:	f7fd f841 	bl	8002140 <__aeabi_dsub>
 80050be:	ec53 2b18 	vmov	r2, r3, d8
 80050c2:	f7fd f9f5 	bl	80024b0 <__aeabi_dmul>
 80050c6:	a306      	add	r3, pc, #24	; (adr r3, 80050e0 <__ieee754_log+0x410>)
 80050c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050cc:	4606      	mov	r6, r0
 80050ce:	460f      	mov	r7, r1
 80050d0:	e7a2      	b.n	8005018 <__ieee754_log+0x348>
 80050d2:	bf00      	nop
 80050d4:	f3af 8000 	nop.w
 80050d8:	fee00000 	.word	0xfee00000
 80050dc:	3fe62e42 	.word	0x3fe62e42
 80050e0:	35793c76 	.word	0x35793c76
 80050e4:	3dea39ef 	.word	0x3dea39ef

080050e8 <__errno>:
 80050e8:	4b01      	ldr	r3, [pc, #4]	; (80050f0 <__errno+0x8>)
 80050ea:	6818      	ldr	r0, [r3, #0]
 80050ec:	4770      	bx	lr
 80050ee:	bf00      	nop
 80050f0:	2000000c 	.word	0x2000000c

080050f4 <strcpy>:
 80050f4:	ea80 0201 	eor.w	r2, r0, r1
 80050f8:	4684      	mov	ip, r0
 80050fa:	f012 0f03 	tst.w	r2, #3
 80050fe:	d14f      	bne.n	80051a0 <strcpy+0xac>
 8005100:	f011 0f03 	tst.w	r1, #3
 8005104:	d132      	bne.n	800516c <strcpy+0x78>
 8005106:	f84d 4d04 	str.w	r4, [sp, #-4]!
 800510a:	f011 0f04 	tst.w	r1, #4
 800510e:	f851 3b04 	ldr.w	r3, [r1], #4
 8005112:	d00b      	beq.n	800512c <strcpy+0x38>
 8005114:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8005118:	439a      	bics	r2, r3
 800511a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800511e:	bf04      	itt	eq
 8005120:	f84c 3b04 	streq.w	r3, [ip], #4
 8005124:	f851 3b04 	ldreq.w	r3, [r1], #4
 8005128:	d116      	bne.n	8005158 <strcpy+0x64>
 800512a:	bf00      	nop
 800512c:	f851 4b04 	ldr.w	r4, [r1], #4
 8005130:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
 8005134:	439a      	bics	r2, r3
 8005136:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800513a:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
 800513e:	d10b      	bne.n	8005158 <strcpy+0x64>
 8005140:	f84c 3b04 	str.w	r3, [ip], #4
 8005144:	43a2      	bics	r2, r4
 8005146:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
 800514a:	bf04      	itt	eq
 800514c:	f851 3b04 	ldreq.w	r3, [r1], #4
 8005150:	f84c 4b04 	streq.w	r4, [ip], #4
 8005154:	d0ea      	beq.n	800512c <strcpy+0x38>
 8005156:	4623      	mov	r3, r4
 8005158:	f80c 3b01 	strb.w	r3, [ip], #1
 800515c:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005160:	ea4f 2333 	mov.w	r3, r3, ror #8
 8005164:	d1f8      	bne.n	8005158 <strcpy+0x64>
 8005166:	f85d 4b04 	ldr.w	r4, [sp], #4
 800516a:	4770      	bx	lr
 800516c:	f011 0f01 	tst.w	r1, #1
 8005170:	d006      	beq.n	8005180 <strcpy+0x8c>
 8005172:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005176:	f80c 2b01 	strb.w	r2, [ip], #1
 800517a:	2a00      	cmp	r2, #0
 800517c:	bf08      	it	eq
 800517e:	4770      	bxeq	lr
 8005180:	f011 0f02 	tst.w	r1, #2
 8005184:	d0bf      	beq.n	8005106 <strcpy+0x12>
 8005186:	f831 2b02 	ldrh.w	r2, [r1], #2
 800518a:	f012 0fff 	tst.w	r2, #255	; 0xff
 800518e:	bf16      	itet	ne
 8005190:	f82c 2b02 	strhne.w	r2, [ip], #2
 8005194:	f88c 2000 	strbeq.w	r2, [ip]
 8005198:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
 800519c:	d1b3      	bne.n	8005106 <strcpy+0x12>
 800519e:	4770      	bx	lr
 80051a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80051a4:	f80c 2b01 	strb.w	r2, [ip], #1
 80051a8:	2a00      	cmp	r2, #0
 80051aa:	d1f9      	bne.n	80051a0 <strcpy+0xac>
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop

080051b0 <ubNVIC_Ptable_Image>:
 80051b0:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
 80051c0:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
 80051d0:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
 80051e0:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
 80051f0:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
 8005200:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
 8005210:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
 8005220:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
 8005230:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
 8005240:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
 8005250:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
 8005260:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
 8005270:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
 8005280:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
 8005290:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
 80052a0:	0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f 0f0f     ................
